{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":false,"distro_crate":true,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/parallels/Repos/rust","program":"/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc","arguments":["--edition=2018","--crate-name","alloc","src/liballoc/lib.rs","--error-format=json","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","opt-level=2","-C","debuginfo=0","--cfg","feature=\"compiler-builtins-c\"","-C","metadata=f664acbed46892dd","-C","extra-filename=-f664acbed46892dd","--out-dir","/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps","--target","x86_64-unknown-linux-gnu","-L","dependency=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps","-L","dependency=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/release/deps","--extern","compiler_builtins=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libcompiler_builtins-abf09aede8f45a34.rmeta","--extern","core=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libcore-151f1d578d47a3f2.rmeta","-Zexternal-macro-backtrace","-Clink-args=-Wl,-rpath,$ORIGIN/../lib","-Wrust_2018_idioms","-Wunused_lifetimes","-Dwarnings","-Zsave-analysis","-Cprefer-dynamic","-Zbinary-dep-depinfo","-L","native=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/build/compiler_builtins-24f467101ff50fdb/out","--sysroot","/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1","-C","debug-assertions=n","-Z","force-unstable-if-unmarked"],"output":"/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/liballoc-f664acbed46892dd.rmeta"},"prelude":{"crate_id":{"name":"alloc","disambiguator":[243425455527795567,14247343443062235522]},"crate_root":"src/liballoc","external_crates":[{"file_name":"/home/parallels/Repos/rust/src/liballoc/lib.rs","num":1,"id":{"name":"core","disambiguator":[2287588329603175230,1743550078670421849]}},{"file_name":"/home/parallels/Repos/rust/src/liballoc/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16198930258126787141,2971708547737336037]}},{"file_name":"/home/parallels/Repos/rust/src/liballoc/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[3116599134721608169,2545038524027594738]}}],"span":{"file_name":"src/liballoc/lib.rs","byte_start":0,"byte_end":5570,"line_start":1,"line_end":175,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"src/liballoc/alloc.rs","byte_start":9355,"byte_end":9356,"line_start":11,"line_end":11,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"Alloc, Layout, LayoutErr, AllocErr","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":1,"index":1540},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":52675,"byte_end":52681,"line_start":10,"line_end":10,"column_start":24,"column_end":30},"alias_span":null,"name":"Borrow","value":"","parent":{"krate":0,"index":293}},{"kind":"Use","ref_id":{"krate":1,"index":1543},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":52683,"byte_end":52692,"line_start":10,"line_end":10,"column_start":32,"column_end":41},"alias_span":null,"name":"BorrowMut","value":"","parent":{"krate":0,"index":293}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65714,"byte_end":65715,"line_start":14,"line_end":14,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"BTreeMap, IntoIter, Range, Keys","parent":{"krate":0,"index":2550}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65714,"byte_end":65715,"line_start":14,"line_end":14,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"BTreeSet","parent":{"krate":0,"index":2552}},{"kind":"Use","ref_id":{"krate":0,"index":409},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65991,"byte_end":66001,"line_start":26,"line_end":26,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66087,"byte_end":66095,"line_start":30,"line_end":30,"column_start":20,"column_end":28},"alias_span":null,"name":"BTreeMap","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":4377},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66181,"byte_end":66189,"line_start":34,"line_end":34,"column_start":20,"column_end":28},"alias_span":null,"name":"BTreeSet","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":1887},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66277,"byte_end":66287,"line_start":38,"line_end":38,"column_start":22,"column_end":32},"alias_span":null,"name":"LinkedList","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":0,"index":2234},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66373,"byte_end":66381,"line_start":42,"line_end":42,"column_start":20,"column_end":28},"alias_span":null,"name":"VecDeque","value":"","parent":{"krate":0,"index":389}},{"kind":"Use","ref_id":{"krate":1,"index":5874},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478489,"byte_end":478491,"line_start":518,"line_end":518,"column_start":20,"column_end":22},"alias_span":null,"name":"rt","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":29932},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478569,"byte_end":478578,"line_start":520,"line_end":520,"column_start":20,"column_end":29},"alias_span":null,"name":"Alignment","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":29986},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478645,"byte_end":478650,"line_start":522,"line_end":522,"column_start":20,"column_end":25},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5937},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478718,"byte_end":478723,"line_start":524,"line_end":524,"column_start":21,"column_end":26},"alias_span":null,"name":"write","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":30008},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478725,"byte_end":478735,"line_start":524,"line_end":524,"column_start":28,"column_end":38},"alias_span":null,"name":"ArgumentV1","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":30033},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478737,"byte_end":478746,"line_start":524,"line_end":524,"column_start":40,"column_end":49},"alias_span":null,"name":"Arguments","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5925},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478815,"byte_end":478821,"line_start":526,"line_end":526,"column_start":21,"column_end":27},"alias_span":null,"name":"Binary","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5923},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478823,"byte_end":478828,"line_start":526,"line_end":526,"column_start":29,"column_end":34},"alias_span":null,"name":"Octal","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5916},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478897,"byte_end":478902,"line_start":528,"line_end":528,"column_start":21,"column_end":26},"alias_span":null,"name":"Debug","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5921},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478904,"byte_end":478911,"line_start":528,"line_end":528,"column_start":28,"column_end":35},"alias_span":null,"name":"Display","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5760},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478980,"byte_end":478989,"line_start":530,"line_end":530,"column_start":21,"column_end":30},"alias_span":null,"name":"DebugList","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5776},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":478991,"byte_end":478999,"line_start":530,"line_end":530,"column_start":32,"column_end":40},"alias_span":null,"name":"DebugMap","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5744},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479001,"byte_end":479009,"line_start":530,"line_end":530,"column_start":42,"column_end":50},"alias_span":null,"name":"DebugSet","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5695},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479011,"byte_end":479022,"line_start":530,"line_end":530,"column_start":52,"column_end":63},"alias_span":null,"name":"DebugStruct","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5714},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479024,"byte_end":479034,"line_start":530,"line_end":530,"column_start":65,"column_end":75},"alias_span":null,"name":"DebugTuple","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5887},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479103,"byte_end":479112,"line_start":532,"line_end":532,"column_start":21,"column_end":30},"alias_span":null,"name":"Formatter","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5876},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479114,"byte_end":479120,"line_start":532,"line_end":532,"column_start":32,"column_end":38},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5877},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479122,"byte_end":479127,"line_start":532,"line_end":532,"column_start":40,"column_end":45},"alias_span":null,"name":"Write","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5933},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479196,"byte_end":479204,"line_start":534,"line_end":534,"column_start":21,"column_end":29},"alias_span":null,"name":"LowerExp","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5935},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479206,"byte_end":479214,"line_start":534,"line_end":534,"column_start":31,"column_end":39},"alias_span":null,"name":"UpperExp","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5927},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479283,"byte_end":479291,"line_start":536,"line_end":536,"column_start":21,"column_end":29},"alias_span":null,"name":"LowerHex","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5931},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479293,"byte_end":479300,"line_start":536,"line_end":536,"column_start":31,"column_end":38},"alias_span":null,"name":"Pointer","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":1,"index":5929},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":479302,"byte_end":479310,"line_start":536,"line_end":536,"column_start":40,"column_end":48},"alias_span":null,"name":"UpperHex","value":"","parent":{"krate":0,"index":2567}},{"kind":"Use","ref_id":{"krate":0,"index":312},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":480985,"byte_end":480992,"line_start":8,"line_end":8,"column_start":24,"column_end":31},"alias_span":null,"name":"ToOwned","value":"","parent":{"krate":0,"index":2601}},{"kind":"Use","ref_id":{"krate":0,"index":81},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":481072,"byte_end":481075,"line_start":10,"line_end":10,"column_start":23,"column_end":26},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":2601}},{"kind":"Use","ref_id":{"krate":0,"index":4553},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":481157,"byte_end":481163,"line_start":12,"line_end":12,"column_start":25,"column_end":31},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":2601}},{"kind":"Use","ref_id":{"krate":0,"index":3475},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":481165,"byte_end":481173,"line_start":12,"line_end":12,"column_start":33,"column_end":41},"alias_span":null,"name":"ToString","value":"","parent":{"krate":0,"index":2601}},{"kind":"Use","ref_id":{"krate":0,"index":3899},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":481252,"byte_end":481255,"line_start":14,"line_end":14,"column_start":21,"column_end":24},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":2601}},{"kind":"Use","ref_id":{"krate":1,"index":6503},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581134,"byte_end":581144,"line_start":100,"line_end":100,"column_start":22,"column_end":32},"alias_span":null,"name":"SliceIndex","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":7078},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581218,"byte_end":581226,"line_start":102,"line_end":102,"column_start":23,"column_end":31},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":7076},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581228,"byte_end":581236,"line_start":102,"line_end":102,"column_start":33,"column_end":41},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":7070},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581307,"byte_end":581321,"line_start":104,"line_end":104,"column_start":23,"column_end":37},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":7073},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581323,"byte_end":581341,"line_start":104,"line_end":104,"column_start":39,"column_end":57},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30585},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581412,"byte_end":581418,"line_start":106,"line_end":106,"column_start":23,"column_end":29},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30576},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581420,"byte_end":581427,"line_start":106,"line_end":106,"column_start":31,"column_end":38},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30603},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581506,"byte_end":581517,"line_start":108,"line_end":108,"column_start":23,"column_end":34},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30613},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581519,"byte_end":581533,"line_start":108,"line_end":108,"column_start":36,"column_end":50},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30594},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581604,"byte_end":581613,"line_start":110,"line_end":110,"column_start":23,"column_end":32},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6641},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581615,"byte_end":581620,"line_start":110,"line_end":110,"column_start":34,"column_end":39},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6678},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581622,"byte_end":581630,"line_start":110,"line_end":110,"column_start":41,"column_end":49},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6598},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581701,"byte_end":581705,"line_start":112,"line_end":112,"column_start":23,"column_end":27},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6621},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581707,"byte_end":581714,"line_start":112,"line_end":112,"column_start":29,"column_end":36},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30623},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581788,"byte_end":581795,"line_start":114,"line_end":114,"column_start":23,"column_end":30},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30641},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581797,"byte_end":581809,"line_start":114,"line_end":114,"column_start":32,"column_end":44},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30651},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581811,"byte_end":581826,"line_start":114,"line_end":114,"column_start":46,"column_end":61},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30632},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581828,"byte_end":581838,"line_start":114,"line_end":114,"column_start":63,"column_end":73},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":30515},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581917,"byte_end":581923,"line_start":116,"line_end":116,"column_start":23,"column_end":29},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6735},"span":{"file_name":"src/liballoc/slice.rs","byte_start":581925,"byte_end":581934,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6780},"span":{"file_name":"src/liballoc/slice.rs","byte_start":582005,"byte_end":582012,"line_start":118,"line_end":118,"column_start":23,"column_end":30},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6798},"span":{"file_name":"src/liballoc/slice.rs","byte_start":582014,"byte_end":582024,"line_start":118,"line_end":118,"column_start":32,"column_end":42},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6771},"span":{"file_name":"src/liballoc/slice.rs","byte_start":582026,"byte_end":582032,"line_start":118,"line_end":118,"column_start":44,"column_end":50},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":6789},"span":{"file_name":"src/liballoc/slice.rs","byte_start":582034,"byte_end":582043,"line_start":118,"line_end":118,"column_start":52,"column_end":61},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":3020}},{"kind":"Use","ref_id":{"krate":1,"index":7182},"span":{"file_name":"src/liballoc/str.rs","byte_start":617852,"byte_end":617859,"line_start":44,"line_end":44,"column_start":20,"column_end":27},"alias_span":null,"name":"pattern","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31315},"span":{"file_name":"src/liballoc/str.rs","byte_start":617933,"byte_end":617944,"line_start":46,"line_end":46,"column_start":20,"column_end":31},"alias_span":null,"name":"EncodeUtf16","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31236},"span":{"file_name":"src/liballoc/str.rs","byte_start":618029,"byte_end":618049,"line_start":48,"line_end":48,"column_start":20,"column_end":40},"alias_span":null,"name":"SplitAsciiWhitespace","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31227},"span":{"file_name":"src/liballoc/str.rs","byte_start":618116,"byte_end":618131,"line_start":50,"line_end":50,"column_start":20,"column_end":35},"alias_span":null,"name":"SplitWhitespace","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":7380},"span":{"file_name":"src/liballoc/str.rs","byte_start":618199,"byte_end":618208,"line_start":52,"line_end":52,"column_start":21,"column_end":30},"alias_span":null,"name":"from_utf8","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":7381},"span":{"file_name":"src/liballoc/str.rs","byte_start":618210,"byte_end":618223,"line_start":52,"line_end":52,"column_start":32,"column_end":45},"alias_span":null,"name":"from_utf8_mut","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30892},"span":{"file_name":"src/liballoc/str.rs","byte_start":618225,"byte_end":618230,"line_start":52,"line_end":52,"column_start":47,"column_end":52},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30882},"span":{"file_name":"src/liballoc/str.rs","byte_start":618232,"byte_end":618243,"line_start":52,"line_end":52,"column_start":54,"column_end":65},"alias_span":null,"name":"CharIndices","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30876},"span":{"file_name":"src/liballoc/str.rs","byte_start":618245,"byte_end":618250,"line_start":52,"line_end":52,"column_start":67,"column_end":72},"alias_span":null,"name":"Chars","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":7382},"span":{"file_name":"src/liballoc/str.rs","byte_start":618319,"byte_end":618338,"line_start":54,"line_end":54,"column_start":21,"column_end":40},"alias_span":null,"name":"from_utf8_unchecked","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":7383},"span":{"file_name":"src/liballoc/str.rs","byte_start":618340,"byte_end":618363,"line_start":54,"line_end":54,"column_start":42,"column_end":65},"alias_span":null,"name":"from_utf8_unchecked_mut","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30848},"span":{"file_name":"src/liballoc/str.rs","byte_start":618365,"byte_end":618379,"line_start":54,"line_end":54,"column_start":67,"column_end":81},"alias_span":null,"name":"ParseBoolError","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31322},"span":{"file_name":"src/liballoc/str.rs","byte_start":618454,"byte_end":618465,"line_start":56,"line_end":56,"column_start":21,"column_end":32},"alias_span":null,"name":"EscapeDebug","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31331},"span":{"file_name":"src/liballoc/str.rs","byte_start":618467,"byte_end":618480,"line_start":56,"line_end":56,"column_start":34,"column_end":47},"alias_span":null,"name":"EscapeDefault","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31340},"span":{"file_name":"src/liballoc/str.rs","byte_start":618482,"byte_end":618495,"line_start":56,"line_end":56,"column_start":49,"column_end":62},"alias_span":null,"name":"EscapeUnicode","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":7368},"span":{"file_name":"src/liballoc/str.rs","byte_start":618564,"byte_end":618571,"line_start":58,"line_end":58,"column_start":21,"column_end":28},"alias_span":null,"name":"FromStr","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30861},"span":{"file_name":"src/liballoc/str.rs","byte_start":618573,"byte_end":618582,"line_start":58,"line_end":58,"column_start":30,"column_end":39},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31160},"span":{"file_name":"src/liballoc/str.rs","byte_start":618672,"byte_end":618677,"line_start":61,"line_end":61,"column_start":21,"column_end":26},"alias_span":null,"name":"Lines","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31170},"span":{"file_name":"src/liballoc/str.rs","byte_start":618679,"byte_end":618687,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"alias_span":null,"name":"LinesAny","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31056},"span":{"file_name":"src/liballoc/str.rs","byte_start":618756,"byte_end":618768,"line_start":63,"line_end":63,"column_start":21,"column_end":33},"alias_span":null,"name":"MatchIndices","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31074},"span":{"file_name":"src/liballoc/str.rs","byte_start":618770,"byte_end":618783,"line_start":63,"line_end":63,"column_start":35,"column_end":48},"alias_span":null,"name":"RMatchIndices","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31110},"span":{"file_name":"src/liballoc/str.rs","byte_start":618852,"byte_end":618859,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31128},"span":{"file_name":"src/liballoc/str.rs","byte_start":618861,"byte_end":618869,"line_start":65,"line_end":65,"column_start":30,"column_end":38},"alias_span":null,"name":"RMatches","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30924},"span":{"file_name":"src/liballoc/str.rs","byte_start":618938,"byte_end":618944,"line_start":67,"line_end":67,"column_start":21,"column_end":27},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30906},"span":{"file_name":"src/liballoc/str.rs","byte_start":618946,"byte_end":618951,"line_start":67,"line_end":67,"column_start":29,"column_end":34},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31028},"span":{"file_name":"src/liballoc/str.rs","byte_start":619020,"byte_end":619027,"line_start":69,"line_end":69,"column_start":21,"column_end":28},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":31010},"span":{"file_name":"src/liballoc/str.rs","byte_start":619029,"byte_end":619035,"line_start":69,"line_end":69,"column_start":30,"column_end":36},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30974},"span":{"file_name":"src/liballoc/str.rs","byte_start":619104,"byte_end":619120,"line_start":71,"line_end":71,"column_start":21,"column_end":37},"alias_span":null,"name":"RSplitTerminator","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":30956},"span":{"file_name":"src/liballoc/str.rs","byte_start":619122,"byte_end":619137,"line_start":71,"line_end":71,"column_start":39,"column_end":54},"alias_span":null,"name":"SplitTerminator","value":"","parent":{"krate":0,"index":3173}},{"kind":"Use","ref_id":{"krate":1,"index":1913},"span":{"file_name":"src/liballoc/lib.rs","byte_start":5389,"byte_end":5392,"line_start":168,"line_end":168,"column_start":19,"column_end":22},"alias_span":null,"name":"ops","value":"","parent":{"krate":0,"index":4311}},{"kind":"Use","ref_id":{"krate":1,"index":18},"span":{"file_name":"src/liballoc/lib.rs","byte_start":5556,"byte_end":5567,"line_start":174,"line_end":174,"column_start":19,"column_end":30},"alias_span":null,"name":"format_args","value":"","parent":{"krate":0,"index":4313}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"src/liballoc/lib.rs","byte_start":0,"byte_end":5570,"line_start":1,"line_end":175,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"src/liballoc/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":36},{"krate":0,"index":293},{"krate":0,"index":389},{"krate":0,"index":2567},{"krate":0,"index":2600},{"krate":0,"index":2608},{"krate":0,"index":2707},{"krate":0,"index":3020},{"krate":0,"index":3173},{"krate":0,"index":3279},{"krate":0,"index":3549},{"krate":0,"index":3860},{"krate":0,"index":4311},{"krate":0,"index":4313}],"decl_id":null,"docs":" # The Rust core allocation and collections library","sig":null,"attributes":[{"value":"! # The Rust core allocation and collections library","span":{"file_name":"src/liballoc/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":55,"byte_end":58,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This library provides smart pointers and collections for managing","span":{"file_name":"src/liballoc/lib.rs","byte_start":59,"byte_end":128,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"! heap-allocated values.","span":{"file_name":"src/liballoc/lib.rs","byte_start":129,"byte_end":155,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":156,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This library, like libcore, normally doesn’t need to be used directly","span":{"file_name":"src/liballoc/lib.rs","byte_start":160,"byte_end":235,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"! since its contents are re-exported in the [`std` crate](../std/index.html).","span":{"file_name":"src/liballoc/lib.rs","byte_start":236,"byte_end":315,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! Crates that use the `#![no_std]` attribute however will typically","span":{"file_name":"src/liballoc/lib.rs","byte_start":316,"byte_end":385,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"! not depend on `std`, so they’d use this crate instead.","span":{"file_name":"src/liballoc/lib.rs","byte_start":386,"byte_end":446,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":447,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ## Boxed values","span":{"file_name":"src/liballoc/lib.rs","byte_start":451,"byte_end":470,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":471,"byte_end":474,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! The [`Box`] type is a smart pointer type. There can only be one owner of a","span":{"file_name":"src/liballoc/lib.rs","byte_start":475,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"! [`Box`], and the owner can decide to mutate the contents, which live on the","span":{"file_name":"src/liballoc/lib.rs","byte_start":554,"byte_end":633,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"! heap.","span":{"file_name":"src/liballoc/lib.rs","byte_start":634,"byte_end":643,"line_start":15,"line_end":15,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":644,"byte_end":647,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! This type can be sent among threads efficiently as the size of a `Box` value","span":{"file_name":"src/liballoc/lib.rs","byte_start":648,"byte_end":728,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"! is the same as that of a pointer. Tree-like data structures are often built","span":{"file_name":"src/liballoc/lib.rs","byte_start":729,"byte_end":808,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"! with boxes because each node often has only one owner, the parent.","span":{"file_name":"src/liballoc/lib.rs","byte_start":809,"byte_end":879,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":880,"byte_end":883,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! ## Reference counted pointers","span":{"file_name":"src/liballoc/lib.rs","byte_start":884,"byte_end":917,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":918,"byte_end":921,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! The [`Rc`] type is a non-threadsafe reference-counted pointer type intended","span":{"file_name":"src/liballoc/lib.rs","byte_start":922,"byte_end":1001,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"! for sharing memory within a thread. An [`Rc`] pointer wraps a type, `T`, and","span":{"file_name":"src/liballoc/lib.rs","byte_start":1002,"byte_end":1082,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"! only allows access to `&T`, a shared reference.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1083,"byte_end":1134,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1135,"byte_end":1138,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! This type is useful when inherited mutability (such as using [`Box`]) is too","span":{"file_name":"src/liballoc/lib.rs","byte_start":1139,"byte_end":1219,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"! constraining for an application, and is often paired with the [`Cell`] or","span":{"file_name":"src/liballoc/lib.rs","byte_start":1220,"byte_end":1297,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"! [`RefCell`] types in order to allow mutation.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1298,"byte_end":1347,"line_start":29,"line_end":29,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1348,"byte_end":1351,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! ## Atomically reference counted pointers","span":{"file_name":"src/liballoc/lib.rs","byte_start":1352,"byte_end":1396,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1397,"byte_end":1400,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! The [`Arc`] type is the threadsafe equivalent of the [`Rc`] type. It","span":{"file_name":"src/liballoc/lib.rs","byte_start":1401,"byte_end":1473,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"! provides all the same functionality of [`Rc`], except it requires that the","span":{"file_name":"src/liballoc/lib.rs","byte_start":1474,"byte_end":1552,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"! contained type `T` is shareable. Additionally, [`Arc<T>`][`Arc`] is itself","span":{"file_name":"src/liballoc/lib.rs","byte_start":1553,"byte_end":1631,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"! sendable while [`Rc<T>`][`Rc`] is not.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1632,"byte_end":1674,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1675,"byte_end":1678,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! This type allows for shared access to the contained data, and is often","span":{"file_name":"src/liballoc/lib.rs","byte_start":1679,"byte_end":1753,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"! paired with synchronization primitives such as mutexes to allow mutation of","span":{"file_name":"src/liballoc/lib.rs","byte_start":1754,"byte_end":1833,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"! shared resources.","span":{"file_name":"src/liballoc/lib.rs","byte_start":1834,"byte_end":1855,"line_start":40,"line_end":40,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1856,"byte_end":1859,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! ## Collections","span":{"file_name":"src/liballoc/lib.rs","byte_start":1860,"byte_end":1878,"line_start":42,"line_end":42,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":1879,"byte_end":1882,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! Implementations of the most common general purpose data structures are","span":{"file_name":"src/liballoc/lib.rs","byte_start":1883,"byte_end":1957,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"! defined in this library. They are re-exported through the","span":{"file_name":"src/liballoc/lib.rs","byte_start":1958,"byte_end":2019,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"! [standard collections library](../std/collections/index.html).","span":{"file_name":"src/liballoc/lib.rs","byte_start":2020,"byte_end":2086,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":2087,"byte_end":2090,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ## Heap interfaces","span":{"file_name":"src/liballoc/lib.rs","byte_start":2091,"byte_end":2113,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":2114,"byte_end":2117,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! The [`alloc`](alloc/index.html) module defines the low-level interface to the","span":{"file_name":"src/liballoc/lib.rs","byte_start":2118,"byte_end":2199,"line_start":50,"line_end":50,"column_start":1,"column_end":82}},{"value":"! default global allocator. It is not compatible with the libc allocator API.","span":{"file_name":"src/liballoc/lib.rs","byte_start":2200,"byte_end":2279,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"src/liballoc/lib.rs","byte_start":2280,"byte_end":2283,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! [`Arc`]: sync/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2284,"byte_end":2312,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"! [`Box`]: boxed/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2313,"byte_end":2342,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"! [`Cell`]: ../core/cell/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2343,"byte_end":2380,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"! [`Rc`]: rc/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2381,"byte_end":2406,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"! [`RefCell`]: ../core/cell/index.html","span":{"file_name":"src/liballoc/lib.rs","byte_start":2407,"byte_end":2447,"line_start":57,"line_end":57,"column_start":1,"column_end":41}},{"value":"allow(unused_attributes)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2449,"byte_end":2477,"line_start":59,"line_end":59,"column_start":1,"column_end":29}},{"value":"stable(feature = \"alloc\", since = \"1.36.0\")","span":{"file_name":"src/liballoc/lib.rs","byte_start":2478,"byte_end":2525,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"no_std","span":{"file_name":"src/liballoc/lib.rs","byte_start":2742,"byte_end":2752,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"needs_allocator","span":{"file_name":"src/liballoc/lib.rs","byte_start":2753,"byte_end":2772,"line_start":67,"line_end":67,"column_start":1,"column_end":20}},{"value":"warn(deprecated_in_future)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2773,"byte_end":2803,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"warn(missing_docs)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2804,"byte_end":2826,"line_start":69,"line_end":69,"column_start":1,"column_end":23}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2827,"byte_end":2866,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"deny(intra_doc_link_resolution_failure)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2867,"byte_end":2910,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"allow(explicit_outlives_requirements)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2949,"byte_end":2990,"line_start":72,"line_end":72,"column_start":1,"column_end":42}},{"value":"allow(incomplete_features)","span":{"file_name":"src/liballoc/lib.rs","byte_start":2991,"byte_end":3021,"line_start":73,"line_end":73,"column_start":1,"column_end":31}},{"value":"feature(generator_trait)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3045,"byte_end":3069,"line_start":74,"line_end":74,"column_start":24,"column_end":48}},{"value":"feature(allocator_api)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3106,"byte_end":3132,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"feature(allow_internal_unstable)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3133,"byte_end":3169,"line_start":77,"line_end":77,"column_start":1,"column_end":37}},{"value":"feature(arbitrary_self_types)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3170,"byte_end":3203,"line_start":78,"line_end":78,"column_start":1,"column_end":34}},{"value":"feature(box_into_raw_non_null)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3204,"byte_end":3238,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"feature(box_patterns)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3239,"byte_end":3264,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"feature(box_syntax)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3265,"byte_end":3288,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"feature(cfg_target_has_atomic)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3289,"byte_end":3323,"line_start":82,"line_end":82,"column_start":1,"column_end":35}},{"value":"feature(coerce_unsized)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3324,"byte_end":3351,"line_start":83,"line_end":83,"column_start":1,"column_end":28}},{"value":"feature(const_generic_impls_guard)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3352,"byte_end":3390,"line_start":84,"line_end":84,"column_start":1,"column_end":39}},{"value":"feature(const_generics)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3391,"byte_end":3418,"line_start":85,"line_end":85,"column_start":1,"column_end":28}},{"value":"feature(const_in_array_repeat_expressions)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3419,"byte_end":3465,"line_start":86,"line_end":86,"column_start":1,"column_end":47}},{"value":"feature(const_if_match)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3466,"byte_end":3493,"line_start":87,"line_end":87,"column_start":1,"column_end":28}},{"value":"feature(cow_is_borrowed)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3494,"byte_end":3522,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"feature(dispatch_from_dyn)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3523,"byte_end":3553,"line_start":89,"line_end":89,"column_start":1,"column_end":31}},{"value":"feature(core_intrinsics)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3554,"byte_end":3582,"line_start":90,"line_end":90,"column_start":1,"column_end":29}},{"value":"feature(container_error_extra)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3583,"byte_end":3617,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"feature(dropck_eyepatch)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3618,"byte_end":3646,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"feature(exact_size_is_empty)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3647,"byte_end":3679,"line_start":93,"line_end":93,"column_start":1,"column_end":33}},{"value":"feature(fmt_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3680,"byte_end":3706,"line_start":94,"line_end":94,"column_start":1,"column_end":27}},{"value":"feature(fn_traits)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3707,"byte_end":3729,"line_start":95,"line_end":95,"column_start":1,"column_end":23}},{"value":"feature(fundamental)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3730,"byte_end":3754,"line_start":96,"line_end":96,"column_start":1,"column_end":25}},{"value":"feature(internal_uninit_const)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3755,"byte_end":3789,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"feature(lang_items)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3790,"byte_end":3813,"line_start":98,"line_end":98,"column_start":1,"column_end":24}},{"value":"feature(libc)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3814,"byte_end":3831,"line_start":99,"line_end":99,"column_start":1,"column_end":18}},{"value":"feature(nll)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3832,"byte_end":3848,"line_start":100,"line_end":100,"column_start":1,"column_end":17}},{"value":"feature(optin_builtin_traits)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3849,"byte_end":3882,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"feature(pattern)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3883,"byte_end":3903,"line_start":102,"line_end":102,"column_start":1,"column_end":21}},{"value":"feature(ptr_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3904,"byte_end":3930,"line_start":103,"line_end":103,"column_start":1,"column_end":27}},{"value":"feature(ptr_offset_from)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3931,"byte_end":3959,"line_start":104,"line_end":104,"column_start":1,"column_end":29}},{"value":"feature(rustc_attrs)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3960,"byte_end":3984,"line_start":105,"line_end":105,"column_start":1,"column_end":25}},{"value":"feature(receiver_trait)","span":{"file_name":"src/liballoc/lib.rs","byte_start":3985,"byte_end":4012,"line_start":106,"line_end":106,"column_start":1,"column_end":28}},{"value":"feature(specialization)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4013,"byte_end":4040,"line_start":107,"line_end":107,"column_start":1,"column_end":28}},{"value":"feature(staged_api)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4041,"byte_end":4064,"line_start":108,"line_end":108,"column_start":1,"column_end":24}},{"value":"feature(std_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4065,"byte_end":4091,"line_start":109,"line_end":109,"column_start":1,"column_end":27}},{"value":"feature(str_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4092,"byte_end":4118,"line_start":110,"line_end":110,"column_start":1,"column_end":27}},{"value":"feature(trusted_len)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4119,"byte_end":4143,"line_start":111,"line_end":111,"column_start":1,"column_end":25}},{"value":"feature(try_reserve)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4144,"byte_end":4168,"line_start":112,"line_end":112,"column_start":1,"column_end":25}},{"value":"feature(unboxed_closures)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4169,"byte_end":4198,"line_start":113,"line_end":113,"column_start":1,"column_end":30}},{"value":"feature(unicode_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4199,"byte_end":4229,"line_start":114,"line_end":114,"column_start":1,"column_end":31}},{"value":"feature(unsize)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4230,"byte_end":4249,"line_start":115,"line_end":115,"column_start":1,"column_end":20}},{"value":"feature(unsized_locals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4250,"byte_end":4277,"line_start":116,"line_end":116,"column_start":1,"column_end":28}},{"value":"feature(allocator_internals)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4278,"byte_end":4310,"line_start":117,"line_end":117,"column_start":1,"column_end":33}},{"value":"feature(slice_partition_dedup)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4311,"byte_end":4345,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"feature(maybe_uninit_extra, maybe_uninit_slice)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4346,"byte_end":4397,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"feature(alloc_layout_extra)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4398,"byte_end":4429,"line_start":120,"line_end":120,"column_start":1,"column_end":32}},{"value":"feature(try_trait)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4430,"byte_end":4452,"line_start":121,"line_end":121,"column_start":1,"column_end":23}},{"value":"feature(associated_type_bounds)","span":{"file_name":"src/liballoc/lib.rs","byte_start":4453,"byte_end":4488,"line_start":122,"line_end":122,"column_start":1,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alloc","qualname":"::alloc","value":"src/liballoc/alloc.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":4315},{"krate":0,"index":4323},{"krate":0,"index":4321},{"krate":0,"index":4319},{"krate":0,"index":4317},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":33}],"decl_id":null,"docs":" Memory allocation APIs\n","sig":null,"attributes":[{"value":"! Memory allocation APIs","span":{"file_name":"src/liballoc/alloc.rs","byte_start":9074,"byte_end":9100,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"stable(feature = \"alloc_module\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":9102,"byte_end":9156,"line_start":3,"line_end":3,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":4315},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":10633,"byte_end":10639,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"Global","qualname":"::alloc::Global","value":"","parent":null,"children":[],"decl_id":null,"docs":" The global memory allocator.","sig":null,"attributes":[{"value":"/ The global memory allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10107,"byte_end":10139,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10140,"byte_end":10143,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This type implements the [`Alloc`] trait by forwarding calls","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10144,"byte_end":10208,"line_start":34,"line_end":34,"column_start":1,"column_end":65}},{"value":"/ to the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10209,"byte_end":10281,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10282,"byte_end":10334,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10335,"byte_end":10338,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Note: while this type is unstable, the functionality it provides can be","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10339,"byte_end":10414,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/ accessed through the [free functions in `alloc`](index.html#functions).","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10415,"byte_end":10490,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10491,"byte_end":10494,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Alloc`]: trait.Alloc.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10495,"byte_end":10526,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"unstable(feature = \"allocator_api\", issue = \"32838\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10527,"byte_end":10582,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":11612,"byte_end":11617,"line_start":80,"line_end":80,"column_start":15,"column_end":20},"name":"alloc","qualname":"::alloc::alloc","value":"fn (layout: Layout) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Allocate memory with the global allocator.","sig":null,"attributes":[{"value":"/ Allocate memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10642,"byte_end":10688,"line_start":46,"line_end":46,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10689,"byte_end":10692,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::alloc`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10693,"byte_end":10762,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10763,"byte_end":10835,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10836,"byte_end":10888,"line_start":50,"line_end":50,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10889,"byte_end":10892,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `alloc` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10893,"byte_end":10970,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ of the [`Global`] type when it and the [`Alloc`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":10971,"byte_end":11044,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11045,"byte_end":11048,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11049,"byte_end":11061,"line_start":55,"line_end":55,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11062,"byte_end":11065,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::alloc`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11066,"byte_end":11097,"line_start":57,"line_end":57,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11098,"byte_end":11101,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11102,"byte_end":11136,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ [`Alloc`]: trait.Alloc.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11137,"byte_end":11168,"line_start":60,"line_end":60,"column_start":1,"column_end":32}},{"value":"/ [`GlobalAlloc::alloc`]: trait.GlobalAlloc.html#tymethod.alloc","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11169,"byte_end":11234,"line_start":61,"line_end":61,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11235,"byte_end":11238,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11239,"byte_end":11253,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11254,"byte_end":11257,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11258,"byte_end":11265,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ use std::alloc::{alloc, dealloc, Layout};","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11266,"byte_end":11311,"line_start":66,"line_end":66,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11312,"byte_end":11315,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11316,"byte_end":11328,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/     let layout = Layout::new::<u16>();","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11329,"byte_end":11371,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/     let ptr = alloc(layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11372,"byte_end":11404,"line_start":70,"line_end":70,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11405,"byte_end":11408,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/     *(ptr as *mut u16) = 42;","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11409,"byte_end":11441,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/     assert_eq!(*(ptr as *mut u16), 42);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11442,"byte_end":11485,"line_start":73,"line_end":73,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11486,"byte_end":11489,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/     dealloc(ptr, layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11490,"byte_end":11519,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11520,"byte_end":11525,"line_start":76,"line_end":76,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11526,"byte_end":11533,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11534,"byte_end":11587,"line_start":78,"line_end":78,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11588,"byte_end":11597,"line_start":79,"line_end":79,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":12381,"byte_end":12388,"line_start":102,"line_end":102,"column_start":15,"column_end":22},"name":"dealloc","qualname":"::alloc::dealloc","value":"fn (ptr: *mut u8, layout: Layout) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Deallocate memory with the global allocator.","sig":null,"attributes":[{"value":"/ Deallocate memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11698,"byte_end":11746,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11747,"byte_end":11750,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::dealloc`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11751,"byte_end":11822,"line_start":86,"line_end":86,"column_start":1,"column_end":72}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11823,"byte_end":11895,"line_start":87,"line_end":87,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11896,"byte_end":11948,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11949,"byte_end":11952,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `dealloc` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":11953,"byte_end":12032,"line_start":90,"line_end":90,"column_start":1,"column_end":80}},{"value":"/ of the [`Global`] type when it and the [`Alloc`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12033,"byte_end":12106,"line_start":91,"line_end":91,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12107,"byte_end":12110,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12111,"byte_end":12123,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12124,"byte_end":12127,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::dealloc`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12128,"byte_end":12161,"line_start":95,"line_end":95,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12162,"byte_end":12165,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12166,"byte_end":12200,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"/ [`Alloc`]: trait.Alloc.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12201,"byte_end":12232,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/ [`GlobalAlloc::dealloc`]: trait.GlobalAlloc.html#tymethod.dealloc","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12233,"byte_end":12302,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12303,"byte_end":12356,"line_start":100,"line_end":100,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12357,"byte_end":12366,"line_start":101,"line_end":101,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":13160,"byte_end":13167,"line_start":124,"line_end":124,"column_start":15,"column_end":22},"name":"realloc","qualname":"::alloc::realloc","value":"fn (ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Reallocate memory with the global allocator.","sig":null,"attributes":[{"value":"/ Reallocate memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12479,"byte_end":12527,"line_start":106,"line_end":106,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12528,"byte_end":12531,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::realloc`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12532,"byte_end":12603,"line_start":108,"line_end":108,"column_start":1,"column_end":72}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12604,"byte_end":12676,"line_start":109,"line_end":109,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12677,"byte_end":12729,"line_start":110,"line_end":110,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12730,"byte_end":12733,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `realloc` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12734,"byte_end":12813,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ of the [`Global`] type when it and the [`Alloc`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12814,"byte_end":12887,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12888,"byte_end":12891,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12892,"byte_end":12904,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12905,"byte_end":12908,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::realloc`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12909,"byte_end":12942,"line_start":117,"line_end":117,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12943,"byte_end":12946,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12947,"byte_end":12981,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/ [`Alloc`]: trait.Alloc.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":12982,"byte_end":13013,"line_start":120,"line_end":120,"column_start":1,"column_end":32}},{"value":"/ [`GlobalAlloc::realloc`]: trait.GlobalAlloc.html#method.realloc","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13014,"byte_end":13081,"line_start":121,"line_end":121,"column_start":1,"column_end":68}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13082,"byte_end":13135,"line_start":122,"line_end":122,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13136,"byte_end":13145,"line_start":123,"line_end":123,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":14296,"byte_end":14308,"line_start":161,"line_end":161,"column_start":15,"column_end":27},"name":"alloc_zeroed","qualname":"::alloc::alloc_zeroed","value":"fn (layout: Layout) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Allocate zero-initialized memory with the global allocator.","sig":null,"attributes":[{"value":"/ Allocate zero-initialized memory with the global allocator.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13296,"byte_end":13359,"line_start":128,"line_end":128,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13360,"byte_end":13363,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This function forwards calls to the [`GlobalAlloc::alloc_zeroed`] method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13364,"byte_end":13440,"line_start":130,"line_end":130,"column_start":1,"column_end":77}},{"value":"/ of the allocator registered with the `#[global_allocator]` attribute","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13441,"byte_end":13513,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ if there is one, or the `std` crate’s default.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13514,"byte_end":13566,"line_start":132,"line_end":132,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13567,"byte_end":13570,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ This function is expected to be deprecated in favor of the `alloc_zeroed` method","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13571,"byte_end":13655,"line_start":134,"line_end":134,"column_start":1,"column_end":85}},{"value":"/ of the [`Global`] type when it and the [`Alloc`] trait become stable.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13656,"byte_end":13729,"line_start":135,"line_end":135,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13730,"byte_end":13733,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13734,"byte_end":13746,"line_start":137,"line_end":137,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13747,"byte_end":13750,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ See [`GlobalAlloc::alloc_zeroed`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13751,"byte_end":13789,"line_start":139,"line_end":139,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13790,"byte_end":13793,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [`Global`]: struct.Global.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13794,"byte_end":13828,"line_start":141,"line_end":141,"column_start":1,"column_end":35}},{"value":"/ [`Alloc`]: trait.Alloc.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13829,"byte_end":13860,"line_start":142,"line_end":142,"column_start":1,"column_end":32}},{"value":"/ [`GlobalAlloc::alloc_zeroed`]: trait.GlobalAlloc.html#method.alloc_zeroed","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13861,"byte_end":13938,"line_start":143,"line_end":143,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13939,"byte_end":13942,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13943,"byte_end":13957,"line_start":145,"line_end":145,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13958,"byte_end":13961,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13962,"byte_end":13969,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ use std::alloc::{alloc_zeroed, dealloc, Layout};","span":{"file_name":"src/liballoc/alloc.rs","byte_start":13970,"byte_end":14022,"line_start":148,"line_end":148,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14023,"byte_end":14026,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14027,"byte_end":14039,"line_start":150,"line_end":150,"column_start":1,"column_end":13}},{"value":"/     let layout = Layout::new::<u16>();","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14040,"byte_end":14082,"line_start":151,"line_end":151,"column_start":1,"column_end":43}},{"value":"/     let ptr = alloc_zeroed(layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14083,"byte_end":14122,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14123,"byte_end":14126,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(*(ptr as *mut u16), 0);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14127,"byte_end":14169,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14170,"byte_end":14173,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/     dealloc(ptr, layout);","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14174,"byte_end":14203,"line_start":156,"line_end":156,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14204,"byte_end":14209,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14210,"byte_end":14217,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14218,"byte_end":14271,"line_start":159,"line_end":159,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14272,"byte_end":14281,"line_start":160,"line_end":160,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":33},"span":{"file_name":"src/liballoc/alloc.rs","byte_start":16800,"byte_end":16818,"line_start":235,"line_end":235,"column_start":8,"column_end":26},"name":"handle_alloc_error","qualname":"::alloc::handle_alloc_error","value":"fn (layout: Layout) -> !","parent":null,"children":[],"decl_id":null,"docs":" Abort on memory allocation error or failure.","sig":null,"attributes":[{"value":"/ Abort on memory allocation error or failure.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16106,"byte_end":16154,"line_start":221,"line_end":221,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16155,"byte_end":16158,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ Callers of memory allocation APIs wishing to abort computation","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16159,"byte_end":16225,"line_start":223,"line_end":223,"column_start":1,"column_end":67}},{"value":"/ in response to an allocation error are encouraged to call this function,","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16226,"byte_end":16302,"line_start":224,"line_end":224,"column_start":1,"column_end":77}},{"value":"/ rather than directly invoking `panic!` or similar.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16303,"byte_end":16357,"line_start":225,"line_end":225,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16358,"byte_end":16361,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ The default behavior of this function is to print a message to standard error","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16362,"byte_end":16443,"line_start":227,"line_end":227,"column_start":1,"column_end":82}},{"value":"/ and abort the process.","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16444,"byte_end":16470,"line_start":228,"line_end":228,"column_start":1,"column_end":27}},{"value":"/ It can be replaced with [`set_alloc_error_hook`] and [`take_alloc_error_hook`].","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16471,"byte_end":16554,"line_start":229,"line_end":229,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16555,"byte_end":16558,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ [`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16559,"byte_end":16633,"line_start":231,"line_end":231,"column_start":1,"column_end":75}},{"value":"/ [`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16634,"byte_end":16710,"line_start":232,"line_end":232,"column_start":1,"column_end":77}},{"value":"stable(feature = \"global_alloc\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16711,"byte_end":16764,"line_start":233,"line_end":233,"column_start":1,"column_end":54}},{"value":"rustc_allocator_nounwind","span":{"file_name":"src/liballoc/alloc.rs","byte_start":16765,"byte_end":16792,"line_start":234,"line_end":234,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"src/liballoc/boxed.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":85},{"krate":0,"index":92},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":132},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":148},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":244},{"krate":0,"index":248},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":284},{"krate":0,"index":289}],"decl_id":null,"docs":" A pointer type for heap allocation.","sig":null,"attributes":[{"value":"cfg(not (test))","span":{"file_name":"src/liballoc/lib.rs","byte_start":5028,"byte_end":5045,"line_start":145,"line_end":145,"column_start":1,"column_end":18}},{"value":"! A pointer type for heap allocation.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":16969,"byte_end":17008,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17009,"byte_end":17012,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! [`Box<T>`], casually referred to as a 'box', provides the simplest form of","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17013,"byte_end":17091,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! heap allocation in Rust. Boxes provide ownership for this allocation, and","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17092,"byte_end":17169,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"! drop their contents when they go out of scope.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17170,"byte_end":17220,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17221,"byte_end":17224,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17225,"byte_end":17239,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17240,"byte_end":17243,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! Move a value from the stack to the heap by creating a [`Box`]:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17244,"byte_end":17310,"line_start":9,"line_end":9,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17311,"byte_end":17314,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17315,"byte_end":17322,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"! let val: u8 = 5;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17323,"byte_end":17343,"line_start":12,"line_end":12,"column_start":1,"column_end":21}},{"value":"! let boxed: Box<u8> = Box::new(val);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17344,"byte_end":17383,"line_start":13,"line_end":13,"column_start":1,"column_end":40}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17384,"byte_end":17391,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17392,"byte_end":17395,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! Move a value from a [`Box`] back to the stack by [dereferencing]:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17396,"byte_end":17465,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17466,"byte_end":17469,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17470,"byte_end":17477,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"! let boxed: Box<u8> = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17478,"byte_end":17515,"line_start":19,"line_end":19,"column_start":1,"column_end":38}},{"value":"! let val: u8 = *boxed;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17516,"byte_end":17541,"line_start":20,"line_end":20,"column_start":1,"column_end":26}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17542,"byte_end":17549,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17550,"byte_end":17553,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! Creating a recursive data structure:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17554,"byte_end":17594,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17595,"byte_end":17598,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17599,"byte_end":17606,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"! #[derive(Debug)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17607,"byte_end":17627,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"! enum List<T> {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17628,"byte_end":17646,"line_start":27,"line_end":27,"column_start":1,"column_end":19}},{"value":"!     Cons(T, Box<List<T>>),","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17647,"byte_end":17677,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"!     Nil,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17678,"byte_end":17690,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"! }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17691,"byte_end":17696,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17697,"byte_end":17700,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! let list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Nil))));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17701,"byte_end":17787,"line_start":32,"line_end":32,"column_start":1,"column_end":87}},{"value":"! println!(\"{:?}\", list);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17788,"byte_end":17815,"line_start":33,"line_end":33,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17816,"byte_end":17823,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17824,"byte_end":17827,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! This will print `Cons(1, Cons(2, Nil))`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17828,"byte_end":17872,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17873,"byte_end":17876,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! Recursive structures must be boxed, because if the definition of `Cons`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17877,"byte_end":17952,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"! looked like this:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17953,"byte_end":17974,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17975,"byte_end":17978,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! ```compile_fail,E0072","span":{"file_name":"src/liballoc/boxed.rs","byte_start":17979,"byte_end":18004,"line_start":41,"line_end":41,"column_start":1,"column_end":26}},{"value":"! # enum List<T> {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18005,"byte_end":18025,"line_start":42,"line_end":42,"column_start":1,"column_end":21}},{"value":"! Cons(T, List<T>),","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18026,"byte_end":18047,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"! # }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18048,"byte_end":18055,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18056,"byte_end":18063,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18064,"byte_end":18067,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! It wouldn't work. This is because the size of a `List` depends on how many","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18068,"byte_end":18146,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"! elements are in the list, and so we don't know how much memory to allocate","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18147,"byte_end":18225,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"! for a `Cons`. By introducing a [`Box<T>`], which has a defined size, we know how","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18226,"byte_end":18310,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"! big `Cons` needs to be.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18311,"byte_end":18338,"line_start":50,"line_end":50,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18339,"byte_end":18342,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! # Memory layout","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18343,"byte_end":18362,"line_start":52,"line_end":52,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18363,"byte_end":18366,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! For non-zero-sized values, a [`Box`] will use the [`Global`] allocator for","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18367,"byte_end":18445,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"! its allocation. It is valid to convert both ways between a [`Box`] and a","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18446,"byte_end":18522,"line_start":55,"line_end":55,"column_start":1,"column_end":77}},{"value":"! raw pointer allocated with the [`Global`] allocator, given that the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18523,"byte_end":18594,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"! [`Layout`] used with the allocator is correct for the type. More precisely,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18595,"byte_end":18674,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"! a `value: *mut T` that has been allocated with the [`Global`] allocator","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18675,"byte_end":18750,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"! with `Layout::for_value(&*value)` may be converted into a box using","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18751,"byte_end":18822,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"! [`Box::<T>::from_raw(value)`]. Conversely, the memory backing a `value: *mut","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18823,"byte_end":18903,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"! T` obtained from [`Box::<T>::into_raw`] may be deallocated using the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18904,"byte_end":18976,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"! [`Global`] allocator with [`Layout::for_value(&*value)`].","span":{"file_name":"src/liballoc/boxed.rs","byte_start":18977,"byte_end":19038,"line_start":62,"line_end":62,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19039,"byte_end":19042,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19043,"byte_end":19112,"line_start":64,"line_end":64,"column_start":1,"column_end":70}},{"value":"! as a single pointer and is also ABI-compatible with C pointers","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19113,"byte_end":19179,"line_start":65,"line_end":65,"column_start":1,"column_end":67}},{"value":"! (i.e. the C type `T*`). This means that if you have extern \"C\"","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19180,"byte_end":19246,"line_start":66,"line_end":66,"column_start":1,"column_end":67}},{"value":"! Rust functions that will be called from C, you can define those","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19247,"byte_end":19314,"line_start":67,"line_end":67,"column_start":1,"column_end":68}},{"value":"! Rust functions using `Box<T>` types, and use `T*` as corresponding","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19315,"byte_end":19385,"line_start":68,"line_end":68,"column_start":1,"column_end":71}},{"value":"! type on the C side. As an example, consider this C header which","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19386,"byte_end":19453,"line_start":69,"line_end":69,"column_start":1,"column_end":68}},{"value":"! declares functions that create and destroy some kind of `Foo`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19454,"byte_end":19519,"line_start":70,"line_end":70,"column_start":1,"column_end":66}},{"value":"! value:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19520,"byte_end":19530,"line_start":71,"line_end":71,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19531,"byte_end":19534,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! ```c","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19535,"byte_end":19543,"line_start":73,"line_end":73,"column_start":1,"column_end":9}},{"value":"! /* C header */","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19544,"byte_end":19562,"line_start":74,"line_end":74,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19563,"byte_end":19566,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! /* Returns ownership to the caller */","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19567,"byte_end":19608,"line_start":76,"line_end":76,"column_start":1,"column_end":42}},{"value":"! struct Foo* foo_new(void);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19609,"byte_end":19639,"line_start":77,"line_end":77,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19640,"byte_end":19643,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! /* Takes ownership from the caller; no-op when invoked with NULL */","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19644,"byte_end":19715,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"! void foo_delete(struct Foo*);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19716,"byte_end":19749,"line_start":80,"line_end":80,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19750,"byte_end":19757,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19758,"byte_end":19761,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! These two functions might be implemented in Rust as follows. Here, the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19762,"byte_end":19836,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"! `struct Foo*` type from C is translated to `Box<Foo>`, which captures","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19837,"byte_end":19910,"line_start":84,"line_end":84,"column_start":1,"column_end":74}},{"value":"! the ownership constraints. Note also that the nullable argument to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19911,"byte_end":19981,"line_start":85,"line_end":85,"column_start":1,"column_end":71}},{"value":"! `foo_delete` is represented in Rust as `Option<Box<Foo>>`, since `Box<Foo>`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":19982,"byte_end":20061,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"! cannot be null.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20062,"byte_end":20081,"line_start":87,"line_end":87,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20082,"byte_end":20085,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20086,"byte_end":20093,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"! #[repr(C)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20094,"byte_end":20108,"line_start":90,"line_end":90,"column_start":1,"column_end":15}},{"value":"! pub struct Foo;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20109,"byte_end":20128,"line_start":91,"line_end":91,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20129,"byte_end":20132,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20133,"byte_end":20149,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn foo_new() -> Box<Foo> {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20150,"byte_end":20195,"line_start":94,"line_end":94,"column_start":1,"column_end":46}},{"value":"!     Box::new(Foo)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20196,"byte_end":20217,"line_start":95,"line_end":95,"column_start":1,"column_end":22}},{"value":"! }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20218,"byte_end":20223,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20224,"byte_end":20227,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20228,"byte_end":20244,"line_start":98,"line_end":98,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20245,"byte_end":20301,"line_start":99,"line_end":99,"column_start":1,"column_end":57}},{"value":"! ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20302,"byte_end":20309,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20310,"byte_end":20313,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"! Even though `Box<T>` has the same representation and C ABI as a C pointer,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20314,"byte_end":20392,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"! this does not mean that you can convert an arbitrary `T*` into a `Box<T>`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20393,"byte_end":20470,"line_start":103,"line_end":103,"column_start":1,"column_end":78}},{"value":"! and expect things to work. `Box<T>` values will always be fully aligned,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20471,"byte_end":20547,"line_start":104,"line_end":104,"column_start":1,"column_end":77}},{"value":"! non-null pointers. Moreover, the destructor for `Box<T>` will attempt to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20548,"byte_end":20624,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"! free the value with the global allocator. In general, the best practice","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20625,"byte_end":20700,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"! is to only use `Box<T>` for pointers that originated from the global","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20701,"byte_end":20773,"line_start":107,"line_end":107,"column_start":1,"column_end":73}},{"value":"! allocator.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20774,"byte_end":20788,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20789,"byte_end":20792,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! **Important.** At least at present, you should avoid using","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20793,"byte_end":20855,"line_start":110,"line_end":110,"column_start":1,"column_end":63}},{"value":"! `Box<T>` types for functions that are defined in C but invoked","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20856,"byte_end":20922,"line_start":111,"line_end":111,"column_start":1,"column_end":67}},{"value":"! from Rust. In those cases, you should directly mirror the C types","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20923,"byte_end":20992,"line_start":112,"line_end":112,"column_start":1,"column_end":70}},{"value":"! as closely as possible. Using types like `Box<T>` where the C","span":{"file_name":"src/liballoc/boxed.rs","byte_start":20993,"byte_end":21058,"line_start":113,"line_end":113,"column_start":1,"column_end":66}},{"value":"! definition is just using `T*` can lead to undefined behavior, as","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21059,"byte_end":21127,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"! described in [rust-lang/unsafe-code-guidelines#198][ucg#198].","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21128,"byte_end":21193,"line_start":115,"line_end":115,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21194,"byte_end":21197,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! [ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21198,"byte_end":21275,"line_start":117,"line_end":117,"column_start":1,"column_end":78}},{"value":"! [dereferencing]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21276,"byte_end":21327,"line_start":118,"line_end":118,"column_start":1,"column_end":52}},{"value":"! [`Box`]: struct.Box.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21328,"byte_end":21356,"line_start":119,"line_end":119,"column_start":1,"column_end":29}},{"value":"! [`Box<T>`]: struct.Box.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21357,"byte_end":21388,"line_start":120,"line_end":120,"column_start":1,"column_end":32}},{"value":"! [`Box::<T>::from_raw(value)`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21389,"byte_end":21455,"line_start":121,"line_end":121,"column_start":1,"column_end":67}},{"value":"! [`Box::<T>::into_raw`]: struct.Box.html#method.into_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21456,"byte_end":21515,"line_start":122,"line_end":122,"column_start":1,"column_end":60}},{"value":"! [`Global`]: ../alloc/struct.Global.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21516,"byte_end":21559,"line_start":123,"line_end":123,"column_start":1,"column_end":44}},{"value":"! [`Layout`]: ../alloc/struct.Layout.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21560,"byte_end":21603,"line_start":124,"line_end":124,"column_start":1,"column_end":44}},{"value":"! [`Layout::for_value(&*value)`]: ../alloc/struct.Layout.html#method.for_value","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21604,"byte_end":21684,"line_start":125,"line_end":125,"column_start":1,"column_end":81}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":21686,"byte_end":21732,"line_start":127,"line_end":127,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":22618,"byte_end":22621,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"Box","qualname":"::boxed::Box","value":"","parent":null,"children":[],"decl_id":null,"docs":" A pointer type for heap allocation.","sig":null,"attributes":[{"value":"/ A pointer type for heap allocation.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22401,"byte_end":22440,"line_start":153,"line_end":153,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22441,"byte_end":22444,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](../../std/boxed/index.html) for more.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22445,"byte_end":22523,"line_start":155,"line_end":155,"column_start":1,"column_end":79}},{"value":"lang = \"owned_box\"","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22524,"byte_end":22545,"line_start":156,"line_end":156,"column_start":1,"column_end":22}},{"value":"fundamental","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22546,"byte_end":22560,"line_start":157,"line_end":157,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22561,"byte_end":22606,"line_start":158,"line_end":158,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":22972,"byte_end":22975,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<Box<T>>::new","value":"fn (x: T) -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Allocates memory on the heap and then places `x` into it.","sig":null,"attributes":[{"value":"/ Allocates memory on the heap and then places `x` into it.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22667,"byte_end":22728,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22733,"byte_end":22736,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ This doesn't actually allocate if `T` is zero-sized.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22741,"byte_end":22797,"line_start":164,"line_end":164,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22802,"byte_end":22805,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22810,"byte_end":22824,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22829,"byte_end":22832,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22837,"byte_end":22844,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ let five = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22849,"byte_end":22876,"line_start":169,"line_end":169,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22881,"byte_end":22888,"line_start":170,"line_end":170,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22893,"byte_end":22938,"line_start":171,"line_end":171,"column_start":5,"column_end":50}},{"value":"inline(always)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22943,"byte_end":22960,"line_start":172,"line_end":172,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":23492,"byte_end":23502,"line_start":196,"line_end":196,"column_start":12,"column_end":22},"name":"new_uninit","qualname":"<Box<T>>::new_uninit","value":"fn () -> Box<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new box with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new box with uninitialized contents.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23019,"byte_end":23072,"line_start":177,"line_end":177,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23077,"byte_end":23080,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23085,"byte_end":23099,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23104,"byte_end":23107,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23112,"byte_end":23119,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23124,"byte_end":23151,"line_start":182,"line_end":182,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23156,"byte_end":23159,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ let mut five = Box::<u32>::new_uninit();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23164,"byte_end":23208,"line_start":184,"line_end":184,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23213,"byte_end":23216,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23221,"byte_end":23244,"line_start":186,"line_end":186,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23249,"byte_end":23284,"line_start":187,"line_end":187,"column_start":5,"column_end":40}},{"value":"/     five.as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23289,"byte_end":23324,"line_start":188,"line_end":188,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23329,"byte_end":23332,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23337,"byte_end":23363,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23368,"byte_end":23374,"line_start":191,"line_end":191,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23379,"byte_end":23382,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23387,"byte_end":23411,"line_start":193,"line_end":193,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23416,"byte_end":23423,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23428,"byte_end":23480,"line_start":195,"line_end":195,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":24459,"byte_end":24469,"line_start":225,"line_end":225,"column_start":12,"column_end":22},"name":"new_zeroed","qualname":"<Box<T>>::new_zeroed","value":"fn () -> Box<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Box` with uninitialized contents, with the memory\n being filled with `0` bytes.","sig":null,"attributes":[{"value":"/ Constructs a new `Box` with uninitialized contents, with the memory","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23854,"byte_end":23925,"line_start":206,"line_end":206,"column_start":5,"column_end":76}},{"value":"/ being filled with `0` bytes.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23930,"byte_end":23962,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23967,"byte_end":23970,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage","span":{"file_name":"src/liballoc/boxed.rs","byte_start":23975,"byte_end":24058,"line_start":209,"line_end":209,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24063,"byte_end":24082,"line_start":210,"line_end":210,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24087,"byte_end":24090,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24095,"byte_end":24109,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24114,"byte_end":24117,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24122,"byte_end":24129,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24134,"byte_end":24161,"line_start":215,"line_end":215,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24166,"byte_end":24169,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let zero = Box::<u32>::new_zeroed();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24174,"byte_end":24214,"line_start":217,"line_end":217,"column_start":5,"column_end":45}},{"value":"/ let zero = unsafe { zero.assume_init() };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24219,"byte_end":24264,"line_start":218,"line_end":218,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24269,"byte_end":24272,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*zero, 0)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24277,"byte_end":24301,"line_start":220,"line_end":220,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24306,"byte_end":24313,"line_start":221,"line_end":221,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24318,"byte_end":24321,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24326,"byte_end":24390,"line_start":223,"line_end":223,"column_start":5,"column_end":69}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24395,"byte_end":24447,"line_start":224,"line_end":224,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":24889,"byte_end":24892,"line_start":237,"line_end":237,"column_start":12,"column_end":15},"name":"pin","qualname":"<Box<T>>::pin","value":"fn (x: T) -> Pin<Box<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n `x` will be pinned in memory and unable to be moved.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24670,"byte_end":24745,"line_start":233,"line_end":233,"column_start":5,"column_end":80}},{"value":"/ `x` will be pinned in memory and unable to be moved.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24750,"byte_end":24806,"line_start":234,"line_end":234,"column_start":5,"column_end":61}},{"value":"stable(feature = \"pin\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24811,"byte_end":24855,"line_start":235,"line_end":235,"column_start":5,"column_end":49}},{"value":"inline(always)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24860,"byte_end":24877,"line_start":236,"line_end":236,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":25572,"byte_end":25588,"line_start":264,"line_end":264,"column_start":12,"column_end":28},"name":"new_uninit_slice","qualname":"<Box<[T]>>::new_uninit_slice","value":"fn (len: usize) -> Box<[mem::MaybeUninit<T>]>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new boxed slice with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new boxed slice with uninitialized contents.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24971,"byte_end":25032,"line_start":243,"line_end":243,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25037,"byte_end":25040,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25045,"byte_end":25059,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25064,"byte_end":25067,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25072,"byte_end":25079,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25084,"byte_end":25111,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25116,"byte_end":25119,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ let mut values = Box::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25124,"byte_end":25179,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25184,"byte_end":25187,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25192,"byte_end":25217,"line_start":252,"line_end":252,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25222,"byte_end":25257,"line_start":253,"line_end":253,"column_start":5,"column_end":40}},{"value":"/     values[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25262,"byte_end":25302,"line_start":254,"line_end":254,"column_start":5,"column_end":45}},{"value":"/     values[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25307,"byte_end":25347,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/     values[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25352,"byte_end":25392,"line_start":256,"line_end":256,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25397,"byte_end":25400,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25405,"byte_end":25433,"line_start":258,"line_end":258,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25438,"byte_end":25444,"line_start":259,"line_end":259,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25449,"byte_end":25452,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25457,"byte_end":25491,"line_start":261,"line_end":261,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25496,"byte_end":25503,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":25508,"byte_end":25560,"line_start":263,"line_end":263,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":26977,"byte_end":26988,"line_start":309,"line_end":309,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Box<mem::MaybeUninit<T>>>::assume_init","value":"fn (self) -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Box<T>`.","sig":null,"attributes":[{"value":"/ Converts to `Box<T>`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26106,"byte_end":26131,"line_start":279,"line_end":279,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26136,"byte_end":26139,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26144,"byte_end":26156,"line_start":281,"line_end":281,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26161,"byte_end":26164,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26169,"byte_end":26210,"line_start":283,"line_end":283,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the value","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26215,"byte_end":26269,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26274,"byte_end":26312,"line_start":285,"line_end":285,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26317,"byte_end":26379,"line_start":286,"line_end":286,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26384,"byte_end":26424,"line_start":287,"line_end":287,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26429,"byte_end":26432,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26437,"byte_end":26526,"line_start":289,"line_end":289,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26531,"byte_end":26534,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26539,"byte_end":26553,"line_start":291,"line_end":291,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26558,"byte_end":26561,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26566,"byte_end":26573,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26578,"byte_end":26605,"line_start":294,"line_end":294,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26610,"byte_end":26613,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ let mut five = Box::<u32>::new_uninit();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26618,"byte_end":26662,"line_start":296,"line_end":296,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26667,"byte_end":26670,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let five: Box<u32> = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26675,"byte_end":26708,"line_start":298,"line_end":298,"column_start":5,"column_end":38}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26713,"byte_end":26748,"line_start":299,"line_end":299,"column_start":5,"column_end":40}},{"value":"/     five.as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26753,"byte_end":26788,"line_start":300,"line_end":300,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26793,"byte_end":26796,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26801,"byte_end":26827,"line_start":302,"line_end":302,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26832,"byte_end":26838,"line_start":303,"line_end":303,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26843,"byte_end":26846,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26851,"byte_end":26875,"line_start":305,"line_end":305,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26880,"byte_end":26887,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26892,"byte_end":26944,"line_start":307,"line_end":307,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26949,"byte_end":26958,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":28085,"byte_end":28096,"line_start":347,"line_end":347,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Box<[mem::MaybeUninit<T>]>>::assume_init","value":"fn (self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Converts to `Box<[T]>`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27100,"byte_end":27127,"line_start":315,"line_end":315,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27132,"byte_end":27135,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27140,"byte_end":27152,"line_start":317,"line_end":317,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27157,"byte_end":27160,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27165,"byte_end":27206,"line_start":319,"line_end":319,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the values","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27211,"byte_end":27266,"line_start":320,"line_end":320,"column_start":5,"column_end":60}},{"value":"/ really are in an initialized state.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27271,"byte_end":27310,"line_start":321,"line_end":321,"column_start":5,"column_end":44}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27315,"byte_end":27377,"line_start":322,"line_end":322,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27382,"byte_end":27422,"line_start":323,"line_end":323,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27427,"byte_end":27430,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27435,"byte_end":27524,"line_start":325,"line_end":325,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27529,"byte_end":27532,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27537,"byte_end":27551,"line_start":327,"line_end":327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27556,"byte_end":27559,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27564,"byte_end":27571,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27576,"byte_end":27603,"line_start":330,"line_end":330,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27608,"byte_end":27611,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ let mut values = Box::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27616,"byte_end":27671,"line_start":332,"line_end":332,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27676,"byte_end":27679,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27684,"byte_end":27709,"line_start":334,"line_end":334,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27714,"byte_end":27749,"line_start":335,"line_end":335,"column_start":5,"column_end":40}},{"value":"/     values[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27754,"byte_end":27794,"line_start":336,"line_end":336,"column_start":5,"column_end":45}},{"value":"/     values[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27799,"byte_end":27839,"line_start":337,"line_end":337,"column_start":5,"column_end":45}},{"value":"/     values[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27844,"byte_end":27884,"line_start":338,"line_end":338,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27889,"byte_end":27892,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27897,"byte_end":27925,"line_start":340,"line_end":340,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27930,"byte_end":27936,"line_start":341,"line_end":341,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27941,"byte_end":27944,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27949,"byte_end":27983,"line_start":343,"line_end":343,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27988,"byte_end":27995,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28000,"byte_end":28052,"line_start":345,"line_end":345,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28057,"byte_end":28066,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":29637,"byte_end":29645,"line_start":391,"line_end":391,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Box<T>>::from_raw","value":"fn (raw: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a box from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs a box from a raw pointer.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28216,"byte_end":28256,"line_start":353,"line_end":353,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28261,"byte_end":28264,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the raw pointer is owned by the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28269,"byte_end":28333,"line_start":355,"line_end":355,"column_start":5,"column_end":69}},{"value":"/ resulting `Box`. Specifically, the `Box` destructor will call","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28338,"byte_end":28403,"line_start":356,"line_end":356,"column_start":5,"column_end":70}},{"value":"/ the destructor of `T` and free the allocated memory. For this","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28408,"byte_end":28473,"line_start":357,"line_end":357,"column_start":5,"column_end":70}},{"value":"/ to be safe, the memory must have been allocated in accordance","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28478,"byte_end":28543,"line_start":358,"line_end":358,"column_start":5,"column_end":70}},{"value":"/ with the [memory layout] used by `Box` .","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28548,"byte_end":28592,"line_start":359,"line_end":359,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28597,"byte_end":28600,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28605,"byte_end":28617,"line_start":361,"line_end":361,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28622,"byte_end":28625,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because improper use may lead to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28630,"byte_end":28690,"line_start":363,"line_end":363,"column_start":5,"column_end":65}},{"value":"/ memory problems. For example, a double-free may occur if the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28695,"byte_end":28759,"line_start":364,"line_end":364,"column_start":5,"column_end":69}},{"value":"/ function is called twice on the same raw pointer.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28764,"byte_end":28817,"line_start":365,"line_end":365,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28822,"byte_end":28825,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28830,"byte_end":28844,"line_start":367,"line_end":367,"column_start":5,"column_end":19}},{"value":"/ Recreate a `Box` which was previously converted to a raw pointer","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28849,"byte_end":28917,"line_start":368,"line_end":368,"column_start":5,"column_end":73}},{"value":"/ using [`Box::into_raw`]:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28922,"byte_end":28950,"line_start":369,"line_end":369,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28955,"byte_end":28962,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ let x = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28967,"byte_end":28991,"line_start":371,"line_end":371,"column_start":5,"column_end":29}},{"value":"/ let ptr = Box::into_raw(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28996,"byte_end":29027,"line_start":372,"line_end":372,"column_start":5,"column_end":36}},{"value":"/ let x = unsafe { Box::from_raw(ptr) };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29032,"byte_end":29074,"line_start":373,"line_end":373,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29079,"byte_end":29086,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/ Manually create a `Box` from scratch by using the global allocator:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29091,"byte_end":29162,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29167,"byte_end":29174,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ use std::alloc::{alloc, Layout};","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29179,"byte_end":29215,"line_start":377,"line_end":377,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29220,"byte_end":29223,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29228,"byte_end":29240,"line_start":379,"line_end":379,"column_start":5,"column_end":17}},{"value":"/     let ptr = alloc(Layout::new::<i32>()) as *mut i32;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29245,"byte_end":29303,"line_start":380,"line_end":380,"column_start":5,"column_end":63}},{"value":"/     *ptr = 5;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29308,"byte_end":29325,"line_start":381,"line_end":381,"column_start":5,"column_end":22}},{"value":"/     let x = Box::from_raw(ptr);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29330,"byte_end":29365,"line_start":382,"line_end":382,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29370,"byte_end":29375,"line_start":383,"line_end":383,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29380,"byte_end":29387,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29392,"byte_end":29395,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ [memory layout]: index.html#memory-layout","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29400,"byte_end":29445,"line_start":386,"line_end":386,"column_start":5,"column_end":50}},{"value":"/ [`Layout`]: ../alloc/struct.Layout.html","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29450,"byte_end":29493,"line_start":387,"line_end":387,"column_start":5,"column_end":48}},{"value":"/ [`Box::into_raw`]: struct.Box.html#method.into_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29498,"byte_end":29552,"line_start":388,"line_end":388,"column_start":5,"column_end":59}},{"value":"stable(feature = \"box_raw\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29557,"byte_end":29604,"line_start":389,"line_end":389,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29609,"byte_end":29618,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":31419,"byte_end":31427,"line_start":437,"line_end":437,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Box<T>>::into_raw","value":"fn (b: Box<T>) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Box`, returning a wrapped raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Box`, returning a wrapped raw pointer.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29720,"byte_end":29776,"line_start":395,"line_end":395,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29781,"byte_end":29784,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ The pointer will be properly aligned and non-null.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29789,"byte_end":29843,"line_start":397,"line_end":397,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29848,"byte_end":29851,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29856,"byte_end":29922,"line_start":399,"line_end":399,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `Box`. In particular, the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29927,"byte_end":29989,"line_start":400,"line_end":400,"column_start":5,"column_end":67}},{"value":"/ caller should properly destroy `T` and release the memory, taking","span":{"file_name":"src/liballoc/boxed.rs","byte_start":29994,"byte_end":30063,"line_start":401,"line_end":401,"column_start":5,"column_end":74}},{"value":"/ into account the [memory layout] used by `Box`. The easiest way to","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30068,"byte_end":30138,"line_start":402,"line_end":402,"column_start":5,"column_end":75}},{"value":"/ do this is to convert the raw pointer back into a `Box` with the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30143,"byte_end":30211,"line_start":403,"line_end":403,"column_start":5,"column_end":73}},{"value":"/ [`Box::from_raw`] function, allowing the `Box` destructor to perform","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30216,"byte_end":30288,"line_start":404,"line_end":404,"column_start":5,"column_end":77}},{"value":"/ the cleanup.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30293,"byte_end":30309,"line_start":405,"line_end":405,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30314,"byte_end":30317,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Note: this is an associated function, which means that you have","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30322,"byte_end":30389,"line_start":407,"line_end":407,"column_start":5,"column_end":72}},{"value":"/ to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30394,"byte_end":30462,"line_start":408,"line_end":408,"column_start":5,"column_end":73}},{"value":"/ is so that there is no conflict with a method on the inner type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30467,"byte_end":30535,"line_start":409,"line_end":409,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30540,"byte_end":30543,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30548,"byte_end":30562,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/ Converting the raw pointer back into a `Box` with [`Box::from_raw`]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30567,"byte_end":30638,"line_start":412,"line_end":412,"column_start":5,"column_end":76}},{"value":"/ for automatic cleanup:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30643,"byte_end":30669,"line_start":413,"line_end":413,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30674,"byte_end":30681,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ let x = Box::new(String::from(\"Hello\"));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30686,"byte_end":30730,"line_start":415,"line_end":415,"column_start":5,"column_end":49}},{"value":"/ let ptr = Box::into_raw(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30735,"byte_end":30766,"line_start":416,"line_end":416,"column_start":5,"column_end":36}},{"value":"/ let x = unsafe { Box::from_raw(ptr) };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30771,"byte_end":30813,"line_start":417,"line_end":417,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30818,"byte_end":30825,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ Manual cleanup by explicitly running the destructor and deallocating","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30830,"byte_end":30902,"line_start":419,"line_end":419,"column_start":5,"column_end":77}},{"value":"/ the memory:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30907,"byte_end":30922,"line_start":420,"line_end":420,"column_start":5,"column_end":20}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30927,"byte_end":30934,"line_start":421,"line_end":421,"column_start":5,"column_end":12}},{"value":"/ use std::alloc::{dealloc, Layout};","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30939,"byte_end":30977,"line_start":422,"line_end":422,"column_start":5,"column_end":43}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":30982,"byte_end":30999,"line_start":423,"line_end":423,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31004,"byte_end":31007,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ let x = Box::new(String::from(\"Hello\"));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31012,"byte_end":31056,"line_start":425,"line_end":425,"column_start":5,"column_end":49}},{"value":"/ let p = Box::into_raw(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31061,"byte_end":31090,"line_start":426,"line_end":426,"column_start":5,"column_end":34}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31095,"byte_end":31107,"line_start":427,"line_end":427,"column_start":5,"column_end":17}},{"value":"/     ptr::drop_in_place(p);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31112,"byte_end":31142,"line_start":428,"line_end":428,"column_start":5,"column_end":35}},{"value":"/     dealloc(p as *mut u8, Layout::new::<String>());","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31147,"byte_end":31202,"line_start":429,"line_end":429,"column_start":5,"column_end":60}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31207,"byte_end":31212,"line_start":430,"line_end":430,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31217,"byte_end":31224,"line_start":431,"line_end":431,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31229,"byte_end":31232,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ [memory layout]: index.html#memory-layout","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31237,"byte_end":31282,"line_start":433,"line_end":433,"column_start":5,"column_end":50}},{"value":"/ [`Box::from_raw`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31287,"byte_end":31341,"line_start":434,"line_end":434,"column_start":5,"column_end":59}},{"value":"stable(feature = \"box_raw\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31346,"byte_end":31393,"line_start":435,"line_end":435,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31398,"byte_end":31407,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":32739,"byte_end":32756,"line_start":471,"line_end":471,"column_start":12,"column_end":29},"name":"into_raw_non_null","qualname":"<Box<T>>::into_raw_non_null","value":"fn (b: Box<T>) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.","sig":null,"attributes":[{"value":"/ Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31505,"byte_end":31575,"line_start":441,"line_end":441,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31580,"byte_end":31583,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31588,"byte_end":31654,"line_start":443,"line_end":443,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `Box`. In particular, the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31659,"byte_end":31721,"line_start":444,"line_end":444,"column_start":5,"column_end":67}},{"value":"/ caller should properly destroy `T` and release the memory. The","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31726,"byte_end":31792,"line_start":445,"line_end":445,"column_start":5,"column_end":71}},{"value":"/ easiest way to do so is to convert the `NonNull<T>` pointer","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31797,"byte_end":31860,"line_start":446,"line_end":446,"column_start":5,"column_end":68}},{"value":"/ into a raw pointer and back into a `Box` with the [`Box::from_raw`]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31865,"byte_end":31936,"line_start":447,"line_end":447,"column_start":5,"column_end":76}},{"value":"/ function.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31941,"byte_end":31954,"line_start":448,"line_end":448,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31959,"byte_end":31962,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ Note: this is an associated function, which means that you have","span":{"file_name":"src/liballoc/boxed.rs","byte_start":31967,"byte_end":32034,"line_start":450,"line_end":450,"column_start":5,"column_end":72}},{"value":"/ to call it as `Box::into_raw_non_null(b)`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32039,"byte_end":32084,"line_start":451,"line_end":451,"column_start":5,"column_end":50}},{"value":"/ instead of `b.into_raw_non_null()`. This","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32089,"byte_end":32133,"line_start":452,"line_end":452,"column_start":5,"column_end":49}},{"value":"/ is so that there is no conflict with a method on the inner type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32138,"byte_end":32206,"line_start":453,"line_end":453,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32211,"byte_end":32214,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ [`Box::from_raw`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32219,"byte_end":32273,"line_start":455,"line_end":455,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32278,"byte_end":32281,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32286,"byte_end":32300,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32305,"byte_end":32308,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32313,"byte_end":32320,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ #![feature(box_into_raw_non_null)]","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32325,"byte_end":32363,"line_start":460,"line_end":460,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32368,"byte_end":32371,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ let x = Box::new(5);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32376,"byte_end":32400,"line_start":462,"line_end":462,"column_start":5,"column_end":29}},{"value":"/ let ptr = Box::into_raw_non_null(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32405,"byte_end":32445,"line_start":463,"line_end":463,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32450,"byte_end":32453,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ // Clean up the memory by converting the NonNull pointer back","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32458,"byte_end":32523,"line_start":465,"line_end":465,"column_start":5,"column_end":70}},{"value":"/ // into a Box and letting the Box be dropped.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32528,"byte_end":32577,"line_start":466,"line_end":466,"column_start":5,"column_end":54}},{"value":"/ let x = unsafe { Box::from_raw(ptr.as_ptr()) };","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32582,"byte_end":32633,"line_start":467,"line_end":467,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32638,"byte_end":32645,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"box_into_raw_non_null\", issue = \"47336\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32650,"byte_end":32713,"line_start":469,"line_end":469,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32718,"byte_end":32727,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":32971,"byte_end":32982,"line_start":478,"line_end":478,"column_start":12,"column_end":23},"name":"into_unique","qualname":"<Box<T>>::into_unique","value":"fn (b: Box<T>) -> Unique<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"ptr_internals\", issue = \"none\", reason =\n           \"use into_raw_non_null instead\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32830,"byte_end":32926,"line_start":475,"line_end":475,"column_start":5,"column_end":101}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":32931,"byte_end":32940,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":35083,"byte_end":35087,"line_start":529,"line_end":529,"column_start":12,"column_end":16},"name":"leak","qualname":"<Box<T>>::leak","value":"fn <'a> (b: Box<T>) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `Box`, returning a mutable reference,\n `&'a mut T`. Note that the type `T` must outlive the chosen lifetime\n `'a`. If the type has only static references, or none at all, then this\n may be chosen to be `'static`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `Box`, returning a mutable reference,","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33572,"byte_end":33636,"line_start":490,"line_end":490,"column_start":5,"column_end":69}},{"value":"/ `&'a mut T`. Note that the type `T` must outlive the chosen lifetime","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33641,"byte_end":33713,"line_start":491,"line_end":491,"column_start":5,"column_end":77}},{"value":"/ `'a`. If the type has only static references, or none at all, then this","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33718,"byte_end":33793,"line_start":492,"line_end":492,"column_start":5,"column_end":80}},{"value":"/ may be chosen to be `'static`.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33798,"byte_end":33832,"line_start":493,"line_end":493,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33837,"byte_end":33840,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ This function is mainly useful for data that lives for the remainder of","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33845,"byte_end":33920,"line_start":495,"line_end":495,"column_start":5,"column_end":80}},{"value":"/ the program's life. Dropping the returned reference will cause a memory","span":{"file_name":"src/liballoc/boxed.rs","byte_start":33925,"byte_end":34000,"line_start":496,"line_end":496,"column_start":5,"column_end":80}},{"value":"/ leak. If this is not acceptable, the reference should first be wrapped","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34005,"byte_end":34079,"line_start":497,"line_end":497,"column_start":5,"column_end":79}},{"value":"/ with the [`Box::from_raw`] function producing a `Box`. This `Box` can","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34084,"byte_end":34157,"line_start":498,"line_end":498,"column_start":5,"column_end":78}},{"value":"/ then be dropped which will properly destroy `T` and release the","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34162,"byte_end":34229,"line_start":499,"line_end":499,"column_start":5,"column_end":72}},{"value":"/ allocated memory.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34234,"byte_end":34255,"line_start":500,"line_end":500,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34260,"byte_end":34263,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Note: this is an associated function, which means that you have","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34268,"byte_end":34335,"line_start":502,"line_end":502,"column_start":5,"column_end":72}},{"value":"/ to call it as `Box::leak(b)` instead of `b.leak()`. This","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34340,"byte_end":34400,"line_start":503,"line_end":503,"column_start":5,"column_end":65}},{"value":"/ is so that there is no conflict with a method on the inner type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34405,"byte_end":34473,"line_start":504,"line_end":504,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34478,"byte_end":34481,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ [`Box::from_raw`]: struct.Box.html#method.from_raw","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34486,"byte_end":34540,"line_start":506,"line_end":506,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34545,"byte_end":34548,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34553,"byte_end":34567,"line_start":508,"line_end":508,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34572,"byte_end":34575,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ Simple usage:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34580,"byte_end":34597,"line_start":510,"line_end":510,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34602,"byte_end":34605,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34610,"byte_end":34617,"line_start":512,"line_end":512,"column_start":5,"column_end":12}},{"value":"/ let x = Box::new(41);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34622,"byte_end":34647,"line_start":513,"line_end":513,"column_start":5,"column_end":30}},{"value":"/ let static_ref: &'static mut usize = Box::leak(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34652,"byte_end":34706,"line_start":514,"line_end":514,"column_start":5,"column_end":59}},{"value":"/ *static_ref += 1;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34711,"byte_end":34732,"line_start":515,"line_end":515,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(*static_ref, 42);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34737,"byte_end":34769,"line_start":516,"line_end":516,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34774,"byte_end":34781,"line_start":517,"line_end":517,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34786,"byte_end":34789,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ Unsized data:","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34794,"byte_end":34811,"line_start":519,"line_end":519,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34816,"byte_end":34819,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34824,"byte_end":34831,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/ let x = vec![1, 2, 3].into_boxed_slice();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34836,"byte_end":34881,"line_start":522,"line_end":522,"column_start":5,"column_end":50}},{"value":"/ let static_ref = Box::leak(x);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34886,"byte_end":34920,"line_start":523,"line_end":523,"column_start":5,"column_end":39}},{"value":"/ static_ref[0] = 4;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34925,"byte_end":34947,"line_start":524,"line_end":524,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(*static_ref, [4, 2, 3]);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34952,"byte_end":34991,"line_start":525,"line_end":525,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":34996,"byte_end":35003,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"stable(feature = \"box_leak\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35008,"byte_end":35057,"line_start":527,"line_end":527,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35062,"byte_end":35071,"line_start":528,"line_end":528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":35504,"byte_end":35512,"line_start":542,"line_end":542,"column_start":12,"column_end":20},"name":"into_pin","qualname":"<Box<T>>::into_pin","value":"fn (boxed: Box<T>) -> Pin<Box<T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<T>` into a `Pin<Box<T>>`","sig":null,"attributes":[{"value":"/ Converts a `Box<T>` into a `Pin<Box<T>>`","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35252,"byte_end":35296,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35301,"byte_end":35304,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ This conversion does not allocate on the heap and happens in place.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35309,"byte_end":35380,"line_start":538,"line_end":538,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35385,"byte_end":35388,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ This is also available via [`From`].","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35393,"byte_end":35433,"line_start":540,"line_end":540,"column_start":5,"column_end":45}},{"value":"unstable(feature = \"box_into_pin\", issue = \"62370\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35438,"byte_end":35492,"line_start":541,"line_end":541,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":44267,"byte_end":44275,"line_start":862,"line_end":862,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Box<Any>>::downcast","value":"fn <T> (self) -> Result<Box<T>, Box<dyn Any>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the box to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43699,"byte_end":43708,"line_start":843,"line_end":843,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43713,"byte_end":43758,"line_start":844,"line_end":844,"column_start":5,"column_end":50}},{"value":"/ Attempt to downcast the box to a concrete type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43763,"byte_end":43814,"line_start":845,"line_end":845,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43819,"byte_end":43822,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43827,"byte_end":43841,"line_start":847,"line_end":847,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43846,"byte_end":43849,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43854,"byte_end":43861,"line_start":849,"line_end":849,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43866,"byte_end":43888,"line_start":850,"line_end":850,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43893,"byte_end":43896,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Box<dyn Any>) {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43901,"byte_end":43946,"line_start":852,"line_end":852,"column_start":5,"column_end":50}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43951,"byte_end":44007,"line_start":853,"line_end":853,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44012,"byte_end":44074,"line_start":854,"line_end":854,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44079,"byte_end":44088,"line_start":855,"line_end":855,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44093,"byte_end":44098,"line_start":856,"line_end":856,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44103,"byte_end":44106,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44111,"byte_end":44157,"line_start":858,"line_end":858,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Box::new(my_string));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44162,"byte_end":44203,"line_start":859,"line_end":859,"column_start":5,"column_end":46}},{"value":"/ print_if_string(Box::new(0i8));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44208,"byte_end":44243,"line_start":860,"line_end":860,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44248,"byte_end":44255,"line_start":861,"line_end":861,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":45161,"byte_end":45169,"line_start":894,"line_end":894,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Box<Any + Send>>::downcast","value":"fn <T> (self) -> Result<Box<T>, Box<dyn Any + Send>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the box to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44586,"byte_end":44595,"line_start":875,"line_end":875,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44600,"byte_end":44645,"line_start":876,"line_end":876,"column_start":5,"column_end":50}},{"value":"/ Attempt to downcast the box to a concrete type.","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44650,"byte_end":44701,"line_start":877,"line_end":877,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44706,"byte_end":44709,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44714,"byte_end":44728,"line_start":879,"line_end":879,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44733,"byte_end":44736,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44741,"byte_end":44748,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44753,"byte_end":44775,"line_start":882,"line_end":882,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44780,"byte_end":44783,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Box<dyn Any + Send>) {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44788,"byte_end":44840,"line_start":884,"line_end":884,"column_start":5,"column_end":57}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44845,"byte_end":44901,"line_start":885,"line_end":885,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44906,"byte_end":44968,"line_start":886,"line_end":886,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44973,"byte_end":44982,"line_start":887,"line_end":887,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44987,"byte_end":44992,"line_start":888,"line_end":888,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44997,"byte_end":45000,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45005,"byte_end":45051,"line_start":890,"line_end":890,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Box::new(my_string));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45056,"byte_end":45097,"line_start":891,"line_end":891,"column_start":5,"column_end":46}},{"value":"/ print_if_string(Box::new(0i8));","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45102,"byte_end":45137,"line_start":892,"line_end":892,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45142,"byte_end":45149,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":218},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47080,"byte_end":47084,"line_start":963,"line_end":963,"column_start":10,"column_end":14},"name":"Item","qualname":"::boxed::BoxIter::Item","value":"type Item;","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47093,"byte_end":47097,"line_start":964,"line_end":964,"column_start":8,"column_end":12},"name":"last","qualname":"::boxed::BoxIter::last","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":293},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"borrow","qualname":"::borrow","value":"src/liballoc/borrow.rs","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":312},{"krate":0,"index":316},{"krate":0,"index":321},{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":340},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":355},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":379},{"krate":0,"index":383},{"krate":0,"index":386}],"decl_id":null,"docs":" A module for working with borrowed data.\n","sig":null,"attributes":[{"value":"! A module for working with borrowed data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":52414,"byte_end":52458,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":52460,"byte_end":52506,"line_start":3,"line_end":3,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":312},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":53328,"byte_end":53335,"line_start":35,"line_end":35,"column_start":11,"column_end":18},"name":"ToOwned","qualname":"::borrow::ToOwned","value":"ToOwned","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"decl_id":null,"docs":" A generalization of `Clone` to borrowed data.","sig":null,"attributes":[{"value":"/ A generalization of `Clone` to borrowed data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":52953,"byte_end":53002,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53003,"byte_end":53006,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Some types make it possible to go from borrowed to owned, usually by","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53007,"byte_end":53079,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ implementing the `Clone` trait. But `Clone` works only for going from `&T`","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53080,"byte_end":53158,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ to `T`. The `ToOwned` trait generalizes `Clone` to construct owned data","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53159,"byte_end":53234,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ from any borrow of a given type.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53235,"byte_end":53271,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53272,"byte_end":53317,"line_start":34,"line_end":34,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":313},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":53451,"byte_end":53456,"line_start":38,"line_end":38,"column_start":10,"column_end":15},"name":"Owned","qualname":"::borrow::ToOwned::Owned","value":"type Owned: Borrow<Self>;","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" The resulting type after obtaining ownership.\n","sig":null,"attributes":[{"value":"/ The resulting type after obtaining ownership.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53342,"byte_end":53391,"line_start":36,"line_end":36,"column_start":5,"column_end":54}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53396,"byte_end":53441,"line_start":37,"line_end":37,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":53921,"byte_end":53929,"line_start":55,"line_end":55,"column_start":8,"column_end":16},"name":"to_owned","qualname":"::borrow::ToOwned::to_owned","value":"fn (&self) -> Self::Owned","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Creates owned data from borrowed data, usually by cloning.","sig":null,"attributes":[{"value":"/ Creates owned data from borrowed data, usually by cloning.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53477,"byte_end":53539,"line_start":40,"line_end":40,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53544,"byte_end":53547,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53552,"byte_end":53566,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53571,"byte_end":53574,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53579,"byte_end":53595,"line_start":44,"line_end":44,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53600,"byte_end":53603,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53608,"byte_end":53615,"line_start":46,"line_end":46,"column_start":5,"column_end":12}},{"value":"/ let s: &str = \"a\";","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53620,"byte_end":53642,"line_start":47,"line_end":47,"column_start":5,"column_end":27}},{"value":"/ let ss: String = s.to_owned();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53647,"byte_end":53681,"line_start":48,"line_end":48,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53686,"byte_end":53689,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ let v: &[i32] = &[1, 2];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53694,"byte_end":53722,"line_start":50,"line_end":50,"column_start":5,"column_end":33}},{"value":"/ let vv: Vec<i32> = v.to_owned();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53727,"byte_end":53763,"line_start":51,"line_end":51,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53768,"byte_end":53775,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53780,"byte_end":53825,"line_start":53,"line_end":53,"column_start":5,"column_end":50}},{"value":"must_use =\n  \"cloning is often expensive and is not expected to have side effects\"","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53830,"byte_end":53913,"line_start":54,"line_end":54,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":54496,"byte_end":54506,"line_start":74,"line_end":74,"column_start":8,"column_end":18},"name":"clone_into","qualname":"::borrow::ToOwned::clone_into","value":"fn (&self, target: &mut Self::Owned) -> ()","parent":{"krate":0,"index":312},"children":[],"decl_id":null,"docs":" Uses borrowed data to replace owned data, usually by cloning.","sig":null,"attributes":[{"value":"/ Uses borrowed data to replace owned data, usually by cloning.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":53958,"byte_end":54023,"line_start":57,"line_end":57,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54028,"byte_end":54031,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This is borrow-generalized version of `Clone::clone_from`.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54036,"byte_end":54098,"line_start":59,"line_end":59,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54103,"byte_end":54106,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54111,"byte_end":54125,"line_start":61,"line_end":61,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54130,"byte_end":54133,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54138,"byte_end":54154,"line_start":63,"line_end":63,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54159,"byte_end":54162,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54167,"byte_end":54174,"line_start":65,"line_end":65,"column_start":5,"column_end":12}},{"value":"/ # #![feature(toowned_clone_into)]","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54179,"byte_end":54216,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/ let mut s: String = String::new();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54221,"byte_end":54259,"line_start":67,"line_end":67,"column_start":5,"column_end":43}},{"value":"/ \"hello\".clone_into(&mut s);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54264,"byte_end":54295,"line_start":68,"line_end":68,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54300,"byte_end":54303,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<i32> = Vec::new();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54308,"byte_end":54345,"line_start":70,"line_end":70,"column_start":5,"column_end":42}},{"value":"/ [1, 2][..].clone_into(&mut v);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54350,"byte_end":54384,"line_start":71,"line_end":71,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54389,"byte_end":54396,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"toowned_clone_into\", reason = \"recently added\", issue =\n           \"41263\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54401,"byte_end":54488,"line_start":73,"line_end":73,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":324},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":57505,"byte_end":57513,"line_start":177,"line_end":177,"column_start":5,"column_end":13},"name":"Borrowed","qualname":"::borrow::Cow::Borrowed","value":"Cow::Borrowed(&'a B)","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" Borrowed data.\n","sig":null,"attributes":[{"value":"/ Borrowed data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57432,"byte_end":57450,"line_start":175,"line_end":175,"column_start":5,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57455,"byte_end":57500,"line_start":176,"line_end":176,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":327},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":57643,"byte_end":57648,"line_start":181,"line_end":181,"column_start":5,"column_end":10},"name":"Owned","qualname":"::borrow::Cow::Owned","value":"Cow::Owned(<B as ToOwned>::Owned)","parent":{"krate":0,"index":321},"children":[],"decl_id":null,"docs":" Owned data.\n","sig":null,"attributes":[{"value":"/ Owned data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57573,"byte_end":57588,"line_start":179,"line_end":179,"column_start":5,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57593,"byte_end":57638,"line_start":180,"line_end":180,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":321},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":57380,"byte_end":57383,"line_start":171,"line_end":171,"column_start":10,"column_end":13},"name":"Cow","qualname":"::borrow::Cow","value":"Cow::{Borrowed, Owned}","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":327}],"decl_id":null,"docs":" A clone-on-write smart pointer.","sig":null,"attributes":[{"value":"/ A clone-on-write smart pointer.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54839,"byte_end":54874,"line_start":94,"line_end":94,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54875,"byte_end":54878,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ The type `Cow` is a smart pointer providing clone-on-write functionality: it","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54879,"byte_end":54959,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ can enclose and provide immutable access to borrowed data, and clone the","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54960,"byte_end":55036,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ data lazily when mutation or ownership is required. The type is designed to","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55037,"byte_end":55116,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ work with general borrowed data via the `Borrow` trait.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55117,"byte_end":55176,"line_start":99,"line_end":99,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55177,"byte_end":55180,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `Cow` implements `Deref`, which means that you can call","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55181,"byte_end":55240,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/ non-mutating methods directly on the data it encloses. If mutation","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55241,"byte_end":55311,"line_start":102,"line_end":102,"column_start":1,"column_end":71}},{"value":"/ is desired, `to_mut` will obtain a mutable reference to an owned","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55312,"byte_end":55380,"line_start":103,"line_end":103,"column_start":1,"column_end":69}},{"value":"/ value, cloning if necessary.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55381,"byte_end":55413,"line_start":104,"line_end":104,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55414,"byte_end":55417,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55418,"byte_end":55432,"line_start":106,"line_end":106,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55433,"byte_end":55436,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55437,"byte_end":55444,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55445,"byte_end":55470,"line_start":109,"line_end":109,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55471,"byte_end":55474,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ fn abs_all(input: &mut Cow<[i32]>) {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55475,"byte_end":55515,"line_start":111,"line_end":111,"column_start":1,"column_end":41}},{"value":"/     for i in 0..input.len() {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55516,"byte_end":55549,"line_start":112,"line_end":112,"column_start":1,"column_end":34}},{"value":"/         let v = input[i];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55550,"byte_end":55579,"line_start":113,"line_end":113,"column_start":1,"column_end":30}},{"value":"/         if v < 0 {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55580,"byte_end":55602,"line_start":114,"line_end":114,"column_start":1,"column_end":23}},{"value":"/             // Clones into a vector if not already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55603,"byte_end":55664,"line_start":115,"line_end":115,"column_start":1,"column_end":62}},{"value":"/             input.to_mut()[i] = -v;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55665,"byte_end":55704,"line_start":116,"line_end":116,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55705,"byte_end":55718,"line_start":117,"line_end":117,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55719,"byte_end":55728,"line_start":118,"line_end":118,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55729,"byte_end":55734,"line_start":119,"line_end":119,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55735,"byte_end":55738,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ // No clone occurs because `input` doesn't need to be mutated.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55739,"byte_end":55805,"line_start":121,"line_end":121,"column_start":1,"column_end":67}},{"value":"/ let slice = [0, 1, 2];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55806,"byte_end":55832,"line_start":122,"line_end":122,"column_start":1,"column_end":27}},{"value":"/ let mut input = Cow::from(&slice[..]);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55833,"byte_end":55875,"line_start":123,"line_end":123,"column_start":1,"column_end":43}},{"value":"/ abs_all(&mut input);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55876,"byte_end":55900,"line_start":124,"line_end":124,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55901,"byte_end":55904,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ // Clone occurs because `input` needs to be mutated.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55905,"byte_end":55961,"line_start":126,"line_end":126,"column_start":1,"column_end":57}},{"value":"/ let slice = [-1, 0, 1];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55962,"byte_end":55989,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"/ let mut input = Cow::from(&slice[..]);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":55990,"byte_end":56032,"line_start":128,"line_end":128,"column_start":1,"column_end":43}},{"value":"/ abs_all(&mut input);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56033,"byte_end":56057,"line_start":129,"line_end":129,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56058,"byte_end":56061,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // No clone occurs because `input` is already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56062,"byte_end":56118,"line_start":131,"line_end":131,"column_start":1,"column_end":57}},{"value":"/ let mut input = Cow::from(vec![-1, 0, 1]);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56119,"byte_end":56165,"line_start":132,"line_end":132,"column_start":1,"column_end":47}},{"value":"/ abs_all(&mut input);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56166,"byte_end":56190,"line_start":133,"line_end":133,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56191,"byte_end":56198,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56199,"byte_end":56202,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Another example showing how to keep `Cow` in a struct:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56203,"byte_end":56261,"line_start":136,"line_end":136,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56262,"byte_end":56265,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56266,"byte_end":56273,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56274,"byte_end":56299,"line_start":139,"line_end":139,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56300,"byte_end":56303,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ struct Items<'a, X: 'a> where [X]: ToOwned<Owned = Vec<X>> {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56304,"byte_end":56368,"line_start":141,"line_end":141,"column_start":1,"column_end":65}},{"value":"/     values: Cow<'a, [X]>,","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56369,"byte_end":56398,"line_start":142,"line_end":142,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56399,"byte_end":56404,"line_start":143,"line_end":143,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56405,"byte_end":56408,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ impl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned = Vec<X>> {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56409,"byte_end":56486,"line_start":145,"line_end":145,"column_start":1,"column_end":78}},{"value":"/     fn new(v: Cow<'a, [X]>) -> Self {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56487,"byte_end":56528,"line_start":146,"line_end":146,"column_start":1,"column_end":42}},{"value":"/         Items { values: v }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56529,"byte_end":56560,"line_start":147,"line_end":147,"column_start":1,"column_end":32}},{"value":"/     }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56561,"byte_end":56570,"line_start":148,"line_end":148,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56571,"byte_end":56576,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56577,"byte_end":56580,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ // Creates a container from borrowed values of a slice","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56581,"byte_end":56639,"line_start":151,"line_end":151,"column_start":1,"column_end":59}},{"value":"/ let readonly = [1, 2];","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56640,"byte_end":56666,"line_start":152,"line_end":152,"column_start":1,"column_end":27}},{"value":"/ let borrowed = Items::new((&readonly[..]).into());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56667,"byte_end":56721,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/ match borrowed {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56722,"byte_end":56742,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/     Items { values: Cow::Borrowed(b) } => println!(\"borrowed {:?}\", b),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56743,"byte_end":56818,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/     _ => panic!(\"expect borrowed value\"),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56819,"byte_end":56864,"line_start":156,"line_end":156,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56865,"byte_end":56870,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56871,"byte_end":56874,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ let mut clone_on_write = borrowed;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56875,"byte_end":56913,"line_start":159,"line_end":159,"column_start":1,"column_end":39}},{"value":"/ // Mutates the data from slice into owned vec and pushes a new value on top","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56914,"byte_end":56993,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ clone_on_write.values.to_mut().push(3);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":56994,"byte_end":57037,"line_start":161,"line_end":161,"column_start":1,"column_end":44}},{"value":"/ println!(\"clone_on_write = {:?}\", clone_on_write.values);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57038,"byte_end":57099,"line_start":162,"line_end":162,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57100,"byte_end":57103,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ // The data was mutated. Let check it out.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57104,"byte_end":57150,"line_start":164,"line_end":164,"column_start":1,"column_end":47}},{"value":"/ match clone_on_write {","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57151,"byte_end":57177,"line_start":165,"line_end":165,"column_start":1,"column_end":27}},{"value":"/     Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57178,"byte_end":57268,"line_start":166,"line_end":166,"column_start":1,"column_end":91}},{"value":"/     _ => panic!(\"expect owned data\"),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57269,"byte_end":57310,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57311,"byte_end":57316,"line_start":168,"line_end":168,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57317,"byte_end":57324,"line_start":169,"line_end":169,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57325,"byte_end":57370,"line_start":170,"line_end":170,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":58796,"byte_end":58807,"line_start":220,"line_end":220,"column_start":12,"column_end":23},"name":"is_borrowed","qualname":"<Cow>::is_borrowed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the data is borrowed, i.e. if `to_mut` would require additional work.","sig":null,"attributes":[{"value":"/ Returns true if the data is borrowed, i.e. if `to_mut` would require additional work.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58309,"byte_end":58398,"line_start":205,"line_end":205,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58403,"byte_end":58406,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58411,"byte_end":58425,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58430,"byte_end":58433,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58438,"byte_end":58445,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ #![feature(cow_is_borrowed)]","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58450,"byte_end":58482,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58487,"byte_end":58512,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58517,"byte_end":58520,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let cow = Cow::Borrowed(\"moo\");","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58525,"byte_end":58560,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/ assert!(cow.is_borrowed());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58565,"byte_end":58596,"line_start":214,"line_end":214,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58601,"byte_end":58604,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ let bull: Cow<'_, str> = Cow::Owned(\"...moo?\".to_string());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58609,"byte_end":58672,"line_start":216,"line_end":216,"column_start":5,"column_end":68}},{"value":"/ assert!(!bull.is_borrowed());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58677,"byte_end":58710,"line_start":217,"line_end":217,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58715,"byte_end":58722,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"cow_is_borrowed\", issue = \"65143\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58727,"byte_end":58784,"line_start":219,"line_end":219,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":59397,"byte_end":59405,"line_start":242,"line_end":242,"column_start":12,"column_end":20},"name":"is_owned","qualname":"<Cow>::is_owned","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the data is owned, i.e. if `to_mut` would be a no-op.","sig":null,"attributes":[{"value":"/ Returns true if the data is owned, i.e. if `to_mut` would be a no-op.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58932,"byte_end":59005,"line_start":227,"line_end":227,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59010,"byte_end":59013,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59018,"byte_end":59032,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59037,"byte_end":59040,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59045,"byte_end":59052,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ #![feature(cow_is_borrowed)]","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59057,"byte_end":59089,"line_start":232,"line_end":232,"column_start":5,"column_end":37}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59094,"byte_end":59119,"line_start":233,"line_end":233,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59124,"byte_end":59127,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ let cow: Cow<'_, str> = Cow::Owned(\"moo\".to_string());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59132,"byte_end":59190,"line_start":235,"line_end":235,"column_start":5,"column_end":63}},{"value":"/ assert!(cow.is_owned());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59195,"byte_end":59223,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59228,"byte_end":59231,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let bull = Cow::Borrowed(\"...moo?\");","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59236,"byte_end":59276,"line_start":238,"line_end":238,"column_start":5,"column_end":45}},{"value":"/ assert!(!bull.is_owned());","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59281,"byte_end":59311,"line_start":239,"line_end":239,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59316,"byte_end":59323,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"cow_is_borrowed\", issue = \"65143\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59328,"byte_end":59385,"line_start":241,"line_end":241,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":59941,"byte_end":59947,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"to_mut","qualname":"<Cow>::to_mut","value":"fn (&mut self) -> &mut <B as ToOwned>::Owned","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the owned form of the data.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the owned form of the data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59462,"byte_end":59525,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59530,"byte_end":59533,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Clones the data if it is not already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59538,"byte_end":59585,"line_start":248,"line_end":248,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59590,"byte_end":59593,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59598,"byte_end":59612,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59617,"byte_end":59620,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59625,"byte_end":59632,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59637,"byte_end":59662,"line_start":253,"line_end":253,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59667,"byte_end":59670,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let mut cow = Cow::Borrowed(\"foo\");","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59675,"byte_end":59714,"line_start":255,"line_end":255,"column_start":5,"column_end":44}},{"value":"/ cow.to_mut().make_ascii_uppercase();","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59719,"byte_end":59759,"line_start":256,"line_end":256,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59764,"byte_end":59767,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59772,"byte_end":59787,"line_start":258,"line_end":258,"column_start":5,"column_end":20}},{"value":"/   cow,","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59792,"byte_end":59802,"line_start":259,"line_end":259,"column_start":5,"column_end":15}},{"value":"/   Cow::Owned(String::from(\"FOO\")) as Cow<str>","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59807,"byte_end":59856,"line_start":260,"line_end":260,"column_start":5,"column_end":54}},{"value":"/ );","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59861,"byte_end":59867,"line_start":261,"line_end":261,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59872,"byte_end":59879,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":59884,"byte_end":59929,"line_start":263,"line_end":263,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"src/liballoc/borrow.rs","byte_start":61178,"byte_end":61188,"line_start":312,"line_end":312,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Cow>::into_owned","value":"fn (self) -> <B as ToOwned>::Owned","parent":null,"children":[],"decl_id":null,"docs":" Extracts the owned data.","sig":null,"attributes":[{"value":"/ Extracts the owned data.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60330,"byte_end":60358,"line_start":277,"line_end":277,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60363,"byte_end":60366,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Clones the data if it is not already owned.","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60371,"byte_end":60418,"line_start":279,"line_end":279,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60423,"byte_end":60426,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60431,"byte_end":60445,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60450,"byte_end":60453,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Calling `into_owned` on a `Cow::Borrowed` clones the underlying data","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60458,"byte_end":60530,"line_start":283,"line_end":283,"column_start":5,"column_end":77}},{"value":"/ and becomes a `Cow::Owned`:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60535,"byte_end":60566,"line_start":284,"line_end":284,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60571,"byte_end":60574,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60579,"byte_end":60586,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60591,"byte_end":60616,"line_start":287,"line_end":287,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60621,"byte_end":60624,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let s = \"Hello world!\";","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60629,"byte_end":60656,"line_start":289,"line_end":289,"column_start":5,"column_end":32}},{"value":"/ let cow = Cow::Borrowed(s);","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60661,"byte_end":60692,"line_start":290,"line_end":290,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60697,"byte_end":60700,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60705,"byte_end":60720,"line_start":292,"line_end":292,"column_start":5,"column_end":20}},{"value":"/   cow.into_owned(),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60725,"byte_end":60748,"line_start":293,"line_end":293,"column_start":5,"column_end":28}},{"value":"/   String::from(s)","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60753,"byte_end":60774,"line_start":294,"line_end":294,"column_start":5,"column_end":26}},{"value":"/ );","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60779,"byte_end":60785,"line_start":295,"line_end":295,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60790,"byte_end":60797,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60802,"byte_end":60805,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Calling `into_owned` on a `Cow::Owned` is a no-op:","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60810,"byte_end":60864,"line_start":298,"line_end":298,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60869,"byte_end":60872,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60877,"byte_end":60884,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60889,"byte_end":60914,"line_start":301,"line_end":301,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60919,"byte_end":60922,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ let s = \"Hello world!\";","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60927,"byte_end":60954,"line_start":303,"line_end":303,"column_start":5,"column_end":32}},{"value":"/ let cow: Cow<str> = Cow::Owned(String::from(s));","span":{"file_name":"src/liballoc/borrow.rs","byte_start":60959,"byte_end":61011,"line_start":304,"line_end":304,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61016,"byte_end":61019,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61024,"byte_end":61039,"line_start":306,"line_end":306,"column_start":5,"column_end":20}},{"value":"/   cow.into_owned(),","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61044,"byte_end":61067,"line_start":307,"line_end":307,"column_start":5,"column_end":28}},{"value":"/   String::from(s)","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61072,"byte_end":61093,"line_start":308,"line_end":308,"column_start":5,"column_end":26}},{"value":"/ );","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61098,"byte_end":61104,"line_start":309,"line_end":309,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61109,"byte_end":61116,"line_start":310,"line_end":310,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61121,"byte_end":61166,"line_start":311,"line_end":311,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":389},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"src/liballoc/collections/mod.rs","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":617},{"krate":0,"index":1873},{"krate":0,"index":2198},{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2557},{"krate":0,"index":2558},{"krate":0,"index":2559},{"krate":0,"index":4526},{"krate":0,"index":4541},{"krate":0,"index":4537},{"krate":0,"index":4538},{"krate":0,"index":4534},{"krate":0,"index":4535},{"krate":0,"index":4532},{"krate":0,"index":2562},{"krate":0,"index":2564}],"decl_id":null,"docs":" Collection types.\n","sig":null,"attributes":[{"value":"! Collection types.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65390,"byte_end":65411,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65413,"byte_end":65459,"line_start":3,"line_end":3,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":390},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"src/liballoc/collections/binary_heap.rs","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":396},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":462},{"krate":0,"index":477},{"krate":0,"index":483},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":511},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":4325},{"krate":0,"index":4328},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":4331},{"krate":0,"index":4337},{"krate":0,"index":4334},{"krate":0,"index":536},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":4340},{"krate":0,"index":4344},{"krate":0,"index":547},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":4348},{"krate":0,"index":4352},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":585},{"krate":0,"index":590},{"krate":0,"index":596},{"krate":0,"index":600},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":612}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"! A priority queue implemented with a binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":67713,"byte_end":67765,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":67766,"byte_end":67769,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Insertion and popping the largest element have `O(log n)` time complexity.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":67770,"byte_end":67848,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! Checking the largest element is `O(1)`. Converting a vector to a binary heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":67849,"byte_end":67929,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"! can be done in-place, and has `O(n)` complexity. A binary heap can also be","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":67930,"byte_end":68008,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"! converted to a sorted vector in-place, allowing it to be used for an `O(n","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68009,"byte_end":68086,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"! log n)` in-place heapsort.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68087,"byte_end":68117,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68118,"byte_end":68121,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68122,"byte_end":68136,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68137,"byte_end":68140,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This is a larger example that implements [Dijkstra's algorithm][dijkstra]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68141,"byte_end":68218,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"! to solve the [shortest path problem][sssp] on a [directed graph][dir_graph].","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68219,"byte_end":68299,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"! It shows how to use [`BinaryHeap`] with custom types.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68300,"byte_end":68357,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68358,"byte_end":68361,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! [dijkstra]: http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68362,"byte_end":68429,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"! [sssp]: http://en.wikipedia.org/wiki/Shortest_path_problem","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68430,"byte_end":68492,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"! [dir_graph]: http://en.wikipedia.org/wiki/Directed_graph","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68493,"byte_end":68553,"line_start":17,"line_end":17,"column_start":1,"column_end":61}},{"value":"! [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68554,"byte_end":68596,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68597,"byte_end":68600,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68601,"byte_end":68608,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"! use std::cmp::Ordering;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68609,"byte_end":68636,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"! use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68637,"byte_end":68674,"line_start":22,"line_end":22,"column_start":1,"column_end":38}},{"value":"! use std::usize;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68675,"byte_end":68694,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68695,"byte_end":68698,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! #[derive(Copy, Clone, Eq, PartialEq)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68699,"byte_end":68740,"line_start":25,"line_end":25,"column_start":1,"column_end":42}},{"value":"! struct State {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68741,"byte_end":68759,"line_start":26,"line_end":26,"column_start":1,"column_end":19}},{"value":"!     cost: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68760,"byte_end":68780,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"!     position: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68781,"byte_end":68805,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68806,"byte_end":68811,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68812,"byte_end":68815,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! // The priority queue depends on `Ord`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68816,"byte_end":68859,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"! // Explicitly implement the trait so the queue becomes a min-heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68860,"byte_end":68929,"line_start":32,"line_end":32,"column_start":1,"column_end":70}},{"value":"! // instead of a max-heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68930,"byte_end":68959,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"! impl Ord for State {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68960,"byte_end":68984,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"!     fn cmp(&self, other: &State) -> Ordering {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":68985,"byte_end":69035,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"!         // Notice that the we flip the ordering on costs.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69036,"byte_end":69097,"line_start":36,"line_end":36,"column_start":1,"column_end":62}},{"value":"!         // In case of a tie we compare positions - this step is necessary","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69098,"byte_end":69175,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"!         // to make implementations of `PartialEq` and `Ord` consistent.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69176,"byte_end":69251,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"!         other.cost.cmp(&self.cost)","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69252,"byte_end":69290,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"!             .then_with(|| self.position.cmp(&other.position))","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69291,"byte_end":69356,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"!     }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69357,"byte_end":69366,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69367,"byte_end":69372,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69373,"byte_end":69376,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! // `PartialOrd` needs to be implemented as well.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69377,"byte_end":69429,"line_start":44,"line_end":44,"column_start":1,"column_end":53}},{"value":"! impl PartialOrd for State {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69430,"byte_end":69461,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"!     fn partial_cmp(&self, other: &State) -> Option<Ordering> {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69462,"byte_end":69528,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"!         Some(self.cmp(other))","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69529,"byte_end":69562,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"!     }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69563,"byte_end":69572,"line_start":48,"line_end":48,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69573,"byte_end":69578,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69579,"byte_end":69582,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! // Each node is represented as an `usize`, for a shorter implementation.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69583,"byte_end":69659,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"! struct Edge {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69660,"byte_end":69677,"line_start":52,"line_end":52,"column_start":1,"column_end":18}},{"value":"!     node: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69678,"byte_end":69698,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"!     cost: usize,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69699,"byte_end":69719,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69720,"byte_end":69725,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69726,"byte_end":69729,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! // Dijkstra's shortest path algorithm.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69730,"byte_end":69772,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69773,"byte_end":69776,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! // Start at `start` and use `dist` to track the current shortest distance","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69777,"byte_end":69854,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"! // to each node. This implementation isn't memory-efficient as it may leave duplicate","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69855,"byte_end":69944,"line_start":60,"line_end":60,"column_start":1,"column_end":90}},{"value":"! // nodes in the queue. It also uses `usize::MAX` as a sentinel value,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":69945,"byte_end":70018,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"! // for a simpler implementation.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70019,"byte_end":70055,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"! fn shortest_path(adj_list: &Vec<Vec<Edge>>, start: usize, goal: usize) -> Option<usize> {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70056,"byte_end":70149,"line_start":63,"line_end":63,"column_start":1,"column_end":94}},{"value":"!     // dist[node] = current shortest distance from `start` to `node`","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70150,"byte_end":70222,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"!     let mut dist: Vec<_> = (0..adj_list.len()).map(|_| usize::MAX).collect();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70223,"byte_end":70304,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70305,"byte_end":70308,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"!     let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70309,"byte_end":70350,"line_start":67,"line_end":67,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70351,"byte_end":70354,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"!     // We're at `start`, with a zero cost","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70355,"byte_end":70400,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"!     dist[start] = 0;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70401,"byte_end":70425,"line_start":70,"line_end":70,"column_start":1,"column_end":25}},{"value":"!     heap.push(State { cost: 0, position: start });","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70426,"byte_end":70480,"line_start":71,"line_end":71,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70481,"byte_end":70484,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"!     // Examine the frontier with lower cost nodes first (min-heap)","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70485,"byte_end":70555,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"!     while let Some(State { cost, position }) = heap.pop() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70556,"byte_end":70619,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"!         // Alternatively we could have continued to find all shortest paths","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70620,"byte_end":70699,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"!         if position == goal { return Some(cost); }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70700,"byte_end":70754,"line_start":76,"line_end":76,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70755,"byte_end":70758,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"!         // Important as we may have already found a better way","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70759,"byte_end":70825,"line_start":78,"line_end":78,"column_start":1,"column_end":67}},{"value":"!         if cost > dist[position] { continue; }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70826,"byte_end":70876,"line_start":79,"line_end":79,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70877,"byte_end":70880,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"!         // For each node we can reach, see if we can find a way with","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70881,"byte_end":70953,"line_start":81,"line_end":81,"column_start":1,"column_end":73}},{"value":"!         // a lower cost going through this node","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":70954,"byte_end":71005,"line_start":82,"line_end":82,"column_start":1,"column_end":52}},{"value":"!         for edge in &adj_list[position] {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71006,"byte_end":71051,"line_start":83,"line_end":83,"column_start":1,"column_end":46}},{"value":"!             let next = State { cost: cost + edge.cost, position: edge.node };","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71052,"byte_end":71133,"line_start":84,"line_end":84,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71134,"byte_end":71137,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"!             // If so, add it to the frontier and continue","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71138,"byte_end":71199,"line_start":86,"line_end":86,"column_start":1,"column_end":62}},{"value":"!             if next.cost < dist[next.position] {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71200,"byte_end":71252,"line_start":87,"line_end":87,"column_start":1,"column_end":53}},{"value":"!                 heap.push(next);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71253,"byte_end":71289,"line_start":88,"line_end":88,"column_start":1,"column_end":37}},{"value":"!                 // Relaxation, we have now found a better way","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71290,"byte_end":71355,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"!                 dist[next.position] = next.cost;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71356,"byte_end":71408,"line_start":90,"line_end":90,"column_start":1,"column_end":53}},{"value":"!             }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71409,"byte_end":71426,"line_start":91,"line_end":91,"column_start":1,"column_end":18}},{"value":"!         }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71427,"byte_end":71440,"line_start":92,"line_end":92,"column_start":1,"column_end":14}},{"value":"!     }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71441,"byte_end":71450,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71451,"byte_end":71454,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"!     // Goal not reachable","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71455,"byte_end":71484,"line_start":95,"line_end":95,"column_start":1,"column_end":30}},{"value":"!     None","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71485,"byte_end":71497,"line_start":96,"line_end":96,"column_start":1,"column_end":13}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71498,"byte_end":71503,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71504,"byte_end":71507,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71508,"byte_end":71523,"line_start":99,"line_end":99,"column_start":1,"column_end":16}},{"value":"!     // This is the directed graph we're going to use.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71524,"byte_end":71581,"line_start":100,"line_end":100,"column_start":1,"column_end":58}},{"value":"!     // The node numbers correspond to the different states,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71582,"byte_end":71645,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"!     // and the edge weights symbolize the cost of moving","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71646,"byte_end":71706,"line_start":102,"line_end":102,"column_start":1,"column_end":61}},{"value":"!     // from one node to another.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71707,"byte_end":71743,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"!     // Note that the edges are one-way.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71744,"byte_end":71787,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"!     //","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71788,"byte_end":71798,"line_start":105,"line_end":105,"column_start":1,"column_end":11}},{"value":"!     //                  7","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71799,"byte_end":71828,"line_start":106,"line_end":106,"column_start":1,"column_end":30}},{"value":"!     //          +-----------------+","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71829,"byte_end":71868,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"!     //          |                 |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71869,"byte_end":71908,"line_start":108,"line_end":108,"column_start":1,"column_end":40}},{"value":"!     //          v   1        2    |  2","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71909,"byte_end":71951,"line_start":109,"line_end":109,"column_start":1,"column_end":43}},{"value":"!     //          0 -----> 1 -----> 3 ---> 4","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71952,"byte_end":71998,"line_start":110,"line_end":110,"column_start":1,"column_end":47}},{"value":"!     //          |        ^        ^      ^","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":71999,"byte_end":72045,"line_start":111,"line_end":111,"column_start":1,"column_end":47}},{"value":"!     //          |        | 1      |      |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72046,"byte_end":72092,"line_start":112,"line_end":112,"column_start":1,"column_end":47}},{"value":"!     //          |        |        | 3    | 1","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72093,"byte_end":72141,"line_start":113,"line_end":113,"column_start":1,"column_end":49}},{"value":"!     //          +------> 2 -------+      |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72142,"byte_end":72188,"line_start":114,"line_end":114,"column_start":1,"column_end":47}},{"value":"!     //           10      |               |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72189,"byte_end":72235,"line_start":115,"line_end":115,"column_start":1,"column_end":47}},{"value":"!     //                   +---------------+","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72236,"byte_end":72282,"line_start":116,"line_end":116,"column_start":1,"column_end":47}},{"value":"!     //","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72283,"byte_end":72293,"line_start":117,"line_end":117,"column_start":1,"column_end":11}},{"value":"!     // The graph is represented as an adjacency list where each index,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72294,"byte_end":72368,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"!     // corresponding to a node value, has a list of outgoing edges.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72369,"byte_end":72440,"line_start":119,"line_end":119,"column_start":1,"column_end":72}},{"value":"!     // Chosen for its efficiency.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72441,"byte_end":72478,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"!     let graph = vec![","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72479,"byte_end":72504,"line_start":121,"line_end":121,"column_start":1,"column_end":26}},{"value":"!         // Node 0","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72505,"byte_end":72526,"line_start":122,"line_end":122,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 2, cost: 10 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72527,"byte_end":72571,"line_start":123,"line_end":123,"column_start":1,"column_end":45}},{"value":"!              Edge { node: 1, cost: 1 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72572,"byte_end":72616,"line_start":124,"line_end":124,"column_start":1,"column_end":45}},{"value":"!         // Node 1","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72617,"byte_end":72638,"line_start":125,"line_end":125,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 3, cost: 2 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72639,"byte_end":72683,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"!         // Node 2","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72684,"byte_end":72705,"line_start":127,"line_end":127,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 1, cost: 1 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72706,"byte_end":72749,"line_start":128,"line_end":128,"column_start":1,"column_end":44}},{"value":"!              Edge { node: 3, cost: 3 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72750,"byte_end":72793,"line_start":129,"line_end":129,"column_start":1,"column_end":44}},{"value":"!              Edge { node: 4, cost: 1 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72794,"byte_end":72838,"line_start":130,"line_end":130,"column_start":1,"column_end":45}},{"value":"!         // Node 3","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72839,"byte_end":72860,"line_start":131,"line_end":131,"column_start":1,"column_end":22}},{"value":"!         vec![Edge { node: 0, cost: 7 },","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72861,"byte_end":72904,"line_start":132,"line_end":132,"column_start":1,"column_end":44}},{"value":"!              Edge { node: 4, cost: 2 }],","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72905,"byte_end":72949,"line_start":133,"line_end":133,"column_start":1,"column_end":45}},{"value":"!         // Node 4","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72950,"byte_end":72971,"line_start":134,"line_end":134,"column_start":1,"column_end":22}},{"value":"!         vec![]];","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72972,"byte_end":72992,"line_start":135,"line_end":135,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72993,"byte_end":72996,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"!     assert_eq!(shortest_path(&graph, 0, 1), Some(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":72997,"byte_end":73054,"line_start":137,"line_end":137,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 0, 3), Some(3));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73055,"byte_end":73112,"line_start":138,"line_end":138,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 3, 0), Some(7));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73113,"byte_end":73170,"line_start":139,"line_end":139,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 0, 4), Some(5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73171,"byte_end":73228,"line_start":140,"line_end":140,"column_start":1,"column_end":58}},{"value":"!     assert_eq!(shortest_path(&graph, 4, 0), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73229,"byte_end":73283,"line_start":141,"line_end":141,"column_start":1,"column_end":55}},{"value":"! }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73284,"byte_end":73289,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73290,"byte_end":73297,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"allow(missing_docs)","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73299,"byte_end":73322,"line_start":145,"line_end":145,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73323,"byte_end":73369,"line_start":146,"line_end":146,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":409},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76364,"byte_end":76374,"line_start":249,"line_end":249,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::collections::binary_heap::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":411}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73613,"byte_end":73665,"line_start":159,"line_end":159,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73666,"byte_end":73669,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ This will be a max-heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73670,"byte_end":73698,"line_start":161,"line_end":161,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73699,"byte_end":73702,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73703,"byte_end":73776,"line_start":163,"line_end":163,"column_start":1,"column_end":74}},{"value":"/ item's ordering relative to any other item, as determined by the `Ord`","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73777,"byte_end":73851,"line_start":164,"line_end":164,"column_start":1,"column_end":75}},{"value":"/ trait, changes while it is in the heap. This is normally only possible","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73852,"byte_end":73926,"line_start":165,"line_end":165,"column_start":1,"column_end":75}},{"value":"/ through `Cell`, `RefCell`, global state, I/O, or unsafe code.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73927,"byte_end":73992,"line_start":166,"line_end":166,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73993,"byte_end":73996,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":73997,"byte_end":74011,"line_start":168,"line_end":168,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74012,"byte_end":74015,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74016,"byte_end":74023,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74024,"byte_end":74061,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74062,"byte_end":74065,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74066,"byte_end":74134,"line_start":173,"line_end":173,"column_start":1,"column_end":69}},{"value":"/ // would be `BinaryHeap<i32>` in this example).","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74135,"byte_end":74186,"line_start":174,"line_end":174,"column_start":1,"column_end":52}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74187,"byte_end":74224,"line_start":175,"line_end":175,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74225,"byte_end":74228,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ // We can use peek to look at the next item in the heap. In this case,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74229,"byte_end":74303,"line_start":177,"line_end":177,"column_start":1,"column_end":75}},{"value":"/ // there's no items in there yet so we get None.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74304,"byte_end":74356,"line_start":178,"line_end":178,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74357,"byte_end":74391,"line_start":179,"line_end":179,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74392,"byte_end":74395,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ // Let's add some scores...","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74396,"byte_end":74427,"line_start":181,"line_end":181,"column_start":1,"column_end":32}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74428,"byte_end":74445,"line_start":182,"line_end":182,"column_start":1,"column_end":18}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74446,"byte_end":74463,"line_start":183,"line_end":183,"column_start":1,"column_end":18}},{"value":"/ heap.push(2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74464,"byte_end":74481,"line_start":184,"line_end":184,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74482,"byte_end":74485,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ // Now peek shows the most important item in the heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74486,"byte_end":74544,"line_start":186,"line_end":186,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74545,"byte_end":74583,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74584,"byte_end":74587,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ // We can check the length of a heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74588,"byte_end":74629,"line_start":189,"line_end":189,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74630,"byte_end":74660,"line_start":190,"line_end":190,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74661,"byte_end":74664,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ // We can iterate over the items in the heap, although they are returned in","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74665,"byte_end":74744,"line_start":192,"line_end":192,"column_start":1,"column_end":80}},{"value":"/ // a random order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74745,"byte_end":74767,"line_start":193,"line_end":193,"column_start":1,"column_end":23}},{"value":"/ for x in &heap {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74768,"byte_end":74788,"line_start":194,"line_end":194,"column_start":1,"column_end":21}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74789,"byte_end":74815,"line_start":195,"line_end":195,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74816,"byte_end":74821,"line_start":196,"line_end":196,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74822,"byte_end":74825,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ // If we instead pop these scores, they should come back in order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74826,"byte_end":74896,"line_start":198,"line_end":198,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(heap.pop(), Some(5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74897,"byte_end":74933,"line_start":199,"line_end":199,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(2));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74934,"byte_end":74970,"line_start":200,"line_end":200,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":74971,"byte_end":75007,"line_start":201,"line_end":201,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75008,"byte_end":75041,"line_start":202,"line_end":202,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75042,"byte_end":75045,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ // We can clear the heap of any remaining items.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75046,"byte_end":75098,"line_start":204,"line_end":204,"column_start":1,"column_end":53}},{"value":"/ heap.clear();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75099,"byte_end":75116,"line_start":205,"line_end":205,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75117,"byte_end":75120,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ // The heap should now be empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75121,"byte_end":75157,"line_start":207,"line_end":207,"column_start":1,"column_end":37}},{"value":"/ assert!(heap.is_empty())","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75158,"byte_end":75186,"line_start":208,"line_end":208,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75187,"byte_end":75194,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75195,"byte_end":75198,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ## Min-heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75199,"byte_end":75214,"line_start":211,"line_end":211,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75215,"byte_end":75218,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Either `std::cmp::Reverse` or a custom `Ord` implementation can be used to","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75219,"byte_end":75297,"line_start":213,"line_end":213,"column_start":1,"column_end":79}},{"value":"/ make `BinaryHeap` a min-heap. This makes `heap.pop()` return the smallest","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75298,"byte_end":75375,"line_start":214,"line_end":214,"column_start":1,"column_end":78}},{"value":"/ value instead of the greatest one.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75376,"byte_end":75414,"line_start":215,"line_end":215,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75415,"byte_end":75418,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75419,"byte_end":75426,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75427,"byte_end":75464,"line_start":218,"line_end":218,"column_start":1,"column_end":38}},{"value":"/ use std::cmp::Reverse;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75465,"byte_end":75491,"line_start":219,"line_end":219,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75492,"byte_end":75495,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75496,"byte_end":75533,"line_start":221,"line_end":221,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75534,"byte_end":75537,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ // Wrap values in `Reverse`","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75538,"byte_end":75569,"line_start":223,"line_end":223,"column_start":1,"column_end":32}},{"value":"/ heap.push(Reverse(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75570,"byte_end":75596,"line_start":224,"line_end":224,"column_start":1,"column_end":27}},{"value":"/ heap.push(Reverse(5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75597,"byte_end":75623,"line_start":225,"line_end":225,"column_start":1,"column_end":27}},{"value":"/ heap.push(Reverse(2));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75624,"byte_end":75650,"line_start":226,"line_end":226,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75651,"byte_end":75654,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ // If we pop these scores now, they should come back in the reverse order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75655,"byte_end":75733,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(heap.pop(), Some(Reverse(1)));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75734,"byte_end":75779,"line_start":229,"line_end":229,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(heap.pop(), Some(Reverse(2)));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75780,"byte_end":75825,"line_start":230,"line_end":230,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(heap.pop(), Some(Reverse(5)));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75826,"byte_end":75871,"line_start":231,"line_end":231,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75872,"byte_end":75905,"line_start":232,"line_end":232,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75906,"byte_end":75913,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75914,"byte_end":75917,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75918,"byte_end":75939,"line_start":235,"line_end":235,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75940,"byte_end":75943,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ | [push] | [pop]    | [peek]/[peek\\_mut] |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75944,"byte_end":75990,"line_start":237,"line_end":237,"column_start":1,"column_end":47}},{"value":"/ |--------|----------|--------------------|","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":75991,"byte_end":76037,"line_start":238,"line_end":238,"column_start":1,"column_end":47}},{"value":"/ | O(1)~  | O(log n) | O(1)               |","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76038,"byte_end":76084,"line_start":239,"line_end":239,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76085,"byte_end":76088,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ The value for `push` is an expected cost; the method documentation gives a","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76089,"byte_end":76167,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ more detailed analysis.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76168,"byte_end":76195,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76196,"byte_end":76199,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ [push]: #method.push","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76200,"byte_end":76224,"line_start":244,"line_end":244,"column_start":1,"column_end":25}},{"value":"/ [pop]: #method.pop","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76225,"byte_end":76247,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/ [peek]: #method.peek","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76248,"byte_end":76272,"line_start":246,"line_end":246,"column_start":1,"column_end":25}},{"value":"/ [peek\\_mut]: #method.peek_mut","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76273,"byte_end":76306,"line_start":247,"line_end":247,"column_start":1,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76307,"byte_end":76352,"line_start":248,"line_end":248,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":412},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76780,"byte_end":76787,"line_start":262,"line_end":262,"column_start":12,"column_end":19},"name":"PeekMut","qualname":"::collections::binary_heap::PeekMut","value":"PeekMut {  }","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"decl_id":null,"docs":" Structure wrapping a mutable reference to the greatest item on a\n `BinaryHeap`.","sig":null,"attributes":[{"value":"/ Structure wrapping a mutable reference to the greatest item on a","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76401,"byte_end":76469,"line_start":253,"line_end":253,"column_start":1,"column_end":69}},{"value":"/ `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76470,"byte_end":76487,"line_start":254,"line_end":254,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76488,"byte_end":76491,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76492,"byte_end":76570,"line_start":256,"line_end":256,"column_start":1,"column_end":79}},{"value":"/ its documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76571,"byte_end":76602,"line_start":257,"line_end":257,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76603,"byte_end":76606,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76607,"byte_end":76663,"line_start":259,"line_end":259,"column_start":1,"column_end":57}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76664,"byte_end":76706,"line_start":260,"line_end":260,"column_start":1,"column_end":43}},{"value":"stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76707,"byte_end":76768,"line_start":261,"line_end":261,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78141,"byte_end":78144,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"pop","qualname":"<PeekMut>::pop","value":"fn (mut this: PeekMut<'a, T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the peeked value from the heap and returns it.\n","sig":null,"attributes":[{"value":"/ Removes the peeked value from the heap and returns it.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78001,"byte_end":78059,"line_start":303,"line_end":303,"column_start":5,"column_end":63}},{"value":"stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78064,"byte_end":78129,"line_start":304,"line_end":304,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79328,"byte_end":79331,"line_start":352,"line_end":352,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryHeap<T>>::new","value":"fn () -> BinaryHeap<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BinaryHeap` as a max-heap.","sig":null,"attributes":[{"value":"/ Creates an empty `BinaryHeap` as a max-heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79024,"byte_end":79072,"line_start":340,"line_end":340,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79077,"byte_end":79080,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79085,"byte_end":79099,"line_start":342,"line_end":342,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79104,"byte_end":79107,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79112,"byte_end":79128,"line_start":344,"line_end":344,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79133,"byte_end":79136,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79141,"byte_end":79148,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79153,"byte_end":79190,"line_start":347,"line_end":347,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79195,"byte_end":79232,"line_start":348,"line_end":348,"column_start":5,"column_end":42}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79237,"byte_end":79254,"line_start":349,"line_end":349,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79259,"byte_end":79266,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79271,"byte_end":79316,"line_start":351,"line_end":351,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79910,"byte_end":79923,"line_start":371,"line_end":371,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BinaryHeap<T>>::with_capacity","value":"fn (capacity: usize) -> BinaryHeap<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BinaryHeap` with a specific capacity.\n This preallocates enough memory for `capacity` elements,\n so that the `BinaryHeap` does not have to be reallocated\n until it contains at least that many values.","sig":null,"attributes":[{"value":"/ Creates an empty `BinaryHeap` with a specific capacity.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79400,"byte_end":79459,"line_start":356,"line_end":356,"column_start":5,"column_end":64}},{"value":"/ This preallocates enough memory for `capacity` elements,","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79464,"byte_end":79524,"line_start":357,"line_end":357,"column_start":5,"column_end":65}},{"value":"/ so that the `BinaryHeap` does not have to be reallocated","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79529,"byte_end":79589,"line_start":358,"line_end":358,"column_start":5,"column_end":65}},{"value":"/ until it contains at least that many values.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79594,"byte_end":79642,"line_start":359,"line_end":359,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79647,"byte_end":79650,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79655,"byte_end":79669,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79674,"byte_end":79677,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79682,"byte_end":79698,"line_start":363,"line_end":363,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79703,"byte_end":79706,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79711,"byte_end":79718,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79723,"byte_end":79760,"line_start":366,"line_end":366,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::with_capacity(10);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79765,"byte_end":79814,"line_start":367,"line_end":367,"column_start":5,"column_end":54}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79819,"byte_end":79836,"line_start":368,"line_end":368,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79841,"byte_end":79848,"line_start":369,"line_end":369,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79853,"byte_end":79898,"line_start":370,"line_end":370,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80828,"byte_end":80836,"line_start":404,"line_end":404,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<BinaryHeap<T>>::peek_mut","value":"fn (&mut self) -> Option<PeekMut<'_, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the greatest item in the binary heap, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the greatest item in the binary heap, or","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80029,"byte_end":80104,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/ `None` if it is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80109,"byte_end":80135,"line_start":376,"line_end":376,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80140,"byte_end":80143,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Note: If the `PeekMut` value is leaked, the heap may be in an","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80148,"byte_end":80213,"line_start":378,"line_end":378,"column_start":5,"column_end":70}},{"value":"/ inconsistent state.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80218,"byte_end":80241,"line_start":379,"line_end":379,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80246,"byte_end":80249,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80254,"byte_end":80268,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80273,"byte_end":80276,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80281,"byte_end":80297,"line_start":383,"line_end":383,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80302,"byte_end":80305,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80310,"byte_end":80317,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80322,"byte_end":80359,"line_start":386,"line_end":386,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80364,"byte_end":80401,"line_start":387,"line_end":387,"column_start":5,"column_end":42}},{"value":"/ assert!(heap.peek_mut().is_none());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80406,"byte_end":80445,"line_start":388,"line_end":388,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80450,"byte_end":80453,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80458,"byte_end":80475,"line_start":390,"line_end":390,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80480,"byte_end":80497,"line_start":391,"line_end":391,"column_start":5,"column_end":22}},{"value":"/ heap.push(2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80502,"byte_end":80519,"line_start":392,"line_end":392,"column_start":5,"column_end":22}},{"value":"/ {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80524,"byte_end":80529,"line_start":393,"line_end":393,"column_start":5,"column_end":10}},{"value":"/     let mut val = heap.peek_mut().unwrap();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80534,"byte_end":80581,"line_start":394,"line_end":394,"column_start":5,"column_end":52}},{"value":"/     *val = 0;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80586,"byte_end":80603,"line_start":395,"line_end":395,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80608,"byte_end":80613,"line_start":396,"line_end":396,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(heap.peek(), Some(&2));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80618,"byte_end":80656,"line_start":397,"line_end":397,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80661,"byte_end":80668,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80673,"byte_end":80676,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80681,"byte_end":80702,"line_start":400,"line_end":400,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80707,"byte_end":80710,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Cost is O(1) in the worst case.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80715,"byte_end":80750,"line_start":402,"line_end":402,"column_start":5,"column_end":40}},{"value":"stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80755,"byte_end":80816,"line_start":403,"line_end":403,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81580,"byte_end":81583,"line_start":429,"line_end":429,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the greatest item from the binary heap and returns it, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Removes the greatest item from the binary heap and returns it, or `None` if it","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":80973,"byte_end":81055,"line_start":408,"line_end":408,"column_start":5,"column_end":87}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81060,"byte_end":81073,"line_start":409,"line_end":409,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81078,"byte_end":81081,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81086,"byte_end":81100,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81105,"byte_end":81108,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81113,"byte_end":81129,"line_start":413,"line_end":413,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81134,"byte_end":81137,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81142,"byte_end":81149,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81154,"byte_end":81191,"line_start":416,"line_end":416,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81196,"byte_end":81244,"line_start":417,"line_end":417,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81249,"byte_end":81252,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.pop(), Some(3));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81257,"byte_end":81293,"line_start":419,"line_end":419,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81298,"byte_end":81334,"line_start":420,"line_end":420,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81339,"byte_end":81372,"line_start":421,"line_end":421,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81377,"byte_end":81384,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81389,"byte_end":81392,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81397,"byte_end":81418,"line_start":424,"line_end":424,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81423,"byte_end":81426,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ The worst case cost of `pop` on a heap containing *n* elements is O(log","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81431,"byte_end":81506,"line_start":426,"line_end":426,"column_start":5,"column_end":80}},{"value":"/ n).","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81511,"byte_end":81518,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81523,"byte_end":81568,"line_start":428,"line_end":428,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83091,"byte_end":83095,"line_start":472,"line_end":472,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T>>::push","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81835,"byte_end":81875,"line_start":439,"line_end":439,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81880,"byte_end":81883,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81888,"byte_end":81902,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81907,"byte_end":81910,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81915,"byte_end":81931,"line_start":443,"line_end":443,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81936,"byte_end":81939,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81944,"byte_end":81951,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81956,"byte_end":81993,"line_start":446,"line_end":446,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":81998,"byte_end":82035,"line_start":447,"line_end":447,"column_start":5,"column_end":42}},{"value":"/ heap.push(3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82040,"byte_end":82057,"line_start":448,"line_end":448,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82062,"byte_end":82079,"line_start":449,"line_end":449,"column_start":5,"column_end":22}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82084,"byte_end":82101,"line_start":450,"line_end":450,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82106,"byte_end":82109,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82114,"byte_end":82144,"line_start":452,"line_end":452,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82149,"byte_end":82187,"line_start":453,"line_end":453,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82192,"byte_end":82199,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82204,"byte_end":82207,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82212,"byte_end":82233,"line_start":456,"line_end":456,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82238,"byte_end":82241,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ The expected cost of `push`, averaged over every possible ordering of","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82246,"byte_end":82319,"line_start":458,"line_end":458,"column_start":5,"column_end":78}},{"value":"/ the elements being pushed, and over a sufficiently large number of","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82324,"byte_end":82394,"line_start":459,"line_end":459,"column_start":5,"column_end":75}},{"value":"/ pushes, is O(1). This is the most meaningful cost metric when pushing","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82399,"byte_end":82472,"line_start":460,"line_end":460,"column_start":5,"column_end":78}},{"value":"/ elements that are *not* already in any sorted pattern.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82477,"byte_end":82535,"line_start":461,"line_end":461,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82540,"byte_end":82543,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The time complexity degrades if elements are pushed in predominantly","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82548,"byte_end":82620,"line_start":463,"line_end":463,"column_start":5,"column_end":77}},{"value":"/ ascending order. In the worst case, elements are pushed in ascending","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82625,"byte_end":82697,"line_start":464,"line_end":464,"column_start":5,"column_end":77}},{"value":"/ sorted order and the amortized cost per push is O(log n) against a heap","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82702,"byte_end":82777,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/ containing *n* elements.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82782,"byte_end":82810,"line_start":466,"line_end":466,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82815,"byte_end":82818,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ The worst case cost of a *single* call to `push` is O(n). The worst case","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82823,"byte_end":82899,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/ occurs when capacity is exhausted and needs a resize. The resize cost","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82904,"byte_end":82977,"line_start":469,"line_end":469,"column_start":5,"column_end":78}},{"value":"/ has been amortized in the previous figures.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":82982,"byte_end":83029,"line_start":470,"line_end":470,"column_start":5,"column_end":52}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83034,"byte_end":83079,"line_start":471,"line_end":471,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83734,"byte_end":83749,"line_start":496,"line_end":496,"column_start":12,"column_end":27},"name":"into_sorted_vec","qualname":"<BinaryHeap<T>>::into_sorted_vec","value":"fn (mut self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BinaryHeap` and returns a vector in sorted\n (ascending) order.","sig":null,"attributes":[{"value":"/ Consumes the `BinaryHeap` and returns a vector in sorted","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83227,"byte_end":83287,"line_start":478,"line_end":478,"column_start":5,"column_end":65}},{"value":"/ (ascending) order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83292,"byte_end":83314,"line_start":479,"line_end":479,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83319,"byte_end":83322,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83327,"byte_end":83341,"line_start":481,"line_end":481,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83346,"byte_end":83349,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83354,"byte_end":83370,"line_start":483,"line_end":483,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83375,"byte_end":83378,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83383,"byte_end":83390,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83395,"byte_end":83432,"line_start":486,"line_end":486,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83437,"byte_end":83440,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 2, 4, 5, 7]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83445,"byte_end":83502,"line_start":488,"line_end":488,"column_start":5,"column_end":62}},{"value":"/ heap.push(6);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83507,"byte_end":83524,"line_start":489,"line_end":489,"column_start":5,"column_end":22}},{"value":"/ heap.push(3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83529,"byte_end":83546,"line_start":490,"line_end":490,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83551,"byte_end":83554,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let vec = heap.into_sorted_vec();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83559,"byte_end":83596,"line_start":492,"line_end":492,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83601,"byte_end":83644,"line_start":493,"line_end":493,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83649,"byte_end":83656,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":83661,"byte_end":83722,"line_start":495,"line_end":495,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87544,"byte_end":87550,"line_start":611,"line_end":611,"column_start":12,"column_end":18},"name":"append","qualname":"<BinaryHeap<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the elements of `other` into `self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":86949,"byte_end":87022,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87027,"byte_end":87030,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87035,"byte_end":87049,"line_start":592,"line_end":592,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87054,"byte_end":87057,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87062,"byte_end":87078,"line_start":594,"line_end":594,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87083,"byte_end":87086,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87091,"byte_end":87098,"line_start":596,"line_end":596,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87103,"byte_end":87140,"line_start":597,"line_end":597,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87145,"byte_end":87148,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ let v = vec![-10, 1, 2, 3, 3];","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87153,"byte_end":87187,"line_start":599,"line_end":599,"column_start":5,"column_end":39}},{"value":"/ let mut a = BinaryHeap::from(v);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87192,"byte_end":87228,"line_start":600,"line_end":600,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87233,"byte_end":87236,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ let v = vec![-20, 5, 43];","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87241,"byte_end":87270,"line_start":602,"line_end":602,"column_start":5,"column_end":34}},{"value":"/ let mut b = BinaryHeap::from(v);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87275,"byte_end":87311,"line_start":603,"line_end":603,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87316,"byte_end":87319,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ a.append(&mut b);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87324,"byte_end":87345,"line_start":605,"line_end":605,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87350,"byte_end":87353,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.into_sorted_vec(), [-20, -10, 1, 2, 3, 3, 5, 43]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87358,"byte_end":87425,"line_start":607,"line_end":607,"column_start":5,"column_end":72}},{"value":"/ assert!(b.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87430,"byte_end":87456,"line_start":608,"line_end":608,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87461,"byte_end":87468,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"stable(feature = \"binary_heap_append\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":87473,"byte_end":87532,"line_start":610,"line_end":610,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89365,"byte_end":89377,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"drain_sorted","qualname":"<BinaryHeap<T>>::drain_sorted","value":"fn (&mut self) -> DrainSorted<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which retrieves elements in heap order.\n The retrieved elements are removed from the original heap.\n The remaining elements will be removed on drop in heap order.","sig":null,"attributes":[{"value":"/ Returns an iterator which retrieves elements in heap order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88526,"byte_end":88589,"line_start":643,"line_end":643,"column_start":5,"column_end":68}},{"value":"/ The retrieved elements are removed from the original heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88594,"byte_end":88656,"line_start":644,"line_end":644,"column_start":5,"column_end":67}},{"value":"/ The remaining elements will be removed on drop in heap order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88661,"byte_end":88726,"line_start":645,"line_end":645,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88731,"byte_end":88734,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ Note:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88739,"byte_end":88748,"line_start":647,"line_end":647,"column_start":5,"column_end":14}},{"value":"/ * `.drain_sorted()` is O(n lg n); much slower than `.drain()`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88753,"byte_end":88819,"line_start":648,"line_end":648,"column_start":5,"column_end":71}},{"value":"/   You should use the latter for most cases.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88824,"byte_end":88871,"line_start":649,"line_end":649,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88876,"byte_end":88879,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88884,"byte_end":88898,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88903,"byte_end":88906,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88911,"byte_end":88927,"line_start":653,"line_end":653,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88932,"byte_end":88935,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88940,"byte_end":88947,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"/ #![feature(binary_heap_drain_sorted)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88952,"byte_end":88993,"line_start":656,"line_end":656,"column_start":5,"column_end":46}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":88998,"byte_end":89035,"line_start":657,"line_end":657,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89040,"byte_end":89043,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89048,"byte_end":89105,"line_start":659,"line_end":659,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(heap.len(), 5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89110,"byte_end":89140,"line_start":660,"line_end":660,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89145,"byte_end":89148,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ drop(heap.drain_sorted()); // removes all elements in heap order","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89153,"byte_end":89221,"line_start":662,"line_end":662,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(heap.len(), 0);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89226,"byte_end":89256,"line_start":663,"line_end":663,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89261,"byte_end":89268,"line_start":664,"line_end":664,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89273,"byte_end":89282,"line_start":665,"line_end":665,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89287,"byte_end":89353,"line_start":666,"line_end":666,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89957,"byte_end":89961,"line_start":690,"line_end":690,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in\n arbitrary order.","sig":null,"attributes":[{"value":"/ Returns an iterator visiting all values in the underlying vector, in","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89486,"byte_end":89558,"line_start":673,"line_end":673,"column_start":5,"column_end":77}},{"value":"/ arbitrary order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89563,"byte_end":89583,"line_start":674,"line_end":674,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89588,"byte_end":89591,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89596,"byte_end":89610,"line_start":676,"line_end":676,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89615,"byte_end":89618,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89623,"byte_end":89639,"line_start":678,"line_end":678,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89644,"byte_end":89647,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89652,"byte_end":89659,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89664,"byte_end":89701,"line_start":681,"line_end":681,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 2, 3, 4]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89706,"byte_end":89756,"line_start":682,"line_end":682,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89761,"byte_end":89764,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89769,"byte_end":89811,"line_start":684,"line_end":684,"column_start":5,"column_end":47}},{"value":"/ for x in heap.iter() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89816,"byte_end":89842,"line_start":685,"line_end":685,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89847,"byte_end":89873,"line_start":686,"line_end":686,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89878,"byte_end":89883,"line_start":687,"line_end":687,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89888,"byte_end":89895,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89900,"byte_end":89945,"line_start":689,"line_end":689,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90566,"byte_end":90582,"line_start":709,"line_end":709,"column_start":12,"column_end":28},"name":"into_iter_sorted","qualname":"<BinaryHeap<T>>::into_iter_sorted","value":"fn (self) -> IntoIterSorted<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which retrieves elements in heap order.\n This method consumes the original heap.","sig":null,"attributes":[{"value":"/ Returns an iterator which retrieves elements in heap order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90037,"byte_end":90100,"line_start":694,"line_end":694,"column_start":5,"column_end":68}},{"value":"/ This method consumes the original heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90105,"byte_end":90148,"line_start":695,"line_end":695,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90153,"byte_end":90156,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90161,"byte_end":90175,"line_start":697,"line_end":697,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90180,"byte_end":90183,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90188,"byte_end":90204,"line_start":699,"line_end":699,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90209,"byte_end":90212,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90217,"byte_end":90224,"line_start":701,"line_end":701,"column_start":5,"column_end":12}},{"value":"/ #![feature(binary_heap_into_iter_sorted)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90229,"byte_end":90274,"line_start":702,"line_end":702,"column_start":5,"column_end":50}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90279,"byte_end":90316,"line_start":703,"line_end":703,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90321,"byte_end":90374,"line_start":704,"line_end":704,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90379,"byte_end":90382,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), vec![5, 4]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90387,"byte_end":90467,"line_start":706,"line_end":706,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90472,"byte_end":90479,"line_start":707,"line_end":707,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90484,"byte_end":90554,"line_start":708,"line_end":708,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91217,"byte_end":91221,"line_start":735,"line_end":735,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T>>::peek","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the greatest item in the binary heap, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the greatest item in the binary heap, or `None` if it is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90662,"byte_end":90737,"line_start":713,"line_end":713,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90742,"byte_end":90745,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90750,"byte_end":90764,"line_start":715,"line_end":715,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90769,"byte_end":90772,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90777,"byte_end":90793,"line_start":717,"line_end":717,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90798,"byte_end":90801,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90806,"byte_end":90813,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90818,"byte_end":90855,"line_start":720,"line_end":720,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90860,"byte_end":90897,"line_start":721,"line_end":721,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90902,"byte_end":90936,"line_start":722,"line_end":722,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90941,"byte_end":90944,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90949,"byte_end":90966,"line_start":724,"line_end":724,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90971,"byte_end":90988,"line_start":725,"line_end":725,"column_start":5,"column_end":22}},{"value":"/ heap.push(2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":90993,"byte_end":91010,"line_start":726,"line_end":726,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91015,"byte_end":91053,"line_start":727,"line_end":727,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91058,"byte_end":91061,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91066,"byte_end":91073,"line_start":729,"line_end":729,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91078,"byte_end":91081,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ # Time complexity","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91086,"byte_end":91107,"line_start":731,"line_end":731,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91112,"byte_end":91115,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Cost is O(1) in the worst case.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91120,"byte_end":91155,"line_start":733,"line_end":733,"column_start":5,"column_end":40}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91160,"byte_end":91205,"line_start":734,"line_end":734,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91672,"byte_end":91680,"line_start":752,"line_end":752,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the binary heap can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the binary heap can hold without reallocating.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91281,"byte_end":91362,"line_start":739,"line_end":739,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91367,"byte_end":91370,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91375,"byte_end":91389,"line_start":741,"line_end":741,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91394,"byte_end":91397,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91402,"byte_end":91418,"line_start":743,"line_end":743,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91423,"byte_end":91426,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91431,"byte_end":91438,"line_start":745,"line_end":745,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91443,"byte_end":91480,"line_start":746,"line_end":746,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::with_capacity(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91485,"byte_end":91535,"line_start":747,"line_end":747,"column_start":5,"column_end":55}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91540,"byte_end":91576,"line_start":748,"line_end":748,"column_start":5,"column_end":41}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91581,"byte_end":91598,"line_start":749,"line_end":749,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91603,"byte_end":91610,"line_start":750,"line_end":750,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91615,"byte_end":91660,"line_start":751,"line_end":751,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92605,"byte_end":92618,"line_start":781,"line_end":781,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<BinaryHeap<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\n given `BinaryHeap`. Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more elements to be inserted in the","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91739,"byte_end":91833,"line_start":756,"line_end":756,"column_start":5,"column_end":99}},{"value":"/ given `BinaryHeap`. Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91838,"byte_end":91913,"line_start":757,"line_end":757,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91918,"byte_end":91921,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it requests. Therefore","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":91926,"byte_end":92016,"line_start":759,"line_end":759,"column_start":5,"column_end":95}},{"value":"/ capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92021,"byte_end":92110,"line_start":760,"line_end":760,"column_start":5,"column_end":94}},{"value":"/ insertions are expected.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92115,"byte_end":92143,"line_start":761,"line_end":761,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92148,"byte_end":92151,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92156,"byte_end":92168,"line_start":763,"line_end":763,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92173,"byte_end":92176,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92181,"byte_end":92230,"line_start":765,"line_end":765,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92235,"byte_end":92238,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92243,"byte_end":92257,"line_start":767,"line_end":767,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92262,"byte_end":92265,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92270,"byte_end":92286,"line_start":769,"line_end":769,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92291,"byte_end":92294,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92299,"byte_end":92306,"line_start":771,"line_end":771,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92311,"byte_end":92348,"line_start":772,"line_end":772,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92353,"byte_end":92390,"line_start":773,"line_end":773,"column_start":5,"column_end":42}},{"value":"/ heap.reserve_exact(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92395,"byte_end":92423,"line_start":774,"line_end":774,"column_start":5,"column_end":33}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92428,"byte_end":92464,"line_start":775,"line_end":775,"column_start":5,"column_end":41}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92469,"byte_end":92486,"line_start":776,"line_end":776,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92491,"byte_end":92498,"line_start":777,"line_end":777,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92503,"byte_end":92506,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92511,"byte_end":92543,"line_start":779,"line_end":779,"column_start":5,"column_end":37}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92548,"byte_end":92593,"line_start":780,"line_end":780,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93294,"byte_end":93301,"line_start":804,"line_end":804,"column_start":12,"column_end":19},"name":"reserve","qualname":"<BinaryHeap<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted in the\n `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted in the","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92707,"byte_end":92790,"line_start":785,"line_end":785,"column_start":5,"column_end":88}},{"value":"/ `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92795,"byte_end":92883,"line_start":786,"line_end":786,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92888,"byte_end":92891,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92896,"byte_end":92908,"line_start":788,"line_end":788,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92913,"byte_end":92916,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92921,"byte_end":92970,"line_start":790,"line_end":790,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92975,"byte_end":92978,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":92983,"byte_end":92997,"line_start":792,"line_end":792,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93002,"byte_end":93005,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93010,"byte_end":93026,"line_start":794,"line_end":794,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93031,"byte_end":93034,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93039,"byte_end":93046,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93051,"byte_end":93088,"line_start":797,"line_end":797,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93093,"byte_end":93130,"line_start":798,"line_end":798,"column_start":5,"column_end":42}},{"value":"/ heap.reserve(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93135,"byte_end":93157,"line_start":799,"line_end":799,"column_start":5,"column_end":27}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93162,"byte_end":93198,"line_start":800,"line_end":800,"column_start":5,"column_end":41}},{"value":"/ heap.push(4);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93203,"byte_end":93220,"line_start":801,"line_end":801,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93225,"byte_end":93232,"line_start":802,"line_end":802,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93237,"byte_end":93282,"line_start":803,"line_end":803,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93819,"byte_end":93832,"line_start":823,"line_end":823,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<BinaryHeap<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Discards as much additional capacity as possible.","sig":null,"attributes":[{"value":"/ Discards as much additional capacity as possible.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93384,"byte_end":93437,"line_start":808,"line_end":808,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93442,"byte_end":93445,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93450,"byte_end":93464,"line_start":810,"line_end":810,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93469,"byte_end":93472,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93477,"byte_end":93493,"line_start":812,"line_end":812,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93498,"byte_end":93501,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93506,"byte_end":93513,"line_start":814,"line_end":814,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93518,"byte_end":93555,"line_start":815,"line_end":815,"column_start":5,"column_end":42}},{"value":"/ let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93560,"byte_end":93627,"line_start":816,"line_end":816,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93632,"byte_end":93635,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93640,"byte_end":93676,"line_start":818,"line_end":818,"column_start":5,"column_end":41}},{"value":"/ heap.shrink_to_fit();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93681,"byte_end":93706,"line_start":819,"line_end":819,"column_start":5,"column_end":30}},{"value":"/ assert!(heap.capacity() == 0);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93711,"byte_end":93745,"line_start":820,"line_end":820,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93750,"byte_end":93757,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93762,"byte_end":93807,"line_start":822,"line_end":822,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94568,"byte_end":94577,"line_start":848,"line_end":848,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<BinaryHeap<T>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Discards capacity with a lower bound.","sig":null,"attributes":[{"value":"/ Discards capacity with a lower bound.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93892,"byte_end":93933,"line_start":827,"line_end":827,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93938,"byte_end":93941,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":93946,"byte_end":94011,"line_start":829,"line_end":829,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94016,"byte_end":94043,"line_start":830,"line_end":830,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94048,"byte_end":94051,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94056,"byte_end":94119,"line_start":832,"line_end":832,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94124,"byte_end":94145,"line_start":833,"line_end":833,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94150,"byte_end":94153,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94158,"byte_end":94172,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94177,"byte_end":94180,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94185,"byte_end":94192,"line_start":837,"line_end":837,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94197,"byte_end":94223,"line_start":838,"line_end":838,"column_start":5,"column_end":31}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94228,"byte_end":94265,"line_start":839,"line_end":839,"column_start":5,"column_end":42}},{"value":"/ let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94270,"byte_end":94337,"line_start":840,"line_end":840,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94342,"byte_end":94345,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.capacity() >= 100);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94350,"byte_end":94386,"line_start":842,"line_end":842,"column_start":5,"column_end":41}},{"value":"/ heap.shrink_to(10);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94391,"byte_end":94414,"line_start":843,"line_end":843,"column_start":5,"column_end":28}},{"value":"/ assert!(heap.capacity() >= 10);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94419,"byte_end":94454,"line_start":844,"line_end":844,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94459,"byte_end":94466,"line_start":845,"line_end":845,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94471,"byte_end":94480,"line_start":846,"line_end":846,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94485,"byte_end":94556,"line_start":847,"line_end":847,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95171,"byte_end":95179,"line_start":870,"line_end":870,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<BinaryHeap<T>>::into_vec","value":"fn (self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BinaryHeap` and returns the underlying vector\n in arbitrary order.","sig":null,"attributes":[{"value":"/ Consumes the `BinaryHeap` and returns the underlying vector","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94665,"byte_end":94728,"line_start":852,"line_end":852,"column_start":5,"column_end":68}},{"value":"/ in arbitrary order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94733,"byte_end":94756,"line_start":853,"line_end":853,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94761,"byte_end":94764,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94769,"byte_end":94783,"line_start":855,"line_end":855,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94788,"byte_end":94791,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94796,"byte_end":94812,"line_start":857,"line_end":857,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94817,"byte_end":94820,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94825,"byte_end":94832,"line_start":859,"line_end":859,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94837,"byte_end":94874,"line_start":860,"line_end":860,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94879,"byte_end":94938,"line_start":861,"line_end":861,"column_start":5,"column_end":64}},{"value":"/ let vec = heap.into_vec();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94943,"byte_end":94973,"line_start":862,"line_end":862,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94978,"byte_end":94981,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ // Will print in some order","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":94986,"byte_end":95017,"line_start":864,"line_end":864,"column_start":5,"column_end":36}},{"value":"/ for x in vec {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95022,"byte_end":95040,"line_start":865,"line_end":865,"column_start":5,"column_end":23}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95045,"byte_end":95071,"line_start":866,"line_end":866,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95076,"byte_end":95081,"line_start":867,"line_end":867,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95086,"byte_end":95093,"line_start":868,"line_end":868,"column_start":5,"column_end":12}},{"value":"stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95098,"byte_end":95159,"line_start":869,"line_end":869,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95555,"byte_end":95558,"line_start":887,"line_end":887,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[{"value":"/ Returns the length of the binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95229,"byte_end":95271,"line_start":874,"line_end":874,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95276,"byte_end":95279,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95284,"byte_end":95298,"line_start":876,"line_end":876,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95303,"byte_end":95306,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95311,"byte_end":95327,"line_start":878,"line_end":878,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95332,"byte_end":95335,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95340,"byte_end":95347,"line_start":880,"line_end":880,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95352,"byte_end":95389,"line_start":881,"line_end":881,"column_start":5,"column_end":42}},{"value":"/ let heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95394,"byte_end":95438,"line_start":882,"line_end":882,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95443,"byte_end":95446,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 2);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95451,"byte_end":95481,"line_start":884,"line_end":884,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95486,"byte_end":95493,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95498,"byte_end":95543,"line_start":886,"line_end":886,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96044,"byte_end":96052,"line_start":910,"line_end":910,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[{"value":"/ Checks if the binary heap is empty.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95612,"byte_end":95651,"line_start":891,"line_end":891,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95656,"byte_end":95659,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95664,"byte_end":95678,"line_start":893,"line_end":893,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95683,"byte_end":95686,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95691,"byte_end":95707,"line_start":895,"line_end":895,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95712,"byte_end":95715,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95720,"byte_end":95727,"line_start":897,"line_end":897,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95732,"byte_end":95769,"line_start":898,"line_end":898,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::new();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95774,"byte_end":95811,"line_start":899,"line_end":899,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95816,"byte_end":95819,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95824,"byte_end":95853,"line_start":901,"line_end":901,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95858,"byte_end":95861,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ heap.push(3);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95866,"byte_end":95883,"line_start":903,"line_end":903,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95888,"byte_end":95905,"line_start":904,"line_end":904,"column_start":5,"column_end":22}},{"value":"/ heap.push(1);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95910,"byte_end":95927,"line_start":905,"line_end":905,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95932,"byte_end":95935,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95940,"byte_end":95970,"line_start":907,"line_end":907,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95975,"byte_end":95982,"line_start":908,"line_end":908,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":95987,"byte_end":96032,"line_start":909,"line_end":909,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96667,"byte_end":96672,"line_start":936,"line_end":936,"column_start":12,"column_end":17},"name":"drain","qualname":"<BinaryHeap<T>>::drain","value":"fn (&mut self) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the binary heap, returning an iterator over the removed elements.","sig":null,"attributes":[{"value":"/ Clears the binary heap, returning an iterator over the removed elements.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96105,"byte_end":96181,"line_start":914,"line_end":914,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96186,"byte_end":96189,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ The elements are removed in arbitrary order.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96194,"byte_end":96242,"line_start":916,"line_end":916,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96247,"byte_end":96250,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96255,"byte_end":96269,"line_start":918,"line_end":918,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96274,"byte_end":96277,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96282,"byte_end":96298,"line_start":920,"line_end":920,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96303,"byte_end":96306,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96311,"byte_end":96318,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96323,"byte_end":96360,"line_start":923,"line_end":923,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96365,"byte_end":96413,"line_start":924,"line_end":924,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96418,"byte_end":96421,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96426,"byte_end":96456,"line_start":926,"line_end":926,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96461,"byte_end":96464,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ for x in heap.drain() {","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96469,"byte_end":96496,"line_start":928,"line_end":928,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96501,"byte_end":96527,"line_start":929,"line_end":929,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96532,"byte_end":96537,"line_start":930,"line_end":930,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96542,"byte_end":96545,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96550,"byte_end":96579,"line_start":932,"line_end":932,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96584,"byte_end":96591,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96596,"byte_end":96605,"line_start":934,"line_end":934,"column_start":5,"column_end":14}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96610,"byte_end":96655,"line_start":935,"line_end":935,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97158,"byte_end":97163,"line_start":957,"line_end":957,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[{"value":"/ Drops all items from the binary heap.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96757,"byte_end":96798,"line_start":940,"line_end":940,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96803,"byte_end":96806,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96811,"byte_end":96825,"line_start":942,"line_end":942,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96830,"byte_end":96833,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96838,"byte_end":96854,"line_start":944,"line_end":944,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96859,"byte_end":96862,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96867,"byte_end":96874,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96879,"byte_end":96916,"line_start":947,"line_end":947,"column_start":5,"column_end":42}},{"value":"/ let mut heap = BinaryHeap::from(vec![1, 3]);","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96921,"byte_end":96969,"line_start":948,"line_end":948,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96974,"byte_end":96977,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":96982,"byte_end":97012,"line_start":950,"line_end":950,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97017,"byte_end":97020,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ heap.clear();","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97025,"byte_end":97042,"line_start":952,"line_end":952,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97047,"byte_end":97050,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97055,"byte_end":97084,"line_start":954,"line_end":954,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97089,"byte_end":97096,"line_start":955,"line_end":955,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97101,"byte_end":97146,"line_start":956,"line_end":956,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":494},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99555,"byte_end":99559,"line_start":1038,"line_end":1038,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":497}],"decl_id":null,"docs":" An iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ An iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99238,"byte_end":99290,"line_start":1030,"line_end":1030,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99291,"byte_end":99294,"line_start":1031,"line_end":1031,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`BinaryHeap`]. See its","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99295,"byte_end":99373,"line_start":1032,"line_end":1032,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99374,"byte_end":99401,"line_start":1033,"line_end":1033,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99402,"byte_end":99405,"line_start":1034,"line_end":1034,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.BinaryHeap.html#method.iter","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99406,"byte_end":99454,"line_start":1035,"line_end":1035,"column_start":1,"column_end":49}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99455,"byte_end":99497,"line_start":1036,"line_end":1036,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99498,"byte_end":99543,"line_start":1037,"line_end":1037,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4325},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101292,"byte_end":101300,"line_start":1104,"line_end":1104,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4327}],"decl_id":null,"docs":" An owning iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100897,"byte_end":100956,"line_start":1095,"line_end":1095,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100957,"byte_end":100960,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`BinaryHeap`]","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100961,"byte_end":101035,"line_start":1097,"line_end":1097,"column_start":1,"column_end":75}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101036,"byte_end":101111,"line_start":1098,"line_end":1098,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101112,"byte_end":101115,"line_start":1099,"line_end":1099,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.BinaryHeap.html#method.into_iter","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101116,"byte_end":101174,"line_start":1100,"line_end":1100,"column_start":1,"column_end":59}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101175,"byte_end":101217,"line_start":1101,"line_end":1101,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101218,"byte_end":101263,"line_start":1102,"line_end":1102,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4331},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102422,"byte_end":102436,"line_start":1150,"line_end":1150,"column_start":12,"column_end":26},"name":"IntoIterSorted","qualname":"::collections::binary_heap::IntoIterSorted","value":"IntoIterSorted {  }","parent":null,"children":[{"krate":0,"index":4333}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102316,"byte_end":102386,"line_start":1148,"line_end":1148,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":4340},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103542,"byte_end":103547,"line_start":1188,"line_end":1188,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::binary_heap::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":4343}],"decl_id":null,"docs":" A draining iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103197,"byte_end":103257,"line_start":1179,"line_end":1179,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103258,"byte_end":103261,"line_start":1180,"line_end":1180,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`BinaryHeap`]. See its","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103262,"byte_end":103341,"line_start":1181,"line_end":1181,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103342,"byte_end":103369,"line_start":1182,"line_end":1182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103370,"byte_end":103373,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.BinaryHeap.html#method.drain","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103374,"byte_end":103424,"line_start":1184,"line_end":1184,"column_start":1,"column_end":51}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103425,"byte_end":103467,"line_start":1185,"line_end":1185,"column_start":1,"column_end":43}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103468,"byte_end":103513,"line_start":1186,"line_end":1186,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4348},"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104712,"byte_end":104723,"line_start":1234,"line_end":1234,"column_start":12,"column_end":23},"name":"DrainSorted","qualname":"::collections::binary_heap::DrainSorted","value":"DrainSorted {  }","parent":null,"children":[{"krate":0,"index":4351}],"decl_id":null,"docs":" A draining iterator over the elements of a `BinaryHeap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the elements of a `BinaryHeap`.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104325,"byte_end":104385,"line_start":1225,"line_end":1225,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104386,"byte_end":104389,"line_start":1226,"line_end":1226,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_sorted`] method on [`BinaryHeap`]. See its","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104390,"byte_end":104476,"line_start":1227,"line_end":1227,"column_start":1,"column_end":87}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104477,"byte_end":104504,"line_start":1228,"line_end":1228,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104505,"byte_end":104508,"line_start":1229,"line_end":1229,"column_start":1,"column_end":4}},{"value":"/ [`drain_sorted`]: struct.BinaryHeap.html#method.drain_sorted","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104509,"byte_end":104573,"line_start":1230,"line_end":1230,"column_start":1,"column_end":65}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104574,"byte_end":104616,"line_start":1231,"line_end":1231,"column_start":1,"column_end":43}},{"value":"unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104617,"byte_end":104683,"line_start":1232,"line_end":1232,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":618},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::collections::btree::map","value":"src/liballoc/collections/btree/map.rs","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":642},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":659},{"krate":0,"index":663},{"krate":0,"index":671},{"krate":0,"index":678},{"krate":0,"index":684},{"krate":0,"index":4356},{"krate":0,"index":4362},{"krate":0,"index":688},{"krate":0,"index":694},{"krate":0,"index":698},{"krate":0,"index":703},{"krate":0,"index":707},{"krate":0,"index":712},{"krate":0,"index":4367},{"krate":0,"index":4372},{"krate":0,"index":716},{"krate":0,"index":722},{"krate":0,"index":726},{"krate":0,"index":733},{"krate":0,"index":737},{"krate":0,"index":747},{"krate":0,"index":751},{"krate":0,"index":759},{"krate":0,"index":763},{"krate":0,"index":770},{"krate":0,"index":774},{"krate":0,"index":780},{"krate":0,"index":826},{"krate":0,"index":833},{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":849},{"krate":0,"index":853},{"krate":0,"index":857},{"krate":0,"index":864},{"krate":0,"index":872},{"krate":0,"index":877},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":890},{"krate":0,"index":894},{"krate":0,"index":900},{"krate":0,"index":904},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":920},{"krate":0,"index":926},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":937},{"krate":0,"index":946},{"krate":0,"index":952},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":963},{"krate":0,"index":970},{"krate":0,"index":979},{"krate":0,"index":985},{"krate":0,"index":989},{"krate":0,"index":992},{"krate":0,"index":997},{"krate":0,"index":1002},{"krate":0,"index":1007},{"krate":0,"index":1010},{"krate":0,"index":1014},{"krate":0,"index":1021},{"krate":0,"index":1026},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1039},{"krate":0,"index":1044},{"krate":0,"index":1050},{"krate":0,"index":1057},{"krate":0,"index":1062},{"krate":0,"index":1066},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1078},{"krate":0,"index":1082},{"krate":0,"index":1086},{"krate":0,"index":1092},{"krate":0,"index":1096},{"krate":0,"index":1100},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1119},{"krate":0,"index":1129},{"krate":0,"index":1134},{"krate":0,"index":1143},{"krate":0,"index":1155},{"krate":0,"index":1170},{"krate":0,"index":1173}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":654},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114425,"byte_end":114433,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"BTreeMap","qualname":"::collections::btree::map::BTreeMap","value":"BTreeMap {  }","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658}],"decl_id":null,"docs":" A map based on a B-Tree.","sig":null,"attributes":[{"value":"/ A map based on a B-Tree.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109393,"byte_end":109421,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109422,"byte_end":109425,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109426,"byte_end":109521,"line_start":19,"line_end":19,"column_start":1,"column_end":96}},{"value":"/ the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109522,"byte_end":109620,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ choice for a sorted map, as a perfectly balanced BST performs the theoretical minimum amount of","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109621,"byte_end":109720,"line_start":21,"line_end":21,"column_start":1,"column_end":100}},{"value":"/ comparisons necessary to find an element (log<sub>2</sub>n). However, in practice the way this","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109721,"byte_end":109819,"line_start":22,"line_end":22,"column_start":1,"column_end":99}},{"value":"/ is done is *very* inefficient for modern computer architectures. In particular, every element","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109820,"byte_end":109917,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ is stored in its own individually heap-allocated node. This means that every single insertion","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":109918,"byte_end":110015,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ triggers a heap-allocation, and every single comparison should be a cache-miss. Since these","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110016,"byte_end":110111,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ are both notably expensive things to do in practice, we are forced to at very least reconsider","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110112,"byte_end":110210,"line_start":26,"line_end":26,"column_start":1,"column_end":99}},{"value":"/ the BST strategy.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110211,"byte_end":110232,"line_start":27,"line_end":27,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110233,"byte_end":110236,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ A B-Tree instead makes each node contain B-1 to 2B-1 elements in a contiguous array. By doing","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110237,"byte_end":110334,"line_start":29,"line_end":29,"column_start":1,"column_end":98}},{"value":"/ this, we reduce the number of allocations by a factor of B, and improve cache efficiency in","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110335,"byte_end":110430,"line_start":30,"line_end":30,"column_start":1,"column_end":96}},{"value":"/ searches. However, this does mean that searches will have to do *more* comparisons on average.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110431,"byte_end":110529,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/ The precise number of comparisons depends on the node search strategy used. For optimal cache","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110530,"byte_end":110627,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ efficiency, one could search the nodes linearly. For optimal comparisons, one could search","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110628,"byte_end":110722,"line_start":33,"line_end":33,"column_start":1,"column_end":95}},{"value":"/ the node using binary search. As a compromise, one could also perform a linear search","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110723,"byte_end":110812,"line_start":34,"line_end":34,"column_start":1,"column_end":90}},{"value":"/ that initially only checks every i<sup>th</sup> element for some choice of i.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110813,"byte_end":110894,"line_start":35,"line_end":35,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110895,"byte_end":110898,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Currently, our implementation simply performs naive linear search. This provides excellent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110899,"byte_end":110993,"line_start":37,"line_end":37,"column_start":1,"column_end":95}},{"value":"/ performance on *small* nodes of elements which are cheap to compare. However in the future we","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":110994,"byte_end":111091,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/ would like to further explore choosing the optimal search strategy based on the choice of B,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111092,"byte_end":111188,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/ and possibly other factors. Using linear search, searching for a random element is expected","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111189,"byte_end":111284,"line_start":40,"line_end":40,"column_start":1,"column_end":96}},{"value":"/ to take O(B log<sub>B</sub>n) comparisons, which is generally worse than a BST. In practice,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111285,"byte_end":111381,"line_start":41,"line_end":41,"column_start":1,"column_end":97}},{"value":"/ however, performance is excellent.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111382,"byte_end":111420,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111421,"byte_end":111424,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's ordering relative to","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111425,"byte_end":111523,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"/ any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111524,"byte_end":111618,"line_start":45,"line_end":45,"column_start":1,"column_end":95}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111619,"byte_end":111711,"line_start":46,"line_end":46,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111712,"byte_end":111715,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ [`Ord`]: ../../std/cmp/trait.Ord.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111716,"byte_end":111757,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/ [`Cell`]: ../../std/cell/struct.Cell.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111758,"byte_end":111803,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/ [`RefCell`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111804,"byte_end":111855,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111856,"byte_end":111859,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111860,"byte_end":111874,"line_start":52,"line_end":52,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111875,"byte_end":111878,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111879,"byte_end":111886,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111887,"byte_end":111922,"line_start":55,"line_end":55,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111923,"byte_end":111926,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111927,"byte_end":111995,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ // would be `BTreeMap<&str, &str>` in this example).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":111996,"byte_end":112052,"line_start":58,"line_end":58,"column_start":1,"column_end":57}},{"value":"/ let mut movie_reviews = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112053,"byte_end":112097,"line_start":59,"line_end":59,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112098,"byte_end":112101,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // review some movies.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112102,"byte_end":112128,"line_start":61,"line_end":61,"column_start":1,"column_end":27}},{"value":"/ movie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112129,"byte_end":112220,"line_start":62,"line_end":62,"column_start":1,"column_end":92}},{"value":"/ movie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112221,"byte_end":112284,"line_start":63,"line_end":63,"column_start":1,"column_end":64}},{"value":"/ movie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112285,"byte_end":112351,"line_start":64,"line_end":64,"column_start":1,"column_end":67}},{"value":"/ movie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it a lot.\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112352,"byte_end":112422,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112423,"byte_end":112426,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112427,"byte_end":112459,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"/ if !movie_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112460,"byte_end":112515,"line_start":68,"line_end":68,"column_start":1,"column_end":55}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112516,"byte_end":112588,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/              movie_reviews.len());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112589,"byte_end":112627,"line_start":70,"line_end":70,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112628,"byte_end":112633,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112634,"byte_end":112637,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112638,"byte_end":112711,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/ movie_reviews.remove(\"The Blues Brothers\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112712,"byte_end":112759,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112760,"byte_end":112763,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112764,"byte_end":112816,"line_start":76,"line_end":76,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Up!\", \"Office Space\"];","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112817,"byte_end":112859,"line_start":77,"line_end":77,"column_start":1,"column_end":43}},{"value":"/ for movie in &to_find {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112860,"byte_end":112887,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/     match movie_reviews.get(movie) {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112888,"byte_end":112928,"line_start":79,"line_end":79,"column_start":1,"column_end":41}},{"value":"/        Some(review) => println!(\"{}: {}\", movie, review),","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112929,"byte_end":112990,"line_start":80,"line_end":80,"column_start":1,"column_end":62}},{"value":"/        None => println!(\"{} is unreviewed.\", movie)","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":112991,"byte_end":113046,"line_start":81,"line_end":81,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113047,"byte_end":113056,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113057,"byte_end":113062,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113063,"byte_end":113066,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113067,"byte_end":113139,"line_start":85,"line_end":85,"column_start":1,"column_end":73}},{"value":"/ println!(\"Movie review: {}\", movie_reviews[\"Office Space\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113140,"byte_end":113204,"line_start":86,"line_end":86,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113205,"byte_end":113208,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113209,"byte_end":113240,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/ for (movie, review) in &movie_reviews {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113241,"byte_end":113284,"line_start":89,"line_end":89,"column_start":1,"column_end":44}},{"value":"/     println!(\"{}: \\\"{}\\\"\", movie, review);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113285,"byte_end":113331,"line_start":90,"line_end":90,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113332,"byte_end":113337,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113338,"byte_end":113345,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113346,"byte_end":113349,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ `BTreeMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113350,"byte_end":113426,"line_start":94,"line_end":94,"column_start":1,"column_end":77}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113427,"byte_end":113507,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113508,"byte_end":113525,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113526,"byte_end":113529,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113530,"byte_end":113537,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113538,"byte_end":113573,"line_start":99,"line_end":99,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113574,"byte_end":113577,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113578,"byte_end":113646,"line_start":101,"line_end":101,"column_start":1,"column_end":69}},{"value":"/ // would be `BTreeMap<&str, u8>` in this example).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113647,"byte_end":113701,"line_start":102,"line_end":102,"column_start":1,"column_end":55}},{"value":"/ let mut player_stats = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113702,"byte_end":113745,"line_start":103,"line_end":103,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113746,"byte_end":113749,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113750,"byte_end":113783,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113784,"byte_end":113859,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113860,"byte_end":113895,"line_start":107,"line_end":107,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113896,"byte_end":113906,"line_start":108,"line_end":108,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113907,"byte_end":113912,"line_start":109,"line_end":109,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113913,"byte_end":113916,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113917,"byte_end":113969,"line_start":111,"line_end":111,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":113970,"byte_end":114018,"line_start":112,"line_end":112,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114019,"byte_end":114022,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114023,"byte_end":114096,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114097,"byte_end":114125,"line_start":115,"line_end":115,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114126,"byte_end":114193,"line_start":116,"line_end":116,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114194,"byte_end":114197,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114198,"byte_end":114266,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114267,"byte_end":114326,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114327,"byte_end":114359,"line_start":120,"line_end":120,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114360,"byte_end":114367,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114368,"byte_end":114413,"line_start":122,"line_end":122,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":678},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119036,"byte_end":119040,"line_start":258,"line_end":258,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683}],"decl_id":null,"docs":" An iterator over the entries of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118730,"byte_end":118779,"line_start":250,"line_end":250,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118780,"byte_end":118783,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118784,"byte_end":118860,"line_start":252,"line_end":252,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118861,"byte_end":118888,"line_start":253,"line_end":253,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118889,"byte_end":118892,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.BTreeMap.html#method.iter","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118893,"byte_end":118939,"line_start":255,"line_end":255,"column_start":1,"column_end":47}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118940,"byte_end":118978,"line_start":256,"line_end":256,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":118979,"byte_end":119024,"line_start":257,"line_end":257,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4356},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119704,"byte_end":119711,"line_start":279,"line_end":279,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":4360},{"krate":0,"index":4361}],"decl_id":null,"docs":" A mutable iterator over the entries of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119362,"byte_end":119418,"line_start":270,"line_end":270,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119419,"byte_end":119422,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119423,"byte_end":119503,"line_start":272,"line_end":272,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119504,"byte_end":119531,"line_start":273,"line_end":273,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119532,"byte_end":119535,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.BTreeMap.html#method.iter_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119536,"byte_end":119590,"line_start":275,"line_end":275,"column_start":1,"column_end":55}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119591,"byte_end":119629,"line_start":276,"line_end":276,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119630,"byte_end":119675,"line_start":277,"line_end":277,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":688},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120152,"byte_end":120160,"line_start":292,"line_end":292,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693}],"decl_id":null,"docs":" An owning iterator over the entries of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119785,"byte_end":119841,"line_start":284,"line_end":284,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119842,"byte_end":119845,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`BTreeMap`]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119846,"byte_end":119918,"line_start":286,"line_end":286,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119919,"byte_end":119994,"line_start":287,"line_end":287,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119995,"byte_end":119998,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.BTreeMap.html#method.into_iter","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119999,"byte_end":120055,"line_start":289,"line_end":289,"column_start":1,"column_end":57}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120056,"byte_end":120094,"line_start":290,"line_end":290,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120095,"byte_end":120140,"line_start":291,"line_end":291,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":698},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120979,"byte_end":120983,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"Keys","qualname":"::collections::btree::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":702}],"decl_id":null,"docs":" An iterator over the keys of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120676,"byte_end":120722,"line_start":306,"line_end":306,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120723,"byte_end":120726,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120727,"byte_end":120803,"line_start":308,"line_end":308,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120804,"byte_end":120831,"line_start":309,"line_end":309,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120832,"byte_end":120835,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.BTreeMap.html#method.keys","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120836,"byte_end":120882,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120883,"byte_end":120921,"line_start":312,"line_end":312,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120922,"byte_end":120967,"line_start":313,"line_end":313,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":707},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121584,"byte_end":121590,"line_start":333,"line_end":333,"column_start":12,"column_end":18},"name":"Values","qualname":"::collections::btree::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":711}],"decl_id":null,"docs":" An iterator over the values of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121273,"byte_end":121321,"line_start":325,"line_end":325,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121322,"byte_end":121325,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121326,"byte_end":121404,"line_start":327,"line_end":327,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121405,"byte_end":121432,"line_start":328,"line_end":328,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121433,"byte_end":121436,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.BTreeMap.html#method.values","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121437,"byte_end":121487,"line_start":330,"line_end":330,"column_start":1,"column_end":51}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121488,"byte_end":121526,"line_start":331,"line_end":331,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121527,"byte_end":121572,"line_start":332,"line_end":332,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4367},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122239,"byte_end":122248,"line_start":353,"line_end":353,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::collections::btree::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":4371}],"decl_id":null,"docs":" A mutable iterator over the values of a `BTreeMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121882,"byte_end":121937,"line_start":344,"line_end":344,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121938,"byte_end":121941,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121942,"byte_end":122024,"line_start":346,"line_end":346,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122025,"byte_end":122052,"line_start":347,"line_end":347,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122053,"byte_end":122056,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.BTreeMap.html#method.values_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122057,"byte_end":122115,"line_start":349,"line_end":349,"column_start":1,"column_end":59}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122116,"byte_end":122154,"line_start":350,"line_end":350,"column_start":1,"column_end":39}},{"value":"stable(feature = \"map_values_mut\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122155,"byte_end":122210,"line_start":351,"line_end":351,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":716},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122629,"byte_end":122634,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"name":"Range","qualname":"::collections::btree::map::Range","value":"Range {  }","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721}],"decl_id":null,"docs":" An iterator over a sub-range of entries in a `BTreeMap`.","sig":null,"attributes":[{"value":"/ An iterator over a sub-range of entries in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122302,"byte_end":122362,"line_start":357,"line_end":357,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122363,"byte_end":122366,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`range`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122367,"byte_end":122444,"line_start":359,"line_end":359,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122445,"byte_end":122472,"line_start":360,"line_end":360,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122473,"byte_end":122476,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ [`range`]: struct.BTreeMap.html#method.range","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122477,"byte_end":122525,"line_start":362,"line_end":362,"column_start":1,"column_end":49}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122526,"byte_end":122564,"line_start":363,"line_end":363,"column_start":1,"column_end":39}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122565,"byte_end":122617,"line_start":364,"line_end":364,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":726},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123417,"byte_end":123425,"line_start":385,"line_end":385,"column_start":12,"column_end":20},"name":"RangeMut","qualname":"::collections::btree::map::RangeMut","value":"RangeMut {  }","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732}],"decl_id":null,"docs":" A mutable iterator over a sub-range of entries in a `BTreeMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over a sub-range of entries in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123071,"byte_end":123138,"line_start":377,"line_end":377,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123139,"byte_end":123142,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`range_mut`] method on [`BTreeMap`]. See its","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123143,"byte_end":123224,"line_start":379,"line_end":379,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123225,"byte_end":123252,"line_start":380,"line_end":380,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123253,"byte_end":123256,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ [`range_mut`]: struct.BTreeMap.html#method.range_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123257,"byte_end":123313,"line_start":382,"line_end":382,"column_start":1,"column_end":57}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123314,"byte_end":123352,"line_start":383,"line_end":383,"column_start":1,"column_end":39}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123353,"byte_end":123405,"line_start":384,"line_end":384,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":741},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124430,"byte_end":124436,"line_start":411,"line_end":411,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::collections::btree::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V>)","parent":{"krate":0,"index":737},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124356,"byte_end":124375,"line_start":409,"line_end":409,"column_start":5,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124380,"byte_end":124425,"line_start":410,"line_end":410,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":744},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124589,"byte_end":124597,"line_start":415,"line_end":415,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::collections::btree::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":737},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124512,"byte_end":124534,"line_start":413,"line_end":413,"column_start":5,"column_end":27}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124539,"byte_end":124584,"line_start":414,"line_end":414,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":737},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124326,"byte_end":124331,"line_start":408,"line_end":408,"column_start":10,"column_end":15},"name":"Entry","qualname":"::collections::btree::map::Entry","value":"Entry::{Vacant, Occupied}","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":744}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124020,"byte_end":124100,"line_start":401,"line_end":401,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124101,"byte_end":124104,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`BTreeMap`].","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124105,"byte_end":124178,"line_start":403,"line_end":403,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124179,"byte_end":124182,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124183,"byte_end":124221,"line_start":405,"line_end":405,"column_start":1,"column_end":39}},{"value":"/ [`entry`]: struct.BTreeMap.html#method.entry","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124222,"byte_end":124270,"line_start":406,"line_end":406,"column_start":1,"column_end":49}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124271,"byte_end":124316,"line_start":407,"line_end":407,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":751},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125215,"byte_end":125226,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::collections::btree::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758}],"decl_id":null,"docs":" A view into a vacant entry in a `BTreeMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125037,"byte_end":125084,"line_start":428,"line_end":428,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125085,"byte_end":125122,"line_start":429,"line_end":429,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125123,"byte_end":125126,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125127,"byte_end":125157,"line_start":431,"line_end":431,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125158,"byte_end":125203,"line_start":432,"line_end":432,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":763},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125879,"byte_end":125892,"line_start":454,"line_end":454,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::collections::btree::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769}],"decl_id":null,"docs":" A view into an occupied entry in a `BTreeMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `BTreeMap`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125698,"byte_end":125748,"line_start":449,"line_end":449,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125749,"byte_end":125786,"line_start":450,"line_end":450,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125787,"byte_end":125790,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125791,"byte_end":125821,"line_start":452,"line_end":452,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125822,"byte_end":125867,"line_start":453,"line_end":453,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126997,"byte_end":127000,"line_start":492,"line_end":492,"column_start":12,"column_end":15},"name":"new","qualname":"<BTreeMap<K, V>>::new","value":"fn () -> BTreeMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new empty BTreeMap with a reasonable choice for B.","sig":null,"attributes":[{"value":"/ Makes a new empty BTreeMap with a reasonable choice for B.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126604,"byte_end":126666,"line_start":477,"line_end":477,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126671,"byte_end":126674,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126679,"byte_end":126693,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126698,"byte_end":126701,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126706,"byte_end":126722,"line_start":481,"line_end":481,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126727,"byte_end":126730,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126735,"byte_end":126742,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126747,"byte_end":126782,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126787,"byte_end":126790,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126795,"byte_end":126829,"line_start":486,"line_end":486,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126834,"byte_end":126837,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ // entries can now be inserted into the empty map","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126842,"byte_end":126895,"line_start":488,"line_end":488,"column_start":5,"column_end":58}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126900,"byte_end":126923,"line_start":489,"line_end":489,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126928,"byte_end":126935,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126940,"byte_end":126985,"line_start":491,"line_end":491,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127457,"byte_end":127462,"line_start":511,"line_end":511,"column_start":12,"column_end":17},"name":"clear","qualname":"<BTreeMap<K, V>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all elements.","sig":null,"attributes":[{"value":"/ Clears the map, removing all elements.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127104,"byte_end":127146,"line_start":496,"line_end":496,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127151,"byte_end":127154,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127159,"byte_end":127173,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127178,"byte_end":127181,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127186,"byte_end":127202,"line_start":500,"line_end":500,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127207,"byte_end":127210,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127215,"byte_end":127222,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127227,"byte_end":127262,"line_start":503,"line_end":503,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127267,"byte_end":127270,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127275,"byte_end":127307,"line_start":505,"line_end":505,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127312,"byte_end":127333,"line_start":506,"line_end":506,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127338,"byte_end":127352,"line_start":507,"line_end":507,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127357,"byte_end":127383,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127388,"byte_end":127395,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127400,"byte_end":127445,"line_start":510,"line_end":510,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128092,"byte_end":128095,"line_start":533,"line_end":533,"column_start":12,"column_end":15},"name":"get","qualname":"<BTreeMap<K, V>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127520,"byte_end":127582,"line_start":515,"line_end":515,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127587,"byte_end":127590,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127595,"byte_end":127671,"line_start":517,"line_end":517,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127676,"byte_end":127743,"line_start":518,"line_end":518,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127748,"byte_end":127751,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127756,"byte_end":127770,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127775,"byte_end":127778,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127783,"byte_end":127799,"line_start":522,"line_end":522,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127804,"byte_end":127807,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127812,"byte_end":127819,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127824,"byte_end":127859,"line_start":525,"line_end":525,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127864,"byte_end":127867,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127872,"byte_end":127906,"line_start":527,"line_end":527,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127911,"byte_end":127934,"line_start":528,"line_end":528,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127939,"byte_end":127979,"line_start":529,"line_end":529,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":127984,"byte_end":128018,"line_start":530,"line_end":530,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128023,"byte_end":128030,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128035,"byte_end":128080,"line_start":532,"line_end":532,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128953,"byte_end":128966,"line_start":560,"line_end":560,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<BTreeMap<K, V>>::get_key_value","value":"fn <Q> (&self, k: &Q) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128359,"byte_end":128424,"line_start":544,"line_end":544,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128429,"byte_end":128432,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128437,"byte_end":128522,"line_start":546,"line_end":546,"column_start":5,"column_end":90}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128527,"byte_end":128594,"line_start":547,"line_end":547,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128599,"byte_end":128602,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128607,"byte_end":128621,"line_start":549,"line_end":549,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128626,"byte_end":128629,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128634,"byte_end":128641,"line_start":551,"line_end":551,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128646,"byte_end":128681,"line_start":552,"line_end":552,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128686,"byte_end":128689,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128694,"byte_end":128728,"line_start":554,"line_end":554,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128733,"byte_end":128756,"line_start":555,"line_end":555,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128761,"byte_end":128817,"line_start":556,"line_end":556,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128822,"byte_end":128866,"line_start":557,"line_end":557,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128871,"byte_end":128878,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_get_key_value\", since = \"1.40.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":128883,"byte_end":128941,"line_start":559,"line_end":559,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129788,"byte_end":129803,"line_start":589,"line_end":589,"column_start":12,"column_end":27},"name":"first_key_value","qualname":"<BTreeMap<K, V>>::first_key_value","value":"fn <T> (&self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first key-value pair in the map.\n The key in this pair is the minimum key in the map.","sig":null,"attributes":[{"value":"/ Returns the first key-value pair in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129230,"byte_end":129278,"line_start":571,"line_end":571,"column_start":5,"column_end":53}},{"value":"/ The key in this pair is the minimum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129283,"byte_end":129338,"line_start":572,"line_end":572,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129343,"byte_end":129346,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129351,"byte_end":129365,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129370,"byte_end":129373,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129378,"byte_end":129394,"line_start":576,"line_end":576,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129399,"byte_end":129402,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129407,"byte_end":129414,"line_start":578,"line_end":578,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129419,"byte_end":129450,"line_start":579,"line_end":579,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129455,"byte_end":129490,"line_start":580,"line_end":580,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129495,"byte_end":129498,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129503,"byte_end":129537,"line_start":582,"line_end":582,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.first_key_value(), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129542,"byte_end":129586,"line_start":583,"line_end":583,"column_start":5,"column_end":49}},{"value":"/ map.insert(1, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129591,"byte_end":129614,"line_start":584,"line_end":584,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129619,"byte_end":129642,"line_start":585,"line_end":585,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.first_key_value(), Some((&1, &\"b\")));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129647,"byte_end":129703,"line_start":586,"line_end":586,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129708,"byte_end":129715,"line_start":587,"line_end":587,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":129720,"byte_end":129776,"line_start":588,"line_end":588,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130659,"byte_end":130670,"line_start":618,"line_end":618,"column_start":12,"column_end":23},"name":"first_entry","qualname":"<BTreeMap<K, V>>::first_entry","value":"fn <T> (&mut self) -> Option<OccupiedEntry<'_, K, V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first entry in the map for in-place manipulation.\n The key of this entry is the minimum key in the map.","sig":null,"attributes":[{"value":"/ Returns the first entry in the map for in-place manipulation.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130015,"byte_end":130080,"line_start":598,"line_end":598,"column_start":5,"column_end":70}},{"value":"/ The key of this entry is the minimum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130085,"byte_end":130141,"line_start":599,"line_end":599,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130146,"byte_end":130149,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130154,"byte_end":130168,"line_start":601,"line_end":601,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130173,"byte_end":130176,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Contrived way to `clear` a map:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130181,"byte_end":130216,"line_start":603,"line_end":603,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130221,"byte_end":130224,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130229,"byte_end":130236,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130241,"byte_end":130272,"line_start":606,"line_end":606,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130277,"byte_end":130312,"line_start":607,"line_end":607,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130317,"byte_end":130320,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130325,"byte_end":130359,"line_start":609,"line_end":609,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130364,"byte_end":130387,"line_start":610,"line_end":610,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130392,"byte_end":130415,"line_start":611,"line_end":611,"column_start":5,"column_end":28}},{"value":"/ while let Some(entry) = map.first_entry() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130420,"byte_end":130467,"line_start":612,"line_end":612,"column_start":5,"column_end":52}},{"value":"/     let (key, val) = entry.remove_entry();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130472,"byte_end":130518,"line_start":613,"line_end":613,"column_start":5,"column_end":51}},{"value":"/     assert!(!map.contains_key(&key));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130523,"byte_end":130564,"line_start":614,"line_end":614,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130569,"byte_end":130574,"line_start":615,"line_end":615,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130579,"byte_end":130586,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":130591,"byte_end":130647,"line_start":617,"line_end":617,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131550,"byte_end":131564,"line_start":650,"line_end":650,"column_start":12,"column_end":26},"name":"last_key_value","qualname":"<BTreeMap<K, V>>::last_key_value","value":"fn <T> (&self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last key-value pair in the map.\n The key in this pair is the maximum key in the map.","sig":null,"attributes":[{"value":"/ Returns the last key-value pair in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131043,"byte_end":131090,"line_start":633,"line_end":633,"column_start":5,"column_end":52}},{"value":"/ The key in this pair is the maximum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131095,"byte_end":131150,"line_start":634,"line_end":634,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131155,"byte_end":131158,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131163,"byte_end":131177,"line_start":636,"line_end":636,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131182,"byte_end":131185,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131190,"byte_end":131206,"line_start":638,"line_end":638,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131211,"byte_end":131214,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131219,"byte_end":131226,"line_start":640,"line_end":640,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131231,"byte_end":131262,"line_start":641,"line_end":641,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131267,"byte_end":131302,"line_start":642,"line_end":642,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131307,"byte_end":131310,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131315,"byte_end":131349,"line_start":644,"line_end":644,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131354,"byte_end":131377,"line_start":645,"line_end":645,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131382,"byte_end":131405,"line_start":646,"line_end":646,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.last_key_value(), Some((&2, &\"a\")));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131410,"byte_end":131465,"line_start":647,"line_end":647,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131470,"byte_end":131477,"line_start":648,"line_end":648,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131482,"byte_end":131538,"line_start":649,"line_end":649,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132414,"byte_end":132424,"line_start":679,"line_end":679,"column_start":12,"column_end":22},"name":"last_entry","qualname":"<BTreeMap<K, V>>::last_entry","value":"fn <T> (&mut self) -> Option<OccupiedEntry<'_, K, V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last entry in the map for in-place manipulation.\n The key of this entry is the maximum key in the map.","sig":null,"attributes":[{"value":"/ Returns the last entry in the map for in-place manipulation.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131772,"byte_end":131836,"line_start":659,"line_end":659,"column_start":5,"column_end":69}},{"value":"/ The key of this entry is the maximum key in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131841,"byte_end":131897,"line_start":660,"line_end":660,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131902,"byte_end":131905,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131910,"byte_end":131924,"line_start":662,"line_end":662,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131929,"byte_end":131932,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ Contrived way to `clear` a map:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131937,"byte_end":131972,"line_start":664,"line_end":664,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131977,"byte_end":131980,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131985,"byte_end":131992,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":131997,"byte_end":132028,"line_start":667,"line_end":667,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132033,"byte_end":132068,"line_start":668,"line_end":668,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132073,"byte_end":132076,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132081,"byte_end":132115,"line_start":670,"line_end":670,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132120,"byte_end":132143,"line_start":671,"line_end":671,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132148,"byte_end":132171,"line_start":672,"line_end":672,"column_start":5,"column_end":28}},{"value":"/ while let Some(entry) = map.last_entry() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132176,"byte_end":132222,"line_start":673,"line_end":673,"column_start":5,"column_end":51}},{"value":"/     let (key, val) = entry.remove_entry();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132227,"byte_end":132273,"line_start":674,"line_end":674,"column_start":5,"column_end":51}},{"value":"/     assert!(!map.contains_key(&key));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132278,"byte_end":132319,"line_start":675,"line_end":675,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132324,"byte_end":132329,"line_start":676,"line_end":676,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132334,"byte_end":132341,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132346,"byte_end":132402,"line_start":678,"line_end":678,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133388,"byte_end":133400,"line_start":712,"line_end":712,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<BTreeMap<K, V>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132796,"byte_end":132865,"line_start":694,"line_end":694,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132870,"byte_end":132873,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132878,"byte_end":132954,"line_start":696,"line_end":696,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":132959,"byte_end":133026,"line_start":697,"line_end":697,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133031,"byte_end":133034,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133039,"byte_end":133053,"line_start":699,"line_end":699,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133058,"byte_end":133061,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133066,"byte_end":133082,"line_start":701,"line_end":701,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133087,"byte_end":133090,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133095,"byte_end":133102,"line_start":703,"line_end":703,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133107,"byte_end":133142,"line_start":704,"line_end":704,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133147,"byte_end":133150,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133155,"byte_end":133189,"line_start":706,"line_end":706,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133194,"byte_end":133217,"line_start":707,"line_end":707,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133222,"byte_end":133265,"line_start":708,"line_end":708,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133270,"byte_end":133314,"line_start":709,"line_end":709,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133319,"byte_end":133326,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133331,"byte_end":133376,"line_start":711,"line_end":711,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134229,"byte_end":134236,"line_start":741,"line_end":741,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BTreeMap<K, V>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133533,"byte_end":133603,"line_start":720,"line_end":720,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133608,"byte_end":133611,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133616,"byte_end":133692,"line_start":722,"line_end":722,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133697,"byte_end":133764,"line_start":723,"line_end":723,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133769,"byte_end":133772,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133777,"byte_end":133791,"line_start":725,"line_end":725,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133796,"byte_end":133799,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133804,"byte_end":133820,"line_start":727,"line_end":727,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133825,"byte_end":133828,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133833,"byte_end":133840,"line_start":729,"line_end":729,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133845,"byte_end":133880,"line_start":730,"line_end":730,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133885,"byte_end":133888,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133893,"byte_end":133927,"line_start":732,"line_end":732,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133932,"byte_end":133955,"line_start":733,"line_end":733,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":133960,"byte_end":133998,"line_start":734,"line_end":734,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134003,"byte_end":134020,"line_start":735,"line_end":735,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134025,"byte_end":134030,"line_start":736,"line_end":736,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134035,"byte_end":134064,"line_start":737,"line_end":737,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134069,"byte_end":134076,"line_start":738,"line_end":738,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134172,"byte_end":134217,"line_start":740,"line_end":740,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135439,"byte_end":135445,"line_start":779,"line_end":779,"column_start":12,"column_end":18},"name":"insert","qualname":"<BTreeMap<K, V>>::insert","value":"fn (&mut self, key: K, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134512,"byte_end":134554,"line_start":752,"line_end":752,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134559,"byte_end":134562,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, `None` is returned.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134567,"byte_end":134632,"line_start":754,"line_end":754,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134637,"byte_end":134640,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134645,"byte_end":134720,"line_start":756,"line_end":756,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134725,"byte_end":134796,"line_start":757,"line_end":757,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134801,"byte_end":134874,"line_start":758,"line_end":758,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134879,"byte_end":134907,"line_start":759,"line_end":759,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134912,"byte_end":134915,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134920,"byte_end":134988,"line_start":761,"line_end":761,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":134993,"byte_end":134996,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135001,"byte_end":135015,"line_start":763,"line_end":763,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135020,"byte_end":135023,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135028,"byte_end":135044,"line_start":765,"line_end":765,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135049,"byte_end":135052,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135057,"byte_end":135064,"line_start":767,"line_end":767,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135069,"byte_end":135104,"line_start":768,"line_end":768,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135109,"byte_end":135112,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135117,"byte_end":135151,"line_start":770,"line_end":770,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135156,"byte_end":135198,"line_start":771,"line_end":771,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135203,"byte_end":135241,"line_start":772,"line_end":772,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135246,"byte_end":135249,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135254,"byte_end":135278,"line_start":774,"line_end":774,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135283,"byte_end":135330,"line_start":775,"line_end":775,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135335,"byte_end":135365,"line_start":776,"line_end":776,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135370,"byte_end":135377,"line_start":777,"line_end":777,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135382,"byte_end":135427,"line_start":778,"line_end":778,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136331,"byte_end":136337,"line_start":808,"line_end":808,"column_start":12,"column_end":18},"name":"remove","qualname":"<BTreeMap<K, V>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135708,"byte_end":135781,"line_start":789,"line_end":789,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135786,"byte_end":135816,"line_start":790,"line_end":790,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135821,"byte_end":135824,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but the ordering","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135829,"byte_end":135905,"line_start":792,"line_end":792,"column_start":5,"column_end":81}},{"value":"/ on the borrowed form *must* match the ordering on the key type.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135910,"byte_end":135977,"line_start":793,"line_end":793,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135982,"byte_end":135985,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":135990,"byte_end":136004,"line_start":795,"line_end":795,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136009,"byte_end":136012,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136017,"byte_end":136033,"line_start":797,"line_end":797,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136038,"byte_end":136041,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136046,"byte_end":136053,"line_start":799,"line_end":799,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136058,"byte_end":136093,"line_start":800,"line_end":800,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136098,"byte_end":136101,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136106,"byte_end":136140,"line_start":802,"line_end":802,"column_start":5,"column_end":39}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136145,"byte_end":136168,"line_start":803,"line_end":803,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136173,"byte_end":136215,"line_start":804,"line_end":804,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136220,"byte_end":136257,"line_start":805,"line_end":805,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136262,"byte_end":136269,"line_start":806,"line_end":806,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136274,"byte_end":136319,"line_start":807,"line_end":807,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137458,"byte_end":137464,"line_start":850,"line_end":850,"column_start":12,"column_end":18},"name":"append","qualname":"<BTreeMap<K, V>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` into `Self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all elements from `other` into `Self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136698,"byte_end":136769,"line_start":821,"line_end":821,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136774,"byte_end":136777,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136782,"byte_end":136796,"line_start":823,"line_end":823,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136801,"byte_end":136804,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136809,"byte_end":136816,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136821,"byte_end":136856,"line_start":826,"line_end":826,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136861,"byte_end":136864,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136869,"byte_end":136901,"line_start":828,"line_end":828,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136906,"byte_end":136927,"line_start":829,"line_end":829,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136932,"byte_end":136953,"line_start":830,"line_end":830,"column_start":5,"column_end":26}},{"value":"/ a.insert(3, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136958,"byte_end":136979,"line_start":831,"line_end":831,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136984,"byte_end":136987,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":136992,"byte_end":137024,"line_start":833,"line_end":833,"column_start":5,"column_end":37}},{"value":"/ b.insert(3, \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137029,"byte_end":137050,"line_start":834,"line_end":834,"column_start":5,"column_end":26}},{"value":"/ b.insert(4, \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137055,"byte_end":137076,"line_start":835,"line_end":835,"column_start":5,"column_end":26}},{"value":"/ b.insert(5, \"f\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137081,"byte_end":137102,"line_start":836,"line_end":836,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137107,"byte_end":137110,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ a.append(&mut b);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137115,"byte_end":137136,"line_start":838,"line_end":838,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137141,"byte_end":137144,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 5);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137149,"byte_end":137176,"line_start":840,"line_end":840,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137181,"byte_end":137208,"line_start":841,"line_end":841,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137213,"byte_end":137216,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a[&1], \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137221,"byte_end":137248,"line_start":843,"line_end":843,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&2], \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137253,"byte_end":137280,"line_start":844,"line_end":844,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&3], \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137285,"byte_end":137312,"line_start":845,"line_end":845,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&4], \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137317,"byte_end":137344,"line_start":846,"line_end":846,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&5], \"f\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137349,"byte_end":137376,"line_start":847,"line_end":847,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137381,"byte_end":137388,"line_start":848,"line_end":848,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_append\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":137393,"byte_end":137446,"line_start":849,"line_end":849,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139339,"byte_end":139344,"line_start":902,"line_end":902,"column_start":12,"column_end":17},"name":"range","qualname":"<BTreeMap<K, V>>::range","value":"fn <T, R> (&self, range: R) -> Range<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a double-ended iterator over a sub-range of elements in the map.\n The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n yield elements from min (inclusive) to max (exclusive).\n The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n range from 4 to 10.","sig":null,"attributes":[{"value":"/ Constructs a double-ended iterator over a sub-range of elements in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138209,"byte_end":138288,"line_start":872,"line_end":872,"column_start":5,"column_end":84}},{"value":"/ The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138293,"byte_end":138380,"line_start":873,"line_end":873,"column_start":5,"column_end":92}},{"value":"/ yield elements from min (inclusive) to max (exclusive).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138385,"byte_end":138444,"line_start":874,"line_end":874,"column_start":5,"column_end":64}},{"value":"/ The range may also be entered as `(Bound<T>, Bound<T>)`, so for example","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138449,"byte_end":138524,"line_start":875,"line_end":875,"column_start":5,"column_end":80}},{"value":"/ `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138529,"byte_end":138614,"line_start":876,"line_end":876,"column_start":5,"column_end":90}},{"value":"/ range from 4 to 10.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138619,"byte_end":138642,"line_start":877,"line_end":877,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138647,"byte_end":138650,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138655,"byte_end":138667,"line_start":879,"line_end":879,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138672,"byte_end":138675,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ Panics if range `start > end`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138680,"byte_end":138714,"line_start":881,"line_end":881,"column_start":5,"column_end":39}},{"value":"/ Panics if range `start == end` and both bounds are `Excluded`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138719,"byte_end":138785,"line_start":882,"line_end":882,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138790,"byte_end":138793,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138798,"byte_end":138812,"line_start":884,"line_end":884,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138817,"byte_end":138820,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138825,"byte_end":138841,"line_start":886,"line_end":886,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138846,"byte_end":138849,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138854,"byte_end":138861,"line_start":888,"line_end":888,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138866,"byte_end":138901,"line_start":889,"line_end":889,"column_start":5,"column_end":40}},{"value":"/ use std::ops::Bound::Included;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138906,"byte_end":138940,"line_start":890,"line_end":890,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138945,"byte_end":138948,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138953,"byte_end":138987,"line_start":892,"line_end":892,"column_start":5,"column_end":39}},{"value":"/ map.insert(3, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":138992,"byte_end":139015,"line_start":893,"line_end":893,"column_start":5,"column_end":28}},{"value":"/ map.insert(5, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139020,"byte_end":139043,"line_start":894,"line_end":894,"column_start":5,"column_end":28}},{"value":"/ map.insert(8, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139048,"byte_end":139071,"line_start":895,"line_end":895,"column_start":5,"column_end":28}},{"value":"/ for (&key, &value) in map.range((Included(&4), Included(&8))) {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139076,"byte_end":139143,"line_start":896,"line_end":896,"column_start":5,"column_end":72}},{"value":"/     println!(\"{}: {}\", key, value);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139148,"byte_end":139187,"line_start":897,"line_end":897,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139192,"byte_end":139197,"line_start":898,"line_end":898,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(Some((&5, &\"b\")), map.range(4..).next());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139202,"byte_end":139258,"line_start":899,"line_end":899,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139263,"byte_end":139270,"line_start":900,"line_end":900,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139275,"byte_end":139327,"line_start":901,"line_end":901,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140797,"byte_end":140806,"line_start":946,"line_end":946,"column_start":12,"column_end":21},"name":"range_mut","qualname":"<BTreeMap<K, V>>::range_mut","value":"fn <T, R> (&mut self, range: R) -> RangeMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a mutable double-ended iterator over a sub-range of elements in the map.\n The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n yield elements from min (inclusive) to max (exclusive).\n The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n range from 4 to 10.","sig":null,"attributes":[{"value":"/ Constructs a mutable double-ended iterator over a sub-range of elements in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139660,"byte_end":139747,"line_start":915,"line_end":915,"column_start":5,"column_end":92}},{"value":"/ The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139752,"byte_end":139839,"line_start":916,"line_end":916,"column_start":5,"column_end":92}},{"value":"/ yield elements from min (inclusive) to max (exclusive).","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139844,"byte_end":139903,"line_start":917,"line_end":917,"column_start":5,"column_end":64}},{"value":"/ The range may also be entered as `(Bound<T>, Bound<T>)`, so for example","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139908,"byte_end":139983,"line_start":918,"line_end":918,"column_start":5,"column_end":80}},{"value":"/ `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":139988,"byte_end":140073,"line_start":919,"line_end":919,"column_start":5,"column_end":90}},{"value":"/ range from 4 to 10.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140078,"byte_end":140101,"line_start":920,"line_end":920,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140106,"byte_end":140109,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140114,"byte_end":140126,"line_start":922,"line_end":922,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140131,"byte_end":140134,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ Panics if range `start > end`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140139,"byte_end":140173,"line_start":924,"line_end":924,"column_start":5,"column_end":39}},{"value":"/ Panics if range `start == end` and both bounds are `Excluded`.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140178,"byte_end":140244,"line_start":925,"line_end":925,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140249,"byte_end":140252,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140257,"byte_end":140271,"line_start":927,"line_end":927,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140276,"byte_end":140279,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140284,"byte_end":140300,"line_start":929,"line_end":929,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140305,"byte_end":140308,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140313,"byte_end":140320,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140325,"byte_end":140360,"line_start":932,"line_end":932,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140365,"byte_end":140368,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, i32> = [\"Alice\", \"Bob\", \"Carol\", \"Cheryl\"]","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140373,"byte_end":140447,"line_start":934,"line_end":934,"column_start":5,"column_end":79}},{"value":"/     .iter()","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140452,"byte_end":140467,"line_start":935,"line_end":935,"column_start":5,"column_end":20}},{"value":"/     .map(|&s| (s, 0))","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140472,"byte_end":140497,"line_start":936,"line_end":936,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140502,"byte_end":140521,"line_start":937,"line_end":937,"column_start":5,"column_end":24}},{"value":"/ for (_, balance) in map.range_mut(\"B\"..\"Cheryl\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140526,"byte_end":140580,"line_start":938,"line_end":938,"column_start":5,"column_end":59}},{"value":"/     *balance += 100;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140585,"byte_end":140609,"line_start":939,"line_end":939,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140614,"byte_end":140619,"line_start":940,"line_end":940,"column_start":5,"column_end":10}},{"value":"/ for (name, balance) in &map {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140624,"byte_end":140657,"line_start":941,"line_end":941,"column_start":5,"column_end":38}},{"value":"/     println!(\"{} => {}\", name, balance);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140662,"byte_end":140706,"line_start":942,"line_end":942,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140711,"byte_end":140716,"line_start":943,"line_end":943,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140721,"byte_end":140728,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":140733,"byte_end":140785,"line_start":945,"line_end":945,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141730,"byte_end":141735,"line_start":978,"line_end":978,"column_start":12,"column_end":17},"name":"entry","qualname":"<BTreeMap<K, V>>::entry","value":"fn (&mut self, key: K) -> Entry<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141164,"byte_end":141246,"line_start":959,"line_end":959,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141251,"byte_end":141254,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141259,"byte_end":141273,"line_start":961,"line_end":961,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141278,"byte_end":141281,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141286,"byte_end":141302,"line_start":963,"line_end":963,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141307,"byte_end":141310,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141315,"byte_end":141322,"line_start":965,"line_end":965,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141327,"byte_end":141362,"line_start":966,"line_end":966,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141367,"byte_end":141370,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ let mut count: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141375,"byte_end":141434,"line_start":968,"line_end":968,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141439,"byte_end":141442,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ // count the number of occurrences of letters in the vec","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141447,"byte_end":141507,"line_start":970,"line_end":970,"column_start":5,"column_end":65}},{"value":"/ for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141512,"byte_end":141556,"line_start":971,"line_end":971,"column_start":5,"column_end":49}},{"value":"/     *count.entry(x).or_insert(0) += 1;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141561,"byte_end":141603,"line_start":972,"line_end":972,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141608,"byte_end":141613,"line_start":973,"line_end":973,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141618,"byte_end":141621,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count[\"a\"], 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141626,"byte_end":141656,"line_start":975,"line_end":975,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141661,"byte_end":141668,"line_start":976,"line_end":976,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":141673,"byte_end":141718,"line_start":977,"line_end":977,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":146001,"byte_end":146010,"line_start":1092,"line_end":1092,"column_start":12,"column_end":21},"name":"split_off","qualname":"<BTreeMap<K, V>>::split_off","value":"fn <Q> (&mut self, key: &Q) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given key. Returns everything after the given key,\n including the key.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given key. Returns everything after the given key,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145213,"byte_end":145305,"line_start":1062,"line_end":1062,"column_start":5,"column_end":97}},{"value":"/ including the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145310,"byte_end":145332,"line_start":1063,"line_end":1063,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145337,"byte_end":145340,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145345,"byte_end":145359,"line_start":1065,"line_end":1065,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145364,"byte_end":145367,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145372,"byte_end":145388,"line_start":1067,"line_end":1067,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145393,"byte_end":145396,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145401,"byte_end":145408,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145413,"byte_end":145448,"line_start":1070,"line_end":1070,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145453,"byte_end":145456,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145461,"byte_end":145493,"line_start":1072,"line_end":1072,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145498,"byte_end":145519,"line_start":1073,"line_end":1073,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145524,"byte_end":145545,"line_start":1074,"line_end":1074,"column_start":5,"column_end":26}},{"value":"/ a.insert(3, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145550,"byte_end":145571,"line_start":1075,"line_end":1075,"column_start":5,"column_end":26}},{"value":"/ a.insert(17, \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145576,"byte_end":145598,"line_start":1076,"line_end":1076,"column_start":5,"column_end":27}},{"value":"/ a.insert(41, \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145603,"byte_end":145625,"line_start":1077,"line_end":1077,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145630,"byte_end":145633,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ let b = a.split_off(&3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145638,"byte_end":145666,"line_start":1079,"line_end":1079,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145671,"byte_end":145674,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 2);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145679,"byte_end":145706,"line_start":1081,"line_end":1081,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145711,"byte_end":145738,"line_start":1082,"line_end":1082,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145743,"byte_end":145746,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a[&1], \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145751,"byte_end":145778,"line_start":1084,"line_end":1084,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a[&2], \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145783,"byte_end":145810,"line_start":1085,"line_end":1085,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145815,"byte_end":145818,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b[&3], \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145823,"byte_end":145850,"line_start":1087,"line_end":1087,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b[&17], \"d\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145855,"byte_end":145883,"line_start":1088,"line_end":1088,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(b[&41], \"e\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145888,"byte_end":145916,"line_start":1089,"line_end":1089,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145921,"byte_end":145928,"line_start":1090,"line_end":1090,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_split_off\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":145933,"byte_end":145989,"line_start":1091,"line_end":1091,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174762,"byte_end":174766,"line_start":2053,"line_end":2053,"column_start":12,"column_end":16},"name":"iter","qualname":"<BTreeMap<K, V>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the entries of the map, sorted by key.","sig":null,"attributes":[{"value":"/ Gets an iterator over the entries of the map, sorted by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174141,"byte_end":174205,"line_start":2031,"line_end":2031,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174210,"byte_end":174213,"line_start":2032,"line_end":2032,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174218,"byte_end":174232,"line_start":2033,"line_end":2033,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174237,"byte_end":174240,"line_start":2034,"line_end":2034,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174245,"byte_end":174261,"line_start":2035,"line_end":2035,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174266,"byte_end":174269,"line_start":2036,"line_end":2036,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174274,"byte_end":174281,"line_start":2037,"line_end":2037,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174286,"byte_end":174321,"line_start":2038,"line_end":2038,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174326,"byte_end":174329,"line_start":2039,"line_end":2039,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174334,"byte_end":174368,"line_start":2040,"line_end":2040,"column_start":5,"column_end":39}},{"value":"/ map.insert(3, \"c\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174373,"byte_end":174396,"line_start":2041,"line_end":2041,"column_start":5,"column_end":28}},{"value":"/ map.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174401,"byte_end":174424,"line_start":2042,"line_end":2042,"column_start":5,"column_end":28}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174429,"byte_end":174452,"line_start":2043,"line_end":2043,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174457,"byte_end":174460,"line_start":2044,"line_end":2044,"column_start":5,"column_end":8}},{"value":"/ for (key, value) in map.iter() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174465,"byte_end":174501,"line_start":2045,"line_end":2045,"column_start":5,"column_end":41}},{"value":"/     println!(\"{}: {}\", key, value);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174506,"byte_end":174545,"line_start":2046,"line_end":2046,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174550,"byte_end":174555,"line_start":2047,"line_end":2047,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174560,"byte_end":174563,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/ let (first_key, first_value) = map.iter().next().unwrap();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174568,"byte_end":174630,"line_start":2049,"line_end":2049,"column_start":5,"column_end":67}},{"value":"/ assert_eq!((*first_key, *first_value), (1, \"a\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174635,"byte_end":174688,"line_start":2050,"line_end":2050,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174693,"byte_end":174700,"line_start":2051,"line_end":2051,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174705,"byte_end":174750,"line_start":2052,"line_end":2052,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175603,"byte_end":175611,"line_start":2085,"line_end":2085,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BTreeMap<K, V>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable iterator over the entries of the map, sorted by key.","sig":null,"attributes":[{"value":"/ Gets a mutable iterator over the entries of the map, sorted by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175023,"byte_end":175094,"line_start":2063,"line_end":2063,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175099,"byte_end":175102,"line_start":2064,"line_end":2064,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175107,"byte_end":175121,"line_start":2065,"line_end":2065,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175126,"byte_end":175129,"line_start":2066,"line_end":2066,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175134,"byte_end":175150,"line_start":2067,"line_end":2067,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175155,"byte_end":175158,"line_start":2068,"line_end":2068,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175163,"byte_end":175170,"line_start":2069,"line_end":2069,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175175,"byte_end":175210,"line_start":2070,"line_end":2070,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175215,"byte_end":175218,"line_start":2071,"line_end":2071,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175223,"byte_end":175257,"line_start":2072,"line_end":2072,"column_start":5,"column_end":39}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175262,"byte_end":175285,"line_start":2073,"line_end":2073,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175290,"byte_end":175313,"line_start":2074,"line_end":2074,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175318,"byte_end":175341,"line_start":2075,"line_end":2075,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175346,"byte_end":175349,"line_start":2076,"line_end":2076,"column_start":5,"column_end":8}},{"value":"/ // add 10 to the value if the key isn't \"a\"","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175354,"byte_end":175401,"line_start":2077,"line_end":2077,"column_start":5,"column_end":52}},{"value":"/ for (key, value) in map.iter_mut() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175406,"byte_end":175446,"line_start":2078,"line_end":2078,"column_start":5,"column_end":45}},{"value":"/     if key != &\"a\" {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175451,"byte_end":175475,"line_start":2079,"line_end":2079,"column_start":5,"column_end":29}},{"value":"/         *value += 10;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175480,"byte_end":175505,"line_start":2080,"line_end":2080,"column_start":5,"column_end":30}},{"value":"/     }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175510,"byte_end":175519,"line_start":2081,"line_end":2081,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175524,"byte_end":175529,"line_start":2082,"line_end":2082,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175534,"byte_end":175541,"line_start":2083,"line_end":2083,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175546,"byte_end":175591,"line_start":2084,"line_end":2084,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176431,"byte_end":176435,"line_start":2115,"line_end":2115,"column_start":12,"column_end":16},"name":"keys","qualname":"<BTreeMap<K, V>>::keys","value":"fn (&self) -> Keys<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the keys of the map, in sorted order.","sig":null,"attributes":[{"value":"/ Gets an iterator over the keys of the map, in sorted order.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":175983,"byte_end":176046,"line_start":2098,"line_end":2098,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176051,"byte_end":176054,"line_start":2099,"line_end":2099,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176059,"byte_end":176073,"line_start":2100,"line_end":2100,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176078,"byte_end":176081,"line_start":2101,"line_end":2101,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176086,"byte_end":176102,"line_start":2102,"line_end":2102,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176107,"byte_end":176110,"line_start":2103,"line_end":2103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176115,"byte_end":176122,"line_start":2104,"line_end":2104,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176127,"byte_end":176162,"line_start":2105,"line_end":2105,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176167,"byte_end":176170,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176175,"byte_end":176207,"line_start":2107,"line_end":2107,"column_start":5,"column_end":37}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176212,"byte_end":176233,"line_start":2108,"line_end":2108,"column_start":5,"column_end":26}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176238,"byte_end":176259,"line_start":2109,"line_end":2109,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176264,"byte_end":176267,"line_start":2110,"line_end":2110,"column_start":5,"column_end":8}},{"value":"/ let keys: Vec<_> = a.keys().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176272,"byte_end":176323,"line_start":2111,"line_end":2111,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(keys, [1, 2]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176328,"byte_end":176357,"line_start":2112,"line_end":2112,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176362,"byte_end":176369,"line_start":2113,"line_end":2113,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176374,"byte_end":176419,"line_start":2114,"line_end":2114,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176993,"byte_end":176999,"line_start":2136,"line_end":2136,"column_start":12,"column_end":18},"name":"values","qualname":"<BTreeMap<K, V>>::values","value":"fn (&self) -> Values<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the values of the map, in order by key.","sig":null,"attributes":[{"value":"/ Gets an iterator over the values of the map, in order by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176510,"byte_end":176575,"line_start":2119,"line_end":2119,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176580,"byte_end":176583,"line_start":2120,"line_end":2120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176588,"byte_end":176602,"line_start":2121,"line_end":2121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176607,"byte_end":176610,"line_start":2122,"line_end":2122,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176615,"byte_end":176631,"line_start":2123,"line_end":2123,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176636,"byte_end":176639,"line_start":2124,"line_end":2124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176644,"byte_end":176651,"line_start":2125,"line_end":2125,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176656,"byte_end":176691,"line_start":2126,"line_end":2126,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176696,"byte_end":176699,"line_start":2127,"line_end":2127,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176704,"byte_end":176736,"line_start":2128,"line_end":2128,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, \"hello\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176741,"byte_end":176766,"line_start":2129,"line_end":2129,"column_start":5,"column_end":30}},{"value":"/ a.insert(2, \"goodbye\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176771,"byte_end":176798,"line_start":2130,"line_end":2130,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176803,"byte_end":176806,"line_start":2131,"line_end":2131,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<&str> = a.values().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176811,"byte_end":176869,"line_start":2132,"line_end":2132,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(values, [\"hello\", \"goodbye\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176874,"byte_end":176919,"line_start":2133,"line_end":2133,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176924,"byte_end":176931,"line_start":2134,"line_end":2134,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":176936,"byte_end":176981,"line_start":2135,"line_end":2135,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177755,"byte_end":177765,"line_start":2162,"line_end":2162,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<BTreeMap<K, V>>::values_mut","value":"fn (&mut self) -> ValuesMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable iterator over the values of the map, in order by key.","sig":null,"attributes":[{"value":"/ Gets a mutable iterator over the values of the map, in order by key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177078,"byte_end":177150,"line_start":2140,"line_end":2140,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177155,"byte_end":177158,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177163,"byte_end":177177,"line_start":2142,"line_end":2142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177182,"byte_end":177185,"line_start":2143,"line_end":2143,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177190,"byte_end":177206,"line_start":2144,"line_end":2144,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177211,"byte_end":177214,"line_start":2145,"line_end":2145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177219,"byte_end":177226,"line_start":2146,"line_end":2146,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177231,"byte_end":177266,"line_start":2147,"line_end":2147,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177271,"byte_end":177274,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177279,"byte_end":177311,"line_start":2149,"line_end":2149,"column_start":5,"column_end":37}},{"value":"/ a.insert(1, String::from(\"hello\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177316,"byte_end":177355,"line_start":2150,"line_end":2150,"column_start":5,"column_end":44}},{"value":"/ a.insert(2, String::from(\"goodbye\"));","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177360,"byte_end":177401,"line_start":2151,"line_end":2151,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177406,"byte_end":177409,"line_start":2152,"line_end":2152,"column_start":5,"column_end":8}},{"value":"/ for value in a.values_mut() {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177414,"byte_end":177447,"line_start":2153,"line_end":2153,"column_start":5,"column_end":38}},{"value":"/     value.push_str(\"!\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177452,"byte_end":177480,"line_start":2154,"line_end":2154,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177485,"byte_end":177490,"line_start":2155,"line_end":2155,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177495,"byte_end":177498,"line_start":2156,"line_end":2156,"column_start":5,"column_end":8}},{"value":"/ let values: Vec<String> = a.values().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177503,"byte_end":177563,"line_start":2157,"line_end":2157,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(values, [String::from(\"hello!\"),","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177568,"byte_end":177615,"line_start":2158,"line_end":2158,"column_start":5,"column_end":52}},{"value":"/                     String::from(\"goodbye!\")]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177620,"byte_end":177671,"line_start":2159,"line_end":2159,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177676,"byte_end":177683,"line_start":2160,"line_end":2160,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_values_mut\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177688,"byte_end":177743,"line_start":2161,"line_end":2161,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178229,"byte_end":178232,"line_start":2181,"line_end":2181,"column_start":12,"column_end":15},"name":"len","qualname":"<BTreeMap<K, V>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177858,"byte_end":177904,"line_start":2166,"line_end":2166,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177909,"byte_end":177912,"line_start":2167,"line_end":2167,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177917,"byte_end":177931,"line_start":2168,"line_end":2168,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177936,"byte_end":177939,"line_start":2169,"line_end":2169,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177944,"byte_end":177960,"line_start":2170,"line_end":2170,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177965,"byte_end":177968,"line_start":2171,"line_end":2171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177973,"byte_end":177980,"line_start":2172,"line_end":2172,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":177985,"byte_end":178020,"line_start":2173,"line_end":2173,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178025,"byte_end":178028,"line_start":2174,"line_end":2174,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178033,"byte_end":178065,"line_start":2175,"line_end":2175,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178070,"byte_end":178097,"line_start":2176,"line_end":2176,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178102,"byte_end":178123,"line_start":2177,"line_end":2177,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178128,"byte_end":178155,"line_start":2178,"line_end":2178,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178160,"byte_end":178167,"line_start":2179,"line_end":2179,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178172,"byte_end":178217,"line_start":2180,"line_end":2180,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178657,"byte_end":178665,"line_start":2200,"line_end":2200,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BTreeMap<K, V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178282,"byte_end":178333,"line_start":2185,"line_end":2185,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178338,"byte_end":178341,"line_start":2186,"line_end":2186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178346,"byte_end":178360,"line_start":2187,"line_end":2187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178365,"byte_end":178368,"line_start":2188,"line_end":2188,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178373,"byte_end":178389,"line_start":2189,"line_end":2189,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178394,"byte_end":178397,"line_start":2190,"line_end":2190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178402,"byte_end":178409,"line_start":2191,"line_end":2191,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178414,"byte_end":178449,"line_start":2192,"line_end":2192,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178454,"byte_end":178457,"line_start":2193,"line_end":2193,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178462,"byte_end":178494,"line_start":2194,"line_end":2194,"column_start":5,"column_end":37}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178499,"byte_end":178525,"line_start":2195,"line_end":2195,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178530,"byte_end":178551,"line_start":2196,"line_end":2196,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178556,"byte_end":178583,"line_start":2197,"line_end":2197,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178588,"byte_end":178595,"line_start":2198,"line_end":2198,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178600,"byte_end":178645,"line_start":2199,"line_end":2199,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179222,"byte_end":179231,"line_start":2220,"line_end":2220,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178758,"byte_end":178840,"line_start":2206,"line_end":2206,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178845,"byte_end":178895,"line_start":2207,"line_end":2207,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178900,"byte_end":178903,"line_start":2208,"line_end":2208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178908,"byte_end":178922,"line_start":2209,"line_end":2209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178927,"byte_end":178930,"line_start":2210,"line_end":2210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178935,"byte_end":178942,"line_start":2211,"line_end":2211,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178947,"byte_end":178982,"line_start":2212,"line_end":2212,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178987,"byte_end":178990,"line_start":2213,"line_end":2213,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178995,"byte_end":179052,"line_start":2214,"line_end":2214,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179057,"byte_end":179098,"line_start":2215,"line_end":2215,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179103,"byte_end":179106,"line_start":2216,"line_end":2216,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179111,"byte_end":179148,"line_start":2217,"line_end":2217,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179153,"byte_end":179160,"line_start":2218,"line_end":2218,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179165,"byte_end":179210,"line_start":2219,"line_end":2219,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179963,"byte_end":179977,"line_start":2243,"line_end":2243,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179408,"byte_end":179501,"line_start":2227,"line_end":2227,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179506,"byte_end":179568,"line_start":2228,"line_end":2228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179573,"byte_end":179576,"line_start":2229,"line_end":2229,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179581,"byte_end":179595,"line_start":2230,"line_end":2230,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179600,"byte_end":179603,"line_start":2231,"line_end":2231,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179608,"byte_end":179615,"line_start":2232,"line_end":2232,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179620,"byte_end":179655,"line_start":2233,"line_end":2233,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179660,"byte_end":179663,"line_start":2234,"line_end":2234,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, String> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179668,"byte_end":179726,"line_start":2235,"line_end":2235,"column_start":5,"column_end":63}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179731,"byte_end":179762,"line_start":2236,"line_end":2236,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179767,"byte_end":179770,"line_start":2237,"line_end":2237,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179775,"byte_end":179823,"line_start":2238,"line_end":2238,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179828,"byte_end":179831,"line_start":2239,"line_end":2239,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179836,"byte_end":179889,"line_start":2240,"line_end":2240,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179894,"byte_end":179901,"line_start":2241,"line_end":2241,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":179906,"byte_end":179951,"line_start":2242,"line_end":2242,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180523,"byte_end":180526,"line_start":2261,"line_end":2261,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180174,"byte_end":180218,"line_start":2250,"line_end":2250,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180223,"byte_end":180226,"line_start":2251,"line_end":2251,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180231,"byte_end":180245,"line_start":2252,"line_end":2252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180250,"byte_end":180253,"line_start":2253,"line_end":2253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180258,"byte_end":180265,"line_start":2254,"line_end":2254,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180270,"byte_end":180305,"line_start":2255,"line_end":2255,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180310,"byte_end":180313,"line_start":2256,"line_end":2256,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180318,"byte_end":180375,"line_start":2257,"line_end":2257,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180380,"byte_end":180439,"line_start":2258,"line_end":2258,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180444,"byte_end":180451,"line_start":2259,"line_end":2259,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_keys\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180456,"byte_end":180511,"line_start":2260,"line_end":2260,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181326,"byte_end":181336,"line_start":2289,"line_end":2289,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180679,"byte_end":180747,"line_start":2268,"line_end":2268,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180752,"byte_end":180787,"line_start":2269,"line_end":2269,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180792,"byte_end":180795,"line_start":2270,"line_end":2270,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180800,"byte_end":180814,"line_start":2271,"line_end":2271,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180819,"byte_end":180822,"line_start":2272,"line_end":2272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180827,"byte_end":180834,"line_start":2273,"line_end":2273,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180839,"byte_end":180874,"line_start":2274,"line_end":2274,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180879,"byte_end":180882,"line_start":2275,"line_end":2275,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180887,"byte_end":180944,"line_start":2276,"line_end":2276,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180949,"byte_end":180952,"line_start":2277,"line_end":2277,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180957,"byte_end":180983,"line_start":2278,"line_end":2278,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":180988,"byte_end":181023,"line_start":2279,"line_end":2279,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181028,"byte_end":181050,"line_start":2280,"line_end":2280,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181055,"byte_end":181092,"line_start":2281,"line_end":2281,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181097,"byte_end":181100,"line_start":2282,"line_end":2282,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181105,"byte_end":181131,"line_start":2283,"line_end":2283,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181136,"byte_end":181171,"line_start":2284,"line_end":2284,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181176,"byte_end":181198,"line_start":2285,"line_end":2285,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181203,"byte_end":181240,"line_start":2286,"line_end":2286,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181245,"byte_end":181252,"line_start":2287,"line_end":2287,"column_start":5,"column_end":12}},{"value":"stable(feature = \"entry_and_modify\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181257,"byte_end":181314,"line_start":2288,"line_end":2288,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182148,"byte_end":182158,"line_start":2318,"line_end":2318,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"stable(feature = \"entry_or_default\", since = \"1.28.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181657,"byte_end":181714,"line_start":2304,"line_end":2304,"column_start":5,"column_end":62}},{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181719,"byte_end":181795,"line_start":2305,"line_end":2305,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181800,"byte_end":181862,"line_start":2306,"line_end":2306,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181867,"byte_end":181870,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181875,"byte_end":181889,"line_start":2308,"line_end":2308,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181894,"byte_end":181897,"line_start":2309,"line_end":2309,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181902,"byte_end":181909,"line_start":2310,"line_end":2310,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181914,"byte_end":181949,"line_start":2311,"line_end":2311,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181954,"byte_end":181957,"line_start":2312,"line_end":2312,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181962,"byte_end":182027,"line_start":2313,"line_end":2313,"column_start":5,"column_end":70}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182032,"byte_end":182072,"line_start":2314,"line_end":2314,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182077,"byte_end":182080,"line_start":2315,"line_end":2315,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182085,"byte_end":182124,"line_start":2316,"line_end":2316,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182129,"byte_end":182136,"line_start":2317,"line_end":2317,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182791,"byte_end":182794,"line_start":2339,"line_end":2339,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the VacantEntry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182380,"byte_end":182453,"line_start":2327,"line_end":2327,"column_start":5,"column_end":78}},{"value":"/ through the VacantEntry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182458,"byte_end":182486,"line_start":2328,"line_end":2328,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182491,"byte_end":182494,"line_start":2329,"line_end":2329,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182499,"byte_end":182513,"line_start":2330,"line_end":2330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182518,"byte_end":182521,"line_start":2331,"line_end":2331,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182526,"byte_end":182533,"line_start":2332,"line_end":2332,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182538,"byte_end":182573,"line_start":2333,"line_end":2333,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182578,"byte_end":182581,"line_start":2334,"line_end":2334,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182586,"byte_end":182643,"line_start":2335,"line_end":2335,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182648,"byte_end":182707,"line_start":2336,"line_end":2336,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182712,"byte_end":182719,"line_start":2337,"line_end":2337,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_keys\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182724,"byte_end":182779,"line_start":2338,"line_end":2338,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183270,"byte_end":183278,"line_start":2358,"line_end":2358,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182839,"byte_end":182869,"line_start":2343,"line_end":2343,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182874,"byte_end":182877,"line_start":2344,"line_end":2344,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182882,"byte_end":182896,"line_start":2345,"line_end":2345,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182901,"byte_end":182904,"line_start":2346,"line_end":2346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182909,"byte_end":182916,"line_start":2347,"line_end":2347,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182921,"byte_end":182956,"line_start":2348,"line_end":2348,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182961,"byte_end":183004,"line_start":2349,"line_end":2349,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183009,"byte_end":183012,"line_start":2350,"line_end":2350,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183017,"byte_end":183074,"line_start":2351,"line_end":2351,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183079,"byte_end":183082,"line_start":2352,"line_end":2352,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183087,"byte_end":183141,"line_start":2353,"line_end":2353,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183146,"byte_end":183167,"line_start":2354,"line_end":2354,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183172,"byte_end":183177,"line_start":2355,"line_end":2355,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183182,"byte_end":183189,"line_start":2356,"line_end":2356,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183194,"byte_end":183258,"line_start":2357,"line_end":2357,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183883,"byte_end":183889,"line_start":2380,"line_end":2380,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the `VacantEntry`'s key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the `VacantEntry`'s key,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183320,"byte_end":183381,"line_start":2362,"line_end":2362,"column_start":5,"column_end":66}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183386,"byte_end":183428,"line_start":2363,"line_end":2363,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183433,"byte_end":183436,"line_start":2364,"line_end":2364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183441,"byte_end":183455,"line_start":2365,"line_end":2365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183460,"byte_end":183463,"line_start":2366,"line_end":2366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183468,"byte_end":183475,"line_start":2367,"line_end":2367,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183480,"byte_end":183515,"line_start":2368,"line_end":2368,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183520,"byte_end":183523,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ let mut count: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183528,"byte_end":183587,"line_start":2370,"line_end":2370,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183592,"byte_end":183595,"line_start":2371,"line_end":2371,"column_start":5,"column_end":8}},{"value":"/ // count the number of occurrences of letters in the vec","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183600,"byte_end":183660,"line_start":2372,"line_end":2372,"column_start":5,"column_end":65}},{"value":"/ for x in vec![\"a\",\"b\",\"a\",\"c\",\"a\",\"b\"] {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183665,"byte_end":183709,"line_start":2373,"line_end":2373,"column_start":5,"column_end":49}},{"value":"/     *count.entry(x).or_insert(0) += 1;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183714,"byte_end":183756,"line_start":2374,"line_end":2374,"column_start":5,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183761,"byte_end":183766,"line_start":2375,"line_end":2375,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183771,"byte_end":183774,"line_start":2376,"line_end":2376,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count[\"a\"], 3);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183779,"byte_end":183809,"line_start":2377,"line_end":2377,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183814,"byte_end":183821,"line_start":2378,"line_end":2378,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":183826,"byte_end":183871,"line_start":2379,"line_end":2379,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185555,"byte_end":185558,"line_start":2433,"line_end":2433,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185159,"byte_end":185204,"line_start":2421,"line_end":2421,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185209,"byte_end":185212,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185217,"byte_end":185231,"line_start":2423,"line_end":2423,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185236,"byte_end":185239,"line_start":2424,"line_end":2424,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185244,"byte_end":185251,"line_start":2425,"line_end":2425,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185256,"byte_end":185291,"line_start":2426,"line_end":2426,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185296,"byte_end":185299,"line_start":2427,"line_end":2427,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185304,"byte_end":185361,"line_start":2428,"line_end":2428,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185366,"byte_end":185407,"line_start":2429,"line_end":2429,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185412,"byte_end":185471,"line_start":2430,"line_end":2430,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185476,"byte_end":185483,"line_start":2431,"line_end":2431,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_keys\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185488,"byte_end":185543,"line_start":2432,"line_end":2432,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186291,"byte_end":186303,"line_start":2457,"line_end":2457,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take ownership of the key and value from the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185628,"byte_end":185681,"line_start":2437,"line_end":2437,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185686,"byte_end":185689,"line_start":2438,"line_end":2438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185694,"byte_end":185708,"line_start":2439,"line_end":2439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185713,"byte_end":185716,"line_start":2440,"line_end":2440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185721,"byte_end":185728,"line_start":2441,"line_end":2441,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185733,"byte_end":185768,"line_start":2442,"line_end":2442,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185773,"byte_end":185816,"line_start":2443,"line_end":2443,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185821,"byte_end":185824,"line_start":2444,"line_end":2444,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185829,"byte_end":185886,"line_start":2445,"line_end":2445,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185891,"byte_end":185932,"line_start":2446,"line_end":2446,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185937,"byte_end":185940,"line_start":2447,"line_end":2447,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185945,"byte_end":186001,"line_start":2448,"line_end":2448,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186006,"byte_end":186050,"line_start":2449,"line_end":2449,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186055,"byte_end":186080,"line_start":2450,"line_end":2450,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186085,"byte_end":186090,"line_start":2451,"line_end":2451,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186095,"byte_end":186098,"line_start":2452,"line_end":2452,"column_start":5,"column_end":8}},{"value":"/ // If now try to get the value, it will panic:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186103,"byte_end":186153,"line_start":2453,"line_end":2453,"column_start":5,"column_end":55}},{"value":"/ // println!(\"{}\", map[\"poneyland\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186158,"byte_end":186198,"line_start":2454,"line_end":2454,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186203,"byte_end":186210,"line_start":2455,"line_end":2455,"column_start":5,"column_end":12}},{"value":"stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186215,"byte_end":186279,"line_start":2456,"line_end":2456,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186847,"byte_end":186850,"line_start":2477,"line_end":2477,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186358,"byte_end":186405,"line_start":2461,"line_end":2461,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186410,"byte_end":186413,"line_start":2462,"line_end":2462,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186418,"byte_end":186432,"line_start":2463,"line_end":2463,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186437,"byte_end":186440,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186445,"byte_end":186452,"line_start":2465,"line_end":2465,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186457,"byte_end":186492,"line_start":2466,"line_end":2466,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186497,"byte_end":186540,"line_start":2467,"line_end":2467,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186545,"byte_end":186548,"line_start":2468,"line_end":2468,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186553,"byte_end":186610,"line_start":2469,"line_end":2469,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186615,"byte_end":186656,"line_start":2470,"line_end":2470,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186661,"byte_end":186664,"line_start":2471,"line_end":2471,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186669,"byte_end":186725,"line_start":2472,"line_end":2472,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186730,"byte_end":186763,"line_start":2473,"line_end":2473,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186768,"byte_end":186773,"line_start":2474,"line_end":2474,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186778,"byte_end":186785,"line_start":2475,"line_end":2475,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186790,"byte_end":186835,"line_start":2476,"line_end":2476,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187824,"byte_end":187831,"line_start":2508,"line_end":2508,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186920,"byte_end":186975,"line_start":2481,"line_end":2481,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186980,"byte_end":186983,"line_start":2482,"line_end":2482,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` that may outlive the","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":186988,"byte_end":187059,"line_start":2483,"line_end":2483,"column_start":5,"column_end":76}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187064,"byte_end":187119,"line_start":2484,"line_end":2484,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187124,"byte_end":187127,"line_start":2485,"line_end":2485,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187132,"byte_end":187166,"line_start":2486,"line_end":2486,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187171,"byte_end":187174,"line_start":2487,"line_end":2487,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187179,"byte_end":187193,"line_start":2488,"line_end":2488,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187198,"byte_end":187201,"line_start":2489,"line_end":2489,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187206,"byte_end":187213,"line_start":2490,"line_end":2490,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187218,"byte_end":187253,"line_start":2491,"line_end":2491,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187258,"byte_end":187301,"line_start":2492,"line_end":2492,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187306,"byte_end":187309,"line_start":2493,"line_end":2493,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187314,"byte_end":187371,"line_start":2494,"line_end":2494,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187376,"byte_end":187417,"line_start":2495,"line_end":2495,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187422,"byte_end":187425,"line_start":2496,"line_end":2496,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187430,"byte_end":187467,"line_start":2497,"line_end":2497,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187472,"byte_end":187532,"line_start":2498,"line_end":2498,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187537,"byte_end":187564,"line_start":2499,"line_end":2499,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187569,"byte_end":187602,"line_start":2500,"line_end":2500,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187607,"byte_end":187610,"line_start":2501,"line_end":2501,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187615,"byte_end":187667,"line_start":2502,"line_end":2502,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187672,"byte_end":187698,"line_start":2503,"line_end":2503,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187703,"byte_end":187708,"line_start":2504,"line_end":2504,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187713,"byte_end":187750,"line_start":2505,"line_end":2505,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187755,"byte_end":187762,"line_start":2506,"line_end":2506,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187767,"byte_end":187812,"line_start":2507,"line_end":2507,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188613,"byte_end":188621,"line_start":2534,"line_end":2534,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to its value.","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to its value.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187897,"byte_end":187958,"line_start":2512,"line_end":2512,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187963,"byte_end":187966,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":187971,"byte_end":188047,"line_start":2514,"line_end":2514,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188052,"byte_end":188055,"line_start":2515,"line_end":2515,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188060,"byte_end":188092,"line_start":2516,"line_end":2516,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188097,"byte_end":188100,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188105,"byte_end":188119,"line_start":2518,"line_end":2518,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188124,"byte_end":188127,"line_start":2519,"line_end":2519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188132,"byte_end":188139,"line_start":2520,"line_end":2520,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188144,"byte_end":188179,"line_start":2521,"line_end":2521,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188184,"byte_end":188227,"line_start":2522,"line_end":2522,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188232,"byte_end":188235,"line_start":2523,"line_end":2523,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188240,"byte_end":188297,"line_start":2524,"line_end":2524,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188302,"byte_end":188343,"line_start":2525,"line_end":2525,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188348,"byte_end":188351,"line_start":2526,"line_end":2526,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188356,"byte_end":188393,"line_start":2527,"line_end":2527,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188398,"byte_end":188454,"line_start":2528,"line_end":2528,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188459,"byte_end":188487,"line_start":2529,"line_end":2529,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188492,"byte_end":188497,"line_start":2530,"line_end":2530,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188502,"byte_end":188539,"line_start":2531,"line_end":2531,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188544,"byte_end":188551,"line_start":2532,"line_end":2532,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188556,"byte_end":188601,"line_start":2533,"line_end":2533,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189288,"byte_end":189294,"line_start":2556,"line_end":2556,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the `OccupiedEntry`'s key,\n and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the `OccupiedEntry`'s key,","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188690,"byte_end":188753,"line_start":2538,"line_end":2538,"column_start":5,"column_end":68}},{"value":"/ and returns the entry's old value.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188758,"byte_end":188796,"line_start":2539,"line_end":2539,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188801,"byte_end":188804,"line_start":2540,"line_end":2540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188809,"byte_end":188823,"line_start":2541,"line_end":2541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188828,"byte_end":188831,"line_start":2542,"line_end":2542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188836,"byte_end":188843,"line_start":2543,"line_end":2543,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188848,"byte_end":188883,"line_start":2544,"line_end":2544,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188888,"byte_end":188931,"line_start":2545,"line_end":2545,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188936,"byte_end":188939,"line_start":2546,"line_end":2546,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":188944,"byte_end":189001,"line_start":2547,"line_end":2547,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189006,"byte_end":189047,"line_start":2548,"line_end":2548,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189052,"byte_end":189055,"line_start":2549,"line_end":2549,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189060,"byte_end":189120,"line_start":2550,"line_end":2550,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189125,"byte_end":189162,"line_start":2551,"line_end":2551,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189167,"byte_end":189172,"line_start":2552,"line_end":2552,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189177,"byte_end":189214,"line_start":2553,"line_end":2553,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189219,"byte_end":189226,"line_start":2554,"line_end":2554,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189231,"byte_end":189276,"line_start":2555,"line_end":2555,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189993,"byte_end":189999,"line_start":2578,"line_end":2578,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value of the entry out of the map, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value of the entry out of the map, and returns it.","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189378,"byte_end":189442,"line_start":2560,"line_end":2560,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189447,"byte_end":189450,"line_start":2561,"line_end":2561,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189455,"byte_end":189469,"line_start":2562,"line_end":2562,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189474,"byte_end":189477,"line_start":2563,"line_end":2563,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189482,"byte_end":189489,"line_start":2564,"line_end":2564,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeMap;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189494,"byte_end":189529,"line_start":2565,"line_end":2565,"column_start":5,"column_end":40}},{"value":"/ use std::collections::btree_map::Entry;","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189534,"byte_end":189577,"line_start":2566,"line_end":2566,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189582,"byte_end":189585,"line_start":2567,"line_end":2567,"column_start":5,"column_end":8}},{"value":"/ let mut map: BTreeMap<&str, usize> = BTreeMap::new();","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189590,"byte_end":189647,"line_start":2568,"line_end":2568,"column_start":5,"column_end":62}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189652,"byte_end":189693,"line_start":2569,"line_end":2569,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189698,"byte_end":189701,"line_start":2570,"line_end":2570,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189706,"byte_end":189762,"line_start":2571,"line_end":2571,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189767,"byte_end":189802,"line_start":2572,"line_end":2572,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189807,"byte_end":189812,"line_start":2573,"line_end":2573,"column_start":5,"column_end":10}},{"value":"/ // If we try to get \"poneyland\"'s value, it'll panic:","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189817,"byte_end":189874,"line_start":2574,"line_end":2574,"column_start":5,"column_end":62}},{"value":"/ // println!(\"{}\", map[\"poneyland\"]);","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189879,"byte_end":189919,"line_start":2575,"line_end":2575,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189924,"byte_end":189931,"line_start":2576,"line_end":2576,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":189936,"byte_end":189981,"line_start":2577,"line_end":2577,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":1195},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":195022,"byte_end":195029,"line_start":43,"line_end":43,"column_start":11,"column_end":18},"name":"MIN_LEN","qualname":"::collections::btree::node::MIN_LEN","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1196},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":195056,"byte_end":195064,"line_start":44,"line_end":44,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::collections::btree::node::CAPACITY","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1247},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201072,"byte_end":201076,"line_start":185,"line_end":185,"column_start":12,"column_end":16},"name":"Root","qualname":"::collections::btree::node::Root","value":"Root {  }","parent":null,"children":[{"krate":0,"index":1250},{"krate":0,"index":1251}],"decl_id":null,"docs":" An owned tree. Note that despite being owned, this does not have a destructor,\n and must be cleaned up manually.\n","sig":null,"attributes":[{"value":"/ An owned tree. Note that despite being owned, this does not have a destructor,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":200941,"byte_end":201023,"line_start":183,"line_end":183,"column_start":1,"column_end":83}},{"value":"/ and must be cleaned up manually.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201024,"byte_end":201060,"line_start":184,"line_end":184,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201276,"byte_end":201290,"line_start":194,"line_end":194,"column_start":12,"column_end":26},"name":"is_shared_root","qualname":"<Root<K, V>>::is_shared_root","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201365,"byte_end":201382,"line_start":198,"line_end":198,"column_start":12,"column_end":29},"name":"shared_empty_root","qualname":"<Root<K, V>>::shared_empty_root","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201667,"byte_end":201675,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"new_leaf","qualname":"<Root<K, V>>::new_leaf","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201799,"byte_end":201805,"line_start":213,"line_end":213,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Root<K, V>>::as_ref","value":"fn (&self) -> NodeRef<marker::Immut<'_>, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":202072,"byte_end":202078,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Root<K, V>>::as_mut","value":"fn (&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":202335,"byte_end":202343,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"into_ref","qualname":"<Root<K, V>>::into_ref","value":"fn (self) -> NodeRef<marker::Owned, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":202833,"byte_end":202843,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"push_level","qualname":"<Root<K, V>>::push_level","value":"fn (&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new internal node with a single edge, pointing to the previous root, and make that\n new node the root. This increases the height by 1 and is the opposite of `pop_level`.\n","sig":null,"attributes":[{"value":"/ Adds a new internal node with a single edge, pointing to the previous root, and make that","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":202634,"byte_end":202727,"line_start":240,"line_end":240,"column_start":5,"column_end":98}},{"value":"/ new node the root. This increases the height by 1 and is the opposite of `pop_level`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":202732,"byte_end":202821,"line_start":241,"line_end":241,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":203873,"byte_end":203882,"line_start":268,"line_end":268,"column_start":12,"column_end":21},"name":"pop_level","qualname":"<Root<K, V>>::pop_level","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the root node, using its first child as the new root. This cannot be called when\n the tree consists only of a leaf node. As it is intended only to be called when the root\n has only one edge, no cleanup is done on any of the other children are elements of the root.\n This decreases the height by 1 and is the opposite of `push_level`.\n","sig":null,"attributes":[{"value":"/ Removes the root node, using its first child as the new root. This cannot be called when","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":203495,"byte_end":203587,"line_start":264,"line_end":264,"column_start":5,"column_end":97}},{"value":"/ the tree consists only of a leaf node. As it is intended only to be called when the root","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":203592,"byte_end":203684,"line_start":265,"line_end":265,"column_start":5,"column_end":97}},{"value":"/ has only one edge, no cleanup is done on any of the other children are elements of the root.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":203689,"byte_end":203785,"line_start":266,"line_end":266,"column_start":5,"column_end":101}},{"value":"/ This decreases the height by 1 and is the opposite of `push_level`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":203790,"byte_end":203861,"line_start":267,"line_end":267,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1269},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205957,"byte_end":205964,"line_start":311,"line_end":311,"column_start":12,"column_end":19},"name":"NodeRef","qualname":"::collections::btree::node::NodeRef","value":"NodeRef {  }","parent":null,"children":[{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277}],"decl_id":null,"docs":" A reference to a node.","sig":null,"attributes":[{"value":"/ A reference to a node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":204744,"byte_end":204770,"line_start":294,"line_end":294,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":204771,"byte_end":204774,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ This type has a number of parameters that controls how it acts:","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":204775,"byte_end":204842,"line_start":296,"line_end":296,"column_start":1,"column_end":68}},{"value":"/ - `BorrowType`: This can be `Immut<'a>` or `Mut<'a>` for some `'a` or `Owned`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":204843,"byte_end":204925,"line_start":297,"line_end":297,"column_start":1,"column_end":83}},{"value":"/    When this is `Immut<'a>`, the `NodeRef` acts roughly like `&'a Node`,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":204926,"byte_end":205002,"line_start":298,"line_end":298,"column_start":1,"column_end":77}},{"value":"/    when this is `Mut<'a>`, the `NodeRef` acts roughly like `&'a mut Node`,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205003,"byte_end":205081,"line_start":299,"line_end":299,"column_start":1,"column_end":79}},{"value":"/    and when this is `Owned`, the `NodeRef` acts roughly like `Box<Node>`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205082,"byte_end":205159,"line_start":300,"line_end":300,"column_start":1,"column_end":78}},{"value":"/ - `K` and `V`: These control what types of things are stored in the nodes.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205160,"byte_end":205238,"line_start":301,"line_end":301,"column_start":1,"column_end":79}},{"value":"/ - `Type`: This can be `Leaf`, `Internal`, or `LeafOrInternal`. When this is","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205239,"byte_end":205318,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/   `Leaf`, the `NodeRef` points to a leaf node, when this is `Internal` the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205319,"byte_end":205397,"line_start":303,"line_end":303,"column_start":1,"column_end":79}},{"value":"/   `NodeRef` points to an internal node, and when this is `LeafOrInternal` the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205398,"byte_end":205479,"line_start":304,"line_end":304,"column_start":1,"column_end":82}},{"value":"/   `NodeRef` could be pointing to either type of node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205480,"byte_end":205537,"line_start":305,"line_end":305,"column_start":1,"column_end":58}},{"value":"/   Note that in case of a leaf node, this might still be the shared root!","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205538,"byte_end":205614,"line_start":306,"line_end":306,"column_start":1,"column_end":77}},{"value":"/   Only turn this into a `LeafNode` reference if you know it is not the shared root!","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205615,"byte_end":205702,"line_start":307,"line_end":307,"column_start":1,"column_end":88}},{"value":"/   Shared references must be dereferencable *for the entire size of their pointee*,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205703,"byte_end":205789,"line_start":308,"line_end":308,"column_start":1,"column_end":87}},{"value":"/   so '&LeafNode` or `&InternalNode` pointing to the shared root is undefined behavior.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205790,"byte_end":205880,"line_start":309,"line_end":309,"column_start":1,"column_end":91}},{"value":"/   Turning this into a `NodeHeader` reference is always safe.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":205881,"byte_end":205945,"line_start":310,"line_end":310,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207391,"byte_end":207394,"line_start":347,"line_end":347,"column_start":12,"column_end":15},"name":"len","qualname":"<NodeRef<BorrowType, K, V, Type>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the length of the node. This is the number of keys or values. In an\n internal node, the number of edges is `len() + 1`.\n","sig":null,"attributes":[{"value":"/ Finds the length of the node. This is the number of keys or values. In an","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207243,"byte_end":207320,"line_start":345,"line_end":345,"column_start":5,"column_end":82}},{"value":"/ internal node, the number of edges is `len() + 1`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207325,"byte_end":207379,"line_start":346,"line_end":346,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207572,"byte_end":207578,"line_start":353,"line_end":353,"column_start":12,"column_end":18},"name":"height","qualname":"<NodeRef<BorrowType, K, V, Type>>::height","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the height of this node in the whole tree. Zero height denotes the\n leaf level.\n","sig":null,"attributes":[{"value":"/ Returns the height of this node in the whole tree. Zero height denotes the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207462,"byte_end":207540,"line_start":351,"line_end":351,"column_start":5,"column_end":83}},{"value":"/ leaf level.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207545,"byte_end":207560,"line_start":352,"line_end":352,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207741,"byte_end":207752,"line_start":359,"line_end":359,"column_start":12,"column_end":23},"name":"forget_type","qualname":"<NodeRef<BorrowType, K, V, Type>>::forget_type","value":"fn (self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":" Removes any static information about whether this node is a `Leaf` or an\n `Internal` node.\n","sig":null,"attributes":[{"value":"/ Removes any static information about whether this node is a `Leaf` or an","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207628,"byte_end":207704,"line_start":357,"line_end":357,"column_start":5,"column_end":81}},{"value":"/ `Internal` node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207709,"byte_end":207729,"line_start":358,"line_end":358,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":208877,"byte_end":208891,"line_start":383,"line_end":383,"column_start":12,"column_end":26},"name":"is_shared_root","qualname":"<NodeRef<BorrowType, K, V, Type>>::is_shared_root","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the node is the shared, empty root.\n","sig":null,"attributes":[{"value":"/ Returns whether the node is the shared, empty root.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":208810,"byte_end":208865,"line_start":382,"line_end":382,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209102,"byte_end":209106,"line_start":389,"line_end":389,"column_start":19,"column_end":23},"name":"keys","qualname":"<NodeRef<BorrowType, K, V, Type>>::keys","value":"fn (&self) -> &[K]","parent":null,"children":[],"decl_id":null,"docs":" Borrows a view into the keys stored in the node.\n The caller must ensure that the node is not the shared root.\n","sig":null,"attributes":[{"value":"/ Borrows a view into the keys stored in the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":208962,"byte_end":209014,"line_start":387,"line_end":387,"column_start":5,"column_end":57}},{"value":"/ The caller must ensure that the node is not the shared root.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209019,"byte_end":209083,"line_start":388,"line_end":388,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209831,"byte_end":209837,"line_start":406,"line_end":406,"column_start":12,"column_end":18},"name":"ascend","qualname":"<NodeRef<BorrowType, K, V, Type>>::ascend","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>,\n       Self>","parent":null,"children":[],"decl_id":null,"docs":" Finds the parent of the current node. Returns `Ok(handle)` if the current\n node actually has a parent, where `handle` points to the edge of the parent\n that points to the current node. Returns `Err(self)` if the current node has\n no parent, giving back the original `NodeRef`.","sig":null,"attributes":[{"value":"/ Finds the parent of the current node. Returns `Ok(handle)` if the current","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209381,"byte_end":209458,"line_start":399,"line_end":399,"column_start":5,"column_end":82}},{"value":"/ node actually has a parent, where `handle` points to the edge of the parent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209463,"byte_end":209542,"line_start":400,"line_end":400,"column_start":5,"column_end":84}},{"value":"/ that points to the current node. Returns `Err(self)` if the current node has","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209547,"byte_end":209627,"line_start":401,"line_end":401,"column_start":5,"column_end":85}},{"value":"/ no parent, giving back the original `NodeRef`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209632,"byte_end":209682,"line_start":402,"line_end":402,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209687,"byte_end":209690,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209695,"byte_end":209779,"line_start":404,"line_end":404,"column_start":5,"column_end":89}},{"value":"/ both, upon success, do nothing.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":209784,"byte_end":209819,"line_start":405,"line_end":405,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210535,"byte_end":210545,"line_start":426,"line_end":426,"column_start":12,"column_end":22},"name":"first_edge","qualname":"<NodeRef<BorrowType, K, V, Type>>::first_edge","value":"fn (self) -> Handle<Self, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210636,"byte_end":210645,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"last_edge","qualname":"<NodeRef<BorrowType, K, V, Type>>::last_edge","value":"fn (self) -> Handle<Self, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210811,"byte_end":210819,"line_start":436,"line_end":436,"column_start":12,"column_end":20},"name":"first_kv","qualname":"<NodeRef<BorrowType, K, V, Type>>::first_kv","value":"fn (self) -> Handle<Self, marker::KV>","parent":null,"children":[],"decl_id":null,"docs":" Note that `self` must be nonempty.\n","sig":null,"attributes":[{"value":"/ Note that `self` must be nonempty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210761,"byte_end":210799,"line_start":435,"line_end":435,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210988,"byte_end":210995,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"last_kv","qualname":"<NodeRef<BorrowType, K, V, Type>>::last_kv","value":"fn (self) -> Handle<Self, marker::KV>","parent":null,"children":[],"decl_id":null,"docs":" Note that `self` must be nonempty.\n","sig":null,"attributes":[{"value":"/ Note that `self` must be nonempty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":210938,"byte_end":210976,"line_start":441,"line_end":441,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211447,"byte_end":211468,"line_start":453,"line_end":453,"column_start":19,"column_end":40},"name":"deallocate_and_ascend","qualname":"<NodeRef<marker::Owned, K, V, marker::Leaf>>::deallocate_and_ascend","value":"fn (self) -> Option<Handle<NodeRef<marker::Owned, K, V, marker::Internal>, marker::Edge>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `ascend`, gets a reference to a node's parent node, but also\n deallocate the current node in the process. This is unsafe because the\n current node will still be accessible despite being deallocated.\n","sig":null,"attributes":[{"value":"/ Similar to `ascend`, gets a reference to a node's parent node, but also","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211201,"byte_end":211276,"line_start":450,"line_end":450,"column_start":5,"column_end":80}},{"value":"/ deallocate the current node in the process. This is unsafe because the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211281,"byte_end":211355,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/ current node will still be accessible despite being deallocated.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211360,"byte_end":211428,"line_start":452,"line_end":452,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212088,"byte_end":212109,"line_start":468,"line_end":468,"column_start":19,"column_end":40},"name":"deallocate_and_ascend","qualname":"<NodeRef<marker::Owned, K, V, marker::Internal>>::deallocate_and_ascend","value":"fn (self) -> Option<Handle<NodeRef<marker::Owned, K, V, marker::Internal>, marker::Edge>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `ascend`, gets a reference to a node's parent node, but also\n deallocate the current node in the process. This is unsafe because the\n current node will still be accessible despite being deallocated.\n","sig":null,"attributes":[{"value":"/ Similar to `ascend`, gets a reference to a node's parent node, but also","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211842,"byte_end":211917,"line_start":465,"line_end":465,"column_start":5,"column_end":80}},{"value":"/ deallocate the current node in the process. This is unsafe because the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211922,"byte_end":211996,"line_start":466,"line_end":466,"column_start":5,"column_end":79}},{"value":"/ current node will still be accessible despite being deallocated.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212001,"byte_end":212069,"line_start":467,"line_end":467,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215875,"byte_end":215888,"line_start":547,"line_end":547,"column_start":12,"column_end":25},"name":"into_root_mut","qualname":"<NodeRef<marker::Mut, K, V, Type>>::into_root_mut","value":"fn (self) -> &'a mut Root<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the root itself. This is useful primarily when the\n height of the tree needs to be adjusted. Never call this on a reborrowed pointer.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the root itself. This is useful primarily when the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215691,"byte_end":215773,"line_start":545,"line_end":545,"column_start":5,"column_end":87}},{"value":"/ height of the tree needs to be adjusted. Never call this on a reborrowed pointer.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215778,"byte_end":215863,"line_start":546,"line_end":546,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217804,"byte_end":217808,"line_start":596,"line_end":596,"column_start":12,"column_end":16},"name":"push","qualname":"<NodeRef<marker::Mut, K, V, marker::Leaf>>::push","value":"fn (&mut self, key: K, val: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair the end of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair the end of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217746,"byte_end":217792,"line_start":595,"line_end":595,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218320,"byte_end":218330,"line_start":612,"line_end":612,"column_start":12,"column_end":22},"name":"push_front","qualname":"<NodeRef<marker::Mut, K, V, marker::Leaf>>::push_front","value":"fn (&mut self, key: K, val: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair to the beginning of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair to the beginning of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218253,"byte_end":218308,"line_start":611,"line_end":611,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218889,"byte_end":218893,"line_start":629,"line_end":629,"column_start":12,"column_end":16},"name":"push","qualname":"<NodeRef<marker::Mut, K, V, marker::Internal>>::push","value":"fn (&mut self, key: K, val: V, edge: Root<K, V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair and an edge to go to the right of that pair to\n the end of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair and an edge to go to the right of that pair to","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218776,"byte_end":218848,"line_start":627,"line_end":627,"column_start":5,"column_end":77}},{"value":"/ the end of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218853,"byte_end":218877,"line_start":628,"line_end":628,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220072,"byte_end":220082,"line_start":661,"line_end":661,"column_start":12,"column_end":22},"name":"push_front","qualname":"<NodeRef<marker::Mut, K, V, marker::Internal>>::push_front","value":"fn (&mut self, key: K, val: V, edge: Root<K, V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a key/value pair and an edge to go to the left of that pair to\n the beginning of the node.\n","sig":null,"attributes":[{"value":"/ Adds a key/value pair and an edge to go to the left of that pair to","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":219954,"byte_end":220025,"line_start":659,"line_end":659,"column_start":5,"column_end":76}},{"value":"/ the beginning of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220030,"byte_end":220060,"line_start":660,"line_end":660,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221093,"byte_end":221096,"line_start":689,"line_end":689,"column_start":12,"column_end":15},"name":"pop","qualname":"<NodeRef<marker::Mut, K, V, marker::LeafOrInternal>>::pop","value":"fn (&mut self) -> (K, V, Option<Root<K, V>>)","parent":null,"children":[],"decl_id":null,"docs":" Removes a key/value pair from the end of this node. If this is an internal node,\n also removes the edge that was to the right of that pair.\n","sig":null,"attributes":[{"value":"/ Removes a key/value pair from the end of this node. If this is an internal node,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220931,"byte_end":221015,"line_start":687,"line_end":687,"column_start":5,"column_end":89}},{"value":"/ also removes the edge that was to the right of that pair.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":221020,"byte_end":221081,"line_start":688,"line_end":688,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222213,"byte_end":222222,"line_start":716,"line_end":716,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<NodeRef<marker::Mut, K, V, marker::LeafOrInternal>>::pop_front","value":"fn (&mut self) -> (K, V, Option<Root<K, V>>)","parent":null,"children":[],"decl_id":null,"docs":" Removes a key/value pair from the beginning of this node. If this is an internal node,\n also removes the edge that was to the left of that pair.\n","sig":null,"attributes":[{"value":"/ Removes a key/value pair from the beginning of this node. If this is an internal node,","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222046,"byte_end":222136,"line_start":714,"line_end":714,"column_start":5,"column_end":95}},{"value":"/ also removes the edge that was to the left of that pair.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":222141,"byte_end":222201,"line_start":715,"line_end":715,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223858,"byte_end":223863,"line_start":761,"line_end":761,"column_start":12,"column_end":17},"name":"force","qualname":"<NodeRef<BorrowType, K, V, marker::LeafOrInternal>>::force","value":"fn (self) -> ForceResult<NodeRef<BorrowType, K, V, marker::Leaf>,\n            NodeRef<BorrowType, K, V, marker::Internal>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether a node is an `Internal` node or a `Leaf` node.\n","sig":null,"attributes":[{"value":"/ Checks whether a node is an `Internal` node or a `Leaf` node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223781,"byte_end":223846,"line_start":760,"line_end":760,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1399},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225105,"byte_end":225111,"line_start":793,"line_end":793,"column_start":12,"column_end":18},"name":"Handle","qualname":"::collections::btree::node::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404}],"decl_id":null,"docs":" A reference to a specific key/value pair or edge within a node. The `Node` parameter\n must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key/value\n pair) or `Edge` (signifying a handle on an edge).","sig":null,"attributes":[{"value":"/ A reference to a specific key/value pair or edge within a node. The `Node` parameter","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":224473,"byte_end":224561,"line_start":785,"line_end":785,"column_start":1,"column_end":89}},{"value":"/ must be a `NodeRef`, while the `Type` can either be `KV` (signifying a handle on a key/value","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":224562,"byte_end":224658,"line_start":786,"line_end":786,"column_start":1,"column_end":97}},{"value":"/ pair) or `Edge` (signifying a handle on an edge).","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":224659,"byte_end":224712,"line_start":787,"line_end":787,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":224713,"byte_end":224716,"line_start":788,"line_end":788,"column_start":1,"column_end":4}},{"value":"/ Note that even `Leaf` nodes can have `Edge` handles. Instead of representing a pointer to","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":224717,"byte_end":224810,"line_start":789,"line_end":789,"column_start":1,"column_end":94}},{"value":"/ a child node, these represent the spaces where child pointers would go between the key/value","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":224811,"byte_end":224907,"line_start":790,"line_end":790,"column_start":1,"column_end":97}},{"value":"/ pairs. For example, in a node with length 2, there would be 3 possible edge locations - one","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":224908,"byte_end":225003,"line_start":791,"line_end":791,"column_start":1,"column_end":96}},{"value":"/ to the left of the node, one between the two pairs, and one at the right of the node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225004,"byte_end":225093,"line_start":792,"line_end":792,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225660,"byte_end":225669,"line_start":810,"line_end":810,"column_start":12,"column_end":21},"name":"into_node","qualname":"<Handle<Node, Type>>::into_node","value":"fn (self) -> Node","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the node that contains the edge of key/value pair this handle points to.\n","sig":null,"attributes":[{"value":"/ Retrieves the node that contains the edge of key/value pair this handle points to.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225562,"byte_end":225648,"line_start":809,"line_end":809,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225913,"byte_end":225919,"line_start":817,"line_end":817,"column_start":12,"column_end":18},"name":"new_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>>::new_kv","value":"fn (node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new handle to a key/value pair in `node`. `idx` must be less than `node.len()`.\n","sig":null,"attributes":[{"value":"/ Creates a new handle to a key/value pair in `node`. `idx` must be less than `node.len()`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225808,"byte_end":225901,"line_start":816,"line_end":816,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226158,"byte_end":226167,"line_start":824,"line_end":824,"column_start":12,"column_end":21},"name":"left_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>>::left_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226301,"byte_end":226311,"line_start":828,"line_end":828,"column_start":12,"column_end":22},"name":"right_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>>::right_edge","value":"fn (self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226874,"byte_end":226882,"line_start":845,"line_end":845,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>>::reborrow","value":"fn (&self) -> Handle<NodeRef<marker::Immut<'_>, K, V, NodeType>, HandleType>","parent":null,"children":[],"decl_id":null,"docs":" Temporarily takes out another, immutable handle on the same location.\n","sig":null,"attributes":[{"value":"/ Temporarily takes out another, immutable handle on the same location.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226789,"byte_end":226862,"line_start":844,"line_end":844,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227961,"byte_end":227973,"line_start":862,"line_end":862,"column_start":19,"column_end":31},"name":"reborrow_mut","qualname":"<Handle<NodeRef<marker::Mut, K, V, NodeType>, HandleType>>::reborrow_mut","value":"fn (&mut self) -> Handle<NodeRef<marker::Mut<'_>, K, V, NodeType>, HandleType>","parent":null,"children":[],"decl_id":null,"docs":" Temporarily takes out another, mutable handle on the same location. Beware, as\n this method is very dangerous, doubly so since it may not immediately appear\n dangerous.","sig":null,"attributes":[{"value":"/ Temporarily takes out another, mutable handle on the same location. Beware, as","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227244,"byte_end":227326,"line_start":852,"line_end":852,"column_start":5,"column_end":87}},{"value":"/ this method is very dangerous, doubly so since it may not immediately appear","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227331,"byte_end":227411,"line_start":853,"line_end":853,"column_start":5,"column_end":85}},{"value":"/ dangerous.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227416,"byte_end":227430,"line_start":854,"line_end":854,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227435,"byte_end":227438,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Because mutable pointers can roam anywhere around the tree and can even (through","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227443,"byte_end":227527,"line_start":856,"line_end":856,"column_start":5,"column_end":89}},{"value":"/ `into_root_mut`) mess with the root of the tree, the result of `reborrow_mut`","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227532,"byte_end":227613,"line_start":857,"line_end":857,"column_start":5,"column_end":86}},{"value":"/ can easily be used to make the original mutable pointer dangling, or, in the case","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227618,"byte_end":227703,"line_start":858,"line_end":858,"column_start":5,"column_end":90}},{"value":"/ of a reborrowed handle, out of bounds.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227708,"byte_end":227750,"line_start":859,"line_end":859,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":228465,"byte_end":228473,"line_start":873,"line_end":873,"column_start":12,"column_end":20},"name":"new_edge","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>>::new_edge","value":"fn (node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new handle to an edge in `node`. `idx` must be less than or equal to\n `node.len()`.\n","sig":null,"attributes":[{"value":"/ Creates a new handle to an edge in `node`. `idx` must be less than or equal to","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":228349,"byte_end":228431,"line_start":871,"line_end":871,"column_start":5,"column_end":87}},{"value":"/ `node.len()`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":228436,"byte_end":228453,"line_start":872,"line_end":872,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":228713,"byte_end":228720,"line_start":880,"line_end":880,"column_start":12,"column_end":19},"name":"left_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>>::left_kv","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":228911,"byte_end":228919,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"right_kv","qualname":"<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge>>::right_kv","value":"fn (self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":230201,"byte_end":230207,"line_start":914,"line_end":914,"column_start":12,"column_end":18},"name":"insert","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::Edge>>::insert","value":"fn (mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new key/value pair between the key/value pairs to the right and left of\n this edge. This method splits the node if there isn't enough room.","sig":null,"attributes":[{"value":"/ Inserts a new key/value pair between the key/value pairs to the right and left of","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229962,"byte_end":230047,"line_start":910,"line_end":910,"column_start":5,"column_end":90}},{"value":"/ this edge. This method splits the node if there isn't enough room.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":230052,"byte_end":230122,"line_start":911,"line_end":911,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":230127,"byte_end":230130,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ The returned pointer points to the inserted value.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":230135,"byte_end":230189,"line_start":913,"line_end":913,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":233407,"byte_end":233413,"line_start":988,"line_end":988,"column_start":12,"column_end":18},"name":"insert","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::Edge>>::insert","value":"fn (mut self, key: K, val: V, edge: Root<K, V>) -> InsertResult<'a, K, V, marker::Internal>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new key/value pair and an edge that will go to the right of that new pair\n between this edge and the key/value pair to the right of this edge. This method splits\n the node if there isn't enough room.\n","sig":null,"attributes":[{"value":"/ Inserts a new key/value pair and an edge that will go to the right of that new pair","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":233168,"byte_end":233255,"line_start":985,"line_end":985,"column_start":5,"column_end":92}},{"value":"/ between this edge and the key/value pair to the right of this edge. This method splits","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":233260,"byte_end":233350,"line_start":986,"line_end":986,"column_start":5,"column_end":95}},{"value":"/ the node if there isn't enough room.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":233355,"byte_end":233395,"line_start":987,"line_end":987,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234794,"byte_end":234801,"line_start":1026,"line_end":1026,"column_start":12,"column_end":19},"name":"descend","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>>::descend","value":"fn (self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal>","parent":null,"children":[],"decl_id":null,"docs":" Finds the node pointed to by this edge.","sig":null,"attributes":[{"value":"/ Finds the node pointed to by this edge.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234602,"byte_end":234645,"line_start":1022,"line_end":1022,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234650,"byte_end":234653,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234658,"byte_end":234742,"line_start":1024,"line_end":1024,"column_start":5,"column_end":89}},{"value":"/ both, upon success, do nothing.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234747,"byte_end":234782,"line_start":1025,"line_end":1025,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235253,"byte_end":235260,"line_start":1039,"line_end":1039,"column_start":12,"column_end":19},"name":"into_kv","qualname":"<Handle<NodeRef<marker::Immut, K, V, NodeType>, marker::KV>>::into_kv","value":"fn (self) -> (&'a K, &'a V)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235535,"byte_end":235546,"line_start":1046,"line_end":1046,"column_start":12,"column_end":23},"name":"into_kv_mut","qualname":"<Handle<NodeRef<marker::Mut, K, V, NodeType>, marker::KV>>::into_kv_mut","value":"fn (self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235833,"byte_end":235839,"line_start":1053,"line_end":1053,"column_start":12,"column_end":18},"name":"kv_mut","qualname":"<Handle<NodeRef<marker::Mut, K, V, NodeType>, marker::KV>>::kv_mut","value":"fn (&mut self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236504,"byte_end":236509,"line_start":1069,"line_end":1069,"column_start":12,"column_end":17},"name":"split","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::KV>>::split","value":"fn (mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, K, V, Root<K, V>)","parent":null,"children":[],"decl_id":null,"docs":" Splits the underlying node into three parts:","sig":null,"attributes":[{"value":"/ Splits the underlying node into three parts:","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236151,"byte_end":236199,"line_start":1062,"line_end":1062,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236204,"byte_end":236207,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ - The node is truncated to only contain the key/value pairs to the right of","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236212,"byte_end":236291,"line_start":1064,"line_end":1064,"column_start":5,"column_end":84}},{"value":"/   this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236296,"byte_end":236314,"line_start":1065,"line_end":1065,"column_start":5,"column_end":23}},{"value":"/ - The key and value pointed to by this handle and extracted.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236319,"byte_end":236383,"line_start":1066,"line_end":1066,"column_start":5,"column_end":69}},{"value":"/ - All the key/value pairs to the right of this handle are put into a newly","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236388,"byte_end":236466,"line_start":1067,"line_end":1067,"column_start":5,"column_end":83}},{"value":"/   allocated node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236471,"byte_end":236492,"line_start":1068,"line_end":1068,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237726,"byte_end":237732,"line_start":1099,"line_end":1099,"column_start":12,"column_end":18},"name":"remove","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Leaf>, marker::KV>>::remove","value":"fn (mut self) -> (Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>, K, V)","parent":null,"children":[],"decl_id":null,"docs":" Removes the key/value pair pointed to by this handle and returns it, along with the edge\n between the now adjacent key/value pairs (if any) to the left and right of this handle.\n","sig":null,"attributes":[{"value":"/ Removes the key/value pair pointed to by this handle and returns it, along with the edge","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237526,"byte_end":237618,"line_start":1097,"line_end":1097,"column_start":5,"column_end":97}},{"value":"/ between the now adjacent key/value pairs (if any) to the left and right of this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":237623,"byte_end":237714,"line_start":1098,"line_end":1098,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238607,"byte_end":238612,"line_start":1120,"line_end":1120,"column_start":12,"column_end":17},"name":"split","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::split","value":"fn (mut self) -> (NodeRef<marker::Mut<'a>, K, V, marker::Internal>, K, V, Root<K, V>)","parent":null,"children":[],"decl_id":null,"docs":" Splits the underlying node into three parts:","sig":null,"attributes":[{"value":"/ Splits the underlying node into three parts:","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238234,"byte_end":238282,"line_start":1113,"line_end":1113,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238287,"byte_end":238290,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ - The node is truncated to only contain the edges and key/value pairs to the","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238295,"byte_end":238375,"line_start":1115,"line_end":1115,"column_start":5,"column_end":85}},{"value":"/   right of this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238380,"byte_end":238407,"line_start":1116,"line_end":1116,"column_start":5,"column_end":32}},{"value":"/ - The key and value pointed to by this handle and extracted.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238412,"byte_end":238476,"line_start":1117,"line_end":1117,"column_start":5,"column_end":69}},{"value":"/ - All the edges and key/value pairs to the right of this handle are put into","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238481,"byte_end":238561,"line_start":1118,"line_end":1118,"column_start":5,"column_end":85}},{"value":"/   a newly allocated node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238566,"byte_end":238595,"line_start":1119,"line_end":1119,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240283,"byte_end":240292,"line_start":1162,"line_end":1162,"column_start":12,"column_end":21},"name":"can_merge","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::can_merge","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if it is valid to call `.merge()`, i.e., whether there is enough room in\n a node to hold the combination of the nodes to the left and right of this handle along\n with the key/value pair at this handle.\n","sig":null,"attributes":[{"value":"/ Returns `true` if it is valid to call `.merge()`, i.e., whether there is enough room in","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240037,"byte_end":240128,"line_start":1159,"line_end":1159,"column_start":5,"column_end":96}},{"value":"/ a node to hold the combination of the nodes to the left and right of this handle along","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240133,"byte_end":240223,"line_start":1160,"line_end":1160,"column_start":5,"column_end":95}},{"value":"/ with the key/value pair at this handle.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240228,"byte_end":240271,"line_start":1161,"line_end":1161,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240806,"byte_end":240811,"line_start":1174,"line_end":1174,"column_start":12,"column_end":17},"name":"merge","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::merge","value":"fn (mut self) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge>","parent":null,"children":[],"decl_id":null,"docs":" Combines the node immediately to the left of this handle, the key/value pair pointed\n to by this handle, and the node immediately to the right of this handle into one new\n child of the underlying node, returning an edge referencing that new child.","sig":null,"attributes":[{"value":"/ Combines the node immediately to the left of this handle, the key/value pair pointed","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240474,"byte_end":240562,"line_start":1169,"line_end":1169,"column_start":5,"column_end":93}},{"value":"/ to by this handle, and the node immediately to the right of this handle into one new","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240567,"byte_end":240655,"line_start":1170,"line_end":1170,"column_start":5,"column_end":93}},{"value":"/ child of the underlying node, returning an edge referencing that new child.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240660,"byte_end":240739,"line_start":1171,"line_end":1171,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240744,"byte_end":240747,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ Assumes that this edge `.can_merge()`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":240752,"byte_end":240794,"line_start":1173,"line_end":1173,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":243589,"byte_end":243599,"line_start":1244,"line_end":1244,"column_start":12,"column_end":22},"name":"steal_left","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::steal_left","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This removes a key/value pair from the left child and places it in the key/value storage\n pointed to by this handle while pushing the old key/value pair of this handle into the right\n child.\n","sig":null,"attributes":[{"value":"/ This removes a key/value pair from the left child and places it in the key/value storage","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":243369,"byte_end":243461,"line_start":1241,"line_end":1241,"column_start":5,"column_end":97}},{"value":"/ pointed to by this handle while pushing the old key/value pair of this handle into the right","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":243466,"byte_end":243562,"line_start":1242,"line_end":1242,"column_start":5,"column_end":101}},{"value":"/ child.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":243567,"byte_end":243577,"line_start":1243,"line_end":1243,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244353,"byte_end":244364,"line_start":1261,"line_end":1261,"column_start":12,"column_end":23},"name":"steal_right","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::steal_right","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This removes a key/value pair from the right child and places it in the key/value storage\n pointed to by this handle while pushing the old key/value pair of this handle into the left\n child.\n","sig":null,"attributes":[{"value":"/ This removes a key/value pair from the right child and places it in the key/value storage","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244133,"byte_end":244226,"line_start":1258,"line_end":1258,"column_start":5,"column_end":98}},{"value":"/ pointed to by this handle while pushing the old key/value pair of this handle into the left","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244231,"byte_end":244326,"line_start":1259,"line_end":1259,"column_start":5,"column_end":100}},{"value":"/ child.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244331,"byte_end":244341,"line_start":1260,"line_end":1260,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244988,"byte_end":245003,"line_start":1276,"line_end":1276,"column_start":12,"column_end":27},"name":"bulk_steal_left","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::bulk_steal_left","value":"fn (&mut self, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This does stealing similar to `steal_left` but steals multiple elements at once.\n","sig":null,"attributes":[{"value":"/ This does stealing similar to `steal_left` but steals multiple elements at once.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":244892,"byte_end":244976,"line_start":1275,"line_end":1275,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247445,"byte_end":247461,"line_start":1333,"line_end":1333,"column_start":12,"column_end":28},"name":"bulk_steal_right","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::Internal>, marker::KV>>::bulk_steal_right","value":"fn (&mut self, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The symmetric clone of `bulk_steal_left`.\n","sig":null,"attributes":[{"value":"/ The symmetric clone of `bulk_steal_left`.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":247388,"byte_end":247433,"line_start":1332,"line_end":1332,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":250943,"byte_end":250948,"line_start":1419,"line_end":1419,"column_start":12,"column_end":17},"name":"force","qualname":"<Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, HandleType>>::force","value":"fn (self) -> ForceResult<Handle<NodeRef<BorrowType, K, V, marker::Leaf>, HandleType>,\n            Handle<NodeRef<BorrowType, K, V, marker::Internal>, HandleType>>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the underlying node is an `Internal` node or a `Leaf` node.\n","sig":null,"attributes":[{"value":"/ Checks whether the underlying node is an `Internal` node or a `Leaf` node.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":250853,"byte_end":250931,"line_start":1418,"line_end":1418,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251731,"byte_end":251742,"line_start":1439,"line_end":1439,"column_start":12,"column_end":23},"name":"move_suffix","qualname":"<Handle<NodeRef<marker::Mut, K, V, marker::LeafOrInternal>, marker::Edge>>::move_suffix","value":"fn (&mut self, right: &mut NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Move the suffix after `self` from one node to another one. `right` must be empty.\n The first edge of `right` remains unchanged.\n","sig":null,"attributes":[{"value":"/ Move the suffix after `self` from one node to another one. `right` must be empty.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251581,"byte_end":251666,"line_start":1437,"line_end":1437,"column_start":5,"column_end":90}},{"value":"/ The first edge of `right` remains unchanged.","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251671,"byte_end":251719,"line_start":1438,"line_end":1438,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1528},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253059,"byte_end":253063,"line_start":1475,"line_end":1475,"column_start":5,"column_end":9},"name":"Leaf","qualname":"::collections::btree::node::ForceResult::Leaf","value":"ForceResult::Leaf(Leaf)","parent":{"krate":0,"index":1525},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1531},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253075,"byte_end":253083,"line_start":1476,"line_end":1476,"column_start":5,"column_end":13},"name":"Internal","qualname":"::collections::btree::node::ForceResult::Internal","value":"ForceResult::Internal(Internal)","parent":{"krate":0,"index":1525},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1525},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253025,"byte_end":253036,"line_start":1474,"line_end":1474,"column_start":10,"column_end":21},"name":"ForceResult","qualname":"::collections::btree::node::ForceResult","value":"ForceResult::{Leaf, Internal}","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1531}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1539},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253142,"byte_end":253145,"line_start":1480,"line_end":1480,"column_start":5,"column_end":8},"name":"Fit","qualname":"::collections::btree::node::InsertResult::Fit","value":"InsertResult::Fit(Handle<NodeRef<marker::Mut<'a>, K, V, Type>, marker::KV>)","parent":{"krate":0,"index":1534},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1542},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253209,"byte_end":253214,"line_start":1481,"line_end":1481,"column_start":5,"column_end":10},"name":"Split","qualname":"::collections::btree::node::InsertResult::Split","value":"InsertResult::Split(NodeRef<marker::Mut<'a>, K, V, Type>, K, V, Root<K, V>)","parent":{"krate":0,"index":1534},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1534},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253107,"byte_end":253119,"line_start":1479,"line_end":1479,"column_start":10,"column_end":22},"name":"InsertResult","qualname":"::collections::btree::node::InsertResult","value":"InsertResult::{Fit, Split}","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1542}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1548},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253283,"byte_end":253289,"line_start":1484,"line_end":1484,"column_start":9,"column_end":15},"name":"marker","qualname":"::collections::btree::node::marker","value":"src/liballoc/collections/btree/node.rs","parent":null,"children":[{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1558},{"krate":0,"index":1562},{"krate":0,"index":1563}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1550},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253341,"byte_end":253345,"line_start":1487,"line_end":1487,"column_start":14,"column_end":18},"name":"Leaf","qualname":"::collections::btree::node::marker::Leaf","value":"Leaf::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1551},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253362,"byte_end":253370,"line_start":1488,"line_end":1488,"column_start":14,"column_end":22},"name":"Internal","qualname":"::collections::btree::node::marker::Internal","value":"Internal::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1552},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253387,"byte_end":253401,"line_start":1489,"line_end":1489,"column_start":14,"column_end":28},"name":"LeafOrInternal","qualname":"::collections::btree::node::marker::LeafOrInternal","value":"LeafOrInternal::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1553},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253419,"byte_end":253424,"line_start":1491,"line_end":1491,"column_start":14,"column_end":19},"name":"Owned","qualname":"::collections::btree::node::marker::Owned","value":"Owned::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1554},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253443,"byte_end":253448,"line_start":1492,"line_end":1492,"column_start":16,"column_end":21},"name":"Immut","qualname":"::collections::btree::node::marker::Immut","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1558},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253490,"byte_end":253493,"line_start":1493,"line_end":1493,"column_start":16,"column_end":19},"name":"Mut","qualname":"::collections::btree::node::marker::Mut","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1562},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253538,"byte_end":253540,"line_start":1495,"line_end":1495,"column_start":14,"column_end":16},"name":"KV","qualname":"::collections::btree::node::marker::KV","value":"KV::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1563},"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":253557,"byte_end":253561,"line_start":1496,"line_end":1496,"column_start":14,"column_end":18},"name":"Edge","qualname":"::collections::btree::node::marker::Edge","value":"Edge::{}","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1583},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":254203,"byte_end":254208,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Found","qualname":"::collections::btree::search::SearchResult::Found","value":"SearchResult::Found(Handle<NodeRef<BorrowType, K, V, FoundType>, marker::KV>)","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1586},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":254272,"byte_end":254278,"line_start":10,"line_end":10,"column_start":5,"column_end":11},"name":"GoDown","qualname":"::collections::btree::search::SearchResult::GoDown","value":"SearchResult::GoDown(Handle<NodeRef<BorrowType, K, V, GoDownType>, marker::Edge>)","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1577},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":254143,"byte_end":254155,"line_start":8,"line_end":8,"column_start":10,"column_end":22},"name":"SearchResult","qualname":"::collections::btree::search::SearchResult","value":"SearchResult::{Found, GoDown}","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1586}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1589},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":254351,"byte_end":254362,"line_start":13,"line_end":13,"column_start":8,"column_end":19},"name":"search_tree","qualname":"::collections::btree::search::search_tree","value":"fn <BorrowType, K, V, Q> (mut node: NodeRef<BorrowType, K, V, marker::LeafOrInternal>, key: &Q) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1594},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":254964,"byte_end":254975,"line_start":35,"line_end":35,"column_start":8,"column_end":19},"name":"search_node","qualname":"::collections::btree::search::search_node","value":"fn <BorrowType, K, V, Type, Q> (node: NodeRef<BorrowType, K, V, Type>, key: &Q) -> SearchResult<BorrowType, K, V, Type, Type>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1600},"span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":255708,"byte_end":255721,"line_start":54,"line_end":54,"column_start":8,"column_end":21},"name":"search_linear","qualname":"::collections::btree::search::search_linear","value":"fn <BorrowType, K, V, Type, Q> (node: &NodeRef<BorrowType, K, V, Type>, key: &Q) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Returns the index in the node at which the key (or an equivalent) exists\n or could exist, and whether it exists in the node itself. If it doesn't\n exist in the node itself, it may exist in the subtree with that index\n (if the node has subtrees). If the key doesn't exist in node or subtree,\n the returned index is the position or subtree to insert at.\n","sig":null,"attributes":[{"value":"/ Returns the index in the node at which the key (or an equivalent) exists","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":255333,"byte_end":255409,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/ or could exist, and whether it exists in the node itself. If it doesn't","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":255410,"byte_end":255485,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ exist in the node itself, it may exist in the subtree with that index","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":255486,"byte_end":255559,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/ (if the node has subtrees). If the key doesn't exist in node or subtree,","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":255560,"byte_end":255636,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ the returned index is the position or subtree to insert at.","span":{"file_name":"src/liballoc/collections/btree/search.rs","byte_start":255637,"byte_end":255700,"line_start":53,"line_end":53,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":1606},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::collections::btree::set","value":"src/liballoc/collections/btree/set.rs","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1618},{"krate":0,"index":1622},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":4377},{"krate":0,"index":4405},{"krate":0,"index":4401},{"krate":0,"index":4395},{"krate":0,"index":4397},{"krate":0,"index":4390},{"krate":0,"index":4392},{"krate":0,"index":4387},{"krate":0,"index":4380},{"krate":0,"index":1633},{"krate":0,"index":1637},{"krate":0,"index":4408},{"krate":0,"index":4411},{"krate":0,"index":4414},{"krate":0,"index":4418},{"krate":0,"index":4422},{"krate":0,"index":4427},{"krate":0,"index":4430},{"krate":0,"index":4444},{"krate":0,"index":4441},{"krate":0,"index":4438},{"krate":0,"index":1640},{"krate":0,"index":1645},{"krate":0,"index":1648},{"krate":0,"index":4446},{"krate":0,"index":4458},{"krate":0,"index":1652},{"krate":0,"index":1655},{"krate":0,"index":1660},{"krate":0,"index":1663},{"krate":0,"index":4462},{"krate":0,"index":4474},{"krate":0,"index":1667},{"krate":0,"index":1670},{"krate":0,"index":1675},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1719},{"krate":0,"index":1724},{"krate":0,"index":1728},{"krate":0,"index":1733},{"krate":0,"index":1739},{"krate":0,"index":1744},{"krate":0,"index":1749},{"krate":0,"index":1752},{"krate":0,"index":1756},{"krate":0,"index":1760},{"krate":0,"index":1764},{"krate":0,"index":1768},{"krate":0,"index":1771},{"krate":0,"index":1774},{"krate":0,"index":1781},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1796},{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1808},{"krate":0,"index":1815},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1848},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1859},{"krate":0,"index":1865}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4377},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258571,"byte_end":258579,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"BTreeSet","qualname":"::collections::btree::set::BTreeSet","value":"BTreeSet {  }","parent":null,"children":[{"krate":0,"index":4379}],"decl_id":null,"docs":" A set based on a B-Tree.","sig":null,"attributes":[{"value":"/ A set based on a B-Tree.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257054,"byte_end":257082,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257083,"byte_end":257086,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257087,"byte_end":257182,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ benefits and drawbacks.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257183,"byte_end":257210,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257211,"byte_end":257214,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the item's ordering relative","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257215,"byte_end":257313,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257314,"byte_end":257412,"line_start":22,"line_end":22,"column_start":1,"column_end":99}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257413,"byte_end":257505,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257506,"byte_end":257509,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`BTreeMap`]: struct.BTreeMap.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257510,"byte_end":257548,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ [`Ord`]: ../../std/cmp/trait.Ord.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257549,"byte_end":257590,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ [`Cell`]: ../../std/cell/struct.Cell.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257591,"byte_end":257636,"line_start":27,"line_end":27,"column_start":1,"column_end":46}},{"value":"/ [`RefCell`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257637,"byte_end":257688,"line_start":28,"line_end":28,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257689,"byte_end":257692,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257693,"byte_end":257707,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257708,"byte_end":257711,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257712,"byte_end":257719,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257720,"byte_end":257755,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257756,"byte_end":257759,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257760,"byte_end":257828,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/ // would be `BTreeSet<&str>` in this example).","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257829,"byte_end":257879,"line_start":36,"line_end":36,"column_start":1,"column_end":51}},{"value":"/ let mut books = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257880,"byte_end":257916,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257917,"byte_end":257920,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257921,"byte_end":257943,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257944,"byte_end":257985,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"To Kill a Mockingbird\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":257986,"byte_end":258028,"line_start":41,"line_end":41,"column_start":1,"column_end":43}},{"value":"/ books.insert(\"The Odyssey\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258029,"byte_end":258061,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/ books.insert(\"The Great Gatsby\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258062,"byte_end":258099,"line_start":43,"line_end":43,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258100,"byte_end":258103,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258104,"byte_end":258136,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258137,"byte_end":258184,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258185,"byte_end":258257,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258258,"byte_end":258288,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258289,"byte_end":258294,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258295,"byte_end":258298,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258299,"byte_end":258320,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258321,"byte_end":258353,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258354,"byte_end":258357,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258358,"byte_end":258389,"line_start":54,"line_end":54,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258390,"byte_end":258414,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258415,"byte_end":258444,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258445,"byte_end":258450,"line_start":57,"line_end":57,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258451,"byte_end":258458,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258514,"byte_end":258559,"line_start":60,"line_end":60,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1633},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258918,"byte_end":258922,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1636}],"decl_id":null,"docs":" An iterator over the items of a `BTreeSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `BTreeSet`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258614,"byte_end":258661,"line_start":65,"line_end":65,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258662,"byte_end":258665,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258666,"byte_end":258734,"line_start":67,"line_end":67,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258735,"byte_end":258770,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258771,"byte_end":258774,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258775,"byte_end":258813,"line_start":70,"line_end":70,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.BTreeSet.html#method.iter","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258814,"byte_end":258860,"line_start":71,"line_end":71,"column_start":1,"column_end":47}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":258861,"byte_end":258906,"line_start":72,"line_end":72,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4408},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259592,"byte_end":259600,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4410}],"decl_id":null,"docs":" An owning iterator over the items of a `BTreeSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `BTreeSet`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259210,"byte_end":259264,"line_start":84,"line_end":84,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259265,"byte_end":259268,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`BTreeSet`]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259269,"byte_end":259341,"line_start":86,"line_end":86,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259342,"byte_end":259417,"line_start":87,"line_end":87,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259418,"byte_end":259421,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259422,"byte_end":259460,"line_start":89,"line_end":89,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.BTreeSet.html#method.into_iter","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259461,"byte_end":259517,"line_start":90,"line_end":90,"column_start":1,"column_end":57}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259518,"byte_end":259563,"line_start":91,"line_end":91,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4414},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259989,"byte_end":259994,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"Range","qualname":"::collections::btree::set::Range","value":"Range {  }","parent":null,"children":[{"krate":0,"index":4417}],"decl_id":null,"docs":" An iterator over a sub-range of items in a `BTreeSet`.","sig":null,"attributes":[{"value":"/ An iterator over a sub-range of items in a `BTreeSet`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259647,"byte_end":259705,"line_start":97,"line_end":97,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259706,"byte_end":259709,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`range`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259710,"byte_end":259779,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259780,"byte_end":259815,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259816,"byte_end":259819,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259820,"byte_end":259858,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ [`range`]: struct.BTreeSet.html#method.range","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259859,"byte_end":259907,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259925,"byte_end":259977,"line_start":105,"line_end":105,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1648},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262314,"byte_end":262324,"line_start":189,"line_end":189,"column_start":12,"column_end":22},"name":"Difference","qualname":"::collections::btree::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1651}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":261967,"byte_end":262039,"line_start":181,"line_end":181,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262040,"byte_end":262043,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262044,"byte_end":262118,"line_start":183,"line_end":183,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262119,"byte_end":262154,"line_start":184,"line_end":184,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262155,"byte_end":262158,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262159,"byte_end":262197,"line_start":186,"line_end":186,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.BTreeSet.html#method.difference","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262198,"byte_end":262256,"line_start":187,"line_end":187,"column_start":1,"column_end":59}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262257,"byte_end":262302,"line_start":188,"line_end":188,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1655},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263444,"byte_end":263463,"line_start":222,"line_end":222,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::collections::btree::set::SymmetricDifference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263057,"byte_end":263139,"line_start":214,"line_end":214,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263140,"byte_end":263143,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263144,"byte_end":263214,"line_start":216,"line_end":216,"column_start":1,"column_end":71}},{"value":"/ [`BTreeSet`]. See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263215,"byte_end":263264,"line_start":217,"line_end":217,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263265,"byte_end":263268,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263269,"byte_end":263307,"line_start":219,"line_end":219,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.BTreeSet.html#method.symmetric_difference","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263308,"byte_end":263386,"line_start":220,"line_end":220,"column_start":1,"column_end":79}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263387,"byte_end":263432,"line_start":221,"line_end":221,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1663},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264124,"byte_end":264136,"line_start":239,"line_end":239,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::collections::btree::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1666}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263769,"byte_end":263843,"line_start":231,"line_end":231,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263844,"byte_end":263847,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263848,"byte_end":263924,"line_start":233,"line_end":233,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263925,"byte_end":263960,"line_start":234,"line_end":234,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263961,"byte_end":263964,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263965,"byte_end":264003,"line_start":236,"line_end":236,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.BTreeSet.html#method.intersection","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264004,"byte_end":264066,"line_start":237,"line_end":237,"column_start":1,"column_end":63}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264067,"byte_end":264112,"line_start":238,"line_end":238,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1670},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265186,"byte_end":265191,"line_start":272,"line_end":272,"column_start":12,"column_end":17},"name":"Union","qualname":"::collections::btree::set::Union","value":"","parent":null,"children":[],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `BTreeSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `BTreeSet`s.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264859,"byte_end":264926,"line_start":264,"line_end":264,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264927,"byte_end":264930,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`BTreeSet`].","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264931,"byte_end":265000,"line_start":266,"line_end":266,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265001,"byte_end":265036,"line_start":267,"line_end":267,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265037,"byte_end":265040,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ [`BTreeSet`]: struct.BTreeSet.html","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265041,"byte_end":265079,"line_start":269,"line_end":269,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.BTreeSet.html#method.union","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265080,"byte_end":265128,"line_start":270,"line_end":270,"column_start":1,"column_end":49}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265129,"byte_end":265174,"line_start":271,"line_end":271,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266236,"byte_end":266239,"line_start":301,"line_end":301,"column_start":12,"column_end":15},"name":"new","qualname":"<BTreeSet<T>>::new","value":"fn () -> BTreeSet<T>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `BTreeSet` with a reasonable choice of B.","sig":null,"attributes":[{"value":"/ Makes a new `BTreeSet` with a reasonable choice of B.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265924,"byte_end":265981,"line_start":290,"line_end":290,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265986,"byte_end":265989,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265994,"byte_end":266008,"line_start":292,"line_end":292,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266013,"byte_end":266016,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266021,"byte_end":266028,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ # #![allow(unused_mut)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266033,"byte_end":266060,"line_start":295,"line_end":295,"column_start":5,"column_end":32}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266065,"byte_end":266100,"line_start":296,"line_end":296,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266105,"byte_end":266108,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let mut set: BTreeSet<i32> = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266113,"byte_end":266162,"line_start":298,"line_end":298,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266167,"byte_end":266174,"line_start":299,"line_end":299,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266179,"byte_end":266224,"line_start":300,"line_end":300,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267228,"byte_end":267233,"line_start":328,"line_end":328,"column_start":12,"column_end":17},"name":"range","qualname":"<BTreeSet<T>>::range","value":"fn <K, R> (&self, range: R) -> Range<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a double-ended iterator over a sub-range of elements in the set.\n The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\n yield elements from min (inclusive) to max (exclusive).\n The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n range from 4 to 10.","sig":null,"attributes":[{"value":"/ Constructs a double-ended iterator over a sub-range of elements in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266312,"byte_end":266391,"line_start":305,"line_end":305,"column_start":5,"column_end":84}},{"value":"/ The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266396,"byte_end":266483,"line_start":306,"line_end":306,"column_start":5,"column_end":92}},{"value":"/ yield elements from min (inclusive) to max (exclusive).","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266488,"byte_end":266547,"line_start":307,"line_end":307,"column_start":5,"column_end":64}},{"value":"/ The range may also be entered as `(Bound<T>, Bound<T>)`, so for example","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266552,"byte_end":266627,"line_start":308,"line_end":308,"column_start":5,"column_end":80}},{"value":"/ `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266632,"byte_end":266717,"line_start":309,"line_end":309,"column_start":5,"column_end":90}},{"value":"/ range from 4 to 10.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266722,"byte_end":266745,"line_start":310,"line_end":310,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266750,"byte_end":266753,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266758,"byte_end":266772,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266777,"byte_end":266780,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266785,"byte_end":266792,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266797,"byte_end":266832,"line_start":315,"line_end":315,"column_start":5,"column_end":40}},{"value":"/ use std::ops::Bound::Included;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266837,"byte_end":266871,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266876,"byte_end":266879,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266884,"byte_end":266918,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"/ set.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266923,"byte_end":266941,"line_start":319,"line_end":319,"column_start":5,"column_end":23}},{"value":"/ set.insert(5);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266946,"byte_end":266964,"line_start":320,"line_end":320,"column_start":5,"column_end":23}},{"value":"/ set.insert(8);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266969,"byte_end":266987,"line_start":321,"line_end":321,"column_start":5,"column_end":23}},{"value":"/ for &elem in set.range((Included(&4), Included(&8))) {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":266992,"byte_end":267050,"line_start":322,"line_end":322,"column_start":5,"column_end":63}},{"value":"/     println!(\"{}\", elem);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267055,"byte_end":267084,"line_start":323,"line_end":323,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267089,"byte_end":267094,"line_start":324,"line_end":324,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(Some(&5), set.range(4..).next());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267099,"byte_end":267147,"line_start":325,"line_end":325,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267152,"byte_end":267159,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_range\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267164,"byte_end":267216,"line_start":327,"line_end":327,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267999,"byte_end":268009,"line_start":358,"line_end":358,"column_start":12,"column_end":22},"name":"difference","qualname":"<BTreeSet<T>>::difference","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267419,"byte_end":267469,"line_start":337,"line_end":337,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267474,"byte_end":267533,"line_start":338,"line_end":338,"column_start":5,"column_end":64}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267538,"byte_end":267561,"line_start":339,"line_end":339,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267566,"byte_end":267569,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267574,"byte_end":267588,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267593,"byte_end":267596,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267601,"byte_end":267608,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267613,"byte_end":267648,"line_start":344,"line_end":344,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267653,"byte_end":267656,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267661,"byte_end":267693,"line_start":346,"line_end":346,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267698,"byte_end":267714,"line_start":347,"line_end":347,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267719,"byte_end":267735,"line_start":348,"line_end":348,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267740,"byte_end":267743,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267748,"byte_end":267780,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267785,"byte_end":267801,"line_start":351,"line_end":351,"column_start":5,"column_end":21}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267806,"byte_end":267822,"line_start":352,"line_end":352,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267827,"byte_end":267830,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ let diff: Vec<_> = a.difference(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267835,"byte_end":267894,"line_start":354,"line_end":354,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(diff, [1]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267899,"byte_end":267925,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267930,"byte_end":267937,"line_start":356,"line_end":356,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":267942,"byte_end":267987,"line_start":357,"line_end":357,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270233,"byte_end":270253,"line_start":416,"line_end":416,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<BTreeSet<T>>::symmetric_difference","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> SymmetricDifference<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269611,"byte_end":269671,"line_start":395,"line_end":395,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269676,"byte_end":269746,"line_start":396,"line_end":396,"column_start":5,"column_end":75}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269751,"byte_end":269774,"line_start":397,"line_end":397,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269779,"byte_end":269782,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269787,"byte_end":269801,"line_start":399,"line_end":399,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269806,"byte_end":269809,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269814,"byte_end":269821,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269826,"byte_end":269861,"line_start":402,"line_end":402,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269866,"byte_end":269869,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269874,"byte_end":269906,"line_start":404,"line_end":404,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269911,"byte_end":269927,"line_start":405,"line_end":405,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269932,"byte_end":269948,"line_start":406,"line_end":406,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269953,"byte_end":269956,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269961,"byte_end":269993,"line_start":408,"line_end":408,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":269998,"byte_end":270014,"line_start":409,"line_end":409,"column_start":5,"column_end":21}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270019,"byte_end":270035,"line_start":410,"line_end":410,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270040,"byte_end":270043,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ let sym_diff: Vec<_> = a.symmetric_difference(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270048,"byte_end":270121,"line_start":412,"line_end":412,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(sym_diff, [1, 3]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270126,"byte_end":270159,"line_start":413,"line_end":413,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270164,"byte_end":270171,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270176,"byte_end":270221,"line_start":415,"line_end":415,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":271032,"byte_end":271044,"line_start":444,"line_end":444,"column_start":12,"column_end":24},"name":"intersection","qualname":"<BTreeSet<T>>::intersection","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> Intersection<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270434,"byte_end":270486,"line_start":423,"line_end":423,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270491,"byte_end":270548,"line_start":424,"line_end":424,"column_start":5,"column_end":62}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270553,"byte_end":270576,"line_start":425,"line_end":425,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270581,"byte_end":270584,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270589,"byte_end":270603,"line_start":427,"line_end":427,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270608,"byte_end":270611,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270616,"byte_end":270623,"line_start":429,"line_end":429,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270628,"byte_end":270663,"line_start":430,"line_end":430,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270668,"byte_end":270671,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270676,"byte_end":270708,"line_start":432,"line_end":432,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270713,"byte_end":270729,"line_start":433,"line_end":433,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270734,"byte_end":270750,"line_start":434,"line_end":434,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270755,"byte_end":270758,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270763,"byte_end":270795,"line_start":436,"line_end":436,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270800,"byte_end":270816,"line_start":437,"line_end":437,"column_start":5,"column_end":21}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270821,"byte_end":270837,"line_start":438,"line_end":438,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270842,"byte_end":270845,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let intersection: Vec<_> = a.intersection(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270850,"byte_end":270919,"line_start":440,"line_end":440,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(intersection, [2]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270924,"byte_end":270958,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270963,"byte_end":270970,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":270975,"byte_end":271020,"line_start":443,"line_end":443,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273042,"byte_end":273047,"line_start":492,"line_end":492,"column_start":12,"column_end":17},"name":"union","qualname":"<BTreeSet<T>>::union","value":"fn <'a> (&'a self, other: &'a BTreeSet<T>) -> Union<'a, T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates,\n in ascending order.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272502,"byte_end":272547,"line_start":473,"line_end":473,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272552,"byte_end":272618,"line_start":474,"line_end":474,"column_start":5,"column_end":71}},{"value":"/ in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272623,"byte_end":272646,"line_start":475,"line_end":475,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272651,"byte_end":272654,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272659,"byte_end":272673,"line_start":477,"line_end":477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272678,"byte_end":272681,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272686,"byte_end":272693,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272698,"byte_end":272733,"line_start":480,"line_end":480,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272738,"byte_end":272741,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272746,"byte_end":272778,"line_start":482,"line_end":482,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272783,"byte_end":272799,"line_start":483,"line_end":483,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272804,"byte_end":272807,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272812,"byte_end":272844,"line_start":485,"line_end":485,"column_start":5,"column_end":37}},{"value":"/ b.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272849,"byte_end":272865,"line_start":486,"line_end":486,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272870,"byte_end":272873,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ let union: Vec<_> = a.union(&b).cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272878,"byte_end":272933,"line_start":488,"line_end":488,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(union, [1, 2]);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272938,"byte_end":272968,"line_start":489,"line_end":489,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272973,"byte_end":272980,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":272985,"byte_end":273030,"line_start":491,"line_end":491,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273494,"byte_end":273499,"line_start":509,"line_end":509,"column_start":12,"column_end":17},"name":"clear","qualname":"<BTreeSet<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273177,"byte_end":273217,"line_start":496,"line_end":496,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273222,"byte_end":273225,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273230,"byte_end":273244,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273249,"byte_end":273252,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273257,"byte_end":273264,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273269,"byte_end":273304,"line_start":501,"line_end":501,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273309,"byte_end":273312,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let mut v = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273317,"byte_end":273349,"line_start":503,"line_end":503,"column_start":5,"column_end":37}},{"value":"/ v.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273354,"byte_end":273370,"line_start":504,"line_end":504,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273375,"byte_end":273389,"line_start":505,"line_end":505,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273394,"byte_end":273420,"line_start":506,"line_end":506,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273425,"byte_end":273432,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273437,"byte_end":273482,"line_start":508,"line_end":508,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274097,"byte_end":274105,"line_start":529,"line_end":529,"column_start":12,"column_end":20},"name":"contains","qualname":"<BTreeSet<T>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273549,"byte_end":273596,"line_start":513,"line_end":513,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273601,"byte_end":273604,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273609,"byte_end":273672,"line_start":515,"line_end":515,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273677,"byte_end":273735,"line_start":516,"line_end":516,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273740,"byte_end":273771,"line_start":517,"line_end":517,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273776,"byte_end":273779,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273784,"byte_end":273798,"line_start":519,"line_end":519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273803,"byte_end":273806,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273811,"byte_end":273818,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273823,"byte_end":273858,"line_start":522,"line_end":522,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273863,"byte_end":273866,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273871,"byte_end":273934,"line_start":524,"line_end":524,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273939,"byte_end":273978,"line_start":525,"line_end":525,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":273983,"byte_end":274023,"line_start":526,"line_end":526,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274028,"byte_end":274035,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274040,"byte_end":274085,"line_start":528,"line_end":528,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274836,"byte_end":274839,"line_start":553,"line_end":553,"column_start":12,"column_end":15},"name":"get","qualname":"<BTreeSet<T>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274245,"byte_end":274335,"line_start":537,"line_end":537,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274340,"byte_end":274343,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274348,"byte_end":274411,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274416,"byte_end":274474,"line_start":540,"line_end":540,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274479,"byte_end":274510,"line_start":541,"line_end":541,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274515,"byte_end":274518,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274523,"byte_end":274537,"line_start":543,"line_end":543,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274542,"byte_end":274545,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274550,"byte_end":274557,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274562,"byte_end":274597,"line_start":546,"line_end":546,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274602,"byte_end":274605,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274610,"byte_end":274673,"line_start":548,"line_end":548,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274678,"byte_end":274716,"line_start":549,"line_end":549,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274721,"byte_end":274755,"line_start":550,"line_end":550,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274760,"byte_end":274767,"line_start":551,"line_end":551,"column_start":5,"column_end":12}},{"value":"stable(feature = \"set_recovery\", since = \"1.9.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274772,"byte_end":274824,"line_start":552,"line_end":552,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275579,"byte_end":275590,"line_start":579,"line_end":579,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<BTreeSet<T>>::is_disjoint","value":"fn (&self, other: &BTreeSet<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":274987,"byte_end":275055,"line_start":561,"line_end":561,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275060,"byte_end":275121,"line_start":562,"line_end":562,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275126,"byte_end":275129,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275134,"byte_end":275148,"line_start":564,"line_end":564,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275153,"byte_end":275156,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275161,"byte_end":275168,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275173,"byte_end":275208,"line_start":567,"line_end":567,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275213,"byte_end":275216,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ let a: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275221,"byte_end":275282,"line_start":569,"line_end":569,"column_start":5,"column_end":66}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275287,"byte_end":275319,"line_start":570,"line_end":570,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275324,"byte_end":275327,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275332,"byte_end":275372,"line_start":572,"line_end":572,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275377,"byte_end":275393,"line_start":573,"line_end":573,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275398,"byte_end":275438,"line_start":574,"line_end":574,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275443,"byte_end":275459,"line_start":575,"line_end":575,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275464,"byte_end":275505,"line_start":576,"line_end":576,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275510,"byte_end":275517,"line_start":577,"line_end":577,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275522,"byte_end":275567,"line_start":578,"line_end":578,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276281,"byte_end":276290,"line_start":601,"line_end":601,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<BTreeSet<T>>::is_subset","value":"fn (&self, other: &BTreeSet<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275690,"byte_end":275743,"line_start":583,"line_end":583,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275748,"byte_end":275809,"line_start":584,"line_end":584,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275814,"byte_end":275817,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275822,"byte_end":275836,"line_start":586,"line_end":586,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275841,"byte_end":275844,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275849,"byte_end":275856,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275861,"byte_end":275896,"line_start":589,"line_end":589,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275901,"byte_end":275904,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ let sup: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275909,"byte_end":275972,"line_start":591,"line_end":591,"column_start":5,"column_end":68}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":275977,"byte_end":276011,"line_start":592,"line_end":592,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276016,"byte_end":276019,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276024,"byte_end":276066,"line_start":594,"line_end":594,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276071,"byte_end":276089,"line_start":595,"line_end":595,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276094,"byte_end":276136,"line_start":596,"line_end":596,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276141,"byte_end":276159,"line_start":597,"line_end":597,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276164,"byte_end":276207,"line_start":598,"line_end":598,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276212,"byte_end":276219,"line_start":599,"line_end":599,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":276224,"byte_end":276269,"line_start":600,"line_end":600,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278805,"byte_end":278816,"line_start":677,"line_end":677,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<BTreeSet<T>>::is_superset","value":"fn (&self, other: &BTreeSet<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278169,"byte_end":278224,"line_start":656,"line_end":656,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278229,"byte_end":278290,"line_start":657,"line_end":657,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278295,"byte_end":278298,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278303,"byte_end":278317,"line_start":659,"line_end":659,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278322,"byte_end":278325,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278330,"byte_end":278337,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278342,"byte_end":278377,"line_start":662,"line_end":662,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278382,"byte_end":278385,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ let sub: BTreeSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278390,"byte_end":278450,"line_start":664,"line_end":664,"column_start":5,"column_end":65}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278455,"byte_end":278489,"line_start":665,"line_end":665,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278494,"byte_end":278497,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278502,"byte_end":278547,"line_start":667,"line_end":667,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278552,"byte_end":278555,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278560,"byte_end":278578,"line_start":669,"line_end":669,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278583,"byte_end":278601,"line_start":670,"line_end":670,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278606,"byte_end":278651,"line_start":671,"line_end":671,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278656,"byte_end":278659,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278664,"byte_end":278682,"line_start":673,"line_end":673,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278687,"byte_end":278731,"line_start":674,"line_end":674,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278736,"byte_end":278743,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278748,"byte_end":278793,"line_start":676,"line_end":676,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279480,"byte_end":279485,"line_start":700,"line_end":700,"column_start":12,"column_end":17},"name":"first","qualname":"<BTreeSet<T>>::first","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first value in the set, if any.\n This value is always the minimum of all values in the set.","sig":null,"attributes":[{"value":"/ Returns a reference to the first value in the set, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278896,"byte_end":278958,"line_start":681,"line_end":681,"column_start":5,"column_end":67}},{"value":"/ This value is always the minimum of all values in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":278963,"byte_end":279025,"line_start":682,"line_end":682,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279030,"byte_end":279033,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279038,"byte_end":279052,"line_start":684,"line_end":684,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279057,"byte_end":279060,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279065,"byte_end":279081,"line_start":686,"line_end":686,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279086,"byte_end":279089,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279094,"byte_end":279101,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279106,"byte_end":279137,"line_start":689,"line_end":689,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279142,"byte_end":279177,"line_start":690,"line_end":690,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279182,"byte_end":279185,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279190,"byte_end":279224,"line_start":692,"line_end":692,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.first(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279229,"byte_end":279263,"line_start":693,"line_end":693,"column_start":5,"column_end":39}},{"value":"/ map.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279268,"byte_end":279286,"line_start":694,"line_end":694,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.first(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279291,"byte_end":279329,"line_start":695,"line_end":695,"column_start":5,"column_end":43}},{"value":"/ map.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279334,"byte_end":279352,"line_start":696,"line_end":696,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.first(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279357,"byte_end":279395,"line_start":697,"line_end":697,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279400,"byte_end":279407,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279412,"byte_end":279468,"line_start":699,"line_end":699,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280152,"byte_end":280156,"line_start":723,"line_end":723,"column_start":12,"column_end":16},"name":"last","qualname":"<BTreeSet<T>>::last","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the last value in the set, if any.\n This value is always the maximum of all values in the set.","sig":null,"attributes":[{"value":"/ Returns a reference to the last value in the set, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279571,"byte_end":279632,"line_start":704,"line_end":704,"column_start":5,"column_end":66}},{"value":"/ This value is always the maximum of all values in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279637,"byte_end":279699,"line_start":705,"line_end":705,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279704,"byte_end":279707,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279712,"byte_end":279726,"line_start":707,"line_end":707,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279731,"byte_end":279734,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279739,"byte_end":279755,"line_start":709,"line_end":709,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279760,"byte_end":279763,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279768,"byte_end":279775,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279780,"byte_end":279811,"line_start":712,"line_end":712,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279816,"byte_end":279851,"line_start":713,"line_end":713,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279856,"byte_end":279859,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ let mut map = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279864,"byte_end":279898,"line_start":715,"line_end":715,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map.first(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279903,"byte_end":279937,"line_start":716,"line_end":716,"column_start":5,"column_end":39}},{"value":"/ map.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279942,"byte_end":279960,"line_start":717,"line_end":717,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.last(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":279965,"byte_end":280002,"line_start":718,"line_end":718,"column_start":5,"column_end":42}},{"value":"/ map.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280007,"byte_end":280025,"line_start":719,"line_end":719,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(map.last(), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280030,"byte_end":280067,"line_start":720,"line_end":720,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280072,"byte_end":280079,"line_start":721,"line_end":721,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280084,"byte_end":280140,"line_start":722,"line_end":722,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280774,"byte_end":280783,"line_start":745,"line_end":745,"column_start":12,"column_end":21},"name":"pop_first","qualname":"<BTreeSet<T>>::pop_first","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first value from the set and returns it, if any.\n The first value is always the minimum value in the set.","sig":null,"attributes":[{"value":"/ Removes the first value from the set and returns it, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280241,"byte_end":280305,"line_start":727,"line_end":727,"column_start":5,"column_end":69}},{"value":"/ The first value is always the minimum value in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280310,"byte_end":280369,"line_start":728,"line_end":728,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280374,"byte_end":280377,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280382,"byte_end":280396,"line_start":730,"line_end":730,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280401,"byte_end":280404,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280409,"byte_end":280416,"line_start":732,"line_end":732,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280421,"byte_end":280452,"line_start":733,"line_end":733,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280457,"byte_end":280492,"line_start":734,"line_end":734,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280497,"byte_end":280500,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280505,"byte_end":280539,"line_start":736,"line_end":736,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280544,"byte_end":280547,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ set.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280552,"byte_end":280570,"line_start":738,"line_end":738,"column_start":5,"column_end":23}},{"value":"/ while let Some(n) = set.pop_first() {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280575,"byte_end":280616,"line_start":739,"line_end":739,"column_start":5,"column_end":46}},{"value":"/     assert_eq!(n, 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280621,"byte_end":280646,"line_start":740,"line_end":740,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280651,"byte_end":280656,"line_start":741,"line_end":741,"column_start":5,"column_end":10}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280661,"byte_end":280689,"line_start":742,"line_end":742,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280694,"byte_end":280701,"line_start":743,"line_end":743,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280706,"byte_end":280762,"line_start":744,"line_end":744,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281418,"byte_end":281426,"line_start":767,"line_end":767,"column_start":12,"column_end":20},"name":"pop_last","qualname":"<BTreeSet<T>>::pop_last","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last value from the set and returns it, if any.\n The last value is always the maximum value in the set.","sig":null,"attributes":[{"value":"/ Removes the last value from the set and returns it, if any.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280888,"byte_end":280951,"line_start":749,"line_end":749,"column_start":5,"column_end":68}},{"value":"/ The last value is always the maximum value in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":280956,"byte_end":281014,"line_start":750,"line_end":750,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281019,"byte_end":281022,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281027,"byte_end":281041,"line_start":752,"line_end":752,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281046,"byte_end":281049,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281054,"byte_end":281061,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"/ #![feature(map_first_last)]","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281066,"byte_end":281097,"line_start":755,"line_end":755,"column_start":5,"column_end":36}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281102,"byte_end":281137,"line_start":756,"line_end":756,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281142,"byte_end":281145,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281150,"byte_end":281184,"line_start":758,"line_end":758,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281189,"byte_end":281192,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ set.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281197,"byte_end":281215,"line_start":760,"line_end":760,"column_start":5,"column_end":23}},{"value":"/ while let Some(n) = set.pop_last() {","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281220,"byte_end":281260,"line_start":761,"line_end":761,"column_start":5,"column_end":45}},{"value":"/     assert_eq!(n, 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281265,"byte_end":281290,"line_start":762,"line_end":762,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281295,"byte_end":281300,"line_start":763,"line_end":763,"column_start":5,"column_end":10}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281305,"byte_end":281333,"line_start":764,"line_end":764,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281338,"byte_end":281345,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"map_first_last\", issue = \"62924\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281350,"byte_end":281406,"line_start":766,"line_end":766,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282214,"byte_end":282220,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"insert","qualname":"<BTreeSet<T>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281530,"byte_end":281558,"line_start":771,"line_end":771,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281563,"byte_end":281566,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281571,"byte_end":281638,"line_start":773,"line_end":773,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281643,"byte_end":281646,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned, and the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281651,"byte_end":281723,"line_start":775,"line_end":775,"column_start":5,"column_end":77}},{"value":"/ entry is not updated. See the [module-level documentation] for more.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281728,"byte_end":281800,"line_start":776,"line_end":776,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281805,"byte_end":281808,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281813,"byte_end":281881,"line_start":778,"line_end":778,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281886,"byte_end":281889,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281894,"byte_end":281908,"line_start":780,"line_end":780,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281913,"byte_end":281916,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281921,"byte_end":281928,"line_start":782,"line_end":782,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281933,"byte_end":281968,"line_start":783,"line_end":783,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281973,"byte_end":281976,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":281981,"byte_end":282015,"line_start":785,"line_end":785,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282020,"byte_end":282023,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282028,"byte_end":282064,"line_start":787,"line_end":787,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282069,"byte_end":282106,"line_start":788,"line_end":788,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282111,"byte_end":282140,"line_start":789,"line_end":789,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282145,"byte_end":282152,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282157,"byte_end":282202,"line_start":791,"line_end":791,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1711},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282872,"byte_end":282879,"line_start":812,"line_end":812,"column_start":12,"column_end":19},"name":"replace","qualname":"<BTreeSet<T>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282308,"byte_end":282401,"line_start":796,"line_end":796,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282406,"byte_end":282442,"line_start":797,"line_end":797,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282447,"byte_end":282450,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282455,"byte_end":282469,"line_start":799,"line_end":799,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282474,"byte_end":282477,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282482,"byte_end":282489,"line_start":801,"line_end":801,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282494,"byte_end":282529,"line_start":802,"line_end":802,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282534,"byte_end":282537,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282542,"byte_end":282576,"line_start":804,"line_end":804,"column_start":5,"column_end":39}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282581,"byte_end":282615,"line_start":805,"line_end":805,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282620,"byte_end":282623,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282628,"byte_end":282684,"line_start":807,"line_end":807,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282689,"byte_end":282729,"line_start":808,"line_end":808,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282734,"byte_end":282791,"line_start":809,"line_end":809,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282796,"byte_end":282803,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"stable(feature = \"set_recovery\", since = \"1.9.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282808,"byte_end":282860,"line_start":811,"line_end":811,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283564,"byte_end":283570,"line_start":835,"line_end":835,"column_start":12,"column_end":18},"name":"remove","qualname":"<BTreeSet<T>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":282974,"byte_end":283037,"line_start":816,"line_end":816,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283042,"byte_end":283065,"line_start":817,"line_end":817,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283070,"byte_end":283073,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283078,"byte_end":283141,"line_start":819,"line_end":819,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283146,"byte_end":283204,"line_start":820,"line_end":820,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283209,"byte_end":283240,"line_start":821,"line_end":821,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283245,"byte_end":283248,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283253,"byte_end":283267,"line_start":823,"line_end":823,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283272,"byte_end":283275,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283280,"byte_end":283287,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283292,"byte_end":283327,"line_start":826,"line_end":826,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283332,"byte_end":283335,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ let mut set = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283340,"byte_end":283374,"line_start":828,"line_end":828,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283379,"byte_end":283382,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283387,"byte_end":283405,"line_start":830,"line_end":830,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283410,"byte_end":283447,"line_start":831,"line_end":831,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283452,"byte_end":283490,"line_start":832,"line_end":832,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283495,"byte_end":283502,"line_start":833,"line_end":833,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283507,"byte_end":283552,"line_start":834,"line_end":834,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284309,"byte_end":284313,"line_start":859,"line_end":859,"column_start":12,"column_end":16},"name":"take","qualname":"<BTreeSet<T>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283718,"byte_end":283803,"line_start":843,"line_end":843,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283808,"byte_end":283811,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283816,"byte_end":283879,"line_start":845,"line_end":845,"column_start":5,"column_end":68}},{"value":"/ but the ordering on the borrowed form *must* match the","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283884,"byte_end":283942,"line_start":846,"line_end":846,"column_start":5,"column_end":63}},{"value":"/ ordering on the value type.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283947,"byte_end":283978,"line_start":847,"line_end":847,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283983,"byte_end":283986,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":283991,"byte_end":284005,"line_start":849,"line_end":849,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284010,"byte_end":284013,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284018,"byte_end":284025,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284030,"byte_end":284065,"line_start":852,"line_end":852,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284070,"byte_end":284073,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ let mut set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284078,"byte_end":284145,"line_start":854,"line_end":854,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284150,"byte_end":284188,"line_start":855,"line_end":855,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284193,"byte_end":284228,"line_start":856,"line_end":856,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284233,"byte_end":284240,"line_start":857,"line_end":857,"column_start":5,"column_end":12}},{"value":"stable(feature = \"set_recovery\", since = \"1.9.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284245,"byte_end":284297,"line_start":858,"line_end":858,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285204,"byte_end":285210,"line_start":896,"line_end":896,"column_start":12,"column_end":18},"name":"append","qualname":"<BTreeSet<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` into `Self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all elements from `other` into `Self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284469,"byte_end":284540,"line_start":867,"line_end":867,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284545,"byte_end":284548,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284553,"byte_end":284567,"line_start":869,"line_end":869,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284572,"byte_end":284575,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284580,"byte_end":284587,"line_start":871,"line_end":871,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284592,"byte_end":284627,"line_start":872,"line_end":872,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284632,"byte_end":284635,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284640,"byte_end":284672,"line_start":874,"line_end":874,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284677,"byte_end":284693,"line_start":875,"line_end":875,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284698,"byte_end":284714,"line_start":876,"line_end":876,"column_start":5,"column_end":21}},{"value":"/ a.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284719,"byte_end":284735,"line_start":877,"line_end":877,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284740,"byte_end":284743,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ let mut b = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284748,"byte_end":284780,"line_start":879,"line_end":879,"column_start":5,"column_end":37}},{"value":"/ b.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284785,"byte_end":284801,"line_start":880,"line_end":880,"column_start":5,"column_end":21}},{"value":"/ b.insert(4);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284806,"byte_end":284822,"line_start":881,"line_end":881,"column_start":5,"column_end":21}},{"value":"/ b.insert(5);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284827,"byte_end":284843,"line_start":882,"line_end":882,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284848,"byte_end":284851,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ a.append(&mut b);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284856,"byte_end":284877,"line_start":884,"line_end":884,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284882,"byte_end":284885,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 5);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284890,"byte_end":284917,"line_start":886,"line_end":886,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284922,"byte_end":284949,"line_start":887,"line_end":887,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284954,"byte_end":284957,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ assert!(a.contains(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284962,"byte_end":284990,"line_start":889,"line_end":889,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":284995,"byte_end":285023,"line_start":890,"line_end":890,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285028,"byte_end":285056,"line_start":891,"line_end":891,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&4));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285061,"byte_end":285089,"line_start":892,"line_end":892,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&5));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285094,"byte_end":285122,"line_start":893,"line_end":893,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285127,"byte_end":285134,"line_start":894,"line_end":894,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_append\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285139,"byte_end":285192,"line_start":895,"line_end":895,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1717},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286062,"byte_end":286071,"line_start":930,"line_end":930,"column_start":12,"column_end":21},"name":"split_off","qualname":"<BTreeSet<T>>::split_off","value":"fn <Q> (&mut self, key: &Q) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given key. Returns everything after the given key,\n including the key.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given key. Returns everything after the given key,","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285294,"byte_end":285386,"line_start":900,"line_end":900,"column_start":5,"column_end":97}},{"value":"/ including the key.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285391,"byte_end":285413,"line_start":901,"line_end":901,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285418,"byte_end":285421,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285426,"byte_end":285440,"line_start":903,"line_end":903,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285445,"byte_end":285448,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285453,"byte_end":285469,"line_start":905,"line_end":905,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285474,"byte_end":285477,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285482,"byte_end":285489,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285494,"byte_end":285529,"line_start":908,"line_end":908,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285534,"byte_end":285537,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let mut a = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285542,"byte_end":285574,"line_start":910,"line_end":910,"column_start":5,"column_end":37}},{"value":"/ a.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285579,"byte_end":285595,"line_start":911,"line_end":911,"column_start":5,"column_end":21}},{"value":"/ a.insert(2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285600,"byte_end":285616,"line_start":912,"line_end":912,"column_start":5,"column_end":21}},{"value":"/ a.insert(3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285621,"byte_end":285637,"line_start":913,"line_end":913,"column_start":5,"column_end":21}},{"value":"/ a.insert(17);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285642,"byte_end":285659,"line_start":914,"line_end":914,"column_start":5,"column_end":22}},{"value":"/ a.insert(41);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285664,"byte_end":285681,"line_start":915,"line_end":915,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285686,"byte_end":285689,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ let b = a.split_off(&3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285694,"byte_end":285722,"line_start":917,"line_end":917,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285727,"byte_end":285730,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 2);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285735,"byte_end":285762,"line_start":919,"line_end":919,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(b.len(), 3);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285767,"byte_end":285794,"line_start":920,"line_end":920,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285799,"byte_end":285802,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ assert!(a.contains(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285807,"byte_end":285835,"line_start":922,"line_end":922,"column_start":5,"column_end":33}},{"value":"/ assert!(a.contains(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285840,"byte_end":285868,"line_start":923,"line_end":923,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285873,"byte_end":285876,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ assert!(b.contains(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285881,"byte_end":285909,"line_start":925,"line_end":925,"column_start":5,"column_end":33}},{"value":"/ assert!(b.contains(&17));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285914,"byte_end":285943,"line_start":926,"line_end":926,"column_start":5,"column_end":34}},{"value":"/ assert!(b.contains(&41));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285948,"byte_end":285977,"line_start":927,"line_end":927,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285982,"byte_end":285989,"line_start":928,"line_end":928,"column_start":5,"column_end":12}},{"value":"stable(feature = \"btree_split_off\", since = \"1.11.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":285994,"byte_end":286050,"line_start":929,"line_end":929,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287241,"byte_end":287245,"line_start":967,"line_end":967,"column_start":12,"column_end":16},"name":"iter","qualname":"<BTreeSet<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator that visits the values in the `BTreeSet` in ascending order.","sig":null,"attributes":[{"value":"/ Gets an iterator that visits the values in the `BTreeSet` in ascending order.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286240,"byte_end":286321,"line_start":939,"line_end":939,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286326,"byte_end":286329,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286334,"byte_end":286348,"line_start":941,"line_end":941,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286353,"byte_end":286356,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286361,"byte_end":286368,"line_start":943,"line_end":943,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286373,"byte_end":286408,"line_start":944,"line_end":944,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286413,"byte_end":286416,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<usize> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286421,"byte_end":286488,"line_start":946,"line_end":946,"column_start":5,"column_end":72}},{"value":"/ let mut set_iter = set.iter();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286493,"byte_end":286527,"line_start":947,"line_end":947,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(set_iter.next(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286532,"byte_end":286574,"line_start":948,"line_end":948,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286579,"byte_end":286621,"line_start":949,"line_end":949,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286626,"byte_end":286668,"line_start":950,"line_end":950,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286673,"byte_end":286711,"line_start":951,"line_end":951,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286716,"byte_end":286723,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286728,"byte_end":286731,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ Values returned by the iterator are returned in ascending order:","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286736,"byte_end":286804,"line_start":954,"line_end":954,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286809,"byte_end":286812,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286817,"byte_end":286824,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286829,"byte_end":286864,"line_start":957,"line_end":957,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286869,"byte_end":286872,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ let set: BTreeSet<usize> = [3, 1, 2].iter().cloned().collect();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286877,"byte_end":286944,"line_start":959,"line_end":959,"column_start":5,"column_end":72}},{"value":"/ let mut set_iter = set.iter();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286949,"byte_end":286983,"line_start":960,"line_end":960,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(set_iter.next(), Some(&1));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286988,"byte_end":287030,"line_start":961,"line_end":961,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&2));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287035,"byte_end":287077,"line_start":962,"line_end":962,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), Some(&3));","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287082,"byte_end":287124,"line_start":963,"line_end":963,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(set_iter.next(), None);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287129,"byte_end":287167,"line_start":964,"line_end":964,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287172,"byte_end":287179,"line_start":965,"line_end":965,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287184,"byte_end":287229,"line_start":966,"line_end":966,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287657,"byte_end":287660,"line_start":984,"line_end":984,"column_start":12,"column_end":15},"name":"len","qualname":"<BTreeSet<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287320,"byte_end":287366,"line_start":971,"line_end":971,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287371,"byte_end":287374,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287379,"byte_end":287393,"line_start":973,"line_end":973,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287398,"byte_end":287401,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287406,"byte_end":287413,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287418,"byte_end":287453,"line_start":976,"line_end":976,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287458,"byte_end":287461,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ let mut v = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287466,"byte_end":287498,"line_start":978,"line_end":978,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287503,"byte_end":287530,"line_start":979,"line_end":979,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287535,"byte_end":287551,"line_start":980,"line_end":980,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287556,"byte_end":287583,"line_start":981,"line_end":981,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287588,"byte_end":287595,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287600,"byte_end":287645,"line_start":983,"line_end":983,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288054,"byte_end":288062,"line_start":1001,"line_end":1001,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BTreeSet<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287713,"byte_end":287764,"line_start":988,"line_end":988,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287769,"byte_end":287772,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287777,"byte_end":287791,"line_start":990,"line_end":990,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287796,"byte_end":287799,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287804,"byte_end":287811,"line_start":992,"line_end":992,"column_start":5,"column_end":12}},{"value":"/ use std::collections::BTreeSet;","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287816,"byte_end":287851,"line_start":993,"line_end":993,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287856,"byte_end":287859,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ let mut v = BTreeSet::new();","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287864,"byte_end":287896,"line_start":995,"line_end":995,"column_start":5,"column_end":37}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287901,"byte_end":287927,"line_start":996,"line_end":996,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287932,"byte_end":287948,"line_start":997,"line_end":997,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287953,"byte_end":287980,"line_start":998,"line_end":998,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287985,"byte_end":287992,"line_start":999,"line_end":999,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":287997,"byte_end":288042,"line_start":1000,"line_end":1000,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1869},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":108724,"byte_end":108727,"line_start":8,"line_end":8,"column_start":10,"column_end":13},"name":"Key","qualname":"::collections::btree::Recover::Key","value":"type Key;","parent":{"krate":0,"index":1867},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":108737,"byte_end":108740,"line_start":10,"line_end":10,"column_start":8,"column_end":11},"name":"get","qualname":"::collections::btree::Recover::get","value":"fn (&self, key: &Q) -> Option<&Self::Key>","parent":{"krate":0,"index":1867},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":108787,"byte_end":108791,"line_start":11,"line_end":11,"column_start":8,"column_end":12},"name":"take","qualname":"::collections::btree::Recover::take","value":"fn (&mut self, key: &Q) -> Option<Self::Key>","parent":{"krate":0,"index":1867},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":108841,"byte_end":108848,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"replace","qualname":"::collections::btree::Recover::replace","value":"fn (&mut self, key: Self::Key) -> Option<Self::Key>","parent":{"krate":0,"index":1867},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1873},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"src/liballoc/collections/linked_list.rs","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1893},{"krate":0,"index":1898},{"krate":0,"index":1905},{"krate":0,"index":1908},{"krate":0,"index":1911},{"krate":0,"index":1918},{"krate":0,"index":4478},{"krate":0,"index":4481},{"krate":0,"index":1921},{"krate":0,"index":1924},{"krate":0,"index":1928},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1976},{"krate":0,"index":1988},{"krate":0,"index":1996},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2005},{"krate":0,"index":2013},{"krate":0,"index":2018},{"krate":0,"index":2020},{"krate":0,"index":2022},{"krate":0,"index":2027},{"krate":0,"index":2033},{"krate":0,"index":2036},{"krate":0,"index":2042},{"krate":0,"index":2045},{"krate":0,"index":2058},{"krate":0,"index":2073},{"krate":0,"index":2083},{"krate":0,"index":2092},{"krate":0,"index":2098},{"krate":0,"index":2102},{"krate":0,"index":2106},{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2118},{"krate":0,"index":2122},{"krate":0,"index":2127},{"krate":0,"index":2133},{"krate":0,"index":2139},{"krate":0,"index":2143},{"krate":0,"index":2147},{"krate":0,"index":2150},{"krate":0,"index":2155},{"krate":0,"index":2159},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2167},{"krate":0,"index":2171},{"krate":0,"index":2174},{"krate":0,"index":2178},{"krate":0,"index":2186},{"krate":0,"index":2188},{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2194},{"krate":0,"index":2196}],"decl_id":null,"docs":" A doubly-linked list with owned nodes.","sig":null,"attributes":[{"value":"! A doubly-linked list with owned nodes.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301525,"byte_end":301567,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301568,"byte_end":301571,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The `LinkedList` allows pushing and popping elements at either end","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301572,"byte_end":301642,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"! in constant time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301643,"byte_end":301664,"line_start":4,"line_end":4,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301665,"byte_end":301668,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! NOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301669,"byte_end":301744,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"! array-based containers are generally faster,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301745,"byte_end":301793,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"! more memory efficient, and make better use of CPU cache.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301794,"byte_end":301854,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301855,"byte_end":301858,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! [`Vec`]: ../../vec/struct.Vec.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301859,"byte_end":301897,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"! [`VecDeque`]: ../vec_deque/struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301898,"byte_end":301949,"line_start":11,"line_end":11,"column_start":1,"column_end":52}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":301951,"byte_end":301997,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1887},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302644,"byte_end":302654,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"LinkedList","qualname":"::collections::linked_list::LinkedList","value":"LinkedList {  }","parent":null,"children":[{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892}],"decl_id":null,"docs":" A doubly-linked list with owned nodes.","sig":null,"attributes":[{"value":"/ A doubly-linked list with owned nodes.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302261,"byte_end":302303,"line_start":29,"line_end":29,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302304,"byte_end":302307,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The `LinkedList` allows pushing and popping elements at either end","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302308,"byte_end":302378,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ in constant time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302379,"byte_end":302400,"line_start":32,"line_end":32,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302401,"byte_end":302404,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ NOTE: It is almost always better to use `Vec` or `VecDeque` because","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302405,"byte_end":302476,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ array-based containers are generally faster,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302477,"byte_end":302525,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ more memory efficient, and make better use of CPU cache.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302526,"byte_end":302586,"line_start":36,"line_end":36,"column_start":1,"column_end":61}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302587,"byte_end":302632,"line_start":37,"line_end":37,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1898},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303215,"byte_end":303219,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904}],"decl_id":null,"docs":" An iterator over the elements of a `LinkedList`.","sig":null,"attributes":[{"value":"/ An iterator over the elements of a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302898,"byte_end":302950,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302951,"byte_end":302954,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`LinkedList`]. See its","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":302955,"byte_end":303033,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303034,"byte_end":303061,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303062,"byte_end":303065,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.LinkedList.html#method.iter","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303066,"byte_end":303114,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/ [`LinkedList`]: struct.LinkedList.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303115,"byte_end":303157,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303158,"byte_end":303203,"line_start":58,"line_end":58,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1911},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304130,"byte_end":304137,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917}],"decl_id":null,"docs":" A mutable iterator over the elements of a `LinkedList`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the elements of a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303794,"byte_end":303853,"line_start":81,"line_end":81,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303854,"byte_end":303857,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`LinkedList`]. See its","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303858,"byte_end":303940,"line_start":83,"line_end":83,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303941,"byte_end":303968,"line_start":84,"line_end":84,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303969,"byte_end":303972,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.LinkedList.html#method.iter_mut","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303973,"byte_end":304029,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ [`LinkedList`]: struct.LinkedList.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304030,"byte_end":304072,"line_start":87,"line_end":87,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304073,"byte_end":304118,"line_start":88,"line_end":88,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4478},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305183,"byte_end":305191,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4480}],"decl_id":null,"docs":" An owning iterator over the elements of a `LinkedList`.","sig":null,"attributes":[{"value":"/ An owning iterator over the elements of a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304788,"byte_end":304847,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304848,"byte_end":304851,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`LinkedList`]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304852,"byte_end":304926,"line_start":108,"line_end":108,"column_start":1,"column_end":75}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304927,"byte_end":305002,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305003,"byte_end":305006,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.LinkedList.html#method.into_iter","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305007,"byte_end":305065,"line_start":111,"line_end":111,"column_start":1,"column_end":59}},{"value":"/ [`LinkedList`]: struct.LinkedList.html","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305066,"byte_end":305108,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305126,"byte_end":305171,"line_start":114,"line_end":114,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1947},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313909,"byte_end":313912,"line_start":384,"line_end":384,"column_start":18,"column_end":21},"name":"new","qualname":"<LinkedList<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinkedList`.","sig":null,"attributes":[{"value":"/ Creates an empty `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313550,"byte_end":313584,"line_start":372,"line_end":372,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313589,"byte_end":313592,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313597,"byte_end":313611,"line_start":374,"line_end":374,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313616,"byte_end":313619,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313624,"byte_end":313631,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313636,"byte_end":313673,"line_start":377,"line_end":377,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313678,"byte_end":313681,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313686,"byte_end":313736,"line_start":379,"line_end":379,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313741,"byte_end":313748,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313753,"byte_end":313762,"line_start":381,"line_end":381,"column_start":5,"column_end":14}},{"value":"rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313767,"byte_end":313841,"line_start":382,"line_end":382,"column_start":5,"column_end":79}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313846,"byte_end":313891,"line_start":383,"line_end":383,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1948},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314942,"byte_end":314948,"line_start":418,"line_end":418,"column_start":12,"column_end":18},"name":"append","qualname":"<LinkedList<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` to the end of the list.","sig":null,"attributes":[{"value":"/ Moves all elements from `other` to the end of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314011,"byte_end":314070,"line_start":388,"line_end":388,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314075,"byte_end":314078,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This reuses all the nodes from `other` and moves them into `self`. After","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314083,"byte_end":314159,"line_start":390,"line_end":390,"column_start":5,"column_end":81}},{"value":"/ this operation, `other` becomes empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314164,"byte_end":314206,"line_start":391,"line_end":391,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314211,"byte_end":314214,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time and O(1) memory.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314219,"byte_end":314282,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314287,"byte_end":314290,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314295,"byte_end":314309,"line_start":395,"line_end":395,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314314,"byte_end":314317,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314322,"byte_end":314329,"line_start":397,"line_end":397,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314334,"byte_end":314371,"line_start":398,"line_end":398,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314376,"byte_end":314379,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ let mut list1 = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314384,"byte_end":314422,"line_start":400,"line_end":400,"column_start":5,"column_end":43}},{"value":"/ list1.push_back('a');","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314427,"byte_end":314452,"line_start":401,"line_end":401,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314457,"byte_end":314460,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ let mut list2 = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314465,"byte_end":314503,"line_start":403,"line_end":403,"column_start":5,"column_end":43}},{"value":"/ list2.push_back('b');","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314508,"byte_end":314533,"line_start":404,"line_end":404,"column_start":5,"column_end":30}},{"value":"/ list2.push_back('c');","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314538,"byte_end":314563,"line_start":405,"line_end":405,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314568,"byte_end":314571,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ list1.append(&mut list2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314576,"byte_end":314605,"line_start":407,"line_end":407,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314610,"byte_end":314613,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let mut iter = list1.iter();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314618,"byte_end":314650,"line_start":409,"line_end":409,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(iter.next(), Some(&'a'));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314655,"byte_end":314695,"line_start":410,"line_end":410,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(iter.next(), Some(&'b'));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314700,"byte_end":314740,"line_start":411,"line_end":411,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(iter.next(), Some(&'c'));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314745,"byte_end":314785,"line_start":412,"line_end":412,"column_start":5,"column_end":45}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314790,"byte_end":314825,"line_start":413,"line_end":413,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314830,"byte_end":314833,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ assert!(list2.is_empty());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314838,"byte_end":314868,"line_start":415,"line_end":415,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314873,"byte_end":314880,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":314885,"byte_end":314930,"line_start":417,"line_end":417,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315757,"byte_end":315764,"line_start":439,"line_end":439,"column_start":12,"column_end":19},"name":"prepend","qualname":"<LinkedList<T>>::prepend","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all elements from `other` to the begin of the list.\n","sig":null,"attributes":[{"value":"/ Moves all elements from `other` to the begin of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315619,"byte_end":315680,"line_start":437,"line_end":437,"column_start":5,"column_end":66}},{"value":"unstable(feature = \"linked_list_prepend\", issue = \"none\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":315685,"byte_end":315745,"line_start":438,"line_end":438,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1950},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317012,"byte_end":317016,"line_start":479,"line_end":479,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinkedList<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a forward iterator.","sig":null,"attributes":[{"value":"/ Provides a forward iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316435,"byte_end":316467,"line_start":458,"line_end":458,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316472,"byte_end":316475,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316480,"byte_end":316494,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316499,"byte_end":316502,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316507,"byte_end":316514,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316519,"byte_end":316556,"line_start":463,"line_end":463,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316561,"byte_end":316564,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316569,"byte_end":316623,"line_start":465,"line_end":465,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316628,"byte_end":316631,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ list.push_back(0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316636,"byte_end":316658,"line_start":467,"line_end":467,"column_start":5,"column_end":27}},{"value":"/ list.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316663,"byte_end":316685,"line_start":468,"line_end":468,"column_start":5,"column_end":27}},{"value":"/ list.push_back(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316690,"byte_end":316712,"line_start":469,"line_end":469,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316717,"byte_end":316720,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ let mut iter = list.iter();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316725,"byte_end":316756,"line_start":471,"line_end":471,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(iter.next(), Some(&0));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316761,"byte_end":316799,"line_start":472,"line_end":472,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316804,"byte_end":316842,"line_start":473,"line_end":473,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(&2));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316847,"byte_end":316885,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316890,"byte_end":316924,"line_start":475,"line_end":475,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316929,"byte_end":316936,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316941,"byte_end":316950,"line_start":477,"line_end":477,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":316955,"byte_end":317000,"line_start":478,"line_end":478,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1951},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317829,"byte_end":317837,"line_start":508,"line_end":508,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinkedList<T>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a forward iterator with mutable references.","sig":null,"attributes":[{"value":"/ Provides a forward iterator with mutable references.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317138,"byte_end":317194,"line_start":483,"line_end":483,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317199,"byte_end":317202,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317207,"byte_end":317221,"line_start":485,"line_end":485,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317226,"byte_end":317229,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317234,"byte_end":317241,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317246,"byte_end":317283,"line_start":488,"line_end":488,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317288,"byte_end":317291,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317296,"byte_end":317350,"line_start":490,"line_end":490,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317355,"byte_end":317358,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ list.push_back(0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317363,"byte_end":317385,"line_start":492,"line_end":492,"column_start":5,"column_end":27}},{"value":"/ list.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317390,"byte_end":317412,"line_start":493,"line_end":493,"column_start":5,"column_end":27}},{"value":"/ list.push_back(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317417,"byte_end":317439,"line_start":494,"line_end":494,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317444,"byte_end":317447,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ for element in list.iter_mut() {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317452,"byte_end":317488,"line_start":496,"line_end":496,"column_start":5,"column_end":41}},{"value":"/     *element += 10;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317493,"byte_end":317516,"line_start":497,"line_end":497,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317521,"byte_end":317526,"line_start":498,"line_end":498,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317531,"byte_end":317534,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ let mut iter = list.iter();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317539,"byte_end":317570,"line_start":500,"line_end":500,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(iter.next(), Some(&10));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317575,"byte_end":317614,"line_start":501,"line_end":501,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&11));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317619,"byte_end":317658,"line_start":502,"line_end":502,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&12));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317663,"byte_end":317702,"line_start":503,"line_end":503,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317707,"byte_end":317741,"line_start":504,"line_end":504,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317746,"byte_end":317753,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317758,"byte_end":317767,"line_start":506,"line_end":506,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317772,"byte_end":317817,"line_start":507,"line_end":507,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318183,"byte_end":318195,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"name":"cursor_front","qualname":"<LinkedList<T>>::cursor_front","value":"fn (&self) -> Cursor<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor at the front element.","sig":null,"attributes":[{"value":"/ Provides a cursor at the front element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":317960,"byte_end":318003,"line_start":512,"line_end":512,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318008,"byte_end":318011,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318016,"byte_end":318091,"line_start":514,"line_end":514,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318096,"byte_end":318105,"line_start":515,"line_end":515,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318110,"byte_end":318171,"line_start":516,"line_end":516,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1953},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318540,"byte_end":318556,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"cursor_front_mut","qualname":"<LinkedList<T>>::cursor_front_mut","value":"fn (&mut self) -> CursorMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor with editing operations at the front element.","sig":null,"attributes":[{"value":"/ Provides a cursor with editing operations at the front element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318293,"byte_end":318360,"line_start":521,"line_end":521,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318365,"byte_end":318368,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318373,"byte_end":318448,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318453,"byte_end":318462,"line_start":524,"line_end":524,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318467,"byte_end":318528,"line_start":525,"line_end":525,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318886,"byte_end":318897,"line_start":535,"line_end":535,"column_start":12,"column_end":23},"name":"cursor_back","qualname":"<LinkedList<T>>::cursor_back","value":"fn (&self) -> Cursor<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor at the back element.","sig":null,"attributes":[{"value":"/ Provides a cursor at the back element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318664,"byte_end":318706,"line_start":530,"line_end":530,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318711,"byte_end":318714,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318719,"byte_end":318794,"line_start":532,"line_end":532,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318799,"byte_end":318808,"line_start":533,"line_end":533,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":318813,"byte_end":318874,"line_start":534,"line_end":534,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319276,"byte_end":319291,"line_start":544,"line_end":544,"column_start":12,"column_end":27},"name":"cursor_back_mut","qualname":"<LinkedList<T>>::cursor_back_mut","value":"fn (&mut self) -> CursorMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a cursor with editing operations at the back element.","sig":null,"attributes":[{"value":"/ Provides a cursor with editing operations at the back element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319030,"byte_end":319096,"line_start":539,"line_end":539,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319101,"byte_end":319104,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ The cursor is pointing to the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319109,"byte_end":319184,"line_start":541,"line_end":541,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319189,"byte_end":319198,"line_start":542,"line_end":542,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319203,"byte_end":319264,"line_start":543,"line_end":543,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319870,"byte_end":319878,"line_start":565,"line_end":565,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinkedList<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `LinkedList` is empty.","sig":null,"attributes":[{"value":"/ Returns `true` if the `LinkedList` is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319434,"byte_end":319482,"line_start":548,"line_end":548,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319487,"byte_end":319490,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319495,"byte_end":319542,"line_start":550,"line_end":550,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319547,"byte_end":319550,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319555,"byte_end":319569,"line_start":552,"line_end":552,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319574,"byte_end":319577,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319582,"byte_end":319589,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319594,"byte_end":319631,"line_start":555,"line_end":555,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319636,"byte_end":319639,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319644,"byte_end":319679,"line_start":557,"line_end":557,"column_start":5,"column_end":40}},{"value":"/ assert!(dl.is_empty());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319684,"byte_end":319711,"line_start":558,"line_end":558,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319716,"byte_end":319719,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(\"foo\");","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319724,"byte_end":319749,"line_start":560,"line_end":560,"column_start":5,"column_end":30}},{"value":"/ assert!(!dl.is_empty());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319754,"byte_end":319782,"line_start":561,"line_end":561,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319787,"byte_end":319794,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319799,"byte_end":319808,"line_start":563,"line_end":563,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319813,"byte_end":319858,"line_start":564,"line_end":564,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320463,"byte_end":320466,"line_start":591,"line_end":591,"column_start":12,"column_end":15},"name":"len","qualname":"<LinkedList<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Returns the length of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319935,"byte_end":319978,"line_start":569,"line_end":569,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319983,"byte_end":319986,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":319991,"byte_end":320038,"line_start":571,"line_end":571,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320043,"byte_end":320046,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320051,"byte_end":320065,"line_start":573,"line_end":573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320070,"byte_end":320073,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320078,"byte_end":320085,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320090,"byte_end":320127,"line_start":576,"line_end":576,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320132,"byte_end":320135,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320140,"byte_end":320175,"line_start":578,"line_end":578,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320180,"byte_end":320183,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320188,"byte_end":320209,"line_start":580,"line_end":580,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.len(), 1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320214,"byte_end":320242,"line_start":581,"line_end":581,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320247,"byte_end":320250,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320255,"byte_end":320276,"line_start":583,"line_end":583,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.len(), 2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320281,"byte_end":320309,"line_start":584,"line_end":584,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320314,"byte_end":320317,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ dl.push_back(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320322,"byte_end":320342,"line_start":586,"line_end":586,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(dl.len(), 3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320347,"byte_end":320375,"line_start":587,"line_end":587,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320380,"byte_end":320387,"line_start":588,"line_end":588,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320392,"byte_end":320401,"line_start":589,"line_end":589,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320406,"byte_end":320451,"line_start":590,"line_end":590,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321079,"byte_end":321084,"line_start":617,"line_end":617,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinkedList<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the `LinkedList`.","sig":null,"attributes":[{"value":"/ Removes all elements from the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320513,"byte_end":320560,"line_start":595,"line_end":595,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320565,"byte_end":320568,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(n) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320573,"byte_end":320620,"line_start":597,"line_end":597,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320625,"byte_end":320628,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320633,"byte_end":320647,"line_start":599,"line_end":599,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320652,"byte_end":320655,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320660,"byte_end":320667,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320672,"byte_end":320709,"line_start":602,"line_end":602,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320714,"byte_end":320717,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320722,"byte_end":320757,"line_start":604,"line_end":604,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320762,"byte_end":320765,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320770,"byte_end":320791,"line_start":606,"line_end":606,"column_start":5,"column_end":26}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320796,"byte_end":320817,"line_start":607,"line_end":607,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.len(), 2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320822,"byte_end":320850,"line_start":608,"line_end":608,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(dl.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320855,"byte_end":320892,"line_start":609,"line_end":609,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320897,"byte_end":320900,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ dl.clear();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320905,"byte_end":320920,"line_start":611,"line_end":611,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(dl.len(), 0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320925,"byte_end":320953,"line_start":612,"line_end":612,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(dl.front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320958,"byte_end":320991,"line_start":613,"line_end":613,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":320996,"byte_end":321003,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321008,"byte_end":321017,"line_start":615,"line_end":615,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321022,"byte_end":321067,"line_start":616,"line_end":616,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1959},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321665,"byte_end":321673,"line_start":639,"line_end":639,"column_start":12,"column_end":20},"name":"contains","qualname":"<LinkedList<T>>::contains","value":"fn (&self, x: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `LinkedList` contains an element equal to the\n given value.","sig":null,"attributes":[{"value":"/ Returns `true` if the `LinkedList` contains an element equal to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321138,"byte_end":321209,"line_start":621,"line_end":621,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321214,"byte_end":321230,"line_start":622,"line_end":622,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321235,"byte_end":321238,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321243,"byte_end":321257,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321262,"byte_end":321265,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321270,"byte_end":321277,"line_start":626,"line_end":626,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321282,"byte_end":321319,"line_start":627,"line_end":627,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321324,"byte_end":321327,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321332,"byte_end":321386,"line_start":629,"line_end":629,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321391,"byte_end":321394,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ list.push_back(0);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321399,"byte_end":321421,"line_start":631,"line_end":631,"column_start":5,"column_end":27}},{"value":"/ list.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321426,"byte_end":321448,"line_start":632,"line_end":632,"column_start":5,"column_end":27}},{"value":"/ list.push_back(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321453,"byte_end":321475,"line_start":633,"line_end":633,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321480,"byte_end":321483,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(list.contains(&0), true);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321488,"byte_end":321528,"line_start":635,"line_end":635,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(list.contains(&10), false);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321533,"byte_end":321575,"line_start":636,"line_end":636,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321580,"byte_end":321587,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"stable(feature = \"linked_list_contains\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321592,"byte_end":321653,"line_start":638,"line_end":638,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322209,"byte_end":322214,"line_start":662,"line_end":662,"column_start":12,"column_end":17},"name":"front","qualname":"<LinkedList<T>>::front","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the front element, or `None` if the list is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the front element, or `None` if the list is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321784,"byte_end":321855,"line_start":646,"line_end":646,"column_start":5,"column_end":76}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321860,"byte_end":321870,"line_start":647,"line_end":647,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321875,"byte_end":321878,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321883,"byte_end":321897,"line_start":649,"line_end":649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321902,"byte_end":321905,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321910,"byte_end":321917,"line_start":651,"line_end":651,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321922,"byte_end":321959,"line_start":652,"line_end":652,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321964,"byte_end":321967,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":321972,"byte_end":322007,"line_start":654,"line_end":654,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322012,"byte_end":322045,"line_start":655,"line_end":655,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322050,"byte_end":322053,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322058,"byte_end":322079,"line_start":657,"line_end":657,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322084,"byte_end":322121,"line_start":658,"line_end":658,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322126,"byte_end":322133,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322138,"byte_end":322147,"line_start":660,"line_end":660,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322152,"byte_end":322197,"line_start":661,"line_end":661,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1963},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322901,"byte_end":322910,"line_start":688,"line_end":688,"column_start":12,"column_end":21},"name":"front_mut","qualname":"<LinkedList<T>>::front_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the front element, or `None` if the list\n is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the front element, or `None` if the list","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322322,"byte_end":322398,"line_start":666,"line_end":666,"column_start":5,"column_end":81}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322403,"byte_end":322416,"line_start":667,"line_end":667,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322421,"byte_end":322424,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322429,"byte_end":322443,"line_start":669,"line_end":669,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322448,"byte_end":322451,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322456,"byte_end":322463,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322468,"byte_end":322505,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322510,"byte_end":322513,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322518,"byte_end":322553,"line_start":674,"line_end":674,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322558,"byte_end":322591,"line_start":675,"line_end":675,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322596,"byte_end":322599,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322604,"byte_end":322625,"line_start":677,"line_end":677,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322630,"byte_end":322667,"line_start":678,"line_end":678,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322672,"byte_end":322675,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ match dl.front_mut() {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322680,"byte_end":322706,"line_start":680,"line_end":680,"column_start":5,"column_end":31}},{"value":"/     None => {},","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322711,"byte_end":322730,"line_start":681,"line_end":681,"column_start":5,"column_end":24}},{"value":"/     Some(x) => *x = 5,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322735,"byte_end":322761,"line_start":682,"line_end":682,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322766,"byte_end":322771,"line_start":683,"line_end":683,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(dl.front(), Some(&5));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322776,"byte_end":322813,"line_start":684,"line_end":684,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322818,"byte_end":322825,"line_start":685,"line_end":685,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322830,"byte_end":322839,"line_start":686,"line_end":686,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":322844,"byte_end":322889,"line_start":687,"line_end":687,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323451,"byte_end":323455,"line_start":708,"line_end":708,"column_start":12,"column_end":16},"name":"back","qualname":"<LinkedList<T>>::back","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the back element, or `None` if the list is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the back element, or `None` if the list is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323030,"byte_end":323100,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323105,"byte_end":323115,"line_start":693,"line_end":693,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323120,"byte_end":323123,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323128,"byte_end":323142,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323147,"byte_end":323150,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323155,"byte_end":323162,"line_start":697,"line_end":697,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323167,"byte_end":323204,"line_start":698,"line_end":698,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323209,"byte_end":323212,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323217,"byte_end":323252,"line_start":700,"line_end":700,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.back(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323257,"byte_end":323289,"line_start":701,"line_end":701,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323294,"byte_end":323297,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ dl.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323302,"byte_end":323322,"line_start":703,"line_end":703,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(dl.back(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323327,"byte_end":323363,"line_start":704,"line_end":704,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323368,"byte_end":323375,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323380,"byte_end":323389,"line_start":706,"line_end":706,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323394,"byte_end":323439,"line_start":707,"line_end":707,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324136,"byte_end":324144,"line_start":734,"line_end":734,"column_start":12,"column_end":20},"name":"back_mut","qualname":"<LinkedList<T>>::back_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the back element, or `None` if the list\n is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the back element, or `None` if the list","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323563,"byte_end":323638,"line_start":712,"line_end":712,"column_start":5,"column_end":80}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323643,"byte_end":323656,"line_start":713,"line_end":713,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323661,"byte_end":323664,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323669,"byte_end":323683,"line_start":715,"line_end":715,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323688,"byte_end":323691,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323696,"byte_end":323703,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323708,"byte_end":323745,"line_start":718,"line_end":718,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323750,"byte_end":323753,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323758,"byte_end":323793,"line_start":720,"line_end":720,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(dl.back(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323798,"byte_end":323830,"line_start":721,"line_end":721,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323835,"byte_end":323838,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ dl.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323843,"byte_end":323863,"line_start":723,"line_end":723,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(dl.back(), Some(&1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323868,"byte_end":323904,"line_start":724,"line_end":724,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323909,"byte_end":323912,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ match dl.back_mut() {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323917,"byte_end":323942,"line_start":726,"line_end":726,"column_start":5,"column_end":30}},{"value":"/     None => {},","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323947,"byte_end":323966,"line_start":727,"line_end":727,"column_start":5,"column_end":24}},{"value":"/     Some(x) => *x = 5,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":323971,"byte_end":323997,"line_start":728,"line_end":728,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324002,"byte_end":324007,"line_start":729,"line_end":729,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(dl.back(), Some(&5));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324012,"byte_end":324048,"line_start":730,"line_end":730,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324053,"byte_end":324060,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324065,"byte_end":324074,"line_start":732,"line_end":732,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324079,"byte_end":324124,"line_start":733,"line_end":733,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324731,"byte_end":324741,"line_start":756,"line_end":756,"column_start":12,"column_end":22},"name":"push_front","qualname":"<LinkedList<T>>::push_front","value":"fn (&mut self, elt: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds an element first in the list.","sig":null,"attributes":[{"value":"/ Adds an element first in the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324264,"byte_end":324302,"line_start":738,"line_end":738,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324307,"byte_end":324310,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324315,"byte_end":324362,"line_start":740,"line_end":740,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324367,"byte_end":324370,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324375,"byte_end":324389,"line_start":742,"line_end":742,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324394,"byte_end":324397,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324402,"byte_end":324409,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324414,"byte_end":324451,"line_start":745,"line_end":745,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324456,"byte_end":324459,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ let mut dl = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324464,"byte_end":324499,"line_start":747,"line_end":747,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324504,"byte_end":324507,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324512,"byte_end":324533,"line_start":749,"line_end":749,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front().unwrap(), &2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324538,"byte_end":324578,"line_start":750,"line_end":750,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324583,"byte_end":324586,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ dl.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324591,"byte_end":324612,"line_start":752,"line_end":752,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(dl.front().unwrap(), &1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324617,"byte_end":324657,"line_start":753,"line_end":753,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324662,"byte_end":324669,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324674,"byte_end":324719,"line_start":755,"line_end":755,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325407,"byte_end":325416,"line_start":780,"line_end":780,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<LinkedList<T>>::pop_front","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first element and returns it, or `None` if the list is\n empty.","sig":null,"attributes":[{"value":"/ Removes the first element and returns it, or `None` if the list is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324824,"byte_end":324894,"line_start":760,"line_end":760,"column_start":5,"column_end":75}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324899,"byte_end":324909,"line_start":761,"line_end":761,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324914,"byte_end":324917,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324922,"byte_end":324969,"line_start":763,"line_end":763,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324974,"byte_end":324977,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":324982,"byte_end":324996,"line_start":765,"line_end":765,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325001,"byte_end":325004,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325009,"byte_end":325016,"line_start":767,"line_end":767,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325021,"byte_end":325058,"line_start":768,"line_end":768,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325063,"byte_end":325066,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325071,"byte_end":325105,"line_start":770,"line_end":770,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.pop_front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325110,"byte_end":325146,"line_start":771,"line_end":771,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325151,"byte_end":325154,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ d.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325159,"byte_end":325179,"line_start":773,"line_end":773,"column_start":5,"column_end":25}},{"value":"/ d.push_front(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325184,"byte_end":325204,"line_start":774,"line_end":774,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(d.pop_front(), Some(3));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325209,"byte_end":325248,"line_start":775,"line_end":775,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), Some(1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325253,"byte_end":325292,"line_start":776,"line_end":776,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325297,"byte_end":325333,"line_start":777,"line_end":777,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325338,"byte_end":325345,"line_start":778,"line_end":778,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325350,"byte_end":325395,"line_start":779,"line_end":779,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325914,"byte_end":325923,"line_start":799,"line_end":799,"column_start":12,"column_end":21},"name":"push_back","qualname":"<LinkedList<T>>::push_back","value":"fn (&mut self, elt: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of a list.","sig":null,"attributes":[{"value":"/ Appends an element to the back of a list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325508,"byte_end":325553,"line_start":784,"line_end":784,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325558,"byte_end":325561,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325566,"byte_end":325613,"line_start":786,"line_end":786,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325618,"byte_end":325621,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325626,"byte_end":325640,"line_start":788,"line_end":788,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325645,"byte_end":325648,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325653,"byte_end":325660,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325665,"byte_end":325702,"line_start":791,"line_end":791,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325707,"byte_end":325710,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325715,"byte_end":325749,"line_start":793,"line_end":793,"column_start":5,"column_end":39}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325754,"byte_end":325773,"line_start":794,"line_end":794,"column_start":5,"column_end":24}},{"value":"/ d.push_back(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325778,"byte_end":325797,"line_start":795,"line_end":795,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(3, *d.back().unwrap());","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325802,"byte_end":325840,"line_start":796,"line_end":796,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325845,"byte_end":325852,"line_start":797,"line_end":797,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":325857,"byte_end":325902,"line_start":798,"line_end":798,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326496,"byte_end":326504,"line_start":820,"line_end":820,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<LinkedList<T>>::pop_back","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a list and returns it, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Removes the last element from a list and returns it, or `None` if","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326005,"byte_end":326074,"line_start":803,"line_end":803,"column_start":5,"column_end":74}},{"value":"/ it is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326079,"byte_end":326095,"line_start":804,"line_end":804,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326100,"byte_end":326103,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(1) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326108,"byte_end":326155,"line_start":806,"line_end":806,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326160,"byte_end":326163,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326168,"byte_end":326182,"line_start":808,"line_end":808,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326187,"byte_end":326190,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326195,"byte_end":326202,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326207,"byte_end":326244,"line_start":811,"line_end":811,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326249,"byte_end":326252,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326257,"byte_end":326291,"line_start":813,"line_end":813,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.pop_back(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326296,"byte_end":326331,"line_start":814,"line_end":814,"column_start":5,"column_end":40}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326336,"byte_end":326355,"line_start":815,"line_end":815,"column_start":5,"column_end":24}},{"value":"/ d.push_back(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326360,"byte_end":326379,"line_start":816,"line_end":816,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(d.pop_back(), Some(3));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326384,"byte_end":326422,"line_start":817,"line_end":817,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326427,"byte_end":326434,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326439,"byte_end":326484,"line_start":819,"line_end":819,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327288,"byte_end":327297,"line_start":850,"line_end":850,"column_start":12,"column_end":21},"name":"split_off","qualname":"<LinkedList<T>>::split_off","value":"fn (&mut self, at: usize) -> LinkedList<T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the list into two at the given index. Returns everything after the given index,\n including the index.","sig":null,"attributes":[{"value":"/ Splits the list into two at the given index. Returns everything after the given index,","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326595,"byte_end":326685,"line_start":824,"line_end":824,"column_start":5,"column_end":95}},{"value":"/ including the index.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326690,"byte_end":326714,"line_start":825,"line_end":825,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326719,"byte_end":326722,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ This operation should compute in O(n) time.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326727,"byte_end":326774,"line_start":827,"line_end":827,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326779,"byte_end":326782,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326787,"byte_end":326799,"line_start":829,"line_end":829,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326804,"byte_end":326807,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326812,"byte_end":326837,"line_start":831,"line_end":831,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326842,"byte_end":326845,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326850,"byte_end":326864,"line_start":833,"line_end":833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326869,"byte_end":326872,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326877,"byte_end":326884,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326889,"byte_end":326926,"line_start":836,"line_end":836,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326931,"byte_end":326934,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let mut d = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326939,"byte_end":326973,"line_start":838,"line_end":838,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326978,"byte_end":326981,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ d.push_front(1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":326986,"byte_end":327006,"line_start":840,"line_end":840,"column_start":5,"column_end":25}},{"value":"/ d.push_front(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327011,"byte_end":327031,"line_start":841,"line_end":841,"column_start":5,"column_end":25}},{"value":"/ d.push_front(3);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327036,"byte_end":327056,"line_start":842,"line_end":842,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327061,"byte_end":327064,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ let mut splitted = d.split_off(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327069,"byte_end":327107,"line_start":844,"line_end":844,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327112,"byte_end":327115,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(splitted.pop_front(), Some(1));","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327120,"byte_end":327166,"line_start":846,"line_end":846,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(splitted.pop_front(), None);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327171,"byte_end":327214,"line_start":847,"line_end":847,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327219,"byte_end":327226,"line_start":848,"line_end":848,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":327231,"byte_end":327276,"line_start":849,"line_end":849,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329630,"byte_end":329642,"line_start":908,"line_end":908,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<LinkedList<T>>::drain_filter","value":"fn <F> (&mut self, filter: F) -> DrainFilter<'_, T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator which uses a closure to determine if an element should be removed.","sig":null,"attributes":[{"value":"/ Creates an iterator which uses a closure to determine if an element should be removed.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328424,"byte_end":328514,"line_start":881,"line_end":881,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328519,"byte_end":328522,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ If the closure returns true, then the element is removed and yielded.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328527,"byte_end":328600,"line_start":883,"line_end":883,"column_start":5,"column_end":78}},{"value":"/ If the closure returns false, the element will remain in the list and will not be yielded","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328605,"byte_end":328698,"line_start":884,"line_end":884,"column_start":5,"column_end":98}},{"value":"/ by the iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328703,"byte_end":328723,"line_start":885,"line_end":885,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328728,"byte_end":328731,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ Note that `drain_filter` lets you mutate every element in the filter closure, regardless of","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328736,"byte_end":328831,"line_start":887,"line_end":887,"column_start":5,"column_end":100}},{"value":"/ whether you choose to keep or remove it.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328836,"byte_end":328880,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328885,"byte_end":328888,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328893,"byte_end":328907,"line_start":890,"line_end":890,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328912,"byte_end":328915,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Splitting a list into evens and odds, reusing the original list:","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328920,"byte_end":328988,"line_start":892,"line_end":892,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":328993,"byte_end":328996,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329001,"byte_end":329008,"line_start":894,"line_end":894,"column_start":5,"column_end":12}},{"value":"/ #![feature(drain_filter)]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329013,"byte_end":329042,"line_start":895,"line_end":895,"column_start":5,"column_end":34}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329047,"byte_end":329084,"line_start":896,"line_end":896,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329089,"byte_end":329092,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ let mut numbers: LinkedList<u32> = LinkedList::new();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329097,"byte_end":329154,"line_start":898,"line_end":898,"column_start":5,"column_end":62}},{"value":"/ numbers.extend(&[1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329159,"byte_end":329221,"line_start":899,"line_end":899,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329226,"byte_end":329229,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ let evens = numbers.drain_filter(|x| *x % 2 == 0).collect::<LinkedList<_>>();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329234,"byte_end":329315,"line_start":901,"line_end":901,"column_start":5,"column_end":86}},{"value":"/ let odds = numbers;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329320,"byte_end":329343,"line_start":902,"line_end":902,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329348,"byte_end":329351,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![2, 4, 6, 8, 14]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329356,"byte_end":329432,"line_start":904,"line_end":904,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 9, 11, 13, 15]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329437,"byte_end":329520,"line_start":905,"line_end":905,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329525,"byte_end":329532,"line_start":906,"line_end":906,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":329537,"byte_end":329618,"line_start":907,"line_end":907,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334304,"byte_end":334315,"line_start":1079,"line_end":1079,"column_start":12,"column_end":23},"name":"insert_next","qualname":"<IterMut>::insert_next","value":"fn (&mut self, element: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given element just after the element most recently returned by `.next()`.\n The inserted element does not appear in the iteration.","sig":null,"attributes":[{"value":"/ Inserts the given element just after the element most recently returned by `.next()`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333419,"byte_end":333508,"line_start":1050,"line_end":1050,"column_start":5,"column_end":94}},{"value":"/ The inserted element does not appear in the iteration.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333513,"byte_end":333571,"line_start":1051,"line_end":1051,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333576,"byte_end":333579,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333584,"byte_end":333598,"line_start":1053,"line_end":1053,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333603,"byte_end":333606,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333611,"byte_end":333618,"line_start":1055,"line_end":1055,"column_start":5,"column_end":12}},{"value":"/ #![feature(linked_list_extras)]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333623,"byte_end":333658,"line_start":1056,"line_end":1056,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333663,"byte_end":333666,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333671,"byte_end":333708,"line_start":1058,"line_end":1058,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333713,"byte_end":333716,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333721,"byte_end":333791,"line_start":1060,"line_end":1060,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333796,"byte_end":333799,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333804,"byte_end":333809,"line_start":1062,"line_end":1062,"column_start":5,"column_end":10}},{"value":"/     let mut it = list.iter_mut();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333814,"byte_end":333851,"line_start":1063,"line_end":1063,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(it.next().unwrap(), &1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333856,"byte_end":333899,"line_start":1064,"line_end":1064,"column_start":5,"column_end":48}},{"value":"/     // insert `2` after `1`","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333904,"byte_end":333935,"line_start":1065,"line_end":1065,"column_start":5,"column_end":36}},{"value":"/     it.insert_next(2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333940,"byte_end":333966,"line_start":1066,"line_end":1066,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333971,"byte_end":333976,"line_start":1067,"line_end":1067,"column_start":5,"column_end":10}},{"value":"/ {","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333981,"byte_end":333986,"line_start":1068,"line_end":1068,"column_start":5,"column_end":10}},{"value":"/     let vec: Vec<_> = list.into_iter().collect();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333991,"byte_end":334044,"line_start":1069,"line_end":1069,"column_start":5,"column_end":58}},{"value":"/     assert_eq!(vec, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334049,"byte_end":334087,"line_start":1070,"line_end":1070,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334092,"byte_end":334097,"line_start":1071,"line_end":1071,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334102,"byte_end":334109,"line_start":1072,"line_end":1072,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334114,"byte_end":334123,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_extras\", reason =\n           \"this is probably better handled by a cursor type -- we'll see\",\n           issue = \"27794\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":334128,"byte_end":334292,"line_start":1074,"line_end":1078,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":2025},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336030,"byte_end":336039,"line_start":1129,"line_end":1129,"column_start":12,"column_end":21},"name":"peek_next","qualname":"<IterMut>::peek_next","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the next element, without changing the iterator.","sig":null,"attributes":[{"value":"/ Provides a reference to the next element, without changing the iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335270,"byte_end":335346,"line_start":1106,"line_end":1106,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335351,"byte_end":335354,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335359,"byte_end":335373,"line_start":1108,"line_end":1108,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335378,"byte_end":335381,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335386,"byte_end":335393,"line_start":1110,"line_end":1110,"column_start":5,"column_end":12}},{"value":"/ #![feature(linked_list_extras)]","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335398,"byte_end":335433,"line_start":1111,"line_end":1111,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335438,"byte_end":335441,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ use std::collections::LinkedList;","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335446,"byte_end":335483,"line_start":1113,"line_end":1113,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335488,"byte_end":335491,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335496,"byte_end":335566,"line_start":1115,"line_end":1115,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335571,"byte_end":335574,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ let mut it = list.iter_mut();","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335579,"byte_end":335612,"line_start":1117,"line_end":1117,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(it.next().unwrap(), &1);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335617,"byte_end":335656,"line_start":1118,"line_end":1118,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(it.peek_next().unwrap(), &2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335661,"byte_end":335705,"line_start":1119,"line_end":1119,"column_start":5,"column_end":49}},{"value":"/ // We just peeked at 2, so it was not consumed from the iterator.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335710,"byte_end":335779,"line_start":1120,"line_end":1120,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(it.next().unwrap(), &2);","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335784,"byte_end":335823,"line_start":1121,"line_end":1121,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335828,"byte_end":335835,"line_start":1122,"line_end":1122,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335840,"byte_end":335849,"line_start":1123,"line_end":1123,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"linked_list_extras\", reason =\n           \"this is probably better handled by a cursor type -- we'll see\",\n           issue = \"27794\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":335854,"byte_end":336018,"line_start":1124,"line_end":1128,"column_start":5,"column_end":7}}]},{"kind":"Struct","id":{"krate":0,"index":2027},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336756,"byte_end":336762,"line_start":1148,"line_end":1148,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::collections::linked_list::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032}],"decl_id":null,"docs":" A cursor over a `LinkedList`.","sig":null,"attributes":[{"value":"/ A cursor over a `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336232,"byte_end":336265,"line_start":1138,"line_end":1138,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336266,"byte_end":336269,"line_start":1139,"line_end":1139,"column_start":1,"column_end":4}},{"value":"/ A `Cursor` is like an iterator, except that it can freely seek back-and-forth.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336270,"byte_end":336352,"line_start":1140,"line_end":1140,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336353,"byte_end":336356,"line_start":1141,"line_end":1141,"column_start":1,"column_end":4}},{"value":"/ Cursors always rest between two elements in the list, and index in a logically circular way.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336357,"byte_end":336453,"line_start":1142,"line_end":1142,"column_start":1,"column_end":97}},{"value":"/ To accommodate this, there is a \"ghost\" non-element that yields `None` between the head and","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336454,"byte_end":336549,"line_start":1143,"line_end":1143,"column_start":1,"column_end":96}},{"value":"/ tail of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336550,"byte_end":336571,"line_start":1144,"line_end":1144,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336572,"byte_end":336575,"line_start":1145,"line_end":1145,"column_start":1,"column_end":4}},{"value":"/ When created, cursors start at the front of the list, or the \"ghost\" non-element if the list is empty.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336576,"byte_end":336682,"line_start":1146,"line_end":1146,"column_start":1,"column_end":107}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336683,"byte_end":336744,"line_start":1147,"line_end":1147,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2036},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337808,"byte_end":337817,"line_start":1172,"line_end":1172,"column_start":12,"column_end":21},"name":"CursorMut","qualname":"::collections::linked_list::CursorMut","value":"CursorMut {  }","parent":null,"children":[{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041}],"decl_id":null,"docs":" A cursor over a `LinkedList` with editing operations.","sig":null,"attributes":[{"value":"/ A cursor over a `LinkedList` with editing operations.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337130,"byte_end":337187,"line_start":1161,"line_end":1161,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337188,"byte_end":337191,"line_start":1162,"line_end":1162,"column_start":1,"column_end":4}},{"value":"/ A `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337192,"byte_end":337282,"line_start":1163,"line_end":1163,"column_start":1,"column_end":91}},{"value":"/ safely mutate the list during iteration. This is because the lifetime of its yielded","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337283,"byte_end":337371,"line_start":1164,"line_end":1164,"column_start":1,"column_end":89}},{"value":"/ references is tied to its own lifetime, instead of just the underlying list. This means","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337372,"byte_end":337463,"line_start":1165,"line_end":1165,"column_start":1,"column_end":92}},{"value":"/ cursors cannot yield multiple elements at once.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337464,"byte_end":337515,"line_start":1166,"line_end":1166,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337516,"byte_end":337519,"line_start":1167,"line_end":1167,"column_start":1,"column_end":4}},{"value":"/ Cursors always rest between two elements in the list, and index in a logically circular way.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337520,"byte_end":337616,"line_start":1168,"line_end":1168,"column_start":1,"column_end":97}},{"value":"/ To accommodate this, there is a \"ghost\" non-element that yields `None` between the head and","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337617,"byte_end":337712,"line_start":1169,"line_end":1169,"column_start":1,"column_end":96}},{"value":"/ tail of the list.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337713,"byte_end":337734,"line_start":1170,"line_end":1170,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":337735,"byte_end":337796,"line_start":1171,"line_end":1171,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2048},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338475,"byte_end":338480,"line_start":1191,"line_end":1191,"column_start":12,"column_end":17},"name":"index","qualname":"<Cursor>::index","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the cursor position index within the `LinkedList`.","sig":null,"attributes":[{"value":"/ Returns the cursor position index within the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338227,"byte_end":338289,"line_start":1186,"line_end":1186,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338294,"byte_end":338297,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338302,"byte_end":338368,"line_start":1188,"line_end":1188,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338373,"byte_end":338397,"line_start":1189,"line_end":1189,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338402,"byte_end":338463,"line_start":1190,"line_end":1190,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2049},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338972,"byte_end":338981,"line_start":1202,"line_end":1202,"column_start":12,"column_end":21},"name":"move_next","qualname":"<Cursor>::move_next","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the next element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the next element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338574,"byte_end":338635,"line_start":1196,"line_end":1196,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338640,"byte_end":338643,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338648,"byte_end":338730,"line_start":1198,"line_end":1198,"column_start":5,"column_end":87}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338735,"byte_end":338807,"line_start":1199,"line_end":1199,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338812,"byte_end":338894,"line_start":1200,"line_end":1200,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338899,"byte_end":338960,"line_start":1201,"line_end":1201,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339921,"byte_end":339930,"line_start":1224,"line_end":1224,"column_start":12,"column_end":21},"name":"move_prev","qualname":"<Cursor>::move_prev","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the previous element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the previous element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339519,"byte_end":339584,"line_start":1218,"line_end":1218,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339589,"byte_end":339592,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339597,"byte_end":339679,"line_start":1220,"line_end":1220,"column_start":5,"column_end":87}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339684,"byte_end":339756,"line_start":1221,"line_end":1221,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339761,"byte_end":339843,"line_start":1222,"line_end":1222,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":339848,"byte_end":339909,"line_start":1223,"line_end":1223,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340790,"byte_end":340797,"line_start":1245,"line_end":1245,"column_start":12,"column_end":19},"name":"current","qualname":"<Cursor>::current","value":"fn (&self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the element that the cursor is currently\n pointing to.","sig":null,"attributes":[{"value":"/ Returns a reference to the element that the cursor is currently","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340516,"byte_end":340583,"line_start":1239,"line_end":1239,"column_start":5,"column_end":72}},{"value":"/ pointing to.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340588,"byte_end":340604,"line_start":1240,"line_end":1240,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340609,"byte_end":340612,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340617,"byte_end":340683,"line_start":1242,"line_end":1242,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340688,"byte_end":340712,"line_start":1243,"line_end":1243,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340717,"byte_end":340778,"line_start":1244,"line_end":1244,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341259,"byte_end":341268,"line_start":1255,"line_end":1255,"column_start":12,"column_end":21},"name":"peek_next","qualname":"<Cursor>::peek_next","value":"fn (&self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the next element.","sig":null,"attributes":[{"value":"/ Returns a reference to the next element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340911,"byte_end":340955,"line_start":1249,"line_end":1249,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340960,"byte_end":340963,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":340968,"byte_end":341042,"line_start":1251,"line_end":1251,"column_start":5,"column_end":79}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341047,"byte_end":341119,"line_start":1252,"line_end":1252,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341124,"byte_end":341181,"line_start":1253,"line_end":1253,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341186,"byte_end":341247,"line_start":1254,"line_end":1254,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2056},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341895,"byte_end":341904,"line_start":1271,"line_end":1271,"column_start":12,"column_end":21},"name":"peek_prev","qualname":"<Cursor>::peek_prev","value":"fn (&self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the previous element.","sig":null,"attributes":[{"value":"/ Returns a reference to the previous element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341543,"byte_end":341591,"line_start":1265,"line_end":1265,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341596,"byte_end":341599,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341604,"byte_end":341678,"line_start":1267,"line_end":1267,"column_start":5,"column_end":79}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341683,"byte_end":341755,"line_start":1268,"line_end":1268,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341760,"byte_end":341817,"line_start":1269,"line_end":1269,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":341822,"byte_end":341883,"line_start":1270,"line_end":1270,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342460,"byte_end":342465,"line_start":1288,"line_end":1288,"column_start":12,"column_end":17},"name":"index","qualname":"<CursorMut>::index","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the cursor position index within the `LinkedList`.","sig":null,"attributes":[{"value":"/ Returns the cursor position index within the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342212,"byte_end":342274,"line_start":1283,"line_end":1283,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342279,"byte_end":342282,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342287,"byte_end":342353,"line_start":1285,"line_end":1285,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342358,"byte_end":342382,"line_start":1286,"line_end":1286,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342387,"byte_end":342448,"line_start":1287,"line_end":1287,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2062},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342957,"byte_end":342966,"line_start":1299,"line_end":1299,"column_start":12,"column_end":21},"name":"move_next","qualname":"<CursorMut>::move_next","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the next element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the next element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342559,"byte_end":342620,"line_start":1293,"line_end":1293,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342625,"byte_end":342628,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342633,"byte_end":342715,"line_start":1295,"line_end":1295,"column_start":5,"column_end":87}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342720,"byte_end":342792,"line_start":1296,"line_end":1296,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342797,"byte_end":342879,"line_start":1297,"line_end":1297,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342884,"byte_end":342945,"line_start":1298,"line_end":1298,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343906,"byte_end":343915,"line_start":1321,"line_end":1321,"column_start":12,"column_end":21},"name":"move_prev","qualname":"<CursorMut>::move_prev","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the previous element of the `LinkedList`.","sig":null,"attributes":[{"value":"/ Moves the cursor to the previous element of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343504,"byte_end":343569,"line_start":1315,"line_end":1315,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343574,"byte_end":343577,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this will move it to","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343582,"byte_end":343664,"line_start":1317,"line_end":1317,"column_start":5,"column_end":87}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343669,"byte_end":343741,"line_start":1318,"line_end":1318,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this will move it to the \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343746,"byte_end":343828,"line_start":1319,"line_end":1319,"column_start":5,"column_end":87}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":343833,"byte_end":343894,"line_start":1320,"line_end":1320,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2065},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344775,"byte_end":344782,"line_start":1342,"line_end":1342,"column_start":12,"column_end":19},"name":"current","qualname":"<CursorMut>::current","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the element that the cursor is currently\n pointing to.","sig":null,"attributes":[{"value":"/ Returns a reference to the element that the cursor is currently","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344501,"byte_end":344568,"line_start":1336,"line_end":1336,"column_start":5,"column_end":72}},{"value":"/ pointing to.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344573,"byte_end":344589,"line_start":1337,"line_end":1337,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344594,"byte_end":344597,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ This returns `None` if the cursor is currently pointing to the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344602,"byte_end":344668,"line_start":1339,"line_end":1339,"column_start":5,"column_end":71}},{"value":"/ \"ghost\" non-element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344673,"byte_end":344697,"line_start":1340,"line_end":1340,"column_start":5,"column_end":29}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344702,"byte_end":344763,"line_start":1341,"line_end":1341,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2067},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345253,"byte_end":345262,"line_start":1352,"line_end":1352,"column_start":12,"column_end":21},"name":"peek_next","qualname":"<CursorMut>::peek_next","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the next element.","sig":null,"attributes":[{"value":"/ Returns a reference to the next element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344905,"byte_end":344949,"line_start":1346,"line_end":1346,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344954,"byte_end":344957,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":344962,"byte_end":345036,"line_start":1348,"line_end":1348,"column_start":5,"column_end":79}},{"value":"/ the first element of the `LinkedList`. If it is pointing to the last","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345041,"byte_end":345113,"line_start":1349,"line_end":1349,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345118,"byte_end":345175,"line_start":1350,"line_end":1350,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345180,"byte_end":345241,"line_start":1351,"line_end":1351,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345898,"byte_end":345907,"line_start":1368,"line_end":1368,"column_start":12,"column_end":21},"name":"peek_prev","qualname":"<CursorMut>::peek_prev","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the previous element.","sig":null,"attributes":[{"value":"/ Returns a reference to the previous element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345546,"byte_end":345594,"line_start":1362,"line_end":1362,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345599,"byte_end":345602,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing to the \"ghost\" non-element then this returns","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345607,"byte_end":345681,"line_start":1364,"line_end":1364,"column_start":5,"column_end":79}},{"value":"/ the last element of the `LinkedList`. If it is pointing to the first","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345686,"byte_end":345758,"line_start":1365,"line_end":1365,"column_start":5,"column_end":77}},{"value":"/ element of the `LinkedList` then this returns `None`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345763,"byte_end":345820,"line_start":1366,"line_end":1366,"column_start":5,"column_end":62}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":345825,"byte_end":345886,"line_start":1367,"line_end":1367,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346554,"byte_end":346563,"line_start":1384,"line_end":1384,"column_start":12,"column_end":21},"name":"as_cursor","qualname":"<CursorMut>::as_cursor","value":"fn <'cm> (&'cm self) -> Cursor<'cm, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a read-only cursor pointing to the current element.","sig":null,"attributes":[{"value":"/ Returns a read-only cursor pointing to the current element.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346191,"byte_end":346254,"line_start":1378,"line_end":1378,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346259,"byte_end":346262,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ The lifetime of the returned `Cursor` is bound to that of the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346267,"byte_end":346332,"line_start":1380,"line_end":1380,"column_start":5,"column_end":70}},{"value":"/ `CursorMut`, which means it cannot outlive the `CursorMut` and that the","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346337,"byte_end":346412,"line_start":1381,"line_end":1381,"column_start":5,"column_end":80}},{"value":"/ `CursorMut` is frozen for the lifetime of the `Cursor`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346417,"byte_end":346476,"line_start":1382,"line_end":1382,"column_start":5,"column_end":64}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346481,"byte_end":346542,"line_start":1383,"line_end":1383,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347049,"byte_end":347061,"line_start":1397,"line_end":1397,"column_start":12,"column_end":24},"name":"insert_after","qualname":"<CursorMut>::insert_after","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the `LinkedList` after the current one.","sig":null,"attributes":[{"value":"/ Inserts a new element into the `LinkedList` after the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346757,"byte_end":346827,"line_start":1392,"line_end":1392,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346832,"byte_end":346835,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new element is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346840,"byte_end":346920,"line_start":1394,"line_end":1394,"column_start":5,"column_end":85}},{"value":"/ inserted at the front of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346925,"byte_end":346971,"line_start":1395,"line_end":1395,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346976,"byte_end":347037,"line_start":1396,"line_end":1396,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2077},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347903,"byte_end":347916,"line_start":1417,"line_end":1417,"column_start":12,"column_end":25},"name":"insert_before","qualname":"<CursorMut>::insert_before","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the `LinkedList` before the current one.","sig":null,"attributes":[{"value":"/ Inserts a new element into the `LinkedList` before the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347612,"byte_end":347683,"line_start":1412,"line_end":1412,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347688,"byte_end":347691,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new element is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347696,"byte_end":347776,"line_start":1414,"line_end":1414,"column_start":5,"column_end":85}},{"value":"/ inserted at the end of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347781,"byte_end":347825,"line_start":1415,"line_end":1415,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":347830,"byte_end":347891,"line_start":1416,"line_end":1416,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348744,"byte_end":348758,"line_start":1437,"line_end":1437,"column_start":12,"column_end":26},"name":"remove_current","qualname":"<CursorMut>::remove_current","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the current element from the `LinkedList`.","sig":null,"attributes":[{"value":"/ Removes the current element from the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348334,"byte_end":348388,"line_start":1429,"line_end":1429,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348393,"byte_end":348396,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ The element that was removed is returned, and the cursor is","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348401,"byte_end":348464,"line_start":1431,"line_end":1431,"column_start":5,"column_end":68}},{"value":"/ moved to point to the next element in the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348469,"byte_end":348528,"line_start":1432,"line_end":1432,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348533,"byte_end":348536,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ If the cursor is currently pointing to the \"ghost\" non-element then no element","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348541,"byte_end":348623,"line_start":1434,"line_end":1434,"column_start":5,"column_end":87}},{"value":"/ is removed and `None` is returned.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348628,"byte_end":348666,"line_start":1435,"line_end":1435,"column_start":5,"column_end":43}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":348671,"byte_end":348732,"line_start":1436,"line_end":1436,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349382,"byte_end":349394,"line_start":1452,"line_end":1452,"column_start":12,"column_end":24},"name":"splice_after","qualname":"<CursorMut>::splice_after","value":"fn (&mut self, list: LinkedList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts the elements from the given `LinkedList` after the current one.","sig":null,"attributes":[{"value":"/ Inserts the elements from the given `LinkedList` after the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349083,"byte_end":349158,"line_start":1447,"line_end":1447,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349163,"byte_end":349166,"line_start":1448,"line_end":1448,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new elements are","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349171,"byte_end":349253,"line_start":1449,"line_end":1449,"column_start":5,"column_end":87}},{"value":"/ inserted at the start of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349258,"byte_end":349304,"line_start":1450,"line_end":1450,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":349309,"byte_end":349370,"line_start":1451,"line_end":1451,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350351,"byte_end":350364,"line_start":1475,"line_end":1475,"column_start":12,"column_end":25},"name":"splice_before","qualname":"<CursorMut>::splice_before","value":"fn (&mut self, list: LinkedList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts the elements from the given `LinkedList` before the current one.","sig":null,"attributes":[{"value":"/ Inserts the elements from the given `LinkedList` before the current one.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350053,"byte_end":350129,"line_start":1470,"line_end":1470,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350134,"byte_end":350137,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the new elements are","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350142,"byte_end":350224,"line_start":1472,"line_end":1472,"column_start":5,"column_end":87}},{"value":"/ inserted at the end of the `LinkedList`.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350229,"byte_end":350273,"line_start":1473,"line_end":1473,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350278,"byte_end":350339,"line_start":1474,"line_end":1474,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351304,"byte_end":351315,"line_start":1497,"line_end":1497,"column_start":12,"column_end":23},"name":"split_after","qualname":"<CursorMut>::split_after","value":"fn (&mut self) -> LinkedList<T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the list into two after the current element. This will return a\n new list consisting of everything after the cursor, with the original\n list retaining everything before.","sig":null,"attributes":[{"value":"/ Splits the list into two after the current element. This will return a","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350899,"byte_end":350973,"line_start":1490,"line_end":1490,"column_start":5,"column_end":79}},{"value":"/ new list consisting of everything after the cursor, with the original","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":350978,"byte_end":351051,"line_start":1491,"line_end":1491,"column_start":5,"column_end":78}},{"value":"/ list retaining everything before.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351056,"byte_end":351093,"line_start":1492,"line_end":1492,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351098,"byte_end":351101,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the entire contents","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351106,"byte_end":351187,"line_start":1494,"line_end":1494,"column_start":5,"column_end":86}},{"value":"/ of the `LinkedList` are moved.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351192,"byte_end":351226,"line_start":1495,"line_end":1495,"column_start":5,"column_end":39}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351231,"byte_end":351292,"line_start":1496,"line_end":1496,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352076,"byte_end":352088,"line_start":1513,"line_end":1513,"column_start":12,"column_end":24},"name":"split_before","qualname":"<CursorMut>::split_before","value":"fn (&mut self) -> LinkedList<T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the list into two before the current element. This will return a\n new list consisting of everything before the cursor, with the original\n list retaining everything after.","sig":null,"attributes":[{"value":"/ Splits the list into two before the current element. This will return a","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351670,"byte_end":351745,"line_start":1506,"line_end":1506,"column_start":5,"column_end":80}},{"value":"/ new list consisting of everything before the cursor, with the original","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351750,"byte_end":351824,"line_start":1507,"line_end":1507,"column_start":5,"column_end":79}},{"value":"/ list retaining everything after.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351829,"byte_end":351865,"line_start":1508,"line_end":1508,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351870,"byte_end":351873,"line_start":1509,"line_end":1509,"column_start":5,"column_end":8}},{"value":"/ If the cursor is pointing at the \"ghost\" non-element then the entire contents","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351878,"byte_end":351959,"line_start":1510,"line_end":1510,"column_start":5,"column_end":86}},{"value":"/ of the `LinkedList` are moved.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":351964,"byte_end":351998,"line_start":1511,"line_end":1511,"column_start":5,"column_end":39}},{"value":"unstable(feature = \"linked_list_cursors\", issue = \"58533\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352003,"byte_end":352064,"line_start":1512,"line_end":1512,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2083},"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352431,"byte_end":352442,"line_start":1522,"line_end":1522,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::collections::linked_list::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091}],"decl_id":null,"docs":" An iterator produced by calling `drain_filter` on LinkedList.\n","sig":null,"attributes":[{"value":"/ An iterator produced by calling `drain_filter` on LinkedList.","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352272,"byte_end":352337,"line_start":1520,"line_end":1520,"column_start":1,"column_end":66}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352338,"byte_end":352419,"line_start":1521,"line_end":1521,"column_start":1,"column_end":82}}]},{"kind":"Mod","id":{"krate":0,"index":2198},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"src/liballoc/collections/vec_deque.rs","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2207},{"krate":0,"index":2212},{"krate":0,"index":2215},{"krate":0,"index":2219},{"krate":0,"index":2224},{"krate":0,"index":2227},{"krate":0,"index":2228},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2239},{"krate":0,"index":2247},{"krate":0,"index":2255},{"krate":0,"index":2261},{"krate":0,"index":2265},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2297},{"krate":0,"index":2348},{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2357},{"krate":0,"index":2361},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2372},{"krate":0,"index":2375},{"krate":0,"index":2378},{"krate":0,"index":2393},{"krate":0,"index":2404},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2415},{"krate":0,"index":2418},{"krate":0,"index":2429},{"krate":0,"index":2436},{"krate":0,"index":2439},{"krate":0,"index":4484},{"krate":0,"index":4487},{"krate":0,"index":2441},{"krate":0,"index":2444},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2457},{"krate":0,"index":2464},{"krate":0,"index":2467},{"krate":0,"index":2469},{"krate":0,"index":2471},{"krate":0,"index":2474},{"krate":0,"index":2480},{"krate":0,"index":2484},{"krate":0,"index":2486},{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2493},{"krate":0,"index":4490},{"krate":0,"index":4494},{"krate":0,"index":4498},{"krate":0,"index":4502},{"krate":0,"index":4510},{"krate":0,"index":4518},{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2500},{"krate":0,"index":2504},{"krate":0,"index":2508},{"krate":0,"index":2511},{"krate":0,"index":2515},{"krate":0,"index":2520},{"krate":0,"index":2526},{"krate":0,"index":2532},{"krate":0,"index":2536},{"krate":0,"index":2541},{"krate":0,"index":2544},{"krate":0,"index":2547}],"decl_id":null,"docs":" A double-ended queue implemented with a growable ring buffer.","sig":null,"attributes":[{"value":"! A double-ended queue implemented with a growable ring buffer.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":359177,"byte_end":359242,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":359243,"byte_end":359246,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This queue has `O(1)` amortized inserts and removals from both ends of the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":359247,"byte_end":359325,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! container. It also has `O(1)` indexing like a vector. The contained elements","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":359326,"byte_end":359406,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"! are not required to be copyable, and the queue will be sendable if the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":359407,"byte_end":359481,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"! contained type is sendable.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":359482,"byte_end":359513,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":359515,"byte_end":359561,"line_start":8,"line_end":8,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2234},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":361025,"byte_end":361033,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"VecDeque","qualname":"::collections::vec_deque::VecDeque","value":"VecDeque {  }","parent":null,"children":[{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238}],"decl_id":null,"docs":" A double-ended queue implemented with a growable ring buffer.","sig":null,"attributes":[{"value":"/ A double-ended queue implemented with a growable ring buffer.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360498,"byte_end":360563,"line_start":37,"line_end":37,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360564,"byte_end":360567,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The \"default\" usage of this type as a queue is to use [`push_back`] to add to","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360568,"byte_end":360649,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/ the queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360650,"byte_end":360734,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/ push onto the back in this manner, and iterating over `VecDeque` goes front","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360735,"byte_end":360814,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ to back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360815,"byte_end":360827,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360828,"byte_end":360831,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`push_back`]: #method.push_back","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360832,"byte_end":360868,"line_start":44,"line_end":44,"column_start":1,"column_end":37}},{"value":"/ [`pop_front`]: #method.pop_front","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360869,"byte_end":360905,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ [`extend`]: #method.extend","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360906,"byte_end":360936,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/ [`append`]: #method.append","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360937,"byte_end":360967,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":360968,"byte_end":361013,"line_start":48,"line_end":48,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374242,"byte_end":374245,"line_start":464,"line_end":464,"column_start":12,"column_end":15},"name":"new","qualname":"<VecDeque<T>>::new","value":"fn () -> VecDeque<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `VecDeque`.","sig":null,"attributes":[{"value":"/ Creates an empty `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":373988,"byte_end":374020,"line_start":454,"line_end":454,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374025,"byte_end":374028,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374033,"byte_end":374047,"line_start":456,"line_end":456,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374052,"byte_end":374055,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374060,"byte_end":374067,"line_start":458,"line_end":458,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374072,"byte_end":374107,"line_start":459,"line_end":459,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374112,"byte_end":374115,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ let vector: VecDeque<u32> = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374120,"byte_end":374168,"line_start":461,"line_end":461,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374173,"byte_end":374180,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374185,"byte_end":374230,"line_start":463,"line_end":463,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374636,"byte_end":374649,"line_start":478,"line_end":478,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<VecDeque<T>>::with_capacity","value":"fn (capacity: usize) -> VecDeque<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `VecDeque` with space for at least `capacity` elements.","sig":null,"attributes":[{"value":"/ Creates an empty `VecDeque` with space for at least `capacity` elements.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374326,"byte_end":374402,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374407,"byte_end":374410,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374415,"byte_end":374429,"line_start":470,"line_end":470,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374434,"byte_end":374437,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374442,"byte_end":374449,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374454,"byte_end":374489,"line_start":473,"line_end":473,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374494,"byte_end":374497,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ let vector: VecDeque<u32> = VecDeque::with_capacity(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374502,"byte_end":374562,"line_start":475,"line_end":475,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374567,"byte_end":374574,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374579,"byte_end":374624,"line_start":477,"line_end":477,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2301},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375412,"byte_end":375415,"line_start":502,"line_end":502,"column_start":12,"column_end":15},"name":"get","qualname":"<VecDeque<T>>::get","value":"fn (&self, index: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an element in the `VecDeque` by index.","sig":null,"attributes":[{"value":"/ Retrieves an element in the `VecDeque` by index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":374970,"byte_end":375022,"line_start":486,"line_end":486,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375027,"byte_end":375030,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375035,"byte_end":375084,"line_start":488,"line_end":488,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375089,"byte_end":375092,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375097,"byte_end":375111,"line_start":490,"line_end":490,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375116,"byte_end":375119,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375124,"byte_end":375131,"line_start":492,"line_end":492,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375136,"byte_end":375171,"line_start":493,"line_end":493,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375176,"byte_end":375179,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375184,"byte_end":375218,"line_start":495,"line_end":495,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375223,"byte_end":375244,"line_start":496,"line_end":496,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375249,"byte_end":375270,"line_start":497,"line_end":497,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375275,"byte_end":375296,"line_start":498,"line_end":498,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.get(1), Some(&4));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375301,"byte_end":375338,"line_start":499,"line_end":499,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375343,"byte_end":375350,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375355,"byte_end":375400,"line_start":501,"line_end":501,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376171,"byte_end":376178,"line_start":531,"line_end":531,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<VecDeque<T>>::get_mut","value":"fn (&mut self, index: usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an element in the `VecDeque` mutably by index.","sig":null,"attributes":[{"value":"/ Retrieves an element in the `VecDeque` mutably by index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375646,"byte_end":375706,"line_start":511,"line_end":511,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375711,"byte_end":375714,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375719,"byte_end":375768,"line_start":513,"line_end":513,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375773,"byte_end":375776,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375781,"byte_end":375795,"line_start":515,"line_end":515,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375800,"byte_end":375803,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375808,"byte_end":375815,"line_start":517,"line_end":517,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375820,"byte_end":375855,"line_start":518,"line_end":518,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375860,"byte_end":375863,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375868,"byte_end":375902,"line_start":520,"line_end":520,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375907,"byte_end":375928,"line_start":521,"line_end":521,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375933,"byte_end":375954,"line_start":522,"line_end":522,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375959,"byte_end":375980,"line_start":523,"line_end":523,"column_start":5,"column_end":26}},{"value":"/ if let Some(elem) = buf.get_mut(1) {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":375985,"byte_end":376025,"line_start":524,"line_end":524,"column_start":5,"column_end":45}},{"value":"/     *elem = 7;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376030,"byte_end":376048,"line_start":525,"line_end":525,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376053,"byte_end":376058,"line_start":526,"line_end":526,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376063,"byte_end":376066,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf[1], 7);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376071,"byte_end":376097,"line_start":528,"line_end":528,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376102,"byte_end":376109,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376114,"byte_end":376159,"line_start":530,"line_end":530,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377031,"byte_end":377035,"line_start":564,"line_end":564,"column_start":12,"column_end":16},"name":"swap","qualname":"<VecDeque<T>>::swap","value":"fn (&mut self, i: usize, j: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps elements at indices `i` and `j`.","sig":null,"attributes":[{"value":"/ Swaps elements at indices `i` and `j`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376421,"byte_end":376463,"line_start":540,"line_end":540,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376468,"byte_end":376471,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ `i` and `j` may be equal.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376476,"byte_end":376505,"line_start":542,"line_end":542,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376510,"byte_end":376513,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376518,"byte_end":376567,"line_start":544,"line_end":544,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376572,"byte_end":376575,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376580,"byte_end":376592,"line_start":546,"line_end":546,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376597,"byte_end":376600,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ Panics if either index is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376605,"byte_end":376649,"line_start":548,"line_end":548,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376654,"byte_end":376657,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376662,"byte_end":376676,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376681,"byte_end":376684,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376689,"byte_end":376696,"line_start":552,"line_end":552,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376701,"byte_end":376736,"line_start":553,"line_end":553,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376741,"byte_end":376744,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376749,"byte_end":376783,"line_start":555,"line_end":555,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376788,"byte_end":376809,"line_start":556,"line_end":556,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376814,"byte_end":376835,"line_start":557,"line_end":557,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376840,"byte_end":376861,"line_start":558,"line_end":558,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [3, 4, 5]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376866,"byte_end":376897,"line_start":559,"line_end":559,"column_start":5,"column_end":36}},{"value":"/ buf.swap(0, 2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376902,"byte_end":376921,"line_start":560,"line_end":560,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(buf, [5, 4, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376926,"byte_end":376957,"line_start":561,"line_end":561,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376962,"byte_end":376969,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":376974,"byte_end":377019,"line_start":563,"line_end":563,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2304},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377679,"byte_end":377687,"line_start":585,"line_end":585,"column_start":12,"column_end":20},"name":"capacity","qualname":"<VecDeque<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the `VecDeque` can hold without\n reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the `VecDeque` can hold without","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377307,"byte_end":377373,"line_start":572,"line_end":572,"column_start":5,"column_end":71}},{"value":"/ reallocating.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377378,"byte_end":377395,"line_start":573,"line_end":573,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377400,"byte_end":377403,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377408,"byte_end":377422,"line_start":575,"line_end":575,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377427,"byte_end":377430,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377435,"byte_end":377442,"line_start":577,"line_end":577,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377447,"byte_end":377482,"line_start":578,"line_end":578,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377487,"byte_end":377490,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ let buf: VecDeque<i32> = VecDeque::with_capacity(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377495,"byte_end":377552,"line_start":580,"line_end":580,"column_start":5,"column_end":62}},{"value":"/ assert!(buf.capacity() >= 10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377557,"byte_end":377591,"line_start":581,"line_end":581,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377596,"byte_end":377603,"line_start":582,"line_end":582,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377608,"byte_end":377617,"line_start":583,"line_end":583,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377622,"byte_end":377667,"line_start":584,"line_end":584,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2305},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378581,"byte_end":378594,"line_start":612,"line_end":612,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<VecDeque<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\n given `VecDeque`. Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more elements to be inserted in the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377740,"byte_end":377834,"line_start":589,"line_end":589,"column_start":5,"column_end":99}},{"value":"/ given `VecDeque`. Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377839,"byte_end":377912,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377917,"byte_end":377920,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it requests. Therefore","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":377925,"byte_end":378015,"line_start":592,"line_end":592,"column_start":5,"column_end":95}},{"value":"/ capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378020,"byte_end":378109,"line_start":593,"line_end":593,"column_start":5,"column_end":94}},{"value":"/ insertions are expected.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378114,"byte_end":378142,"line_start":594,"line_end":594,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378147,"byte_end":378150,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378155,"byte_end":378167,"line_start":596,"line_end":596,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378172,"byte_end":378175,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378180,"byte_end":378229,"line_start":598,"line_end":598,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378234,"byte_end":378237,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378242,"byte_end":378256,"line_start":600,"line_end":600,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378261,"byte_end":378264,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378269,"byte_end":378276,"line_start":602,"line_end":602,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378281,"byte_end":378316,"line_start":603,"line_end":603,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378321,"byte_end":378324,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<i32> = vec![1].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378329,"byte_end":378392,"line_start":605,"line_end":605,"column_start":5,"column_end":68}},{"value":"/ buf.reserve_exact(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378397,"byte_end":378423,"line_start":606,"line_end":606,"column_start":5,"column_end":31}},{"value":"/ assert!(buf.capacity() >= 11);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378428,"byte_end":378462,"line_start":607,"line_end":607,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378467,"byte_end":378474,"line_start":608,"line_end":608,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378479,"byte_end":378482,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378487,"byte_end":378519,"line_start":610,"line_end":610,"column_start":5,"column_end":37}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378524,"byte_end":378569,"line_start":611,"line_end":611,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2306},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379240,"byte_end":379247,"line_start":633,"line_end":633,"column_start":12,"column_end":19},"name":"reserve","qualname":"<VecDeque<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted in the given\n `VecDeque`. The collection may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted in the given","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378672,"byte_end":378761,"line_start":616,"line_end":616,"column_start":5,"column_end":94}},{"value":"/ `VecDeque`. The collection may reserve more space to avoid frequent reallocations.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378766,"byte_end":378852,"line_start":617,"line_end":617,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378857,"byte_end":378860,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378865,"byte_end":378877,"line_start":619,"line_end":619,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378882,"byte_end":378885,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378890,"byte_end":378939,"line_start":621,"line_end":621,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378944,"byte_end":378947,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378952,"byte_end":378966,"line_start":623,"line_end":623,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378971,"byte_end":378974,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378979,"byte_end":378986,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":378991,"byte_end":379026,"line_start":626,"line_end":626,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379031,"byte_end":379034,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<i32> = vec![1].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379039,"byte_end":379102,"line_start":628,"line_end":628,"column_start":5,"column_end":68}},{"value":"/ buf.reserve(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379107,"byte_end":379127,"line_start":629,"line_end":629,"column_start":5,"column_end":25}},{"value":"/ assert!(buf.capacity() >= 11);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379132,"byte_end":379166,"line_start":630,"line_end":630,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379171,"byte_end":379178,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379183,"byte_end":379228,"line_start":632,"line_end":632,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2308},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381270,"byte_end":381287,"line_start":686,"line_end":686,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<VecDeque<T>>::try_reserve_exact","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `VecDeque<T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379748,"byte_end":379832,"line_start":649,"line_end":649,"column_start":5,"column_end":89}},{"value":"/ be inserted in the given `VecDeque<T>`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379837,"byte_end":379911,"line_start":650,"line_end":650,"column_start":5,"column_end":79}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379916,"byte_end":379988,"line_start":651,"line_end":651,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":379993,"byte_end":380048,"line_start":652,"line_end":652,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380053,"byte_end":380056,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380061,"byte_end":380131,"line_start":654,"line_end":654,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380136,"byte_end":380208,"line_start":655,"line_end":655,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380213,"byte_end":380277,"line_start":656,"line_end":656,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380282,"byte_end":380285,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380290,"byte_end":380302,"line_start":658,"line_end":658,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380307,"byte_end":380310,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380315,"byte_end":380395,"line_start":660,"line_end":660,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380400,"byte_end":380416,"line_start":661,"line_end":661,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380421,"byte_end":380424,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380429,"byte_end":380443,"line_start":663,"line_end":663,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380448,"byte_end":380451,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380456,"byte_end":380463,"line_start":665,"line_end":665,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380468,"byte_end":380496,"line_start":666,"line_end":666,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380501,"byte_end":380543,"line_start":667,"line_end":667,"column_start":5,"column_end":47}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380548,"byte_end":380583,"line_start":668,"line_end":668,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380588,"byte_end":380591,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380596,"byte_end":380673,"line_start":670,"line_end":670,"column_start":5,"column_end":82}},{"value":"/     let mut output = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380678,"byte_end":380719,"line_start":671,"line_end":671,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380724,"byte_end":380727,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380732,"byte_end":380786,"line_start":673,"line_end":673,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve_exact(data.len())?;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380791,"byte_end":380837,"line_start":674,"line_end":674,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380842,"byte_end":380845,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380850,"byte_end":380921,"line_start":676,"line_end":676,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380926,"byte_end":380972,"line_start":677,"line_end":677,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":380977,"byte_end":381020,"line_start":678,"line_end":678,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381025,"byte_end":381037,"line_start":679,"line_end":679,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381042,"byte_end":381045,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381050,"byte_end":381068,"line_start":681,"line_end":681,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381073,"byte_end":381078,"line_start":682,"line_end":682,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381083,"byte_end":381168,"line_start":683,"line_end":683,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381173,"byte_end":381180,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381185,"byte_end":381258,"line_start":685,"line_end":685,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2309},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382743,"byte_end":382754,"line_start":724,"line_end":724,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<VecDeque<T>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `VecDeque<T>`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381399,"byte_end":381483,"line_start":690,"line_end":690,"column_start":5,"column_end":89}},{"value":"/ in the given `VecDeque<T>`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381488,"byte_end":381566,"line_start":691,"line_end":691,"column_start":5,"column_end":83}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381571,"byte_end":381640,"line_start":692,"line_end":692,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381645,"byte_end":381716,"line_start":693,"line_end":693,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381721,"byte_end":381756,"line_start":694,"line_end":694,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381761,"byte_end":381764,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381769,"byte_end":381781,"line_start":696,"line_end":696,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381786,"byte_end":381789,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381794,"byte_end":381874,"line_start":698,"line_end":698,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381879,"byte_end":381895,"line_start":699,"line_end":699,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381900,"byte_end":381903,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381908,"byte_end":381922,"line_start":701,"line_end":701,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381927,"byte_end":381930,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381935,"byte_end":381942,"line_start":703,"line_end":703,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381947,"byte_end":381975,"line_start":704,"line_end":704,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":381980,"byte_end":382022,"line_start":705,"line_end":705,"column_start":5,"column_end":47}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382027,"byte_end":382062,"line_start":706,"line_end":706,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382067,"byte_end":382070,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382075,"byte_end":382152,"line_start":708,"line_end":708,"column_start":5,"column_end":82}},{"value":"/     let mut output = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382157,"byte_end":382198,"line_start":709,"line_end":709,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382203,"byte_end":382206,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382211,"byte_end":382265,"line_start":711,"line_end":711,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382270,"byte_end":382310,"line_start":712,"line_end":712,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382315,"byte_end":382318,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382323,"byte_end":382394,"line_start":714,"line_end":714,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382399,"byte_end":382445,"line_start":715,"line_end":715,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382450,"byte_end":382493,"line_start":716,"line_end":716,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382498,"byte_end":382510,"line_start":717,"line_end":717,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382515,"byte_end":382518,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382523,"byte_end":382541,"line_start":719,"line_end":719,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382546,"byte_end":382551,"line_start":720,"line_end":720,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382556,"byte_end":382641,"line_start":721,"line_end":721,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382646,"byte_end":382653,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":382658,"byte_end":382731,"line_start":723,"line_end":723,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383918,"byte_end":383931,"line_start":758,"line_end":758,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<VecDeque<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the `VecDeque` as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the `VecDeque` as much as possible.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383320,"byte_end":383383,"line_start":741,"line_end":741,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383388,"byte_end":383391,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ It will drop down as close as possible to the length but the allocator may still inform the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383396,"byte_end":383491,"line_start":743,"line_end":743,"column_start":5,"column_end":100}},{"value":"/ `VecDeque` that there is space for a few more elements.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383496,"byte_end":383555,"line_start":744,"line_end":744,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383560,"byte_end":383563,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383568,"byte_end":383582,"line_start":746,"line_end":746,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383587,"byte_end":383590,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383595,"byte_end":383602,"line_start":748,"line_end":748,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383607,"byte_end":383642,"line_start":749,"line_end":749,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383647,"byte_end":383650,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::with_capacity(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383655,"byte_end":383701,"line_start":751,"line_end":751,"column_start":5,"column_end":51}},{"value":"/ buf.extend(0..4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383706,"byte_end":383727,"line_start":752,"line_end":752,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.capacity(), 15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383732,"byte_end":383767,"line_start":753,"line_end":753,"column_start":5,"column_end":40}},{"value":"/ buf.shrink_to_fit();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383772,"byte_end":383796,"line_start":754,"line_end":754,"column_start":5,"column_end":29}},{"value":"/ assert!(buf.capacity() >= 4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383801,"byte_end":383834,"line_start":755,"line_end":755,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383839,"byte_end":383846,"line_start":756,"line_end":756,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383851,"byte_end":383906,"line_start":757,"line_end":757,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2312},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384728,"byte_end":384737,"line_start":785,"line_end":785,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<VecDeque<T>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the `VecDeque` with a lower bound.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the `VecDeque` with a lower bound.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":383983,"byte_end":384045,"line_start":762,"line_end":762,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384050,"byte_end":384053,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384058,"byte_end":384123,"line_start":764,"line_end":764,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384128,"byte_end":384155,"line_start":765,"line_end":765,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384160,"byte_end":384163,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384168,"byte_end":384231,"line_start":767,"line_end":767,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384236,"byte_end":384257,"line_start":768,"line_end":768,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384262,"byte_end":384265,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384270,"byte_end":384284,"line_start":770,"line_end":770,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384289,"byte_end":384292,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384297,"byte_end":384304,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384309,"byte_end":384335,"line_start":773,"line_end":773,"column_start":5,"column_end":31}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384340,"byte_end":384375,"line_start":774,"line_end":774,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384380,"byte_end":384383,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::with_capacity(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384388,"byte_end":384434,"line_start":776,"line_end":776,"column_start":5,"column_end":51}},{"value":"/ buf.extend(0..4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384439,"byte_end":384460,"line_start":777,"line_end":777,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.capacity(), 15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384465,"byte_end":384500,"line_start":778,"line_end":778,"column_start":5,"column_end":40}},{"value":"/ buf.shrink_to(6);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384505,"byte_end":384526,"line_start":779,"line_end":779,"column_start":5,"column_end":26}},{"value":"/ assert!(buf.capacity() >= 6);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384531,"byte_end":384564,"line_start":780,"line_end":780,"column_start":5,"column_end":38}},{"value":"/ buf.shrink_to(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384569,"byte_end":384590,"line_start":781,"line_end":781,"column_start":5,"column_end":26}},{"value":"/ assert!(buf.capacity() >= 4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384595,"byte_end":384628,"line_start":782,"line_end":782,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384633,"byte_end":384640,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":384645,"byte_end":384716,"line_start":784,"line_end":784,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":388138,"byte_end":388146,"line_start":868,"line_end":868,"column_start":12,"column_end":20},"name":"truncate","qualname":"<VecDeque<T>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the `VecDeque`, keeping the first `len` elements and dropping\n the rest.","sig":null,"attributes":[{"value":"/ Shortens the `VecDeque`, keeping the first `len` elements and dropping","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387555,"byte_end":387629,"line_start":848,"line_end":848,"column_start":5,"column_end":79}},{"value":"/ the rest.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387634,"byte_end":387647,"line_start":849,"line_end":849,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387652,"byte_end":387655,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the `VecDeque`'s current length, this has no","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387660,"byte_end":387733,"line_start":851,"line_end":851,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387738,"byte_end":387749,"line_start":852,"line_end":852,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387754,"byte_end":387757,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387762,"byte_end":387776,"line_start":854,"line_end":854,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387781,"byte_end":387784,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387789,"byte_end":387796,"line_start":856,"line_end":856,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387801,"byte_end":387836,"line_start":857,"line_end":857,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387841,"byte_end":387844,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387849,"byte_end":387883,"line_start":859,"line_end":859,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387888,"byte_end":387909,"line_start":860,"line_end":860,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387914,"byte_end":387936,"line_start":861,"line_end":861,"column_start":5,"column_end":27}},{"value":"/ buf.push_back(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387941,"byte_end":387963,"line_start":862,"line_end":862,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 15]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":387968,"byte_end":388001,"line_start":863,"line_end":863,"column_start":5,"column_end":38}},{"value":"/ buf.truncate(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":388006,"byte_end":388026,"line_start":864,"line_end":864,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(buf, [5]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":388031,"byte_end":388056,"line_start":865,"line_end":865,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":388061,"byte_end":388068,"line_start":866,"line_end":866,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":388073,"byte_end":388126,"line_start":867,"line_end":867,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389808,"byte_end":389812,"line_start":913,"line_end":913,"column_start":12,"column_end":16},"name":"iter","qualname":"<VecDeque<T>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator.","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389368,"byte_end":389405,"line_start":897,"line_end":897,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389410,"byte_end":389413,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389418,"byte_end":389432,"line_start":899,"line_end":899,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389437,"byte_end":389440,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389445,"byte_end":389452,"line_start":901,"line_end":901,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389457,"byte_end":389492,"line_start":902,"line_end":902,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389497,"byte_end":389500,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389505,"byte_end":389539,"line_start":904,"line_end":904,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389544,"byte_end":389565,"line_start":905,"line_end":905,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389570,"byte_end":389591,"line_start":906,"line_end":906,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389596,"byte_end":389617,"line_start":907,"line_end":907,"column_start":5,"column_end":26}},{"value":"/ let b: &[_] = &[&5, &3, &4];","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389622,"byte_end":389654,"line_start":908,"line_end":908,"column_start":5,"column_end":37}},{"value":"/ let c: Vec<&i32> = buf.iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389659,"byte_end":389703,"line_start":909,"line_end":909,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(&c[..], b);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389708,"byte_end":389734,"line_start":910,"line_end":910,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389739,"byte_end":389746,"line_start":911,"line_end":911,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389751,"byte_end":389796,"line_start":912,"line_end":912,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390489,"byte_end":390497,"line_start":935,"line_end":935,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<VecDeque<T>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator that returns mutable references.","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator that returns mutable references.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":389939,"byte_end":390008,"line_start":917,"line_end":917,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390013,"byte_end":390016,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390021,"byte_end":390035,"line_start":919,"line_end":919,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390040,"byte_end":390043,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390048,"byte_end":390055,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390060,"byte_end":390095,"line_start":922,"line_end":922,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390100,"byte_end":390103,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390108,"byte_end":390142,"line_start":924,"line_end":924,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390147,"byte_end":390168,"line_start":925,"line_end":925,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390173,"byte_end":390194,"line_start":926,"line_end":926,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(4);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390199,"byte_end":390220,"line_start":927,"line_end":927,"column_start":5,"column_end":26}},{"value":"/ for num in buf.iter_mut() {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390225,"byte_end":390256,"line_start":928,"line_end":928,"column_start":5,"column_end":36}},{"value":"/     *num = *num - 2;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390261,"byte_end":390285,"line_start":929,"line_end":929,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390290,"byte_end":390295,"line_start":930,"line_end":930,"column_start":5,"column_end":10}},{"value":"/ let b: &[_] = &[&mut 3, &mut 1, &mut 2];","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390300,"byte_end":390344,"line_start":931,"line_end":931,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390349,"byte_end":390415,"line_start":932,"line_end":932,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390420,"byte_end":390427,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390432,"byte_end":390477,"line_start":934,"line_end":934,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391285,"byte_end":391294,"line_start":962,"line_end":962,"column_start":12,"column_end":21},"name":"as_slices","qualname":"<VecDeque<T>>::as_slices","value":"fn (&self) -> (&[T], &[T])","parent":null,"children":[],"decl_id":null,"docs":" Returns a pair of slices which contain, in order, the contents of the\n `VecDeque`.","sig":null,"attributes":[{"value":"/ Returns a pair of slices which contain, in order, the contents of the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390638,"byte_end":390711,"line_start":939,"line_end":939,"column_start":5,"column_end":78}},{"value":"/ `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390716,"byte_end":390731,"line_start":940,"line_end":940,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390736,"byte_end":390739,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390744,"byte_end":390758,"line_start":942,"line_end":942,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390763,"byte_end":390766,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390771,"byte_end":390778,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390783,"byte_end":390818,"line_start":945,"line_end":945,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390823,"byte_end":390826,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ let mut vector = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390831,"byte_end":390868,"line_start":947,"line_end":947,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390873,"byte_end":390876,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ vector.push_back(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390881,"byte_end":390905,"line_start":949,"line_end":949,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390910,"byte_end":390934,"line_start":950,"line_end":950,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390939,"byte_end":390963,"line_start":951,"line_end":951,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390968,"byte_end":390971,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vector.as_slices(), (&[0, 1, 2][..], &[][..]));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":390976,"byte_end":391038,"line_start":953,"line_end":953,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391043,"byte_end":391046,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ vector.push_front(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391051,"byte_end":391077,"line_start":955,"line_end":955,"column_start":5,"column_end":31}},{"value":"/ vector.push_front(9);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391082,"byte_end":391107,"line_start":956,"line_end":956,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391112,"byte_end":391115,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vector.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391120,"byte_end":391187,"line_start":958,"line_end":958,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391192,"byte_end":391199,"line_start":959,"line_end":959,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391204,"byte_end":391213,"line_start":960,"line_end":960,"column_start":5,"column_end":14}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391218,"byte_end":391273,"line_start":961,"line_end":961,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2317},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392093,"byte_end":392106,"line_start":991,"line_end":991,"column_start":12,"column_end":25},"name":"as_mut_slices","qualname":"<VecDeque<T>>::as_mut_slices","value":"fn (&mut self) -> (&mut [T], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" Returns a pair of slices which contain, in order, the contents of the\n `VecDeque`.","sig":null,"attributes":[{"value":"/ Returns a pair of slices which contain, in order, the contents of the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391467,"byte_end":391540,"line_start":969,"line_end":969,"column_start":5,"column_end":78}},{"value":"/ `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391545,"byte_end":391560,"line_start":970,"line_end":970,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391565,"byte_end":391568,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391573,"byte_end":391587,"line_start":972,"line_end":972,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391592,"byte_end":391595,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391600,"byte_end":391607,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391612,"byte_end":391647,"line_start":975,"line_end":975,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391652,"byte_end":391655,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ let mut vector = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391660,"byte_end":391697,"line_start":977,"line_end":977,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391702,"byte_end":391705,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ vector.push_back(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391710,"byte_end":391734,"line_start":979,"line_end":979,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391739,"byte_end":391763,"line_start":980,"line_end":980,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391768,"byte_end":391771,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ vector.push_front(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391776,"byte_end":391802,"line_start":982,"line_end":982,"column_start":5,"column_end":31}},{"value":"/ vector.push_front(9);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391807,"byte_end":391832,"line_start":983,"line_end":983,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391837,"byte_end":391840,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ vector.as_mut_slices().0[0] = 42;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391845,"byte_end":391882,"line_start":985,"line_end":985,"column_start":5,"column_end":42}},{"value":"/ vector.as_mut_slices().1[0] = 24;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391887,"byte_end":391924,"line_start":986,"line_end":986,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":391929,"byte_end":391995,"line_start":987,"line_end":987,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392000,"byte_end":392007,"line_start":988,"line_end":988,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392012,"byte_end":392021,"line_start":989,"line_end":989,"column_start":5,"column_end":14}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392026,"byte_end":392081,"line_start":990,"line_end":990,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392700,"byte_end":392703,"line_start":1013,"line_end":1013,"column_start":12,"column_end":15},"name":"len","qualname":"<VecDeque<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the `VecDeque`.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392353,"byte_end":392406,"line_start":1000,"line_end":1000,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392411,"byte_end":392414,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392419,"byte_end":392433,"line_start":1002,"line_end":1002,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392438,"byte_end":392441,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392446,"byte_end":392453,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392458,"byte_end":392493,"line_start":1005,"line_end":1005,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392498,"byte_end":392501,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ let mut v = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392506,"byte_end":392538,"line_start":1007,"line_end":1007,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392543,"byte_end":392570,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/ v.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392575,"byte_end":392594,"line_start":1009,"line_end":1009,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392599,"byte_end":392626,"line_start":1010,"line_end":1010,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392631,"byte_end":392638,"line_start":1011,"line_end":1011,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392643,"byte_end":392688,"line_start":1012,"line_end":1012,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2319},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393121,"byte_end":393129,"line_start":1030,"line_end":1030,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<VecDeque<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `VecDeque` is empty.","sig":null,"attributes":[{"value":"/ Returns `true` if the `VecDeque` is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392781,"byte_end":392827,"line_start":1017,"line_end":1017,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392832,"byte_end":392835,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392840,"byte_end":392854,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392859,"byte_end":392862,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392867,"byte_end":392874,"line_start":1021,"line_end":1021,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392879,"byte_end":392914,"line_start":1022,"line_end":1022,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392919,"byte_end":392922,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ let mut v = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392927,"byte_end":392959,"line_start":1024,"line_end":1024,"column_start":5,"column_end":37}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392964,"byte_end":392990,"line_start":1025,"line_end":1025,"column_start":5,"column_end":31}},{"value":"/ v.push_front(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":392995,"byte_end":393015,"line_start":1026,"line_end":1026,"column_start":5,"column_end":25}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393020,"byte_end":393047,"line_start":1027,"line_end":1027,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393052,"byte_end":393059,"line_start":1028,"line_end":1028,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393064,"byte_end":393109,"line_start":1029,"line_end":1029,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394278,"byte_end":394283,"line_start":1065,"line_end":1065,"column_start":12,"column_end":17},"name":"drain","qualname":"<VecDeque<T>>::drain","value":"fn <R> (&mut self, range: R) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the\n `VecDeque` and yields the removed items.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393189,"byte_end":393260,"line_start":1034,"line_end":1034,"column_start":5,"column_end":76}},{"value":"/ `VecDeque` and yields the removed items.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393265,"byte_end":393309,"line_start":1035,"line_end":1035,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393314,"byte_end":393317,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ Note 1: The element range is removed even if the iterator is not","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393322,"byte_end":393390,"line_start":1037,"line_end":1037,"column_start":5,"column_end":73}},{"value":"/ consumed until the end.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393395,"byte_end":393422,"line_start":1038,"line_end":1038,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393427,"byte_end":393430,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ Note 2: It is unspecified how many elements are removed from the deque,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393435,"byte_end":393510,"line_start":1040,"line_end":1040,"column_start":5,"column_end":80}},{"value":"/ if the `Drain` value is not dropped, but the borrow it holds expires","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393515,"byte_end":393587,"line_start":1041,"line_end":1041,"column_start":5,"column_end":77}},{"value":"/ (e.g., due to `mem::forget`).","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393592,"byte_end":393625,"line_start":1042,"line_end":1042,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393630,"byte_end":393633,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393638,"byte_end":393650,"line_start":1044,"line_end":1044,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393655,"byte_end":393658,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point is greater than the end point or if","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393663,"byte_end":393731,"line_start":1046,"line_end":1046,"column_start":5,"column_end":73}},{"value":"/ the end point is greater than the length of the vector.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393736,"byte_end":393795,"line_start":1047,"line_end":1047,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393800,"byte_end":393803,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393808,"byte_end":393822,"line_start":1049,"line_end":1049,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393827,"byte_end":393830,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393835,"byte_end":393842,"line_start":1051,"line_end":1051,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393847,"byte_end":393882,"line_start":1052,"line_end":1052,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393887,"byte_end":393890,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ let mut v: VecDeque<_> = vec![1, 2, 3].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393895,"byte_end":393960,"line_start":1054,"line_end":1054,"column_start":5,"column_end":70}},{"value":"/ let drained = v.drain(2..).collect::<VecDeque<_>>();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":393965,"byte_end":394021,"line_start":1055,"line_end":1055,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(drained, [3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394026,"byte_end":394055,"line_start":1056,"line_end":1056,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(v, [1, 2]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394060,"byte_end":394086,"line_start":1057,"line_end":1057,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394091,"byte_end":394094,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ // A full range clears all contents","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394099,"byte_end":394138,"line_start":1059,"line_end":1059,"column_start":5,"column_end":44}},{"value":"/ v.drain(..);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394143,"byte_end":394159,"line_start":1060,"line_end":1060,"column_start":5,"column_end":21}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394164,"byte_end":394190,"line_start":1061,"line_end":1061,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394195,"byte_end":394202,"line_start":1062,"line_end":1062,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394207,"byte_end":394216,"line_start":1063,"line_end":1063,"column_start":5,"column_end":14}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":394221,"byte_end":394266,"line_start":1064,"line_end":1064,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2322},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397254,"byte_end":397259,"line_start":1146,"line_end":1146,"column_start":12,"column_end":17},"name":"clear","qualname":"<VecDeque<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the `VecDeque`, removing all values.","sig":null,"attributes":[{"value":"/ Clears the `VecDeque`, removing all values.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396913,"byte_end":396960,"line_start":1132,"line_end":1132,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396965,"byte_end":396968,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396973,"byte_end":396987,"line_start":1134,"line_end":1134,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":396992,"byte_end":396995,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397000,"byte_end":397007,"line_start":1136,"line_end":1136,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397012,"byte_end":397047,"line_start":1137,"line_end":1137,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397052,"byte_end":397055,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ let mut v = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397060,"byte_end":397092,"line_start":1139,"line_end":1139,"column_start":5,"column_end":37}},{"value":"/ v.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397097,"byte_end":397116,"line_start":1140,"line_end":1140,"column_start":5,"column_end":24}},{"value":"/ v.clear();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397121,"byte_end":397135,"line_start":1141,"line_end":1141,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397140,"byte_end":397166,"line_start":1142,"line_end":1142,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397171,"byte_end":397178,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397183,"byte_end":397228,"line_start":1144,"line_end":1144,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397233,"byte_end":397242,"line_start":1145,"line_end":1145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2323},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397810,"byte_end":397818,"line_start":1167,"line_end":1167,"column_start":12,"column_end":20},"name":"contains","qualname":"<VecDeque<T>>::contains","value":"fn (&self, x: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `VecDeque` contains an element equal to the\n given value.","sig":null,"attributes":[{"value":"/ Returns `true` if the `VecDeque` contains an element equal to the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397310,"byte_end":397379,"line_start":1150,"line_end":1150,"column_start":5,"column_end":74}},{"value":"/ given value.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397384,"byte_end":397400,"line_start":1151,"line_end":1151,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397405,"byte_end":397408,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397413,"byte_end":397427,"line_start":1153,"line_end":1153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397432,"byte_end":397435,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397440,"byte_end":397447,"line_start":1155,"line_end":1155,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397452,"byte_end":397487,"line_start":1156,"line_end":1156,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397492,"byte_end":397495,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ let mut vector: VecDeque<u32> = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397500,"byte_end":397552,"line_start":1158,"line_end":1158,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397557,"byte_end":397560,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ vector.push_back(0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397565,"byte_end":397589,"line_start":1160,"line_end":1160,"column_start":5,"column_end":29}},{"value":"/ vector.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397594,"byte_end":397618,"line_start":1161,"line_end":1161,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397623,"byte_end":397626,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vector.contains(&1), true);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397631,"byte_end":397673,"line_start":1163,"line_end":1163,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(vector.contains(&10), false);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397678,"byte_end":397722,"line_start":1164,"line_end":1164,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397727,"byte_end":397734,"line_start":1165,"line_end":1165,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_deque_contains\", since = \"1.12.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397739,"byte_end":397798,"line_start":1166,"line_end":1166,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2324},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398403,"byte_end":398408,"line_start":1191,"line_end":1191,"column_start":12,"column_end":17},"name":"front","qualname":"<VecDeque<T>>::front","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the front element, or `None` if the `VecDeque` is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the front element, or `None` if the `VecDeque` is","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":397971,"byte_end":398048,"line_start":1175,"line_end":1175,"column_start":5,"column_end":82}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398053,"byte_end":398063,"line_start":1176,"line_end":1176,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398068,"byte_end":398071,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398076,"byte_end":398090,"line_start":1178,"line_end":1178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398095,"byte_end":398098,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398103,"byte_end":398110,"line_start":1180,"line_end":1180,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398115,"byte_end":398150,"line_start":1181,"line_end":1181,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398155,"byte_end":398158,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398163,"byte_end":398195,"line_start":1183,"line_end":1183,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.front(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398200,"byte_end":398232,"line_start":1184,"line_end":1184,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398237,"byte_end":398240,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398245,"byte_end":398264,"line_start":1186,"line_end":1186,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398269,"byte_end":398288,"line_start":1187,"line_end":1187,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(d.front(), Some(&1));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398293,"byte_end":398329,"line_start":1188,"line_end":1188,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398334,"byte_end":398341,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398346,"byte_end":398391,"line_start":1190,"line_end":1190,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399043,"byte_end":399052,"line_start":1215,"line_end":1215,"column_start":12,"column_end":21},"name":"front_mut","qualname":"<VecDeque<T>>::front_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the front element, or `None` if the\n `VecDeque` is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the front element, or `None` if the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398504,"byte_end":398575,"line_start":1195,"line_end":1195,"column_start":5,"column_end":76}},{"value":"/ `VecDeque` is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398580,"byte_end":398604,"line_start":1196,"line_end":1196,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398609,"byte_end":398612,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398617,"byte_end":398631,"line_start":1198,"line_end":1198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398636,"byte_end":398639,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398644,"byte_end":398651,"line_start":1200,"line_end":1200,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398656,"byte_end":398691,"line_start":1201,"line_end":1201,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398696,"byte_end":398699,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398704,"byte_end":398736,"line_start":1203,"line_end":1203,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.front_mut(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398741,"byte_end":398777,"line_start":1204,"line_end":1204,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398782,"byte_end":398785,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398790,"byte_end":398809,"line_start":1206,"line_end":1206,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398814,"byte_end":398833,"line_start":1207,"line_end":1207,"column_start":5,"column_end":24}},{"value":"/ match d.front_mut() {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398838,"byte_end":398863,"line_start":1208,"line_end":1208,"column_start":5,"column_end":30}},{"value":"/     Some(x) => *x = 9,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398868,"byte_end":398894,"line_start":1209,"line_end":1209,"column_start":5,"column_end":31}},{"value":"/     None => (),","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398899,"byte_end":398918,"line_start":1210,"line_end":1210,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398923,"byte_end":398928,"line_start":1211,"line_end":1211,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(d.front(), Some(&9));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398933,"byte_end":398969,"line_start":1212,"line_end":1212,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398974,"byte_end":398981,"line_start":1213,"line_end":1213,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":398986,"byte_end":399031,"line_start":1214,"line_end":1214,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2326},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399589,"byte_end":399593,"line_start":1235,"line_end":1235,"column_start":12,"column_end":16},"name":"back","qualname":"<VecDeque<T>>::back","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the back element, or `None` if the `VecDeque` is\n empty.","sig":null,"attributes":[{"value":"/ Provides a reference to the back element, or `None` if the `VecDeque` is","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399160,"byte_end":399236,"line_start":1219,"line_end":1219,"column_start":5,"column_end":81}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399241,"byte_end":399251,"line_start":1220,"line_end":1220,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399256,"byte_end":399259,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399264,"byte_end":399278,"line_start":1222,"line_end":1222,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399283,"byte_end":399286,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399291,"byte_end":399298,"line_start":1224,"line_end":1224,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399303,"byte_end":399338,"line_start":1225,"line_end":1225,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399343,"byte_end":399346,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399351,"byte_end":399383,"line_start":1227,"line_end":1227,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.back(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399388,"byte_end":399419,"line_start":1228,"line_end":1228,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399424,"byte_end":399427,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399432,"byte_end":399451,"line_start":1230,"line_end":1230,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399456,"byte_end":399475,"line_start":1231,"line_end":1231,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(d.back(), Some(&2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399480,"byte_end":399515,"line_start":1232,"line_end":1232,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399520,"byte_end":399527,"line_start":1233,"line_end":1233,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399532,"byte_end":399577,"line_start":1234,"line_end":1234,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2327},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400233,"byte_end":400241,"line_start":1259,"line_end":1259,"column_start":12,"column_end":20},"name":"back_mut","qualname":"<VecDeque<T>>::back_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the back element, or `None` if the\n `VecDeque` is empty.","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the back element, or `None` if the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399702,"byte_end":399772,"line_start":1239,"line_end":1239,"column_start":5,"column_end":75}},{"value":"/ `VecDeque` is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399777,"byte_end":399801,"line_start":1240,"line_end":1240,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399806,"byte_end":399809,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399814,"byte_end":399828,"line_start":1242,"line_end":1242,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399833,"byte_end":399836,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399841,"byte_end":399848,"line_start":1244,"line_end":1244,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399853,"byte_end":399888,"line_start":1245,"line_end":1245,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399893,"byte_end":399896,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399901,"byte_end":399933,"line_start":1247,"line_end":1247,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.back(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399938,"byte_end":399969,"line_start":1248,"line_end":1248,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399974,"byte_end":399977,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":399982,"byte_end":400001,"line_start":1250,"line_end":1250,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400006,"byte_end":400025,"line_start":1251,"line_end":1251,"column_start":5,"column_end":24}},{"value":"/ match d.back_mut() {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400030,"byte_end":400054,"line_start":1252,"line_end":1252,"column_start":5,"column_end":29}},{"value":"/     Some(x) => *x = 9,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400059,"byte_end":400085,"line_start":1253,"line_end":1253,"column_start":5,"column_end":31}},{"value":"/     None => (),","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400090,"byte_end":400109,"line_start":1254,"line_end":1254,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400114,"byte_end":400119,"line_start":1255,"line_end":1255,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(d.back(), Some(&9));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400124,"byte_end":400159,"line_start":1256,"line_end":1256,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400164,"byte_end":400171,"line_start":1257,"line_end":1257,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400176,"byte_end":400221,"line_start":1258,"line_end":1258,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400867,"byte_end":400876,"line_start":1281,"line_end":1281,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<VecDeque<T>>::pop_front","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first element and returns it, or `None` if the `VecDeque` is\n empty.","sig":null,"attributes":[{"value":"/ Removes the first element and returns it, or `None` if the `VecDeque` is","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400385,"byte_end":400461,"line_start":1264,"line_end":1264,"column_start":5,"column_end":81}},{"value":"/ empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400466,"byte_end":400476,"line_start":1265,"line_end":1265,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400481,"byte_end":400484,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400489,"byte_end":400503,"line_start":1267,"line_end":1267,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400508,"byte_end":400511,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400516,"byte_end":400523,"line_start":1269,"line_end":1269,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400528,"byte_end":400563,"line_start":1270,"line_end":1270,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400568,"byte_end":400571,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400576,"byte_end":400608,"line_start":1272,"line_end":1272,"column_start":5,"column_end":37}},{"value":"/ d.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400613,"byte_end":400632,"line_start":1273,"line_end":1273,"column_start":5,"column_end":24}},{"value":"/ d.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400637,"byte_end":400656,"line_start":1274,"line_end":1274,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400661,"byte_end":400664,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(d.pop_front(), Some(1));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400669,"byte_end":400708,"line_start":1276,"line_end":1276,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), Some(2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400713,"byte_end":400752,"line_start":1277,"line_end":1277,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(d.pop_front(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400757,"byte_end":400793,"line_start":1278,"line_end":1278,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400798,"byte_end":400805,"line_start":1279,"line_end":1279,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":400810,"byte_end":400855,"line_start":1280,"line_end":1280,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2329},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401571,"byte_end":401579,"line_start":1306,"line_end":1306,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<VecDeque<T>>::pop_back","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from the `VecDeque` and returns it, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Removes the last element from the `VecDeque` and returns it, or `None` if","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401126,"byte_end":401203,"line_start":1291,"line_end":1291,"column_start":5,"column_end":82}},{"value":"/ it is empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401208,"byte_end":401224,"line_start":1292,"line_end":1292,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401229,"byte_end":401232,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401237,"byte_end":401251,"line_start":1294,"line_end":1294,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401256,"byte_end":401259,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401264,"byte_end":401271,"line_start":1296,"line_end":1296,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401276,"byte_end":401311,"line_start":1297,"line_end":1297,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401316,"byte_end":401319,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401324,"byte_end":401358,"line_start":1299,"line_end":1299,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf.pop_back(), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401363,"byte_end":401400,"line_start":1300,"line_end":1300,"column_start":5,"column_end":42}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401405,"byte_end":401426,"line_start":1301,"line_end":1301,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401431,"byte_end":401452,"line_start":1302,"line_end":1302,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf.pop_back(), Some(3));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401457,"byte_end":401497,"line_start":1303,"line_end":1303,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401502,"byte_end":401509,"line_start":1304,"line_end":1304,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401514,"byte_end":401559,"line_start":1305,"line_end":1305,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2330},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402168,"byte_end":402178,"line_start":1329,"line_end":1329,"column_start":12,"column_end":22},"name":"push_front","qualname":"<VecDeque<T>>::push_front","value":"fn (&mut self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Prepends an element to the `VecDeque`.","sig":null,"attributes":[{"value":"/ Prepends an element to the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401829,"byte_end":401871,"line_start":1316,"line_end":1316,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401876,"byte_end":401879,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401884,"byte_end":401898,"line_start":1318,"line_end":1318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401903,"byte_end":401906,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401911,"byte_end":401918,"line_start":1320,"line_end":1320,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401923,"byte_end":401958,"line_start":1321,"line_end":1321,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401963,"byte_end":401966,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ let mut d = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":401971,"byte_end":402003,"line_start":1323,"line_end":1323,"column_start":5,"column_end":37}},{"value":"/ d.push_front(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402008,"byte_end":402028,"line_start":1324,"line_end":1324,"column_start":5,"column_end":25}},{"value":"/ d.push_front(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402033,"byte_end":402053,"line_start":1325,"line_end":1325,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(d.front(), Some(&2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402058,"byte_end":402094,"line_start":1326,"line_end":1326,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402099,"byte_end":402106,"line_start":1327,"line_end":1327,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402111,"byte_end":402156,"line_start":1328,"line_end":1328,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2331},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402756,"byte_end":402765,"line_start":1352,"line_end":1352,"column_start":12,"column_end":21},"name":"push_back","qualname":"<VecDeque<T>>::push_back","value":"fn (&mut self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of the `VecDeque`.","sig":null,"attributes":[{"value":"/ Appends an element to the back of the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402398,"byte_end":402451,"line_start":1339,"line_end":1339,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402456,"byte_end":402459,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402464,"byte_end":402478,"line_start":1341,"line_end":1341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402483,"byte_end":402486,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402491,"byte_end":402498,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402503,"byte_end":402538,"line_start":1344,"line_end":1344,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402543,"byte_end":402546,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402551,"byte_end":402585,"line_start":1346,"line_end":1346,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402590,"byte_end":402611,"line_start":1347,"line_end":1347,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402616,"byte_end":402637,"line_start":1348,"line_end":1348,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(3, *buf.back().unwrap());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402642,"byte_end":402682,"line_start":1349,"line_end":1349,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402687,"byte_end":402694,"line_start":1350,"line_end":1350,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":402699,"byte_end":402744,"line_start":1351,"line_end":1351,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2333},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403833,"byte_end":403850,"line_start":1390,"line_end":1390,"column_start":12,"column_end":29},"name":"swap_remove_front","qualname":"<VecDeque<T>>::swap_remove_front","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from anywhere in the `VecDeque` and returns it,\n replacing it with the first element.","sig":null,"attributes":[{"value":"/ Removes an element from anywhere in the `VecDeque` and returns it,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403054,"byte_end":403124,"line_start":1365,"line_end":1365,"column_start":5,"column_end":75}},{"value":"/ replacing it with the first element.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403129,"byte_end":403169,"line_start":1366,"line_end":1366,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403174,"byte_end":403177,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403182,"byte_end":403231,"line_start":1368,"line_end":1368,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403236,"byte_end":403239,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `index` is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403244,"byte_end":403291,"line_start":1370,"line_end":1370,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403296,"byte_end":403299,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403304,"byte_end":403353,"line_start":1372,"line_end":1372,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403358,"byte_end":403361,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403366,"byte_end":403380,"line_start":1374,"line_end":1374,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403385,"byte_end":403388,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403393,"byte_end":403400,"line_start":1376,"line_end":1376,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403405,"byte_end":403440,"line_start":1377,"line_end":1377,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403445,"byte_end":403448,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403453,"byte_end":403487,"line_start":1379,"line_end":1379,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf.swap_remove_front(0), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403492,"byte_end":403539,"line_start":1380,"line_end":1380,"column_start":5,"column_end":52}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403544,"byte_end":403565,"line_start":1381,"line_end":1381,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403570,"byte_end":403591,"line_start":1382,"line_end":1382,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403596,"byte_end":403617,"line_start":1383,"line_end":1383,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [1, 2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403622,"byte_end":403653,"line_start":1384,"line_end":1384,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403658,"byte_end":403661,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.swap_remove_front(2), Some(3));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403666,"byte_end":403716,"line_start":1386,"line_end":1386,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(buf, [2, 1]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403721,"byte_end":403749,"line_start":1387,"line_end":1387,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403754,"byte_end":403761,"line_start":1388,"line_end":1388,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":403766,"byte_end":403821,"line_start":1389,"line_end":1389,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2334},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404896,"byte_end":404912,"line_start":1425,"line_end":1425,"column_start":12,"column_end":28},"name":"swap_remove_back","qualname":"<VecDeque<T>>::swap_remove_back","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\n last element.","sig":null,"attributes":[{"value":"/ Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404120,"byte_end":404212,"line_start":1400,"line_end":1400,"column_start":5,"column_end":97}},{"value":"/ last element.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404217,"byte_end":404234,"line_start":1401,"line_end":1401,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404239,"byte_end":404242,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404247,"byte_end":404296,"line_start":1403,"line_end":1403,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404301,"byte_end":404304,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `index` is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404309,"byte_end":404356,"line_start":1405,"line_end":1405,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404361,"byte_end":404364,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404369,"byte_end":404418,"line_start":1407,"line_end":1407,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404423,"byte_end":404426,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404431,"byte_end":404445,"line_start":1409,"line_end":1409,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404450,"byte_end":404453,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404458,"byte_end":404465,"line_start":1411,"line_end":1411,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404470,"byte_end":404505,"line_start":1412,"line_end":1412,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404510,"byte_end":404513,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404518,"byte_end":404552,"line_start":1414,"line_end":1414,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf.swap_remove_back(0), None);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404557,"byte_end":404603,"line_start":1415,"line_end":1415,"column_start":5,"column_end":51}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404608,"byte_end":404629,"line_start":1416,"line_end":1416,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404634,"byte_end":404655,"line_start":1417,"line_end":1417,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404660,"byte_end":404681,"line_start":1418,"line_end":1418,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [1, 2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404686,"byte_end":404717,"line_start":1419,"line_end":1419,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404722,"byte_end":404725,"line_start":1420,"line_end":1420,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.swap_remove_back(0), Some(1));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404730,"byte_end":404779,"line_start":1421,"line_end":1421,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(buf, [3, 2]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404784,"byte_end":404812,"line_start":1422,"line_end":1422,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404817,"byte_end":404824,"line_start":1423,"line_end":1423,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":404829,"byte_end":404884,"line_start":1424,"line_end":1424,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2335},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405958,"byte_end":405964,"line_start":1459,"line_end":1459,"column_start":12,"column_end":18},"name":"insert","qualname":"<VecDeque<T>>::insert","value":"fn (&mut self, index: usize, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts an element at `index` within the `VecDeque`, shifting all elements with indices\n greater than or equal to `index` towards the back.","sig":null,"attributes":[{"value":"/ Inserts an element at `index` within the `VecDeque`, shifting all elements with indices","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405180,"byte_end":405271,"line_start":1435,"line_end":1435,"column_start":5,"column_end":96}},{"value":"/ greater than or equal to `index` towards the back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405276,"byte_end":405330,"line_start":1436,"line_end":1436,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405335,"byte_end":405338,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405343,"byte_end":405392,"line_start":1438,"line_end":1438,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405397,"byte_end":405400,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405405,"byte_end":405417,"line_start":1440,"line_end":1440,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405422,"byte_end":405425,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is greater than `VecDeque`'s length","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405430,"byte_end":405487,"line_start":1442,"line_end":1442,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405492,"byte_end":405495,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405500,"byte_end":405514,"line_start":1444,"line_end":1444,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405519,"byte_end":405522,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405527,"byte_end":405534,"line_start":1446,"line_end":1446,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405539,"byte_end":405574,"line_start":1447,"line_end":1447,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405579,"byte_end":405582,"line_start":1448,"line_end":1448,"column_start":5,"column_end":8}},{"value":"/ let mut vec_deque = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405587,"byte_end":405627,"line_start":1449,"line_end":1449,"column_start":5,"column_end":45}},{"value":"/ vec_deque.push_back('a');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405632,"byte_end":405661,"line_start":1450,"line_end":1450,"column_start":5,"column_end":34}},{"value":"/ vec_deque.push_back('b');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405666,"byte_end":405695,"line_start":1451,"line_end":1451,"column_start":5,"column_end":34}},{"value":"/ vec_deque.push_back('c');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405700,"byte_end":405729,"line_start":1452,"line_end":1452,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(vec_deque, &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405734,"byte_end":405778,"line_start":1453,"line_end":1453,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405783,"byte_end":405786,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ vec_deque.insert(1, 'd');","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405791,"byte_end":405820,"line_start":1455,"line_end":1455,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(vec_deque, &['a', 'd', 'b', 'c']);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405825,"byte_end":405874,"line_start":1456,"line_end":1456,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405879,"byte_end":405886,"line_start":1457,"line_end":1457,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras_15\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":405891,"byte_end":405946,"line_start":1458,"line_end":1458,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2336},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414443,"byte_end":414449,"line_start":1679,"line_end":1679,"column_start":12,"column_end":18},"name":"remove","qualname":"<VecDeque<T>>::remove","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the element at `index` from the `VecDeque`.\n Whichever end is closer to the removal point will be moved to make\n room, and all the affected elements will be moved to new positions.\n Returns `None` if `index` is out of bounds.","sig":null,"attributes":[{"value":"/ Removes and returns the element at `index` from the `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413704,"byte_end":413771,"line_start":1657,"line_end":1657,"column_start":5,"column_end":72}},{"value":"/ Whichever end is closer to the removal point will be moved to make","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413776,"byte_end":413846,"line_start":1658,"line_end":1658,"column_start":5,"column_end":75}},{"value":"/ room, and all the affected elements will be moved to new positions.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413851,"byte_end":413922,"line_start":1659,"line_end":1659,"column_start":5,"column_end":76}},{"value":"/ Returns `None` if `index` is out of bounds.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413927,"byte_end":413974,"line_start":1660,"line_end":1660,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413979,"byte_end":413982,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":413987,"byte_end":414036,"line_start":1662,"line_end":1662,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414041,"byte_end":414044,"line_start":1663,"line_end":1663,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414049,"byte_end":414063,"line_start":1664,"line_end":1664,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414068,"byte_end":414071,"line_start":1665,"line_end":1665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414076,"byte_end":414083,"line_start":1666,"line_end":1666,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414088,"byte_end":414123,"line_start":1667,"line_end":1667,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414128,"byte_end":414131,"line_start":1668,"line_end":1668,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414136,"byte_end":414170,"line_start":1669,"line_end":1669,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414175,"byte_end":414196,"line_start":1670,"line_end":1670,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414201,"byte_end":414222,"line_start":1671,"line_end":1671,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414227,"byte_end":414248,"line_start":1672,"line_end":1672,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [1, 2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414253,"byte_end":414284,"line_start":1673,"line_end":1673,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414289,"byte_end":414292,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buf.remove(1), Some(2));","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414297,"byte_end":414336,"line_start":1675,"line_end":1675,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(buf, [1, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414341,"byte_end":414369,"line_start":1676,"line_end":1676,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414374,"byte_end":414381,"line_start":1677,"line_end":1677,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":414386,"byte_end":414431,"line_start":1678,"line_end":1678,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2337},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421274,"byte_end":421283,"line_start":1860,"line_end":1860,"column_start":12,"column_end":21},"name":"split_off","qualname":"<VecDeque<T>>::split_off","value":"fn (&mut self, at: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the `VecDeque` into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the `VecDeque` into two at the given index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420514,"byte_end":420568,"line_start":1835,"line_end":1835,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420573,"byte_end":420576,"line_start":1836,"line_end":1836,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated `VecDeque`. `self` contains elements `[0, at)`,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420581,"byte_end":420658,"line_start":1837,"line_end":1837,"column_start":5,"column_end":82}},{"value":"/ and the returned `VecDeque` contains elements `[at, len)`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420663,"byte_end":420725,"line_start":1838,"line_end":1838,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420730,"byte_end":420733,"line_start":1839,"line_end":1839,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of `self` does not change.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420738,"byte_end":420791,"line_start":1840,"line_end":1840,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420796,"byte_end":420799,"line_start":1841,"line_end":1841,"column_start":5,"column_end":8}},{"value":"/ Element at index 0 is the front of the queue.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420804,"byte_end":420853,"line_start":1842,"line_end":1842,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420858,"byte_end":420861,"line_start":1843,"line_end":1843,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420866,"byte_end":420878,"line_start":1844,"line_end":1844,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420883,"byte_end":420886,"line_start":1845,"line_end":1845,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420891,"byte_end":420916,"line_start":1846,"line_end":1846,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420921,"byte_end":420924,"line_start":1847,"line_end":1847,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420929,"byte_end":420943,"line_start":1848,"line_end":1848,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420948,"byte_end":420951,"line_start":1849,"line_end":1849,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420956,"byte_end":420963,"line_start":1850,"line_end":1850,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":420968,"byte_end":421003,"line_start":1851,"line_end":1851,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421008,"byte_end":421011,"line_start":1852,"line_end":1852,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421016,"byte_end":421081,"line_start":1853,"line_end":1853,"column_start":5,"column_end":70}},{"value":"/ let buf2 = buf.split_off(1);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421086,"byte_end":421118,"line_start":1854,"line_end":1854,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(buf, [1]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421123,"byte_end":421148,"line_start":1855,"line_end":1855,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(buf2, [2, 3]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421153,"byte_end":421182,"line_start":1856,"line_end":1856,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421187,"byte_end":421194,"line_start":1857,"line_end":1857,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421199,"byte_end":421208,"line_start":1858,"line_end":1858,"column_start":5,"column_end":14}},{"value":"stable(feature = \"split_off\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":421213,"byte_end":421262,"line_start":1859,"line_end":1859,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423400,"byte_end":423406,"line_start":1923,"line_end":1923,"column_start":12,"column_end":18},"name":"append","qualname":"<VecDeque<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the elements of `other` into `self`, leaving `other` empty.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":422797,"byte_end":422870,"line_start":1904,"line_end":1904,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":422875,"byte_end":422878,"line_start":1905,"line_end":1905,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":422883,"byte_end":422895,"line_start":1906,"line_end":1906,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":422900,"byte_end":422903,"line_start":1907,"line_end":1907,"column_start":5,"column_end":8}},{"value":"/ Panics if the new number of elements in self overflows a `usize`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":422908,"byte_end":422977,"line_start":1908,"line_end":1908,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":422982,"byte_end":422985,"line_start":1909,"line_end":1909,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":422990,"byte_end":423004,"line_start":1910,"line_end":1910,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423009,"byte_end":423012,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423017,"byte_end":423024,"line_start":1912,"line_end":1912,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423029,"byte_end":423064,"line_start":1913,"line_end":1913,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423069,"byte_end":423072,"line_start":1914,"line_end":1914,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = vec![1, 2].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423077,"byte_end":423141,"line_start":1915,"line_end":1915,"column_start":5,"column_end":69}},{"value":"/ let mut buf2: VecDeque<_> = vec![3, 4].into_iter().collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423146,"byte_end":423211,"line_start":1916,"line_end":1916,"column_start":5,"column_end":70}},{"value":"/ buf.append(&mut buf2);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423216,"byte_end":423242,"line_start":1917,"line_end":1917,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(buf, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423247,"byte_end":423281,"line_start":1918,"line_end":1918,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf2, []);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423286,"byte_end":423311,"line_start":1919,"line_end":1919,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423316,"byte_end":423323,"line_start":1920,"line_end":1920,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423328,"byte_end":423337,"line_start":1921,"line_end":1921,"column_start":5,"column_end":14}},{"value":"stable(feature = \"append\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423342,"byte_end":423388,"line_start":1922,"line_end":1922,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424525,"byte_end":424531,"line_start":1959,"line_end":1959,"column_start":12,"column_end":18},"name":"retain","qualname":"<VecDeque<T>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423509,"byte_end":423566,"line_start":1928,"line_end":1928,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423571,"byte_end":423574,"line_start":1929,"line_end":1929,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns false.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423579,"byte_end":423655,"line_start":1930,"line_end":1930,"column_start":5,"column_end":81}},{"value":"/ This method operates in place, visiting each element exactly once in the","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423660,"byte_end":423736,"line_start":1931,"line_end":1931,"column_start":5,"column_end":81}},{"value":"/ original order, and preserves the order of the retained elements.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423741,"byte_end":423810,"line_start":1932,"line_end":1932,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423815,"byte_end":423818,"line_start":1933,"line_end":1933,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423823,"byte_end":423837,"line_start":1934,"line_end":1934,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423842,"byte_end":423845,"line_start":1935,"line_end":1935,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423850,"byte_end":423857,"line_start":1936,"line_end":1936,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423862,"byte_end":423897,"line_start":1937,"line_end":1937,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423902,"byte_end":423905,"line_start":1938,"line_end":1938,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423910,"byte_end":423944,"line_start":1939,"line_end":1939,"column_start":5,"column_end":39}},{"value":"/ buf.extend(1..5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423949,"byte_end":423970,"line_start":1940,"line_end":1940,"column_start":5,"column_end":26}},{"value":"/ buf.retain(|&x| x % 2 == 0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":423975,"byte_end":424007,"line_start":1941,"line_end":1941,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(buf, [2, 4]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424012,"byte_end":424040,"line_start":1942,"line_end":1942,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424045,"byte_end":424052,"line_start":1943,"line_end":1943,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424057,"byte_end":424060,"line_start":1944,"line_end":1944,"column_start":5,"column_end":8}},{"value":"/ The exact order may be useful for tracking external state, like an index.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424065,"byte_end":424142,"line_start":1945,"line_end":1945,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424147,"byte_end":424150,"line_start":1946,"line_end":1946,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424155,"byte_end":424162,"line_start":1947,"line_end":1947,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424167,"byte_end":424202,"line_start":1948,"line_end":1948,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424207,"byte_end":424210,"line_start":1949,"line_end":1949,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424215,"byte_end":424249,"line_start":1950,"line_end":1950,"column_start":5,"column_end":39}},{"value":"/ buf.extend(1..6);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424254,"byte_end":424275,"line_start":1951,"line_end":1951,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424280,"byte_end":424283,"line_start":1952,"line_end":1952,"column_start":5,"column_end":8}},{"value":"/ let keep = [false, true, true, false, true];","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424288,"byte_end":424336,"line_start":1953,"line_end":1953,"column_start":5,"column_end":53}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424341,"byte_end":424359,"line_start":1954,"line_end":1954,"column_start":5,"column_end":23}},{"value":"/ buf.retain(|_| (keep[i], i += 1).0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424364,"byte_end":424404,"line_start":1955,"line_end":1955,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(buf, [2, 3, 5]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424409,"byte_end":424440,"line_start":1956,"line_end":1956,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424445,"byte_end":424452,"line_start":1957,"line_end":1957,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_deque_retain\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":424457,"byte_end":424513,"line_start":1958,"line_end":1958,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426121,"byte_end":426132,"line_start":2016,"line_end":2016,"column_start":12,"column_end":23},"name":"resize_with","qualname":"<VecDeque<T>>::resize_with","value":"fn (&mut self, new_len: usize, generator: impl FnMut() -> T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,\n either by removing excess elements from the back or by appending\n elements generated by calling `generator` to the back.","sig":null,"attributes":[{"value":"/ Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425246,"byte_end":425321,"line_start":1990,"line_end":1990,"column_start":5,"column_end":80}},{"value":"/ either by removing excess elements from the back or by appending","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425326,"byte_end":425394,"line_start":1991,"line_end":1991,"column_start":5,"column_end":73}},{"value":"/ elements generated by calling `generator` to the back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425399,"byte_end":425457,"line_start":1992,"line_end":1992,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425462,"byte_end":425465,"line_start":1993,"line_end":1993,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425470,"byte_end":425484,"line_start":1994,"line_end":1994,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425489,"byte_end":425492,"line_start":1995,"line_end":1995,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425497,"byte_end":425504,"line_start":1996,"line_end":1996,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425509,"byte_end":425544,"line_start":1997,"line_end":1997,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425549,"byte_end":425552,"line_start":1998,"line_end":1998,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425557,"byte_end":425591,"line_start":1999,"line_end":1999,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425596,"byte_end":425617,"line_start":2000,"line_end":2000,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425622,"byte_end":425644,"line_start":2001,"line_end":2001,"column_start":5,"column_end":27}},{"value":"/ buf.push_back(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425649,"byte_end":425671,"line_start":2002,"line_end":2002,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 15]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425676,"byte_end":425709,"line_start":2003,"line_end":2003,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425714,"byte_end":425717,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/ buf.resize_with(5, Default::default);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425722,"byte_end":425763,"line_start":2005,"line_end":2005,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(buf, [5, 10, 15, 0, 0]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425768,"byte_end":425807,"line_start":2006,"line_end":2006,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425812,"byte_end":425815,"line_start":2007,"line_end":2007,"column_start":5,"column_end":8}},{"value":"/ buf.resize_with(2, || unreachable!());","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425820,"byte_end":425862,"line_start":2008,"line_end":2008,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(buf, [5, 10]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425867,"byte_end":425896,"line_start":2009,"line_end":2009,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425901,"byte_end":425904,"line_start":2010,"line_end":2010,"column_start":5,"column_end":8}},{"value":"/ let mut state = 100;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425909,"byte_end":425933,"line_start":2011,"line_end":2011,"column_start":5,"column_end":29}},{"value":"/ buf.resize_with(5, || { state += 1; state });","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425938,"byte_end":425987,"line_start":2012,"line_end":2012,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(buf, [5, 10, 101, 102, 103]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":425992,"byte_end":426036,"line_start":2013,"line_end":2013,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426041,"byte_end":426048,"line_start":2014,"line_end":2014,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_resize_with\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426053,"byte_end":426109,"line_start":2015,"line_end":2015,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2344},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427410,"byte_end":427421,"line_start":2059,"line_end":2059,"column_start":12,"column_end":23},"name":"rotate_left","qualname":"<VecDeque<T>>::rotate_left","value":"fn (&mut self, mid: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotates the double-ended queue `mid` places to the left.","sig":null,"attributes":[{"value":"/ Rotates the double-ended queue `mid` places to the left.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426392,"byte_end":426452,"line_start":2026,"line_end":2026,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426457,"byte_end":426460,"line_start":2027,"line_end":2027,"column_start":5,"column_end":8}},{"value":"/ Equivalently,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426465,"byte_end":426482,"line_start":2028,"line_end":2028,"column_start":5,"column_end":22}},{"value":"/ - Rotates item `mid` into the first position.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426487,"byte_end":426536,"line_start":2029,"line_end":2029,"column_start":5,"column_end":54}},{"value":"/ - Pops the first `mid` items and pushes them to the end.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426541,"byte_end":426601,"line_start":2030,"line_end":2030,"column_start":5,"column_end":65}},{"value":"/ - Rotates `len() - mid` places to the right.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426606,"byte_end":426654,"line_start":2031,"line_end":2031,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426659,"byte_end":426662,"line_start":2032,"line_end":2032,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426667,"byte_end":426679,"line_start":2033,"line_end":2033,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426684,"byte_end":426687,"line_start":2034,"line_end":2034,"column_start":5,"column_end":8}},{"value":"/ If `mid` is greater than `len()`. Note that `mid == len()`","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426692,"byte_end":426754,"line_start":2035,"line_end":2035,"column_start":5,"column_end":67}},{"value":"/ does _not_ panic and is a no-op rotation.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426759,"byte_end":426804,"line_start":2036,"line_end":2036,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426809,"byte_end":426812,"line_start":2037,"line_end":2037,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426817,"byte_end":426833,"line_start":2038,"line_end":2038,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426838,"byte_end":426841,"line_start":2039,"line_end":2039,"column_start":5,"column_end":8}},{"value":"/ Takes `O(min(mid, len() - mid))` time and no extra space.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426846,"byte_end":426907,"line_start":2040,"line_end":2040,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426912,"byte_end":426915,"line_start":2041,"line_end":2041,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426920,"byte_end":426934,"line_start":2042,"line_end":2042,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426939,"byte_end":426942,"line_start":2043,"line_end":2043,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426947,"byte_end":426954,"line_start":2044,"line_end":2044,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426959,"byte_end":426994,"line_start":2045,"line_end":2045,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":426999,"byte_end":427002,"line_start":2046,"line_end":2046,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = (0..10).collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427007,"byte_end":427056,"line_start":2047,"line_end":2047,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427061,"byte_end":427064,"line_start":2048,"line_end":2048,"column_start":5,"column_end":8}},{"value":"/ buf.rotate_left(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427069,"byte_end":427092,"line_start":2049,"line_end":2049,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(buf, [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427097,"byte_end":427149,"line_start":2050,"line_end":2050,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427154,"byte_end":427157,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ for i in 1..10 {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427162,"byte_end":427182,"line_start":2052,"line_end":2052,"column_start":5,"column_end":25}},{"value":"/     assert_eq!(i * 3 % 10, buf[0]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427187,"byte_end":427226,"line_start":2053,"line_end":2053,"column_start":5,"column_end":44}},{"value":"/     buf.rotate_left(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427231,"byte_end":427258,"line_start":2054,"line_end":2054,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427263,"byte_end":427268,"line_start":2055,"line_end":2055,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427273,"byte_end":427325,"line_start":2056,"line_end":2056,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427330,"byte_end":427337,"line_start":2057,"line_end":2057,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427342,"byte_end":427398,"line_start":2058,"line_end":2058,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428683,"byte_end":428695,"line_start":2102,"line_end":2102,"column_start":12,"column_end":24},"name":"rotate_right","qualname":"<VecDeque<T>>::rotate_right","value":"fn (&mut self, k: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotates the double-ended queue `k` places to the right.","sig":null,"attributes":[{"value":"/ Rotates the double-ended queue `k` places to the right.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427678,"byte_end":427737,"line_start":2069,"line_end":2069,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427742,"byte_end":427745,"line_start":2070,"line_end":2070,"column_start":5,"column_end":8}},{"value":"/ Equivalently,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427750,"byte_end":427767,"line_start":2071,"line_end":2071,"column_start":5,"column_end":22}},{"value":"/ - Rotates the first item into position `k`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427772,"byte_end":427819,"line_start":2072,"line_end":2072,"column_start":5,"column_end":52}},{"value":"/ - Pops the last `k` items and pushes them to the front.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427824,"byte_end":427883,"line_start":2073,"line_end":2073,"column_start":5,"column_end":64}},{"value":"/ - Rotates `len() - k` places to the left.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427888,"byte_end":427933,"line_start":2074,"line_end":2074,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427938,"byte_end":427941,"line_start":2075,"line_end":2075,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427946,"byte_end":427958,"line_start":2076,"line_end":2076,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427963,"byte_end":427966,"line_start":2077,"line_end":2077,"column_start":5,"column_end":8}},{"value":"/ If `k` is greater than `len()`. Note that `k == len()`","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":427971,"byte_end":428029,"line_start":2078,"line_end":2078,"column_start":5,"column_end":63}},{"value":"/ does _not_ panic and is a no-op rotation.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428034,"byte_end":428079,"line_start":2079,"line_end":2079,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428084,"byte_end":428087,"line_start":2080,"line_end":2080,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428092,"byte_end":428108,"line_start":2081,"line_end":2081,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428113,"byte_end":428116,"line_start":2082,"line_end":2082,"column_start":5,"column_end":8}},{"value":"/ Takes `O(min(k, len() - k))` time and no extra space.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428121,"byte_end":428178,"line_start":2083,"line_end":2083,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428183,"byte_end":428186,"line_start":2084,"line_end":2084,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428191,"byte_end":428205,"line_start":2085,"line_end":2085,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428210,"byte_end":428213,"line_start":2086,"line_end":2086,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428218,"byte_end":428225,"line_start":2087,"line_end":2087,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428230,"byte_end":428265,"line_start":2088,"line_end":2088,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428270,"byte_end":428273,"line_start":2089,"line_end":2089,"column_start":5,"column_end":8}},{"value":"/ let mut buf: VecDeque<_> = (0..10).collect();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428278,"byte_end":428327,"line_start":2090,"line_end":2090,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428332,"byte_end":428335,"line_start":2091,"line_end":2091,"column_start":5,"column_end":8}},{"value":"/ buf.rotate_right(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428340,"byte_end":428364,"line_start":2092,"line_end":2092,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(buf, [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428369,"byte_end":428421,"line_start":2093,"line_end":2093,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428426,"byte_end":428429,"line_start":2094,"line_end":2094,"column_start":5,"column_end":8}},{"value":"/ for i in 1..10 {","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428434,"byte_end":428454,"line_start":2095,"line_end":2095,"column_start":5,"column_end":25}},{"value":"/     assert_eq!(0, buf[i * 3 % 10]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428459,"byte_end":428498,"line_start":2096,"line_end":2096,"column_start":5,"column_end":44}},{"value":"/     buf.rotate_right(3);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428503,"byte_end":428531,"line_start":2097,"line_end":2097,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428536,"byte_end":428541,"line_start":2098,"line_end":2098,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428546,"byte_end":428598,"line_start":2099,"line_end":2099,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428603,"byte_end":428610,"line_start":2100,"line_end":2100,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":428615,"byte_end":428671,"line_start":2101,"line_end":2101,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2350},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430591,"byte_end":430597,"line_start":2158,"line_end":2158,"column_start":12,"column_end":18},"name":"resize","qualname":"<VecDeque<T>>::resize","value":"fn (&mut self, new_len: usize, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n either by removing excess elements from the back or by appending clones of `value`\n to the back.","sig":null,"attributes":[{"value":"/ Modifies the `VecDeque` in-place so that `len()` is equal to new_len,","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429923,"byte_end":429996,"line_start":2136,"line_end":2136,"column_start":5,"column_end":78}},{"value":"/ either by removing excess elements from the back or by appending clones of `value`","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430001,"byte_end":430087,"line_start":2137,"line_end":2137,"column_start":5,"column_end":91}},{"value":"/ to the back.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430092,"byte_end":430108,"line_start":2138,"line_end":2138,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430113,"byte_end":430116,"line_start":2139,"line_end":2139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430121,"byte_end":430135,"line_start":2140,"line_end":2140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430140,"byte_end":430143,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430148,"byte_end":430155,"line_start":2142,"line_end":2142,"column_start":5,"column_end":12}},{"value":"/ use std::collections::VecDeque;","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430160,"byte_end":430195,"line_start":2143,"line_end":2143,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430200,"byte_end":430203,"line_start":2144,"line_end":2144,"column_start":5,"column_end":8}},{"value":"/ let mut buf = VecDeque::new();","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430208,"byte_end":430242,"line_start":2145,"line_end":2145,"column_start":5,"column_end":39}},{"value":"/ buf.push_back(5);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430247,"byte_end":430268,"line_start":2146,"line_end":2146,"column_start":5,"column_end":26}},{"value":"/ buf.push_back(10);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430273,"byte_end":430295,"line_start":2147,"line_end":2147,"column_start":5,"column_end":27}},{"value":"/ buf.push_back(15);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430300,"byte_end":430322,"line_start":2148,"line_end":2148,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 15]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430327,"byte_end":430360,"line_start":2149,"line_end":2149,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430365,"byte_end":430368,"line_start":2150,"line_end":2150,"column_start":5,"column_end":8}},{"value":"/ buf.resize(2, 0);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430373,"byte_end":430394,"line_start":2151,"line_end":2151,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(buf, [5, 10]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430399,"byte_end":430428,"line_start":2152,"line_end":2152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430433,"byte_end":430436,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ buf.resize(5, 20);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430441,"byte_end":430463,"line_start":2154,"line_end":2154,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(buf, [5, 10, 20, 20, 20]);","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430468,"byte_end":430509,"line_start":2155,"line_end":2155,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430514,"byte_end":430521,"line_start":2156,"line_end":2156,"column_start":5,"column_end":12}},{"value":"stable(feature = \"deque_extras\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":430526,"byte_end":430579,"line_start":2157,"line_end":2157,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":431047,"byte_end":431052,"line_start":2173,"line_end":2173,"column_start":8,"column_end":13},"name":"slice","qualname":"::collections::vec_deque::RingSlices::slice","value":"fn (self, from: usize, to: usize) -> Self","parent":{"krate":0,"index":2353},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":431099,"byte_end":431107,"line_start":2174,"line_end":2174,"column_start":8,"column_end":16},"name":"split_at","qualname":"::collections::vec_deque::RingSlices::split_at","value":"fn (self, i: usize) -> (Self, Self)","parent":{"krate":0,"index":2353},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":431149,"byte_end":431160,"line_start":2176,"line_end":2176,"column_start":8,"column_end":19},"name":"ring_slices","qualname":"::collections::vec_deque::RingSlices::ring_slices","value":"fn (buf: Self, head: usize, tail: usize) -> (Self, Self)","parent":{"krate":0,"index":2353},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2366},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432467,"byte_end":432471,"line_start":2222,"line_end":2222,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2371}],"decl_id":null,"docs":" An iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ An iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432160,"byte_end":432210,"line_start":2214,"line_end":2214,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432211,"byte_end":432214,"line_start":2215,"line_end":2215,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`VecDeque`]. See its","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432215,"byte_end":432291,"line_start":2216,"line_end":2216,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432292,"byte_end":432319,"line_start":2217,"line_end":2217,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432320,"byte_end":432323,"line_start":2218,"line_end":2218,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.VecDeque.html#method.iter","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432324,"byte_end":432370,"line_start":2219,"line_end":2219,"column_start":1,"column_end":47}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432371,"byte_end":432409,"line_start":2220,"line_end":2220,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432410,"byte_end":432455,"line_start":2221,"line_end":2221,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2409},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437459,"byte_end":437466,"line_start":2377,"line_end":2377,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414}],"decl_id":null,"docs":" A mutable iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437133,"byte_end":437190,"line_start":2369,"line_end":2369,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437191,"byte_end":437194,"line_start":2370,"line_end":2370,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`VecDeque`]. See its","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437195,"byte_end":437275,"line_start":2371,"line_end":2371,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437276,"byte_end":437303,"line_start":2372,"line_end":2372,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437304,"byte_end":437307,"line_start":2373,"line_end":2373,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.VecDeque.html#method.iter_mut","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437308,"byte_end":437362,"line_start":2374,"line_end":2374,"column_start":1,"column_end":55}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437363,"byte_end":437401,"line_start":2375,"line_end":2375,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437402,"byte_end":437447,"line_start":2376,"line_end":2376,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4484},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440644,"byte_end":440652,"line_start":2484,"line_end":2484,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4486}],"decl_id":null,"docs":" An owning iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ An owning iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440259,"byte_end":440316,"line_start":2475,"line_end":2475,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440317,"byte_end":440320,"line_start":2476,"line_end":2476,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`VecDeque`]","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440321,"byte_end":440393,"line_start":2477,"line_end":2477,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440394,"byte_end":440469,"line_start":2478,"line_end":2478,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440470,"byte_end":440473,"line_start":2479,"line_end":2479,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.VecDeque.html#method.into_iter","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440474,"byte_end":440530,"line_start":2480,"line_end":2480,"column_start":1,"column_end":57}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440531,"byte_end":440569,"line_start":2481,"line_end":2481,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440587,"byte_end":440632,"line_start":2483,"line_end":2483,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2457},"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442010,"byte_end":442015,"line_start":2537,"line_end":2537,"column_start":12,"column_end":17},"name":"Drain","qualname":"::collections::vec_deque::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463}],"decl_id":null,"docs":" A draining iterator over the elements of a `VecDeque`.","sig":null,"attributes":[{"value":"/ A draining iterator over the elements of a `VecDeque`.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441692,"byte_end":441750,"line_start":2529,"line_end":2529,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441751,"byte_end":441754,"line_start":2530,"line_end":2530,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`VecDeque`]. See its","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441755,"byte_end":441832,"line_start":2531,"line_end":2531,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441833,"byte_end":441860,"line_start":2532,"line_end":2532,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441861,"byte_end":441864,"line_start":2533,"line_end":2533,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.VecDeque.html#method.drain","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441865,"byte_end":441913,"line_start":2534,"line_end":2534,"column_start":1,"column_end":49}},{"value":"/ [`VecDeque`]: struct.VecDeque.html","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441914,"byte_end":441952,"line_start":2535,"line_end":2535,"column_start":1,"column_end":39}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441953,"byte_end":441998,"line_start":2536,"line_end":2536,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2550},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65588,"byte_end":65597,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"btree_map","qualname":"::collections::btree_map","value":"src/liballoc/collections/mod.rs","parent":null,"children":[{"krate":0,"index":2551}],"decl_id":null,"docs":" A map based on a B-Tree.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65534,"byte_end":65579,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"! A map based on a B-Tree.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65604,"byte_end":65632,"line_start":12,"line_end":12,"column_start":5,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":2552},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65774,"byte_end":65783,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"name":"btree_set","qualname":"::collections::btree_set","value":"src/liballoc/collections/mod.rs","parent":null,"children":[{"krate":0,"index":2553}],"decl_id":null,"docs":" A set based on a B-Tree.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65720,"byte_end":65765,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"! A set based on a B-Tree.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65790,"byte_end":65818,"line_start":19,"line_end":19,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4527},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66730,"byte_end":66746,"line_start":52,"line_end":52,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::collections::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":4526},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66614,"byte_end":66687,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66692,"byte_end":66725,"line_start":51,"line_end":51,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":4529},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66800,"byte_end":66810,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::collections::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout, non_exhaustive }","parent":{"krate":0,"index":4526},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66753,"byte_end":66795,"line_start":54,"line_end":54,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":4526},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66592,"byte_end":66607,"line_start":49,"line_end":49,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::collections::TryReserveError","value":"TryReserveError::{CapacityOverflow, AllocError}","parent":null,"children":[{"krate":0,"index":4527},{"krate":0,"index":4529}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66424,"byte_end":66469,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":66509,"byte_end":66582,"line_start":48,"line_end":48,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2566},"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67677,"byte_end":67688,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"spec_extend","qualname":"::collections::SpecExtend::spec_extend","value":"fn (&mut self, iter: I) -> ()","parent":{"krate":0,"index":2564},"children":[],"decl_id":null,"docs":" Extends `self` with the contents of the given iterator.\n","sig":null,"attributes":[{"value":"/ Extends `self` with the contents of the given iterator.","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67610,"byte_end":67669,"line_start":83,"line_end":83,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":2567},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"src/liballoc/fmt.rs","parent":null,"children":[{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2575},{"krate":0,"index":2578},{"krate":0,"index":2581},{"krate":0,"index":2587},{"krate":0,"index":2591},{"krate":0,"index":2594},{"krate":0,"index":2598},{"krate":0,"index":2599}],"decl_id":null,"docs":" Utilities for formatting and printing `String`s.","sig":null,"attributes":[{"value":"! Utilities for formatting and printing `String`s.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456601,"byte_end":456653,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456654,"byte_end":456657,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains the runtime support for the [`format!`] syntax extension.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456658,"byte_end":456740,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"! This macro is implemented in the compiler to emit calls to this module in","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456741,"byte_end":456818,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"! order to format arguments at runtime into strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456819,"byte_end":456873,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456874,"byte_end":456877,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456878,"byte_end":456889,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456890,"byte_end":456893,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! The [`format!`] macro is intended to be familiar to those coming from C's","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456894,"byte_end":456971,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"! `printf`/`fprintf` functions or Python's `str.format` function.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":456972,"byte_end":457039,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457040,"byte_end":457043,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Some examples of the [`format!`] extension are:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457044,"byte_end":457095,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457096,"byte_end":457099,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457100,"byte_end":457107,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"! format!(\"Hello\");                 // => \"Hello\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457108,"byte_end":457159,"line_start":15,"line_end":15,"column_start":1,"column_end":52}},{"value":"! format!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457160,"byte_end":457219,"line_start":16,"line_end":16,"column_start":1,"column_end":60}},{"value":"! format!(\"The number is {}\", 1);   // => \"The number is 1\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457220,"byte_end":457281,"line_start":17,"line_end":17,"column_start":1,"column_end":62}},{"value":"! format!(\"{:?}\", (3, 4));          // => \"(3, 4)\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457282,"byte_end":457334,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"! format!(\"{value}\", value=4);      // => \"4\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457335,"byte_end":457382,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"! format!(\"{} {}\", 1, 2);           // => \"1 2\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457383,"byte_end":457432,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"! format!(\"{:04}\", 42);             // => \"0042\" with leading zeros","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457433,"byte_end":457502,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457503,"byte_end":457510,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457511,"byte_end":457514,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! From these, you can see that the first argument is a format string. It is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457515,"byte_end":457592,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"! required by the compiler for this to be a string literal; it cannot be a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457593,"byte_end":457669,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"! variable passed in (in order to perform validity checking). The compiler","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457670,"byte_end":457746,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"! will then parse the format string and determine if the list of arguments","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457747,"byte_end":457823,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"! provided is suitable to pass to this format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457824,"byte_end":457879,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457880,"byte_end":457883,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! To convert a single value to a string, use the [`to_string`] method. This","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457884,"byte_end":457961,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"! will use the [`Display`] formatting trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":457962,"byte_end":458008,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458009,"byte_end":458012,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Positional parameters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458013,"byte_end":458041,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458042,"byte_end":458045,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! Each formatting argument is allowed to specify which value argument it's","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458046,"byte_end":458122,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"! referencing, and if omitted it is assumed to be \"the next argument\". For","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458123,"byte_end":458199,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"! example, the format string `{} {} {}` would take three parameters, and they","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458200,"byte_end":458279,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"! would be formatted in the same order as they're given. The format string","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458280,"byte_end":458356,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"! `{2} {1} {0}`, however, would format arguments in reverse order.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458357,"byte_end":458425,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458426,"byte_end":458429,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! Things can get a little tricky once you start intermingling the two types of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458430,"byte_end":458510,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"! positional specifiers. The \"next argument\" specifier can be thought of as an","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458511,"byte_end":458591,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"! iterator over the argument. Each time a \"next argument\" specifier is seen,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458592,"byte_end":458670,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"! the iterator advances. This leads to behavior like this:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458671,"byte_end":458731,"line_start":44,"line_end":44,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458732,"byte_end":458735,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458736,"byte_end":458743,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"! format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458744,"byte_end":458795,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458796,"byte_end":458803,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458804,"byte_end":458807,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! The internal iterator over the argument has not been advanced by the time","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458808,"byte_end":458885,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"! the first `{}` is seen, so it prints the first argument. Then upon reaching","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458886,"byte_end":458965,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"! the second `{}`, the iterator has advanced forward to the second argument.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":458966,"byte_end":459044,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"! Essentially, parameters which explicitly name their argument do not affect","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459045,"byte_end":459123,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"! parameters which do not name an argument in terms of positional specifiers.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459124,"byte_end":459203,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459204,"byte_end":459207,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"! A format string is required to use all of its arguments, otherwise it is a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459208,"byte_end":459286,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"! compile-time error. You may refer to the same argument more than once in the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459287,"byte_end":459367,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"! format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459368,"byte_end":459386,"line_start":58,"line_end":58,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459387,"byte_end":459390,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! ## Named parameters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459391,"byte_end":459414,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459415,"byte_end":459418,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! Rust itself does not have a Python-like equivalent of named parameters to a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459419,"byte_end":459498,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"! function, but the [`format!`] macro is a syntax extension which allows it to","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459499,"byte_end":459579,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"! leverage named parameters. Named parameters are listed at the end of the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459580,"byte_end":459656,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"! argument list and have the syntax:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459657,"byte_end":459695,"line_start":65,"line_end":65,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459696,"byte_end":459699,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459700,"byte_end":459711,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"! identifier '=' expression","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459712,"byte_end":459741,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459742,"byte_end":459749,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459750,"byte_end":459753,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! For example, the following [`format!`] expressions all use named argument:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459754,"byte_end":459832,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459833,"byte_end":459836,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459837,"byte_end":459844,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"! format!(\"{argument}\", argument = \"test\");   // => \"test\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459845,"byte_end":459905,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"! format!(\"{name} {}\", 1, name = 2);          // => \"2 1\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459906,"byte_end":459965,"line_start":75,"line_end":75,"column_start":1,"column_end":60}},{"value":"! format!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":459966,"byte_end":460027,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460028,"byte_end":460035,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460036,"byte_end":460039,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! It is not valid to put positional parameters (those without names) after","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460040,"byte_end":460116,"line_start":79,"line_end":79,"column_start":1,"column_end":77}},{"value":"! arguments which have names. Like with positional parameters, it is not","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460117,"byte_end":460191,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"! valid to provide named parameters that are unused by the format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460192,"byte_end":460267,"line_start":81,"line_end":81,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460268,"byte_end":460271,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! # Formatting Parameters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460272,"byte_end":460299,"line_start":83,"line_end":83,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460300,"byte_end":460303,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"! Each argument being formatted can be transformed by a number of formatting","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460304,"byte_end":460382,"line_start":85,"line_end":85,"column_start":1,"column_end":79}},{"value":"! parameters (corresponding to `format_spec` in the syntax above). These","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460383,"byte_end":460457,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"! parameters affect the string representation of what's being formatted.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460458,"byte_end":460532,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460533,"byte_end":460536,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"! ## Width","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460537,"byte_end":460549,"line_start":89,"line_end":89,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460550,"byte_end":460553,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460554,"byte_end":460561,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"! // All of these print \"Hello x    !\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460562,"byte_end":460602,"line_start":92,"line_end":92,"column_start":1,"column_end":41}},{"value":"! println!(\"Hello {:5}!\", \"x\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460603,"byte_end":460636,"line_start":93,"line_end":93,"column_start":1,"column_end":34}},{"value":"! println!(\"Hello {:1$}!\", \"x\", 5);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460637,"byte_end":460674,"line_start":94,"line_end":94,"column_start":1,"column_end":38}},{"value":"! println!(\"Hello {1:0$}!\", 5, \"x\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460675,"byte_end":460713,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"! println!(\"Hello {:width$}!\", \"x\", width = 5);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460714,"byte_end":460763,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460764,"byte_end":460771,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460772,"byte_end":460775,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! This is a parameter for the \"minimum width\" that the format should take up.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460776,"byte_end":460855,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"! If the value's string does not fill up this many characters, then the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460856,"byte_end":460929,"line_start":100,"line_end":100,"column_start":1,"column_end":74}},{"value":"! padding specified by fill/alignment will be used to take up the required","span":{"file_name":"src/liballoc/fmt.rs","byte_start":460930,"byte_end":461006,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"! space (see below).","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461007,"byte_end":461029,"line_start":102,"line_end":102,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461030,"byte_end":461033,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"! The value for the width can also be provided as a [`usize`] in the list of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461034,"byte_end":461112,"line_start":104,"line_end":104,"column_start":1,"column_end":79}},{"value":"! parameters by adding a postfix `$`, indicating that the second argument is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461113,"byte_end":461191,"line_start":105,"line_end":105,"column_start":1,"column_end":79}},{"value":"! a [`usize`] specifying the width.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461192,"byte_end":461229,"line_start":106,"line_end":106,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461230,"byte_end":461233,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"! Referring to an argument with the dollar syntax does not affect the \"next","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461234,"byte_end":461311,"line_start":108,"line_end":108,"column_start":1,"column_end":78}},{"value":"! argument\" counter, so it's usually a good idea to refer to arguments by","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461312,"byte_end":461387,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"! position, or use named arguments.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461388,"byte_end":461425,"line_start":110,"line_end":110,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461426,"byte_end":461429,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"! ## Fill/Alignment","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461430,"byte_end":461451,"line_start":112,"line_end":112,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461452,"byte_end":461455,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461456,"byte_end":461463,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"Hello {:<5}!\", \"x\"),  \"Hello x    !\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461464,"byte_end":461526,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"! assert_eq!(format!(\"Hello {:-<5}!\", \"x\"), \"Hello x----!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461527,"byte_end":461589,"line_start":116,"line_end":116,"column_start":1,"column_end":63}},{"value":"! assert_eq!(format!(\"Hello {:^5}!\", \"x\"),  \"Hello   x  !\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461590,"byte_end":461652,"line_start":117,"line_end":117,"column_start":1,"column_end":63}},{"value":"! assert_eq!(format!(\"Hello {:>5}!\", \"x\"),  \"Hello     x!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461653,"byte_end":461715,"line_start":118,"line_end":118,"column_start":1,"column_end":63}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461716,"byte_end":461723,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461724,"byte_end":461727,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"! The optional fill character and alignment is provided normally in conjunction with the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461728,"byte_end":461818,"line_start":121,"line_end":121,"column_start":1,"column_end":91}},{"value":"! [`width`](#width) parameter. It must be defined before `width`, right after the `:`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461819,"byte_end":461907,"line_start":122,"line_end":122,"column_start":1,"column_end":89}},{"value":"! This indicates that if the value being formatted is smaller than","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461908,"byte_end":461976,"line_start":123,"line_end":123,"column_start":1,"column_end":69}},{"value":"! `width` some extra characters will be printed around it.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":461977,"byte_end":462037,"line_start":124,"line_end":124,"column_start":1,"column_end":61}},{"value":"! Filling comes in the following variants for different alignments:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462038,"byte_end":462107,"line_start":125,"line_end":125,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462108,"byte_end":462111,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"! * `[fill]<` - the argument is left-aligned in `width` columns","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462112,"byte_end":462177,"line_start":127,"line_end":127,"column_start":1,"column_end":66}},{"value":"! * `[fill]^` - the argument is center-aligned in `width` columns","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462178,"byte_end":462245,"line_start":128,"line_end":128,"column_start":1,"column_end":68}},{"value":"! * `[fill]>` - the argument is right-aligned in `width` columns","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462246,"byte_end":462312,"line_start":129,"line_end":129,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462313,"byte_end":462316,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"! The default [fill/alignment](#fillalignment) for non-numerics is a space and","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462317,"byte_end":462397,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"! left-aligned. The","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462398,"byte_end":462419,"line_start":132,"line_end":132,"column_start":1,"column_end":22}},{"value":"! defaults for numeric formatters is also a space but with right-alignment. If","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462420,"byte_end":462500,"line_start":133,"line_end":133,"column_start":1,"column_end":81}},{"value":"! the `0` flag (see below) is specified for numerics, then the implicit fill character is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462501,"byte_end":462592,"line_start":134,"line_end":134,"column_start":1,"column_end":92}},{"value":"! `0`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462593,"byte_end":462601,"line_start":135,"line_end":135,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462602,"byte_end":462605,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"! Note that alignment may not be implemented by some types. In particular, it","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462606,"byte_end":462685,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"! is not generally implemented for the `Debug` trait.  A good way to ensure","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462686,"byte_end":462763,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"! padding is applied is to format your input, then pad this resulting string","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462764,"byte_end":462842,"line_start":139,"line_end":139,"column_start":1,"column_end":79}},{"value":"! to obtain your output:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462843,"byte_end":462869,"line_start":140,"line_end":140,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462870,"byte_end":462873,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462874,"byte_end":462881,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"! println!(\"Hello {:^15}!\", format!(\"{:?}\", Some(\"hi\"))); // => \"Hello   Some(\"hi\")   !\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462882,"byte_end":462972,"line_start":143,"line_end":143,"column_start":1,"column_end":91}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462973,"byte_end":462980,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462981,"byte_end":462984,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! ## Sign/`#`/`0`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":462985,"byte_end":463004,"line_start":146,"line_end":146,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463005,"byte_end":463008,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463009,"byte_end":463016,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"Hello {:+}!\", 5), \"Hello +5!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463017,"byte_end":463072,"line_start":149,"line_end":149,"column_start":1,"column_end":56}},{"value":"! assert_eq!(format!(\"{:#x}!\", 27), \"0x1b!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463073,"byte_end":463120,"line_start":150,"line_end":150,"column_start":1,"column_end":48}},{"value":"! assert_eq!(format!(\"Hello {:05}!\", 5),  \"Hello 00005!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463121,"byte_end":463181,"line_start":151,"line_end":151,"column_start":1,"column_end":61}},{"value":"! assert_eq!(format!(\"Hello {:05}!\", -5), \"Hello -0005!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463182,"byte_end":463242,"line_start":152,"line_end":152,"column_start":1,"column_end":61}},{"value":"! assert_eq!(format!(\"{:#010x}!\", 27), \"0x0000001b!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463243,"byte_end":463299,"line_start":153,"line_end":153,"column_start":1,"column_end":57}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463300,"byte_end":463307,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463308,"byte_end":463311,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"! These are all flags altering the behavior of the formatter.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463312,"byte_end":463375,"line_start":156,"line_end":156,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463376,"byte_end":463379,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"! * `+` - This is intended for numeric types and indicates that the sign","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463380,"byte_end":463454,"line_start":158,"line_end":158,"column_start":1,"column_end":75}},{"value":"!         should always be printed. Positive signs are never printed by","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463455,"byte_end":463528,"line_start":159,"line_end":159,"column_start":1,"column_end":74}},{"value":"!         default, and the negative sign is only printed by default for the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463529,"byte_end":463606,"line_start":160,"line_end":160,"column_start":1,"column_end":78}},{"value":"!         `Signed` trait. This flag indicates that the correct sign (`+` or `-`)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463607,"byte_end":463689,"line_start":161,"line_end":161,"column_start":1,"column_end":83}},{"value":"!         should always be printed.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463690,"byte_end":463727,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"! * `-` - Currently not used","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463728,"byte_end":463758,"line_start":163,"line_end":163,"column_start":1,"column_end":31}},{"value":"! * `#` - This flag is indicates that the \"alternate\" form of printing should","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463759,"byte_end":463838,"line_start":164,"line_end":164,"column_start":1,"column_end":80}},{"value":"!         be used. The alternate forms are:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463839,"byte_end":463884,"line_start":165,"line_end":165,"column_start":1,"column_end":46}},{"value":"!     * `#?` - pretty-print the [`Debug`] formatting","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463885,"byte_end":463939,"line_start":166,"line_end":166,"column_start":1,"column_end":55}},{"value":"!     * `#x` - precedes the argument with a `0x`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463940,"byte_end":463990,"line_start":167,"line_end":167,"column_start":1,"column_end":51}},{"value":"!     * `#X` - precedes the argument with a `0x`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":463991,"byte_end":464041,"line_start":168,"line_end":168,"column_start":1,"column_end":51}},{"value":"!     * `#b` - precedes the argument with a `0b`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464042,"byte_end":464092,"line_start":169,"line_end":169,"column_start":1,"column_end":51}},{"value":"!     * `#o` - precedes the argument with a `0o`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464093,"byte_end":464143,"line_start":170,"line_end":170,"column_start":1,"column_end":51}},{"value":"! * `0` - This is used to indicate for integer formats that the padding to `width` should","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464144,"byte_end":464235,"line_start":171,"line_end":171,"column_start":1,"column_end":92}},{"value":"!         both be done with a `0` character as well as be sign-aware. A format","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464236,"byte_end":464316,"line_start":172,"line_end":172,"column_start":1,"column_end":81}},{"value":"!         like `{:08}` would yield `00000001` for the integer `1`, while the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464317,"byte_end":464395,"line_start":173,"line_end":173,"column_start":1,"column_end":79}},{"value":"!         same format would yield `-0000001` for the integer `-1`. Notice that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464396,"byte_end":464476,"line_start":174,"line_end":174,"column_start":1,"column_end":81}},{"value":"!         the negative version has one fewer zero than the positive version.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464477,"byte_end":464555,"line_start":175,"line_end":175,"column_start":1,"column_end":79}},{"value":"!         Note that padding zeroes are always placed after the sign (if any)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464556,"byte_end":464634,"line_start":176,"line_end":176,"column_start":1,"column_end":79}},{"value":"!         and before the digits. When used together with the `#` flag, a similar","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464635,"byte_end":464717,"line_start":177,"line_end":177,"column_start":1,"column_end":83}},{"value":"!         rule applies: padding zeroes are inserted after the prefix but before","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464718,"byte_end":464799,"line_start":178,"line_end":178,"column_start":1,"column_end":82}},{"value":"!         the digits. The prefix is included in the total width.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464800,"byte_end":464866,"line_start":179,"line_end":179,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464867,"byte_end":464870,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"! ## Precision","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464871,"byte_end":464887,"line_start":181,"line_end":181,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464888,"byte_end":464891,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"! For non-numeric types, this can be considered a \"maximum width\". If the resulting string is","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464892,"byte_end":464987,"line_start":183,"line_end":183,"column_start":1,"column_end":96}},{"value":"! longer than this width, then it is truncated down to this many characters and that truncated","span":{"file_name":"src/liballoc/fmt.rs","byte_start":464988,"byte_end":465084,"line_start":184,"line_end":184,"column_start":1,"column_end":97}},{"value":"! value is emitted with proper `fill`, `alignment` and `width` if those parameters are set.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465085,"byte_end":465178,"line_start":185,"line_end":185,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465179,"byte_end":465182,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"! For integral types, this is ignored.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465183,"byte_end":465223,"line_start":187,"line_end":187,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465224,"byte_end":465227,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"! For floating-point types, this indicates how many digits after the decimal point should be","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465228,"byte_end":465322,"line_start":189,"line_end":189,"column_start":1,"column_end":95}},{"value":"! printed.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465323,"byte_end":465335,"line_start":190,"line_end":190,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465336,"byte_end":465339,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"! There are three possible ways to specify the desired `precision`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465340,"byte_end":465409,"line_start":192,"line_end":192,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465410,"byte_end":465413,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"! 1. An integer `.N`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465414,"byte_end":465437,"line_start":194,"line_end":194,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465438,"byte_end":465441,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"!    the integer `N` itself is the precision.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465442,"byte_end":465489,"line_start":196,"line_end":196,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465490,"byte_end":465493,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"! 2. An integer or name followed by dollar sign `.N$`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465494,"byte_end":465550,"line_start":198,"line_end":198,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465551,"byte_end":465554,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"!    use format *argument* `N` (which must be a `usize`) as the precision.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465555,"byte_end":465631,"line_start":200,"line_end":200,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465632,"byte_end":465635,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"! 3. An asterisk `.*`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465636,"byte_end":465660,"line_start":202,"line_end":202,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465661,"byte_end":465664,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"!    `.*` means that this `{...}` is associated with *two* format inputs rather than one: the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465665,"byte_end":465760,"line_start":204,"line_end":204,"column_start":1,"column_end":96}},{"value":"!    first input holds the `usize` precision, and the second holds the value to print. Note that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465761,"byte_end":465859,"line_start":205,"line_end":205,"column_start":1,"column_end":99}},{"value":"!    in this case, if one uses the format string `{<arg>:<spec>.*}`, then the `<arg>` part refers","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465860,"byte_end":465959,"line_start":206,"line_end":206,"column_start":1,"column_end":100}},{"value":"!    to the *value* to print, and the `precision` must come in the input preceding `<arg>`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":465960,"byte_end":466053,"line_start":207,"line_end":207,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466054,"byte_end":466057,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"! For example, the following calls all print the same thing `Hello x is 0.01000`:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466058,"byte_end":466141,"line_start":209,"line_end":209,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466142,"byte_end":466145,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466146,"byte_end":466153,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"! // Hello {arg 0 (\"x\")} is {arg 1 (0.01) with precision specified inline (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466154,"byte_end":466234,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"! println!(\"Hello {0} is {1:.5}\", \"x\", 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466235,"byte_end":466282,"line_start":213,"line_end":213,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466283,"byte_end":466286,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! // Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision specified in arg 0 (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466287,"byte_end":466369,"line_start":215,"line_end":215,"column_start":1,"column_end":83}},{"value":"! println!(\"Hello {1} is {2:.0$}\", 5, \"x\", 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466370,"byte_end":466421,"line_start":216,"line_end":216,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466422,"byte_end":466425,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! // Hello {arg 0 (\"x\")} is {arg 2 (0.01) with precision specified in arg 1 (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466426,"byte_end":466508,"line_start":218,"line_end":218,"column_start":1,"column_end":83}},{"value":"! println!(\"Hello {0} is {2:.1$}\", \"x\", 5, 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466509,"byte_end":466560,"line_start":219,"line_end":219,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466561,"byte_end":466564,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"! // Hello {next arg (\"x\")} is {second of next two args (0.01) with precision","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466565,"byte_end":466644,"line_start":221,"line_end":221,"column_start":1,"column_end":80}},{"value":"! //                          specified in first of next two args (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466645,"byte_end":466717,"line_start":222,"line_end":222,"column_start":1,"column_end":73}},{"value":"! println!(\"Hello {} is {:.*}\",    \"x\", 5, 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466718,"byte_end":466769,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466770,"byte_end":466773,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"! // Hello {next arg (\"x\")} is {arg 2 (0.01) with precision","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466774,"byte_end":466835,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"! //                          specified in its predecessor (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466836,"byte_end":466901,"line_start":226,"line_end":226,"column_start":1,"column_end":66}},{"value":"! println!(\"Hello {} is {2:.*}\",   \"x\", 5, 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466902,"byte_end":466953,"line_start":227,"line_end":227,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466954,"byte_end":466957,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"! // Hello {next arg (\"x\")} is {arg \"number\" (0.01) with precision specified","span":{"file_name":"src/liballoc/fmt.rs","byte_start":466958,"byte_end":467036,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"! //                          in arg \"prec\" (5)}","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467037,"byte_end":467087,"line_start":230,"line_end":230,"column_start":1,"column_end":51}},{"value":"! println!(\"Hello {} is {number:.prec$}\", \"x\", prec = 5, number = 0.01);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467088,"byte_end":467162,"line_start":231,"line_end":231,"column_start":1,"column_end":75}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467163,"byte_end":467170,"line_start":232,"line_end":232,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467171,"byte_end":467174,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"! While these:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467175,"byte_end":467191,"line_start":234,"line_end":234,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467192,"byte_end":467195,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467196,"byte_end":467203,"line_start":236,"line_end":236,"column_start":1,"column_end":8}},{"value":"! println!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467204,"byte_end":467286,"line_start":237,"line_end":237,"column_start":1,"column_end":83}},{"value":"! println!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467287,"byte_end":467364,"line_start":238,"line_end":238,"column_start":1,"column_end":78}},{"value":"! println!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467365,"byte_end":467458,"line_start":239,"line_end":239,"column_start":1,"column_end":94}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467459,"byte_end":467466,"line_start":240,"line_end":240,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467467,"byte_end":467470,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"! print two significantly different things:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467471,"byte_end":467516,"line_start":242,"line_end":242,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467517,"byte_end":467520,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467521,"byte_end":467532,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"! Hello, `1234.560` has 3 fractional digits","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467533,"byte_end":467578,"line_start":245,"line_end":245,"column_start":1,"column_end":46}},{"value":"! Hello, `123` has 3 characters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467579,"byte_end":467612,"line_start":246,"line_end":246,"column_start":1,"column_end":34}},{"value":"! Hello, `     123` has 3 right-aligned characters","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467613,"byte_end":467665,"line_start":247,"line_end":247,"column_start":1,"column_end":53}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467666,"byte_end":467673,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467674,"byte_end":467677,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"! # Escaping","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467678,"byte_end":467692,"line_start":250,"line_end":250,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467693,"byte_end":467696,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"! The literal characters `{` and `}` may be included in a string by preceding","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467697,"byte_end":467776,"line_start":252,"line_end":252,"column_start":1,"column_end":80}},{"value":"! them with the same character. For example, the `{` character is escaped with","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467777,"byte_end":467857,"line_start":253,"line_end":253,"column_start":1,"column_end":81}},{"value":"! `{{` and the `}` character is escaped with `}}`.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467858,"byte_end":467910,"line_start":254,"line_end":254,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467911,"byte_end":467914,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467915,"byte_end":467922,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"Hello {{}}\"), \"Hello {}\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467923,"byte_end":467973,"line_start":257,"line_end":257,"column_start":1,"column_end":51}},{"value":"! assert_eq!(format!(\"{{ Hello\"), \"{ Hello\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":467974,"byte_end":468021,"line_start":258,"line_end":258,"column_start":1,"column_end":48}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468022,"byte_end":468029,"line_start":259,"line_end":259,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468030,"byte_end":468033,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"! # Syntax","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468034,"byte_end":468046,"line_start":261,"line_end":261,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468047,"byte_end":468050,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"! To summarize, here you can find the full grammar of format strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468051,"byte_end":468122,"line_start":263,"line_end":263,"column_start":1,"column_end":72}},{"value":"! The syntax for the formatting language used is drawn from other languages,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468123,"byte_end":468201,"line_start":264,"line_end":264,"column_start":1,"column_end":79}},{"value":"! so it should not be too alien. Arguments are formatted with Python-like","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468202,"byte_end":468277,"line_start":265,"line_end":265,"column_start":1,"column_end":76}},{"value":"! syntax, meaning that arguments are surrounded by `{}` instead of the C-like","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468278,"byte_end":468357,"line_start":266,"line_end":266,"column_start":1,"column_end":80}},{"value":"! `%`. The actual grammar for the formatting syntax is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468358,"byte_end":468415,"line_start":267,"line_end":267,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468416,"byte_end":468419,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468420,"byte_end":468431,"line_start":269,"line_end":269,"column_start":1,"column_end":12}},{"value":"! format_string := <text> [ maybe-format <text> ] *","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468432,"byte_end":468485,"line_start":270,"line_end":270,"column_start":1,"column_end":54}},{"value":"! maybe-format := '{' '{' | '}' '}' | <format>","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468486,"byte_end":468534,"line_start":271,"line_end":271,"column_start":1,"column_end":49}},{"value":"! format := '{' [ argument ] [ ':' format_spec ] '}'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468535,"byte_end":468589,"line_start":272,"line_end":272,"column_start":1,"column_end":55}},{"value":"! argument := integer | identifier","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468590,"byte_end":468626,"line_start":273,"line_end":273,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468627,"byte_end":468630,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"! format_spec := [[fill]align][sign]['#']['0'][width]['.' precision][type]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468631,"byte_end":468707,"line_start":275,"line_end":275,"column_start":1,"column_end":77}},{"value":"! fill := character","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468708,"byte_end":468729,"line_start":276,"line_end":276,"column_start":1,"column_end":22}},{"value":"! align := '<' | '^' | '>'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468730,"byte_end":468758,"line_start":277,"line_end":277,"column_start":1,"column_end":29}},{"value":"! sign := '+' | '-'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468759,"byte_end":468780,"line_start":278,"line_end":278,"column_start":1,"column_end":22}},{"value":"! width := count","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468781,"byte_end":468799,"line_start":279,"line_end":279,"column_start":1,"column_end":19}},{"value":"! precision := count | '*'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468800,"byte_end":468828,"line_start":280,"line_end":280,"column_start":1,"column_end":29}},{"value":"! type := identifier | '?' | ''","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468829,"byte_end":468862,"line_start":281,"line_end":281,"column_start":1,"column_end":34}},{"value":"! count := parameter | integer","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468863,"byte_end":468895,"line_start":282,"line_end":282,"column_start":1,"column_end":33}},{"value":"! parameter := argument '$'","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468896,"byte_end":468925,"line_start":283,"line_end":283,"column_start":1,"column_end":30}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468926,"byte_end":468933,"line_start":284,"line_end":284,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468934,"byte_end":468937,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"! # Formatting traits","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468938,"byte_end":468961,"line_start":286,"line_end":286,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468962,"byte_end":468965,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"! When requesting that an argument be formatted with a particular type, you","span":{"file_name":"src/liballoc/fmt.rs","byte_start":468966,"byte_end":469043,"line_start":288,"line_end":288,"column_start":1,"column_end":78}},{"value":"! are actually requesting that an argument ascribes to a particular trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469044,"byte_end":469120,"line_start":289,"line_end":289,"column_start":1,"column_end":77}},{"value":"! This allows multiple actual types to be formatted via `{:x}` (like [`i8`] as","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469121,"byte_end":469201,"line_start":290,"line_end":290,"column_start":1,"column_end":81}},{"value":"! well as [`isize`]). The current mapping of types to traits is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469202,"byte_end":469268,"line_start":291,"line_end":291,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469269,"byte_end":469272,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"! * *nothing* ⇒ [`Display`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469273,"byte_end":469304,"line_start":293,"line_end":293,"column_start":1,"column_end":30}},{"value":"! * `?` ⇒ [`Debug`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469305,"byte_end":469328,"line_start":294,"line_end":294,"column_start":1,"column_end":22}},{"value":"! * `x?` ⇒ [`Debug`] with lower-case hexadecimal integers","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469329,"byte_end":469390,"line_start":295,"line_end":295,"column_start":1,"column_end":60}},{"value":"! * `X?` ⇒ [`Debug`] with upper-case hexadecimal integers","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469391,"byte_end":469452,"line_start":296,"line_end":296,"column_start":1,"column_end":60}},{"value":"! * `o` ⇒ [`Octal`](trait.Octal.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469453,"byte_end":469494,"line_start":297,"line_end":297,"column_start":1,"column_end":40}},{"value":"! * `x` ⇒ [`LowerHex`](trait.LowerHex.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469495,"byte_end":469542,"line_start":298,"line_end":298,"column_start":1,"column_end":46}},{"value":"! * `X` ⇒ [`UpperHex`](trait.UpperHex.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469543,"byte_end":469590,"line_start":299,"line_end":299,"column_start":1,"column_end":46}},{"value":"! * `p` ⇒ [`Pointer`](trait.Pointer.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469591,"byte_end":469636,"line_start":300,"line_end":300,"column_start":1,"column_end":44}},{"value":"! * `b` ⇒ [`Binary`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469637,"byte_end":469661,"line_start":301,"line_end":301,"column_start":1,"column_end":23}},{"value":"! * `e` ⇒ [`LowerExp`](trait.LowerExp.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469662,"byte_end":469709,"line_start":302,"line_end":302,"column_start":1,"column_end":46}},{"value":"! * `E` ⇒ [`UpperExp`](trait.UpperExp.html)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469710,"byte_end":469757,"line_start":303,"line_end":303,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469758,"byte_end":469761,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"! What this means is that any type of argument which implements the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469762,"byte_end":469831,"line_start":305,"line_end":305,"column_start":1,"column_end":70}},{"value":"! [`fmt::Binary`][`Binary`] trait can then be formatted with `{:b}`. Implementations","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469832,"byte_end":469918,"line_start":306,"line_end":306,"column_start":1,"column_end":87}},{"value":"! are provided for these traits for a number of primitive types by the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469919,"byte_end":469991,"line_start":307,"line_end":307,"column_start":1,"column_end":73}},{"value":"! standard library as well. If no format is specified (as in `{}` or `{:6}`),","span":{"file_name":"src/liballoc/fmt.rs","byte_start":469992,"byte_end":470071,"line_start":308,"line_end":308,"column_start":1,"column_end":80}},{"value":"! then the format trait used is the [`Display`] trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470072,"byte_end":470128,"line_start":309,"line_end":309,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470129,"byte_end":470132,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"! When implementing a format trait for your own type, you will have to","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470133,"byte_end":470205,"line_start":311,"line_end":311,"column_start":1,"column_end":73}},{"value":"! implement a method of the signature:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470206,"byte_end":470246,"line_start":312,"line_end":312,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470247,"byte_end":470250,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470251,"byte_end":470258,"line_start":314,"line_end":314,"column_start":1,"column_end":8}},{"value":"! # #![allow(dead_code)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470259,"byte_end":470285,"line_start":315,"line_end":315,"column_start":1,"column_end":27}},{"value":"! # use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470286,"byte_end":470305,"line_start":316,"line_end":316,"column_start":1,"column_end":20}},{"value":"! # struct Foo; // our custom type","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470306,"byte_end":470342,"line_start":317,"line_end":317,"column_start":1,"column_end":37}},{"value":"! # impl fmt::Display for Foo {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470343,"byte_end":470376,"line_start":318,"line_end":318,"column_start":1,"column_end":34}},{"value":"! fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470377,"byte_end":470435,"line_start":319,"line_end":319,"column_start":1,"column_end":59}},{"value":"! # write!(f, \"testing, testing\")","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470436,"byte_end":470471,"line_start":320,"line_end":320,"column_start":1,"column_end":36}},{"value":"! # } }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470472,"byte_end":470481,"line_start":321,"line_end":321,"column_start":1,"column_end":10}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470482,"byte_end":470489,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470490,"byte_end":470493,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"! Your type will be passed as `self` by-reference, and then the function","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470494,"byte_end":470568,"line_start":324,"line_end":324,"column_start":1,"column_end":75}},{"value":"! should emit output into the `f.buf` stream. It is up to each format trait","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470569,"byte_end":470646,"line_start":325,"line_end":325,"column_start":1,"column_end":78}},{"value":"! implementation to correctly adhere to the requested formatting parameters.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470647,"byte_end":470725,"line_start":326,"line_end":326,"column_start":1,"column_end":79}},{"value":"! The values of these parameters will be listed in the fields of the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470726,"byte_end":470796,"line_start":327,"line_end":327,"column_start":1,"column_end":71}},{"value":"! [`Formatter`] struct. In order to help with this, the [`Formatter`] struct also","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470797,"byte_end":470880,"line_start":328,"line_end":328,"column_start":1,"column_end":84}},{"value":"! provides some helper methods.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470881,"byte_end":470914,"line_start":329,"line_end":329,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470915,"byte_end":470918,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"! Additionally, the return value of this function is [`fmt::Result`] which is a","span":{"file_name":"src/liballoc/fmt.rs","byte_start":470919,"byte_end":471000,"line_start":331,"line_end":331,"column_start":1,"column_end":82}},{"value":"! type alias of [`Result`]`<(), `[`std::fmt::Error`]`>`. Formatting implementations","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471001,"byte_end":471086,"line_start":332,"line_end":332,"column_start":1,"column_end":86}},{"value":"! should ensure that they propagate errors from the [`Formatter`] (e.g., when","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471087,"byte_end":471166,"line_start":333,"line_end":333,"column_start":1,"column_end":80}},{"value":"! calling [`write!`]). However, they should never return errors spuriously. That","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471167,"byte_end":471249,"line_start":334,"line_end":334,"column_start":1,"column_end":83}},{"value":"! is, a formatting implementation must and may only return an error if the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471250,"byte_end":471326,"line_start":335,"line_end":335,"column_start":1,"column_end":77}},{"value":"! passed-in [`Formatter`] returns an error. This is because, contrary to what","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471327,"byte_end":471406,"line_start":336,"line_end":336,"column_start":1,"column_end":80}},{"value":"! the function signature might suggest, string formatting is an infallible","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471407,"byte_end":471483,"line_start":337,"line_end":337,"column_start":1,"column_end":77}},{"value":"! operation. This function only returns a result because writing to the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471484,"byte_end":471557,"line_start":338,"line_end":338,"column_start":1,"column_end":74}},{"value":"! underlying stream might fail and it must provide a way to propagate the fact","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471558,"byte_end":471638,"line_start":339,"line_end":339,"column_start":1,"column_end":81}},{"value":"! that an error has occurred back up the stack.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471639,"byte_end":471688,"line_start":340,"line_end":340,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471689,"byte_end":471692,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"! An example of implementing the formatting traits would look","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471693,"byte_end":471756,"line_start":342,"line_end":342,"column_start":1,"column_end":64}},{"value":"! like:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471757,"byte_end":471766,"line_start":343,"line_end":343,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471767,"byte_end":471770,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471771,"byte_end":471778,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"! use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471779,"byte_end":471796,"line_start":346,"line_end":346,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471797,"byte_end":471800,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"! #[derive(Debug)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471801,"byte_end":471821,"line_start":348,"line_end":348,"column_start":1,"column_end":21}},{"value":"! struct Vector2D {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471822,"byte_end":471843,"line_start":349,"line_end":349,"column_start":1,"column_end":22}},{"value":"!     x: isize,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471844,"byte_end":471861,"line_start":350,"line_end":350,"column_start":1,"column_end":18}},{"value":"!     y: isize,","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471862,"byte_end":471879,"line_start":351,"line_end":351,"column_start":1,"column_end":18}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471880,"byte_end":471885,"line_start":352,"line_end":352,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471886,"byte_end":471889,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"! impl fmt::Display for Vector2D {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471890,"byte_end":471926,"line_start":354,"line_end":354,"column_start":1,"column_end":37}},{"value":"!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471927,"byte_end":471989,"line_start":355,"line_end":355,"column_start":1,"column_end":63}},{"value":"!         // The `f` value implements the `Write` trait, which is what the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":471990,"byte_end":472066,"line_start":356,"line_end":356,"column_start":1,"column_end":77}},{"value":"!         // write! macro is expecting. Note that this formatting ignores the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472067,"byte_end":472146,"line_start":357,"line_end":357,"column_start":1,"column_end":80}},{"value":"!         // various flags provided to format strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472147,"byte_end":472203,"line_start":358,"line_end":358,"column_start":1,"column_end":57}},{"value":"!         write!(f, \"({}, {})\", self.x, self.y)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472204,"byte_end":472253,"line_start":359,"line_end":359,"column_start":1,"column_end":50}},{"value":"!     }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472254,"byte_end":472263,"line_start":360,"line_end":360,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472264,"byte_end":472269,"line_start":361,"line_end":361,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472270,"byte_end":472273,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"! // Different traits allow different forms of output of a type. The meaning","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472274,"byte_end":472352,"line_start":363,"line_end":363,"column_start":1,"column_end":79}},{"value":"! // of this format is to print the magnitude of a vector.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472353,"byte_end":472413,"line_start":364,"line_end":364,"column_start":1,"column_end":61}},{"value":"! impl fmt::Binary for Vector2D {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472414,"byte_end":472449,"line_start":365,"line_end":365,"column_start":1,"column_end":36}},{"value":"!     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472450,"byte_end":472512,"line_start":366,"line_end":366,"column_start":1,"column_end":63}},{"value":"!         let magnitude = (self.x * self.x + self.y * self.y) as f64;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472513,"byte_end":472584,"line_start":367,"line_end":367,"column_start":1,"column_end":72}},{"value":"!         let magnitude = magnitude.sqrt();","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472585,"byte_end":472630,"line_start":368,"line_end":368,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472631,"byte_end":472634,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"!         // Respect the formatting flags by using the helper method","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472635,"byte_end":472705,"line_start":370,"line_end":370,"column_start":1,"column_end":71}},{"value":"!         // `pad_integral` on the Formatter object. See the method","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472706,"byte_end":472775,"line_start":371,"line_end":371,"column_start":1,"column_end":70}},{"value":"!         // documentation for details, and the function `pad` can be used","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472776,"byte_end":472852,"line_start":372,"line_end":372,"column_start":1,"column_end":77}},{"value":"!         // to pad strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472853,"byte_end":472883,"line_start":373,"line_end":373,"column_start":1,"column_end":31}},{"value":"!         let decimals = f.precision().unwrap_or(3);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472884,"byte_end":472938,"line_start":374,"line_end":374,"column_start":1,"column_end":55}},{"value":"!         let string = format!(\"{:.*}\", decimals, magnitude);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":472939,"byte_end":473002,"line_start":375,"line_end":375,"column_start":1,"column_end":64}},{"value":"!         f.pad_integral(true, \"\", &string)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473003,"byte_end":473048,"line_start":376,"line_end":376,"column_start":1,"column_end":46}},{"value":"!     }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473049,"byte_end":473058,"line_start":377,"line_end":377,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473059,"byte_end":473064,"line_start":378,"line_end":378,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473065,"byte_end":473068,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473069,"byte_end":473084,"line_start":380,"line_end":380,"column_start":1,"column_end":16}},{"value":"!     let myvector = Vector2D { x: 3, y: 4 };","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473085,"byte_end":473132,"line_start":381,"line_end":381,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473133,"byte_end":473136,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"!     println!(\"{}\", myvector);       // => \"(3, 4)\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473137,"byte_end":473191,"line_start":383,"line_end":383,"column_start":1,"column_end":55}},{"value":"!     println!(\"{:?}\", myvector);     // => \"Vector2D {x: 3, y:4}\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473192,"byte_end":473260,"line_start":384,"line_end":384,"column_start":1,"column_end":69}},{"value":"!     println!(\"{:10.3b}\", myvector); // => \"     5.000\"","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473261,"byte_end":473319,"line_start":385,"line_end":385,"column_start":1,"column_end":59}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473320,"byte_end":473325,"line_start":386,"line_end":386,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473326,"byte_end":473333,"line_start":387,"line_end":387,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473334,"byte_end":473337,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"! ### `fmt::Display` vs `fmt::Debug`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473338,"byte_end":473376,"line_start":389,"line_end":389,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473377,"byte_end":473380,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"! These two formatting traits have distinct purposes:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473381,"byte_end":473436,"line_start":391,"line_end":391,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473437,"byte_end":473440,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"! - [`fmt::Display`][`Display`] implementations assert that the type can be faithfully","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473441,"byte_end":473529,"line_start":393,"line_end":393,"column_start":1,"column_end":89}},{"value":"!   represented as a UTF-8 string at all times. It is **not** expected that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473530,"byte_end":473607,"line_start":394,"line_end":394,"column_start":1,"column_end":78}},{"value":"!   all types implement the [`Display`] trait.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473608,"byte_end":473656,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"! - [`fmt::Debug`][`Debug`] implementations should be implemented for **all** public types.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473657,"byte_end":473750,"line_start":396,"line_end":396,"column_start":1,"column_end":94}},{"value":"!   Output will typically represent the internal state as faithfully as possible.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473751,"byte_end":473834,"line_start":397,"line_end":397,"column_start":1,"column_end":84}},{"value":"!   The purpose of the [`Debug`] trait is to facilitate debugging Rust code. In","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473835,"byte_end":473916,"line_start":398,"line_end":398,"column_start":1,"column_end":82}},{"value":"!   most cases, using `#[derive(Debug)]` is sufficient and recommended.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473917,"byte_end":473990,"line_start":399,"line_end":399,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473991,"byte_end":473994,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"! Some examples of the output from both traits:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":473995,"byte_end":474044,"line_start":401,"line_end":401,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474045,"byte_end":474048,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474049,"byte_end":474056,"line_start":403,"line_end":403,"column_start":1,"column_end":8}},{"value":"! assert_eq!(format!(\"{} {:?}\", 3, 4), \"3 4\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474057,"byte_end":474105,"line_start":404,"line_end":404,"column_start":1,"column_end":49}},{"value":"! assert_eq!(format!(\"{} {:?}\", 'a', 'b'), \"a 'b'\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474106,"byte_end":474160,"line_start":405,"line_end":405,"column_start":1,"column_end":55}},{"value":"! assert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474161,"byte_end":474234,"line_start":406,"line_end":406,"column_start":1,"column_end":74}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474235,"byte_end":474242,"line_start":407,"line_end":407,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474243,"byte_end":474246,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"! # Related macros","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474247,"byte_end":474267,"line_start":409,"line_end":409,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474268,"byte_end":474271,"line_start":410,"line_end":410,"column_start":1,"column_end":4}},{"value":"! There are a number of related macros in the [`format!`] family. The ones that","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474272,"byte_end":474353,"line_start":411,"line_end":411,"column_start":1,"column_end":82}},{"value":"! are currently implemented are:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474354,"byte_end":474388,"line_start":412,"line_end":412,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474389,"byte_end":474392,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"! ```ignore (only-for-syntax-highlight)","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474393,"byte_end":474434,"line_start":414,"line_end":414,"column_start":1,"column_end":42}},{"value":"! format!      // described above","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474435,"byte_end":474470,"line_start":415,"line_end":415,"column_start":1,"column_end":36}},{"value":"! write!       // first argument is a &mut io::Write, the destination","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474471,"byte_end":474542,"line_start":416,"line_end":416,"column_start":1,"column_end":72}},{"value":"! writeln!     // same as write but appends a newline","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474543,"byte_end":474598,"line_start":417,"line_end":417,"column_start":1,"column_end":56}},{"value":"! print!       // the format string is printed to the standard output","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474599,"byte_end":474670,"line_start":418,"line_end":418,"column_start":1,"column_end":72}},{"value":"! println!     // same as print but appends a newline","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474671,"byte_end":474726,"line_start":419,"line_end":419,"column_start":1,"column_end":56}},{"value":"! eprint!      // the format string is printed to the standard error","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474727,"byte_end":474797,"line_start":420,"line_end":420,"column_start":1,"column_end":71}},{"value":"! eprintln!    // same as eprint but appends a newline","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474798,"byte_end":474854,"line_start":421,"line_end":421,"column_start":1,"column_end":57}},{"value":"! format_args! // described below.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474855,"byte_end":474891,"line_start":422,"line_end":422,"column_start":1,"column_end":37}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474892,"byte_end":474899,"line_start":423,"line_end":423,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474900,"byte_end":474903,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"! ### `write!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474904,"byte_end":474920,"line_start":425,"line_end":425,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474921,"byte_end":474924,"line_start":426,"line_end":426,"column_start":1,"column_end":4}},{"value":"! This and [`writeln!`] are two macros which are used to emit the format string","span":{"file_name":"src/liballoc/fmt.rs","byte_start":474925,"byte_end":475006,"line_start":427,"line_end":427,"column_start":1,"column_end":82}},{"value":"! to a specified stream. This is used to prevent intermediate allocations of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475007,"byte_end":475085,"line_start":428,"line_end":428,"column_start":1,"column_end":79}},{"value":"! format strings and instead directly write the output. Under the hood, this","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475086,"byte_end":475164,"line_start":429,"line_end":429,"column_start":1,"column_end":79}},{"value":"! function is actually invoking the [`write_fmt`] function defined on the","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475165,"byte_end":475240,"line_start":430,"line_end":430,"column_start":1,"column_end":76}},{"value":"! [`std::io::Write`] trait. Example usage is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475241,"byte_end":475288,"line_start":431,"line_end":431,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475289,"byte_end":475292,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475293,"byte_end":475300,"line_start":433,"line_end":433,"column_start":1,"column_end":8}},{"value":"! # #![allow(unused_must_use)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475301,"byte_end":475333,"line_start":434,"line_end":434,"column_start":1,"column_end":33}},{"value":"! use std::io::Write;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475334,"byte_end":475357,"line_start":435,"line_end":435,"column_start":1,"column_end":24}},{"value":"! let mut w = Vec::new();","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475358,"byte_end":475385,"line_start":436,"line_end":436,"column_start":1,"column_end":28}},{"value":"! write!(&mut w, \"Hello {}!\", \"world\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475386,"byte_end":475427,"line_start":437,"line_end":437,"column_start":1,"column_end":42}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475428,"byte_end":475435,"line_start":438,"line_end":438,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475436,"byte_end":475439,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"! ### `print!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475440,"byte_end":475456,"line_start":440,"line_end":440,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475457,"byte_end":475460,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"! This and [`println!`] emit their output to stdout. Similarly to the [`write!`]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475461,"byte_end":475543,"line_start":442,"line_end":442,"column_start":1,"column_end":83}},{"value":"! macro, the goal of these macros is to avoid intermediate allocations when","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475544,"byte_end":475621,"line_start":443,"line_end":443,"column_start":1,"column_end":78}},{"value":"! printing output. Example usage is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475622,"byte_end":475660,"line_start":444,"line_end":444,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475661,"byte_end":475664,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475665,"byte_end":475672,"line_start":446,"line_end":446,"column_start":1,"column_end":8}},{"value":"! print!(\"Hello {}!\", \"world\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475673,"byte_end":475706,"line_start":447,"line_end":447,"column_start":1,"column_end":34}},{"value":"! println!(\"I have a newline {}\", \"character at the end\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475707,"byte_end":475767,"line_start":448,"line_end":448,"column_start":1,"column_end":61}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475768,"byte_end":475775,"line_start":449,"line_end":449,"column_start":1,"column_end":8}},{"value":"! ### `eprint!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475776,"byte_end":475793,"line_start":450,"line_end":450,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475794,"byte_end":475797,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"! The [`eprint!`] and [`eprintln!`] macros are identical to","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475798,"byte_end":475859,"line_start":452,"line_end":452,"column_start":1,"column_end":62}},{"value":"! [`print!`] and [`println!`], respectively, except they emit their","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475860,"byte_end":475929,"line_start":453,"line_end":453,"column_start":1,"column_end":70}},{"value":"! output to stderr.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475930,"byte_end":475951,"line_start":454,"line_end":454,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475952,"byte_end":475955,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"! ### `format_args!`","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475956,"byte_end":475978,"line_start":456,"line_end":456,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475979,"byte_end":475982,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"! This is a curious macro which is used to safely pass around","span":{"file_name":"src/liballoc/fmt.rs","byte_start":475983,"byte_end":476046,"line_start":458,"line_end":458,"column_start":1,"column_end":64}},{"value":"! an opaque object describing the format string. This object","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476047,"byte_end":476109,"line_start":459,"line_end":459,"column_start":1,"column_end":63}},{"value":"! does not require any heap allocations to create, and it only","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476110,"byte_end":476174,"line_start":460,"line_end":460,"column_start":1,"column_end":65}},{"value":"! references information on the stack. Under the hood, all of","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476175,"byte_end":476238,"line_start":461,"line_end":461,"column_start":1,"column_end":64}},{"value":"! the related macros are implemented in terms of this. First","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476239,"byte_end":476301,"line_start":462,"line_end":462,"column_start":1,"column_end":63}},{"value":"! off, some example usage is:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476302,"byte_end":476333,"line_start":463,"line_end":463,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476334,"byte_end":476337,"line_start":464,"line_end":464,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476338,"byte_end":476345,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"! # #![allow(unused_must_use)]","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476346,"byte_end":476378,"line_start":466,"line_end":466,"column_start":1,"column_end":33}},{"value":"! use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476379,"byte_end":476396,"line_start":467,"line_end":467,"column_start":1,"column_end":18}},{"value":"! use std::io::{self, Write};","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476397,"byte_end":476428,"line_start":468,"line_end":468,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476429,"byte_end":476432,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"! let mut some_writer = io::stdout();","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476433,"byte_end":476472,"line_start":470,"line_end":470,"column_start":1,"column_end":40}},{"value":"! write!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476473,"byte_end":476550,"line_start":471,"line_end":471,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476551,"byte_end":476554,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"! fn my_fmt_fn(args: fmt::Arguments) {","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476555,"byte_end":476595,"line_start":473,"line_end":473,"column_start":1,"column_end":41}},{"value":"!     write!(&mut io::stdout(), \"{}\", args);","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476596,"byte_end":476642,"line_start":474,"line_end":474,"column_start":1,"column_end":47}},{"value":"! }","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476643,"byte_end":476648,"line_start":475,"line_end":475,"column_start":1,"column_end":6}},{"value":"! my_fmt_fn(format_args!(\", or a {} too\", \"function\"));","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476649,"byte_end":476706,"line_start":476,"line_end":476,"column_start":1,"column_end":58}},{"value":"! ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476707,"byte_end":476714,"line_start":477,"line_end":477,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476715,"byte_end":476718,"line_start":478,"line_end":478,"column_start":1,"column_end":4}},{"value":"! The result of the [`format_args!`] macro is a value of type [`fmt::Arguments`].","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476719,"byte_end":476802,"line_start":479,"line_end":479,"column_start":1,"column_end":84}},{"value":"! This structure can then be passed to the [`write`] and [`format`] functions","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476803,"byte_end":476882,"line_start":480,"line_end":480,"column_start":1,"column_end":80}},{"value":"! inside this module in order to process the format string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476883,"byte_end":476944,"line_start":481,"line_end":481,"column_start":1,"column_end":62}},{"value":"! The goal of this macro is to even further prevent intermediate allocations","span":{"file_name":"src/liballoc/fmt.rs","byte_start":476945,"byte_end":477023,"line_start":482,"line_end":482,"column_start":1,"column_end":79}},{"value":"! when dealing formatting strings.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477024,"byte_end":477060,"line_start":483,"line_end":483,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477061,"byte_end":477064,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"! For example, a logging library could use the standard formatting syntax, but","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477065,"byte_end":477145,"line_start":485,"line_end":485,"column_start":1,"column_end":81}},{"value":"! it would internally pass around this structure until it has been determined","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477146,"byte_end":477225,"line_start":486,"line_end":486,"column_start":1,"column_end":80}},{"value":"! where output should go to.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477226,"byte_end":477256,"line_start":487,"line_end":487,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477257,"byte_end":477260,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"! [`usize`]: ../../std/primitive.usize.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477261,"byte_end":477306,"line_start":489,"line_end":489,"column_start":1,"column_end":46}},{"value":"! [`isize`]: ../../std/primitive.isize.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477307,"byte_end":477352,"line_start":490,"line_end":490,"column_start":1,"column_end":46}},{"value":"! [`i8`]: ../../std/primitive.i8.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477353,"byte_end":477392,"line_start":491,"line_end":491,"column_start":1,"column_end":40}},{"value":"! [`Display`]: trait.Display.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477393,"byte_end":477428,"line_start":492,"line_end":492,"column_start":1,"column_end":36}},{"value":"! [`Binary`]: trait.Binary.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477429,"byte_end":477462,"line_start":493,"line_end":493,"column_start":1,"column_end":34}},{"value":"! [`fmt::Result`]: type.Result.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477463,"byte_end":477500,"line_start":494,"line_end":494,"column_start":1,"column_end":38}},{"value":"! [`Result`]: ../../std/result/enum.Result.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477501,"byte_end":477550,"line_start":495,"line_end":495,"column_start":1,"column_end":50}},{"value":"! [`std::fmt::Error`]: struct.Error.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477551,"byte_end":477593,"line_start":496,"line_end":496,"column_start":1,"column_end":43}},{"value":"! [`Formatter`]: struct.Formatter.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477594,"byte_end":477634,"line_start":497,"line_end":497,"column_start":1,"column_end":41}},{"value":"! [`write!`]: ../../std/macro.write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477635,"byte_end":477677,"line_start":498,"line_end":498,"column_start":1,"column_end":43}},{"value":"! [`Debug`]: trait.Debug.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477678,"byte_end":477709,"line_start":499,"line_end":499,"column_start":1,"column_end":32}},{"value":"! [`format!`]: ../../std/macro.format.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477710,"byte_end":477754,"line_start":500,"line_end":500,"column_start":1,"column_end":45}},{"value":"! [`to_string`]: ../../std/string/trait.ToString.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477755,"byte_end":477810,"line_start":501,"line_end":501,"column_start":1,"column_end":56}},{"value":"! [`writeln!`]: ../../std/macro.writeln.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477811,"byte_end":477857,"line_start":502,"line_end":502,"column_start":1,"column_end":47}},{"value":"! [`write_fmt`]: ../../std/io/trait.Write.html#method.write_fmt","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477858,"byte_end":477923,"line_start":503,"line_end":503,"column_start":1,"column_end":66}},{"value":"! [`std::io::Write`]: ../../std/io/trait.Write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477924,"byte_end":477977,"line_start":504,"line_end":504,"column_start":1,"column_end":54}},{"value":"! [`print!`]: ../../std/macro.print.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":477978,"byte_end":478020,"line_start":505,"line_end":505,"column_start":1,"column_end":43}},{"value":"! [`println!`]: ../../std/macro.println.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478021,"byte_end":478067,"line_start":506,"line_end":506,"column_start":1,"column_end":47}},{"value":"! [`eprint!`]: ../../std/macro.eprint.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478068,"byte_end":478112,"line_start":507,"line_end":507,"column_start":1,"column_end":45}},{"value":"! [`eprintln!`]: ../../std/macro.eprintln.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478113,"byte_end":478161,"line_start":508,"line_end":508,"column_start":1,"column_end":49}},{"value":"! [`write!`]: ../../std/macro.write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478162,"byte_end":478204,"line_start":509,"line_end":509,"column_start":1,"column_end":43}},{"value":"! [`format_args!`]: ../../std/macro.format_args.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478205,"byte_end":478259,"line_start":510,"line_end":510,"column_start":1,"column_end":55}},{"value":"! [`fmt::Arguments`]: struct.Arguments.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478260,"byte_end":478305,"line_start":511,"line_end":511,"column_start":1,"column_end":46}},{"value":"! [`write`]: fn.write.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478306,"byte_end":478334,"line_start":512,"line_end":512,"column_start":1,"column_end":29}},{"value":"! [`format`]: fn.format.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478335,"byte_end":478365,"line_start":513,"line_end":513,"column_start":1,"column_end":31}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/fmt.rs","byte_start":478367,"byte_end":478413,"line_start":515,"line_end":515,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2599},"span":{"file_name":"src/liballoc/fmt.rs","byte_start":480076,"byte_end":480082,"line_start":568,"line_end":568,"column_start":8,"column_end":14},"name":"format","qualname":"::fmt::format","value":"fn (args: Arguments<'_>) -> string::String","parent":null,"children":[],"decl_id":null,"docs":" The `format` function takes an [`Arguments`] struct and returns the resulting\n formatted string.","sig":null,"attributes":[{"value":"/ The `format` function takes an [`Arguments`] struct and returns the resulting","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479334,"byte_end":479415,"line_start":540,"line_end":540,"column_start":1,"column_end":82}},{"value":"/ formatted string.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479416,"byte_end":479437,"line_start":541,"line_end":541,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479438,"byte_end":479441,"line_start":542,"line_end":542,"column_start":1,"column_end":4}},{"value":"/ The [`Arguments`] instance can be created with the [`format_args!`] macro.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479442,"byte_end":479520,"line_start":543,"line_end":543,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479521,"byte_end":479524,"line_start":544,"line_end":544,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479525,"byte_end":479539,"line_start":545,"line_end":545,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479540,"byte_end":479543,"line_start":546,"line_end":546,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479544,"byte_end":479560,"line_start":547,"line_end":547,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479561,"byte_end":479564,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479565,"byte_end":479572,"line_start":549,"line_end":549,"column_start":1,"column_end":8}},{"value":"/ use std::fmt;","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479573,"byte_end":479590,"line_start":550,"line_end":550,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479591,"byte_end":479594,"line_start":551,"line_end":551,"column_start":1,"column_end":4}},{"value":"/ let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479595,"byte_end":479656,"line_start":552,"line_end":552,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(s, \"Hello, world!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479657,"byte_end":479692,"line_start":553,"line_end":553,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479693,"byte_end":479700,"line_start":554,"line_end":554,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479701,"byte_end":479704,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ Please note that using [`format!`] might be preferable.","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479705,"byte_end":479764,"line_start":556,"line_end":556,"column_start":1,"column_end":60}},{"value":"/ Example:","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479765,"byte_end":479777,"line_start":557,"line_end":557,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479778,"byte_end":479781,"line_start":558,"line_end":558,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479782,"byte_end":479789,"line_start":559,"line_end":559,"column_start":1,"column_end":8}},{"value":"/ let s = format!(\"Hello, {}!\", \"world\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479790,"byte_end":479833,"line_start":560,"line_end":560,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(s, \"Hello, world!\");","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479834,"byte_end":479869,"line_start":561,"line_end":561,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479870,"byte_end":479877,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479878,"byte_end":479881,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ [`Arguments`]: struct.Arguments.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479882,"byte_end":479922,"line_start":564,"line_end":564,"column_start":1,"column_end":41}},{"value":"/ [`format_args!`]: ../../std/macro.format_args.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479923,"byte_end":479977,"line_start":565,"line_end":565,"column_start":1,"column_end":55}},{"value":"/ [`format!`]: ../../std/macro.format.html","span":{"file_name":"src/liballoc/fmt.rs","byte_start":479978,"byte_end":480022,"line_start":566,"line_end":566,"column_start":1,"column_end":45}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/fmt.rs","byte_start":480023,"byte_end":480068,"line_start":567,"line_end":567,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2600},"span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"src/liballoc/prelude/mod.rs","parent":null,"children":[{"krate":0,"index":2601}],"decl_id":null,"docs":" The alloc Prelude","sig":null,"attributes":[{"value":"! The alloc Prelude","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480336,"byte_end":480357,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480358,"byte_end":480361,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The purpose of this module is to alleviate imports of commonly-used","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480362,"byte_end":480433,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! items of the `alloc` crate by adding a glob import to the top of modules:","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480434,"byte_end":480511,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480512,"byte_end":480515,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480516,"byte_end":480523,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"! # #![allow(unused_imports)]","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480524,"byte_end":480555,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"! #![feature(alloc_prelude)]","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480556,"byte_end":480586,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"! extern crate alloc;","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480587,"byte_end":480610,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"! use alloc::prelude::v1::*;","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480611,"byte_end":480641,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480642,"byte_end":480649,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"unstable(feature = \"alloc_prelude\", issue = \"58935\")","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480651,"byte_end":480707,"line_start":13,"line_end":13,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2601},"span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::prelude::v1","value":"src/liballoc/prelude/v1.rs","parent":null,"children":[{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2607}],"decl_id":null,"docs":" The first version of the prelude of `alloc` crate.","sig":null,"attributes":[{"value":"! The first version of the prelude of `alloc` crate.","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":480722,"byte_end":480776,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":480777,"byte_end":480780,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! See the [module-level documentation](../index.html) for more.","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":480781,"byte_end":480846,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"unstable(feature = \"alloc_prelude\", issue = \"58935\")","span":{"file_name":"src/liballoc/prelude/v1.rs","byte_start":480848,"byte_end":480904,"line_start":5,"line_end":5,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2608},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw_vec","qualname":"::raw_vec","value":"src/liballoc/raw_vec.rs","parent":null,"children":[{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":2627},{"krate":0,"index":2633},{"krate":0,"index":2642},{"krate":0,"index":2648},{"krate":0,"index":2652},{"krate":0,"index":2656},{"krate":0,"index":2677},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2688},{"krate":0,"index":2689},{"krate":0,"index":2694},{"krate":0,"index":2697},{"krate":0,"index":2701},{"krate":0,"index":2705},{"krate":0,"index":2706}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\",\n           issue = \"none\")","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":481258,"byte_end":481351,"line_start":1,"line_end":1,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":2627},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483356,"byte_end":483362,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"RawVec","qualname":"::raw_vec::RawVec","value":"RawVec {  }","parent":null,"children":[{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632}],"decl_id":null,"docs":" A low-level utility for more ergonomically allocating, reallocating, and deallocating\n a buffer of memory on the heap without having to worry about all the corner cases\n involved. This type is excellent for building your own data structures like Vec and VecDeque.\n In particular:","sig":null,"attributes":[{"value":"/ A low-level utility for more ergonomically allocating, reallocating, and deallocating","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":481652,"byte_end":481741,"line_start":17,"line_end":17,"column_start":1,"column_end":90}},{"value":"/ a buffer of memory on the heap without having to worry about all the corner cases","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":481742,"byte_end":481827,"line_start":18,"line_end":18,"column_start":1,"column_end":86}},{"value":"/ involved. This type is excellent for building your own data structures like Vec and VecDeque.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":481828,"byte_end":481925,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ In particular:","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":481926,"byte_end":481944,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":481945,"byte_end":481948,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ * Produces `Unique::empty()` on zero-sized types.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":481949,"byte_end":482002,"line_start":22,"line_end":22,"column_start":1,"column_end":54}},{"value":"/ * Produces `Unique::empty()` on zero-length allocations.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482003,"byte_end":482063,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ * Catches all overflows in capacity computations (promotes them to \"capacity overflow\" panics).","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482064,"byte_end":482163,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ * Guards against 32-bit systems allocating more than isize::MAX bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482164,"byte_end":482238,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ * Guards against overflowing your length.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482239,"byte_end":482284,"line_start":26,"line_end":26,"column_start":1,"column_end":46}},{"value":"/ * Aborts on OOM or calls `handle_alloc_error` as applicable.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482285,"byte_end":482349,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/ * Avoids freeing `Unique::empty()`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482350,"byte_end":482389,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ * Contains a `ptr::Unique` and thus endows the user with all related benefits.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482390,"byte_end":482472,"line_start":29,"line_end":29,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482473,"byte_end":482476,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This type does not in anyway inspect the memory that it manages. When dropped it *will*","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482477,"byte_end":482568,"line_start":31,"line_end":31,"column_start":1,"column_end":92}},{"value":"/ free its memory, but it *won't* try to drop its contents. It is up to the user of `RawVec`","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482569,"byte_end":482663,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ to handle the actual things *stored* inside of a `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482664,"byte_end":482726,"line_start":33,"line_end":33,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482727,"byte_end":482730,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Note that a `RawVec` always forces its capacity to be `usize::MAX` for zero-sized types.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482731,"byte_end":482823,"line_start":35,"line_end":35,"column_start":1,"column_end":93}},{"value":"/ This enables you to use capacity-growing logic catch the overflows in your length","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482824,"byte_end":482909,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"/ that might occur with zero-sized types.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482910,"byte_end":482953,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482954,"byte_end":482957,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The above means that you need to be careful when round-tripping this type with a","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":482958,"byte_end":483042,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/ `Box<[T]>`, since `capacity()` won't yield the length. However, `with_capacity`,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483043,"byte_end":483127,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/ `shrink_to_fit`, and `from_box` will actually set `RawVec`'s private capacity","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483128,"byte_end":483209,"line_start":41,"line_end":41,"column_start":1,"column_end":82}},{"value":"/ field. This allows zero-sized types to not be special-cased by consumers of","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483210,"byte_end":483289,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ this type.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483290,"byte_end":483304,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483305,"byte_end":483344,"line_start":44,"line_end":44,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483588,"byte_end":483594,"line_start":54,"line_end":54,"column_start":18,"column_end":24},"name":"new_in","qualname":"<RawVec<T, A>>::new_in","value":"fn (a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `new`, but parameterized over the choice of allocator for\n the returned `RawVec`.\n","sig":null,"attributes":[{"value":"/ Like `new`, but parameterized over the choice of allocator for","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483473,"byte_end":483539,"line_start":52,"line_end":52,"column_start":5,"column_end":71}},{"value":"/ the returned `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483544,"byte_end":483570,"line_start":53,"line_end":53,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2637},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483966,"byte_end":483982,"line_start":64,"line_end":64,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<RawVec<T, A>>::with_capacity_in","value":"fn (capacity: usize, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `with_capacity`, but parameterized over the choice of\n allocator for the returned `RawVec`.\n","sig":null,"attributes":[{"value":"/ Like `with_capacity`, but parameterized over the choice of","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483833,"byte_end":483895,"line_start":61,"line_end":61,"column_start":5,"column_end":67}},{"value":"/ allocator for the returned `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483900,"byte_end":483940,"line_start":62,"line_end":62,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483945,"byte_end":483954,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":484215,"byte_end":484238,"line_start":71,"line_end":71,"column_start":12,"column_end":35},"name":"with_capacity_zeroed_in","qualname":"<RawVec<T, A>>::with_capacity_zeroed_in","value":"fn (capacity: usize, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `with_capacity_zeroed`, but parameterized over the choice\n of allocator for the returned `RawVec`.\n","sig":null,"attributes":[{"value":"/ Like `with_capacity_zeroed`, but parameterized over the choice","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":484075,"byte_end":484141,"line_start":68,"line_end":68,"column_start":5,"column_end":71}},{"value":"/ of allocator for the returned `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":484146,"byte_end":484189,"line_start":69,"line_end":69,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":484194,"byte_end":484203,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":2644},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485994,"byte_end":485997,"line_start":112,"line_end":112,"column_start":15,"column_end":18},"name":"NEW","qualname":"::raw_vec::RawVec::<T>::NEW","value":"Self","parent":{"krate":0,"index":2642},"children":[],"decl_id":null,"docs":" HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform\n to `min_const_fn` and so they cannot be called in `min_const_fn`s either.","sig":null,"attributes":[{"value":"/ HACK(Centril): This exists because `#[unstable]` `const fn`s needn't conform","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485300,"byte_end":485380,"line_start":101,"line_end":101,"column_start":5,"column_end":85}},{"value":"/ to `min_const_fn` and so they cannot be called in `min_const_fn`s either.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485385,"byte_end":485462,"line_start":102,"line_end":102,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485467,"byte_end":485470,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ If you change `RawVec<T>::new` or dependencies, please take care to not","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485475,"byte_end":485550,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/ introduce anything that would truly violate `min_const_fn`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485555,"byte_end":485618,"line_start":105,"line_end":105,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485623,"byte_end":485626,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ NOTE: We could avoid this hack and check conformance with some","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485631,"byte_end":485697,"line_start":107,"line_end":107,"column_start":5,"column_end":71}},{"value":"/ `#[rustc_force_min_const_fn]` attribute which requires conformance","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485702,"byte_end":485772,"line_start":108,"line_end":108,"column_start":5,"column_end":75}},{"value":"/ with `min_const_fn` but does not necessarily allow calling it in","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485777,"byte_end":485845,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/ `stable(...) const fn` / user code not enabling `foo` when","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485850,"byte_end":485912,"line_start":110,"line_end":110,"column_start":5,"column_end":67}},{"value":"/ `#[rustc_const_unstable(feature = \"foo\", ..)]` is present.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485917,"byte_end":485979,"line_start":111,"line_end":111,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486347,"byte_end":486350,"line_start":119,"line_end":119,"column_start":18,"column_end":21},"name":"new","qualname":"<RawVec<T, Global>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the biggest possible `RawVec` (on the system heap)\n without allocating. If `T` has positive size, then this makes a\n `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a\n `RawVec` with capacity `usize::MAX`. Useful for implementing\n delayed allocation.\n","sig":null,"attributes":[{"value":"/ Creates the biggest possible `RawVec` (on the system heap)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486024,"byte_end":486086,"line_start":114,"line_end":114,"column_start":5,"column_end":67}},{"value":"/ without allocating. If `T` has positive size, then this makes a","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486091,"byte_end":486158,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"/ `RawVec` with capacity `0`. If `T` is zero-sized, then it makes a","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486163,"byte_end":486232,"line_start":116,"line_end":116,"column_start":5,"column_end":74}},{"value":"/ `RawVec` with capacity `usize::MAX`. Useful for implementing","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486237,"byte_end":486301,"line_start":117,"line_end":117,"column_start":5,"column_end":69}},{"value":"/ delayed allocation.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486306,"byte_end":486329,"line_start":118,"line_end":118,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487031,"byte_end":487044,"line_start":139,"line_end":139,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawVec<T, Global>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawVec` (on the system heap) with exactly the\n capacity and alignment requirements for a `[T; capacity]`. This is\n equivalent to calling `RawVec::new` when `capacity` is `0` or `T` is\n zero-sized. Note that if `T` is zero-sized this means you will\n *not* get a `RawVec` with the requested capacity.","sig":null,"attributes":[{"value":"/ Creates a `RawVec` (on the system heap) with exactly the","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486403,"byte_end":486463,"line_start":123,"line_end":123,"column_start":5,"column_end":65}},{"value":"/ capacity and alignment requirements for a `[T; capacity]`. This is","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486468,"byte_end":486538,"line_start":124,"line_end":124,"column_start":5,"column_end":75}},{"value":"/ equivalent to calling `RawVec::new` when `capacity` is `0` or `T` is","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486543,"byte_end":486615,"line_start":125,"line_end":125,"column_start":5,"column_end":77}},{"value":"/ zero-sized. Note that if `T` is zero-sized this means you will","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486620,"byte_end":486686,"line_start":126,"line_end":126,"column_start":5,"column_end":71}},{"value":"/ *not* get a `RawVec` with the requested capacity.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486691,"byte_end":486744,"line_start":127,"line_end":127,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486749,"byte_end":486752,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486757,"byte_end":486769,"line_start":129,"line_end":129,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486774,"byte_end":486777,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486782,"byte_end":486848,"line_start":131,"line_end":131,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486853,"byte_end":486919,"line_start":132,"line_end":132,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486924,"byte_end":486949,"line_start":133,"line_end":133,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486954,"byte_end":486957,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486962,"byte_end":486974,"line_start":135,"line_end":135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486979,"byte_end":486982,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":486987,"byte_end":487005,"line_start":137,"line_end":137,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487010,"byte_end":487019,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487224,"byte_end":487244,"line_start":145,"line_end":145,"column_start":12,"column_end":32},"name":"with_capacity_zeroed","qualname":"<RawVec<T, Global>>::with_capacity_zeroed","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like `with_capacity`, but guarantees the buffer is zeroed.\n","sig":null,"attributes":[{"value":"/ Like `with_capacity`, but guarantees the buffer is zeroed.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487136,"byte_end":487198,"line_start":143,"line_end":143,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487203,"byte_end":487212,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487786,"byte_end":487803,"line_start":158,"line_end":158,"column_start":19,"column_end":36},"name":"from_raw_parts_in","qualname":"<RawVec<T, A>>::from_raw_parts_in","value":"fn (ptr: *mut T, capacity: usize, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Reconstitutes a `RawVec` from a pointer, capacity, and allocator.","sig":null,"attributes":[{"value":"/ Reconstitutes a `RawVec` from a pointer, capacity, and allocator.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487370,"byte_end":487439,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487444,"byte_end":487447,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Undefined Behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487452,"byte_end":487476,"line_start":153,"line_end":153,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487481,"byte_end":487484,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The `ptr` must be allocated (via the given allocator `a`), and with the given `capacity`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487489,"byte_end":487582,"line_start":155,"line_end":155,"column_start":5,"column_end":98}},{"value":"/ The `capacity` cannot exceed `isize::MAX` (only a concern on 32-bit systems).","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487587,"byte_end":487668,"line_start":156,"line_end":156,"column_start":5,"column_end":86}},{"value":"/ If the `ptr` and `capacity` come from a `RawVec` created via `a`, then this is guaranteed.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487673,"byte_end":487767,"line_start":157,"line_end":157,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488339,"byte_end":488353,"line_start":171,"line_end":171,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<RawVec<T, Global>>::from_raw_parts","value":"fn (ptr: *mut T, capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Reconstitutes a `RawVec` from a pointer and capacity.","sig":null,"attributes":[{"value":"/ Reconstitutes a `RawVec` from a pointer and capacity.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487960,"byte_end":488017,"line_start":164,"line_end":164,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488022,"byte_end":488025,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Undefined Behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488030,"byte_end":488054,"line_start":166,"line_end":166,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488059,"byte_end":488062,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ The `ptr` must be allocated (on the system heap), and with the given `capacity`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488067,"byte_end":488151,"line_start":168,"line_end":168,"column_start":5,"column_end":89}},{"value":"/ The `capacity` cannot exceed `isize::MAX` (only a concern on 32-bit systems).","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488156,"byte_end":488237,"line_start":169,"line_end":169,"column_start":5,"column_end":86}},{"value":"/ If the `ptr` and `capacity` come from a `RawVec`, then this is guaranteed.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488242,"byte_end":488320,"line_start":170,"line_end":170,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488539,"byte_end":488547,"line_start":176,"line_end":176,"column_start":12,"column_end":20},"name":"from_box","qualname":"<RawVec<T, Global>>::from_box","value":"fn (mut slice: Box<[T]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `RawVec<T>`.\n","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `RawVec<T>`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488482,"byte_end":488527,"line_start":175,"line_end":175,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488985,"byte_end":488988,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"ptr","qualname":"<RawVec<T, A>>::ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a raw pointer to the start of the allocation. Note that this is\n `Unique::empty()` if `capacity == 0` or `T` is zero-sized. In the former case, you must\n be careful.\n","sig":null,"attributes":[{"value":"/ Gets a raw pointer to the start of the allocation. Note that this is","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488785,"byte_end":488857,"line_start":186,"line_end":186,"column_start":5,"column_end":77}},{"value":"/ `Unique::empty()` if `capacity == 0` or `T` is zero-sized. In the former case, you must","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488862,"byte_end":488953,"line_start":187,"line_end":187,"column_start":5,"column_end":96}},{"value":"/ be careful.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488958,"byte_end":488973,"line_start":188,"line_end":188,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2660},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489190,"byte_end":489198,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawVec<T, A>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the capacity of the allocation.","sig":null,"attributes":[{"value":"/ Gets the capacity of the allocation.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489045,"byte_end":489085,"line_start":193,"line_end":193,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489090,"byte_end":489093,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This will always be `usize::MAX` if `T` is zero-sized.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489098,"byte_end":489156,"line_start":195,"line_end":195,"column_start":5,"column_end":63}},{"value":"inline(always)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489161,"byte_end":489178,"line_start":196,"line_end":196,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2661},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489371,"byte_end":489376,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"alloc","qualname":"<RawVec<T, A>>::alloc","value":"fn (&self) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared reference to the allocator backing this `RawVec`.\n","sig":null,"attributes":[{"value":"/ Returns a shared reference to the allocator backing this `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489289,"byte_end":489359,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489502,"byte_end":489511,"line_start":207,"line_end":207,"column_start":12,"column_end":21},"name":"alloc_mut","qualname":"<RawVec<T, A>>::alloc_mut","value":"fn (&mut self) -> &mut A","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the allocator backing this `RawVec`.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the allocator backing this `RawVec`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":489419,"byte_end":489490,"line_start":206,"line_end":206,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491805,"byte_end":491811,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"double","qualname":"<RawVec<T, A>>::double","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Doubles the size of the type's backing allocation. This is common enough\n to want to do that it's easiest to just have a dedicated method. Slightly\n more efficient logic can be provided for this than the general case.","sig":null,"attributes":[{"value":"/ Doubles the size of the type's backing allocation. This is common enough","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490033,"byte_end":490109,"line_start":225,"line_end":225,"column_start":5,"column_end":81}},{"value":"/ to want to do that it's easiest to just have a dedicated method. Slightly","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490114,"byte_end":490191,"line_start":226,"line_end":226,"column_start":5,"column_end":82}},{"value":"/ more efficient logic can be provided for this than the general case.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490196,"byte_end":490268,"line_start":227,"line_end":227,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490273,"byte_end":490276,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ This function is ideal for when pushing elements one-at-a-time because","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490281,"byte_end":490355,"line_start":229,"line_end":229,"column_start":5,"column_end":79}},{"value":"/ you don't need to incur the costs of the more general computations","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490360,"byte_end":490430,"line_start":230,"line_end":230,"column_start":5,"column_end":75}},{"value":"/ reserve needs to do to guard against overflow. You do however need to","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490435,"byte_end":490508,"line_start":231,"line_end":231,"column_start":5,"column_end":78}},{"value":"/ manually check if your `len == capacity`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490513,"byte_end":490558,"line_start":232,"line_end":232,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490563,"byte_end":490566,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490571,"byte_end":490583,"line_start":234,"line_end":234,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490588,"byte_end":490591,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ * Panics if `T` is zero-sized on the assumption that you managed to exhaust","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490596,"byte_end":490675,"line_start":236,"line_end":236,"column_start":5,"column_end":84}},{"value":"/   all `usize::MAX` slots in your imaginary buffer.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490680,"byte_end":490734,"line_start":237,"line_end":237,"column_start":5,"column_end":59}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490739,"byte_end":490805,"line_start":238,"line_end":238,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490810,"byte_end":490835,"line_start":239,"line_end":239,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490840,"byte_end":490843,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490848,"byte_end":490860,"line_start":241,"line_end":241,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490865,"byte_end":490868,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490873,"byte_end":490890,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490895,"byte_end":490898,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490903,"byte_end":490917,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490922,"byte_end":490925,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490930,"byte_end":490937,"line_start":247,"line_end":247,"column_start":5,"column_end":12}},{"value":"/ # #![feature(raw_vec_internals)]","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490942,"byte_end":490978,"line_start":248,"line_end":248,"column_start":5,"column_end":41}},{"value":"/ # extern crate alloc;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":490983,"byte_end":491008,"line_start":249,"line_end":249,"column_start":5,"column_end":30}},{"value":"/ # use std::ptr;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491013,"byte_end":491032,"line_start":250,"line_end":250,"column_start":5,"column_end":24}},{"value":"/ # use alloc::raw_vec::RawVec;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491037,"byte_end":491070,"line_start":251,"line_end":251,"column_start":5,"column_end":38}},{"value":"/ struct MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491075,"byte_end":491096,"line_start":252,"line_end":252,"column_start":5,"column_end":26}},{"value":"/     buf: RawVec<T>,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491101,"byte_end":491124,"line_start":253,"line_end":253,"column_start":5,"column_end":28}},{"value":"/     len: usize,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491129,"byte_end":491148,"line_start":254,"line_end":254,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491153,"byte_end":491158,"line_start":255,"line_end":255,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491163,"byte_end":491166,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ impl<T> MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491171,"byte_end":491193,"line_start":257,"line_end":257,"column_start":5,"column_end":27}},{"value":"/     pub fn push(&mut self, elem: T) {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491198,"byte_end":491239,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/         if self.len == self.buf.capacity() { self.buf.double(); }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491244,"byte_end":491313,"line_start":259,"line_end":259,"column_start":5,"column_end":74}},{"value":"/         // double would have aborted or panicked if the len exceeded","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491318,"byte_end":491390,"line_start":260,"line_end":260,"column_start":5,"column_end":77}},{"value":"/         // `isize::MAX` so this is safe to do unchecked now.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491395,"byte_end":491459,"line_start":261,"line_end":261,"column_start":5,"column_end":69}},{"value":"/         unsafe {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491464,"byte_end":491484,"line_start":262,"line_end":262,"column_start":5,"column_end":25}},{"value":"/             ptr::write(self.buf.ptr().add(self.len), elem);","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491489,"byte_end":491552,"line_start":263,"line_end":263,"column_start":5,"column_end":68}},{"value":"/         }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491557,"byte_end":491570,"line_start":264,"line_end":264,"column_start":5,"column_end":18}},{"value":"/         self.len += 1;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491575,"byte_end":491601,"line_start":265,"line_end":265,"column_start":5,"column_end":31}},{"value":"/     }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491606,"byte_end":491615,"line_start":266,"line_end":266,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491620,"byte_end":491625,"line_start":267,"line_end":267,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491630,"byte_end":491647,"line_start":268,"line_end":268,"column_start":5,"column_end":22}},{"value":"/ #   let mut vec = MyVec { buf: RawVec::new(), len: 0 };","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491652,"byte_end":491711,"line_start":269,"line_end":269,"column_start":5,"column_end":64}},{"value":"/ #   vec.push(1);","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491716,"byte_end":491736,"line_start":270,"line_end":270,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491741,"byte_end":491748,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491753,"byte_end":491760,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"inline(never)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491765,"byte_end":491781,"line_start":273,"line_end":273,"column_start":5,"column_end":21}},{"value":"cold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":491786,"byte_end":491793,"line_start":274,"line_end":274,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494686,"byte_end":494701,"line_start":336,"line_end":336,"column_start":12,"column_end":27},"name":"double_in_place","qualname":"<RawVec<T, A>>::double_in_place","value":"fn (&mut self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to double the size of the type's backing allocation in place. This is common\n enough to want to do that it's easiest to just have a dedicated method. Slightly\n more efficient logic can be provided for this than the general case.","sig":null,"attributes":[{"value":"/ Attempts to double the size of the type's backing allocation in place. This is common","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494035,"byte_end":494124,"line_start":322,"line_end":322,"column_start":5,"column_end":94}},{"value":"/ enough to want to do that it's easiest to just have a dedicated method. Slightly","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494129,"byte_end":494213,"line_start":323,"line_end":323,"column_start":5,"column_end":89}},{"value":"/ more efficient logic can be provided for this than the general case.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494218,"byte_end":494290,"line_start":324,"line_end":324,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494295,"byte_end":494298,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the reallocation attempt has succeeded.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494303,"byte_end":494364,"line_start":326,"line_end":326,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494369,"byte_end":494372,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494377,"byte_end":494389,"line_start":328,"line_end":328,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494394,"byte_end":494397,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ * Panics if `T` is zero-sized on the assumption that you managed to exhaust","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494402,"byte_end":494481,"line_start":330,"line_end":330,"column_start":5,"column_end":84}},{"value":"/   all `usize::MAX` slots in your imaginary buffer.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494486,"byte_end":494540,"line_start":331,"line_end":331,"column_start":5,"column_end":59}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494545,"byte_end":494611,"line_start":332,"line_end":332,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494616,"byte_end":494641,"line_start":333,"line_end":333,"column_start":5,"column_end":30}},{"value":"inline(never)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494646,"byte_end":494662,"line_start":334,"line_end":334,"column_start":5,"column_end":21}},{"value":"cold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":494667,"byte_end":494674,"line_start":335,"line_end":335,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496190,"byte_end":496207,"line_start":370,"line_end":370,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<RawVec<T, A>>::try_reserve_exact","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" The same as `reserve_exact`, but returns on errors instead of panicking or aborting.\n","sig":null,"attributes":[{"value":"/ The same as `reserve_exact`, but returns on errors instead of panicking or aborting.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496090,"byte_end":496178,"line_start":369,"line_end":369,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497336,"byte_end":497349,"line_start":398,"line_end":398,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<RawVec<T, A>>::reserve_exact","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the buffer contains at least enough space to hold\n `used_capacity + needed_extra_capacity` elements. If it doesn't already,\n will reallocate the minimum possible amount of memory necessary.\n Generally this will be exactly the amount of memory necessary,\n but in principle the allocator is free to give back more than\n we asked for.","sig":null,"attributes":[{"value":"/ Ensures that the buffer contains at least enough space to hold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496431,"byte_end":496497,"line_start":378,"line_end":378,"column_start":5,"column_end":71}},{"value":"/ `used_capacity + needed_extra_capacity` elements. If it doesn't already,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496502,"byte_end":496578,"line_start":379,"line_end":379,"column_start":5,"column_end":81}},{"value":"/ will reallocate the minimum possible amount of memory necessary.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496583,"byte_end":496651,"line_start":380,"line_end":380,"column_start":5,"column_end":73}},{"value":"/ Generally this will be exactly the amount of memory necessary,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496656,"byte_end":496722,"line_start":381,"line_end":381,"column_start":5,"column_end":71}},{"value":"/ but in principle the allocator is free to give back more than","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496727,"byte_end":496792,"line_start":382,"line_end":382,"column_start":5,"column_end":70}},{"value":"/ we asked for.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496797,"byte_end":496814,"line_start":383,"line_end":383,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496819,"byte_end":496822,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496827,"byte_end":496911,"line_start":385,"line_end":385,"column_start":5,"column_end":89}},{"value":"/ the requested space. This is not really unsafe, but the unsafe","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496916,"byte_end":496982,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/ code *you* write that relies on the behavior of this function may break.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":496987,"byte_end":497063,"line_start":387,"line_end":387,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497068,"byte_end":497071,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497076,"byte_end":497088,"line_start":389,"line_end":389,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497093,"byte_end":497096,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497101,"byte_end":497167,"line_start":391,"line_end":391,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497172,"byte_end":497238,"line_start":392,"line_end":392,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497243,"byte_end":497268,"line_start":393,"line_end":393,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497273,"byte_end":497276,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497281,"byte_end":497293,"line_start":395,"line_end":395,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497298,"byte_end":497301,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":497306,"byte_end":497324,"line_start":397,"line_end":397,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2671},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498557,"byte_end":498568,"line_start":424,"line_end":424,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawVec<T, A>>::try_reserve","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" The same as `reserve`, but returns on errors instead of panicking or aborting.\n","sig":null,"attributes":[{"value":"/ The same as `reserve`, but returns on errors instead of panicking or aborting.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498463,"byte_end":498545,"line_start":423,"line_end":423,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500723,"byte_end":500730,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawVec<T, A>>::reserve","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the buffer contains at least enough space to hold\n `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n enough capacity, will reallocate enough space plus comfortable slack\n space to get amortized `O(1)` behavior. Will limit this behavior\n if it would needlessly cause itself to panic.","sig":null,"attributes":[{"value":"/ Ensures that the buffer contains at least enough space to hold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498796,"byte_end":498862,"line_start":432,"line_end":432,"column_start":5,"column_end":71}},{"value":"/ `used_capacity + needed_extra_capacity` elements. If it doesn't already have","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498867,"byte_end":498947,"line_start":433,"line_end":433,"column_start":5,"column_end":85}},{"value":"/ enough capacity, will reallocate enough space plus comfortable slack","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":498952,"byte_end":499024,"line_start":434,"line_end":434,"column_start":5,"column_end":77}},{"value":"/ space to get amortized `O(1)` behavior. Will limit this behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499029,"byte_end":499097,"line_start":435,"line_end":435,"column_start":5,"column_end":73}},{"value":"/ if it would needlessly cause itself to panic.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499102,"byte_end":499151,"line_start":436,"line_end":436,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499156,"byte_end":499159,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499164,"byte_end":499248,"line_start":438,"line_end":438,"column_start":5,"column_end":89}},{"value":"/ the requested space. This is not really unsafe, but the unsafe","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499253,"byte_end":499319,"line_start":439,"line_end":439,"column_start":5,"column_end":71}},{"value":"/ code *you* write that relies on the behavior of this function may break.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499324,"byte_end":499400,"line_start":440,"line_end":440,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499405,"byte_end":499408,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ This is ideal for implementing a bulk-push operation like `extend`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499413,"byte_end":499484,"line_start":442,"line_end":442,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499489,"byte_end":499492,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499497,"byte_end":499509,"line_start":444,"line_end":444,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499514,"byte_end":499517,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499522,"byte_end":499588,"line_start":446,"line_end":446,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499593,"byte_end":499659,"line_start":447,"line_end":447,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499664,"byte_end":499689,"line_start":448,"line_end":448,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499694,"byte_end":499697,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499702,"byte_end":499714,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499719,"byte_end":499722,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499727,"byte_end":499745,"line_start":452,"line_end":452,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499750,"byte_end":499753,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499758,"byte_end":499772,"line_start":454,"line_end":454,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499777,"byte_end":499780,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499785,"byte_end":499792,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ # #![feature(raw_vec_internals)]","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499797,"byte_end":499833,"line_start":457,"line_end":457,"column_start":5,"column_end":41}},{"value":"/ # extern crate alloc;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499838,"byte_end":499863,"line_start":458,"line_end":458,"column_start":5,"column_end":30}},{"value":"/ # use std::ptr;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499868,"byte_end":499887,"line_start":459,"line_end":459,"column_start":5,"column_end":24}},{"value":"/ # use alloc::raw_vec::RawVec;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499892,"byte_end":499925,"line_start":460,"line_end":460,"column_start":5,"column_end":38}},{"value":"/ struct MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499930,"byte_end":499951,"line_start":461,"line_end":461,"column_start":5,"column_end":26}},{"value":"/     buf: RawVec<T>,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499956,"byte_end":499979,"line_start":462,"line_end":462,"column_start":5,"column_end":28}},{"value":"/     len: usize,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":499984,"byte_end":500003,"line_start":463,"line_end":463,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500008,"byte_end":500013,"line_start":464,"line_end":464,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500018,"byte_end":500021,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ impl<T: Clone> MyVec<T> {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500026,"byte_end":500055,"line_start":466,"line_end":466,"column_start":5,"column_end":34}},{"value":"/     pub fn push_all(&mut self, elems: &[T]) {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500060,"byte_end":500109,"line_start":467,"line_end":467,"column_start":5,"column_end":54}},{"value":"/         self.buf.reserve(self.len, elems.len());","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500114,"byte_end":500166,"line_start":468,"line_end":468,"column_start":5,"column_end":57}},{"value":"/         // reserve would have aborted or panicked if the len exceeded","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500171,"byte_end":500244,"line_start":469,"line_end":469,"column_start":5,"column_end":78}},{"value":"/         // `isize::MAX` so this is safe to do unchecked now.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500249,"byte_end":500313,"line_start":470,"line_end":470,"column_start":5,"column_end":69}},{"value":"/         for x in elems {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500318,"byte_end":500346,"line_start":471,"line_end":471,"column_start":5,"column_end":33}},{"value":"/             unsafe {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500351,"byte_end":500375,"line_start":472,"line_end":472,"column_start":5,"column_end":29}},{"value":"/                 ptr::write(self.buf.ptr().add(self.len), x.clone());","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500380,"byte_end":500452,"line_start":473,"line_end":473,"column_start":5,"column_end":77}},{"value":"/             }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500457,"byte_end":500474,"line_start":474,"line_end":474,"column_start":5,"column_end":22}},{"value":"/             self.len += 1;","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500479,"byte_end":500509,"line_start":475,"line_end":475,"column_start":5,"column_end":35}},{"value":"/         }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500514,"byte_end":500527,"line_start":476,"line_end":476,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500532,"byte_end":500541,"line_start":477,"line_end":477,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500546,"byte_end":500551,"line_start":478,"line_end":478,"column_start":5,"column_end":10}},{"value":"/ # fn main() {","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500556,"byte_end":500573,"line_start":479,"line_end":479,"column_start":5,"column_end":22}},{"value":"/ #   let mut vector = MyVec { buf: RawVec::new(), len: 0 };","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500578,"byte_end":500640,"line_start":480,"line_end":480,"column_start":5,"column_end":67}},{"value":"/ #   vector.push_all(&[1, 3, 5, 7, 9]);","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500645,"byte_end":500687,"line_start":481,"line_end":481,"column_start":5,"column_end":47}},{"value":"/ # }","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500692,"byte_end":500699,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":500704,"byte_end":500711,"line_start":483,"line_end":483,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501979,"byte_end":501995,"line_start":508,"line_end":508,"column_start":12,"column_end":28},"name":"reserve_in_place","qualname":"<RawVec<T, A>>::reserve_in_place","value":"fn (&mut self, used_capacity: usize, needed_extra_capacity: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to ensure that the buffer contains at least enough space to hold\n `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n enough capacity, will reallocate in place enough space plus comfortable slack\n space to get amortized `O(1)` behavior. Will limit this behaviour\n if it would needlessly cause itself to panic.","sig":null,"attributes":[{"value":"/ Attempts to ensure that the buffer contains at least enough space to hold","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501063,"byte_end":501140,"line_start":491,"line_end":491,"column_start":5,"column_end":82}},{"value":"/ `used_capacity + needed_extra_capacity` elements. If it doesn't already have","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501145,"byte_end":501225,"line_start":492,"line_end":492,"column_start":5,"column_end":85}},{"value":"/ enough capacity, will reallocate in place enough space plus comfortable slack","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501230,"byte_end":501311,"line_start":493,"line_end":493,"column_start":5,"column_end":86}},{"value":"/ space to get amortized `O(1)` behavior. Will limit this behaviour","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501316,"byte_end":501385,"line_start":494,"line_end":494,"column_start":5,"column_end":74}},{"value":"/ if it would needlessly cause itself to panic.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501390,"byte_end":501439,"line_start":495,"line_end":495,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501444,"byte_end":501447,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501452,"byte_end":501536,"line_start":497,"line_end":497,"column_start":5,"column_end":89}},{"value":"/ the requested space. This is not really unsafe, but the unsafe","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501541,"byte_end":501607,"line_start":498,"line_end":498,"column_start":5,"column_end":71}},{"value":"/ code *you* write that relies on the behavior of this function may break.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501612,"byte_end":501688,"line_start":499,"line_end":499,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501693,"byte_end":501696,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the reallocation attempt has succeeded.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501701,"byte_end":501762,"line_start":501,"line_end":501,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501767,"byte_end":501770,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501775,"byte_end":501787,"line_start":503,"line_end":503,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501792,"byte_end":501795,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ * Panics if the requested capacity exceeds `usize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501800,"byte_end":501866,"line_start":505,"line_end":505,"column_start":5,"column_end":71}},{"value":"/ * Panics on 32-bit platforms if the requested capacity exceeds","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501871,"byte_end":501937,"line_start":506,"line_end":506,"column_start":5,"column_end":71}},{"value":"/   `isize::MAX` bytes.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":501942,"byte_end":501967,"line_start":507,"line_end":507,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504057,"byte_end":504070,"line_start":561,"line_end":561,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<RawVec<T, A>>::shrink_to_fit","value":"fn (&mut self, amount: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the allocation down to the specified amount. If the given amount\n is 0, actually completely deallocates.","sig":null,"attributes":[{"value":"/ Shrinks the allocation down to the specified amount. If the given amount","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503759,"byte_end":503835,"line_start":551,"line_end":551,"column_start":5,"column_end":81}},{"value":"/ is 0, actually completely deallocates.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503840,"byte_end":503882,"line_start":552,"line_end":552,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503887,"byte_end":503890,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503895,"byte_end":503907,"line_start":554,"line_end":554,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503912,"byte_end":503915,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Panics if the given amount is *larger* than the current capacity.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503920,"byte_end":503989,"line_start":556,"line_end":556,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":503994,"byte_end":503997,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ # Aborts","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504002,"byte_end":504014,"line_start":558,"line_end":558,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504019,"byte_end":504022,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ Aborts on OOM.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":504027,"byte_end":504045,"line_start":560,"line_end":560,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508944,"byte_end":508952,"line_start":694,"line_end":694,"column_start":19,"column_end":27},"name":"into_box","qualname":"<RawVec<T, Global>>::into_box","value":"fn (self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the entire buffer into `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Converts the entire buffer into `Box<[T]>`.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508468,"byte_end":508515,"line_start":684,"line_end":684,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508520,"byte_end":508523,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Note that this will correctly reconstitute any `cap` changes","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508528,"byte_end":508592,"line_start":686,"line_end":686,"column_start":5,"column_end":69}},{"value":"/ that may have been performed. (See description of type for details.)","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508597,"byte_end":508669,"line_start":687,"line_end":687,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508674,"byte_end":508677,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Undefined Behavior","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508682,"byte_end":508706,"line_start":689,"line_end":689,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508711,"byte_end":508714,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ All elements of `RawVec<T, Global>` must be initialized. Notice that","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508719,"byte_end":508791,"line_start":691,"line_end":691,"column_start":5,"column_end":77}},{"value":"/ the rules around uninitialized boxed values are not finalized yet,","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508796,"byte_end":508866,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ but until they are, it is advisable to avoid them.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508871,"byte_end":508925,"line_start":693,"line_end":693,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":509368,"byte_end":509382,"line_start":705,"line_end":705,"column_start":19,"column_end":33},"name":"dealloc_buffer","qualname":"<RawVec<T, A>>::dealloc_buffer","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Frees the memory owned by the `RawVec` *without* trying to drop its contents.\n","sig":null,"attributes":[{"value":"/ Frees the memory owned by the `RawVec` *without* trying to drop its contents.","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":509268,"byte_end":509349,"line_start":704,"line_end":704,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":2707},"span":{"file_name":"src/liballoc/rc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rc","qualname":"::rc","value":"src/liballoc/rc.rs","parent":null,"children":[{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2728},{"krate":0,"index":2734},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2743},{"krate":0,"index":2746},{"krate":0,"index":2747},{"krate":0,"index":2753},{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2760},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2768},{"krate":0,"index":2771},{"krate":0,"index":2774},{"krate":0,"index":2778},{"krate":0,"index":2786},{"krate":0,"index":2789},{"krate":0,"index":2792},{"krate":0,"index":2795},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2813},{"krate":0,"index":2821},{"krate":0,"index":2825},{"krate":0,"index":2828},{"krate":0,"index":2842},{"krate":0,"index":2845},{"krate":0,"index":2848},{"krate":0,"index":2851},{"krate":0,"index":2855},{"krate":0,"index":2857},{"krate":0,"index":2860},{"krate":0,"index":2863},{"krate":0,"index":2866},{"krate":0,"index":2870},{"krate":0,"index":2874},{"krate":0,"index":2878},{"krate":0,"index":2882},{"krate":0,"index":2884},{"krate":0,"index":2891},{"krate":0,"index":2894},{"krate":0,"index":2898},{"krate":0,"index":2901},{"krate":0,"index":2904},{"krate":0,"index":2907},{"krate":0,"index":2910},{"krate":0,"index":2913},{"krate":0,"index":2915},{"krate":0,"index":2917},{"krate":0,"index":2920},{"krate":0,"index":2923},{"krate":0,"index":2931},{"krate":0,"index":2935},{"krate":0,"index":2939},{"krate":0,"index":2943},{"krate":0,"index":2947},{"krate":0,"index":2951},{"krate":0,"index":2954},{"krate":0,"index":2956},{"krate":0,"index":2958},{"krate":0,"index":2961},{"krate":0,"index":2964},{"krate":0,"index":2970},{"krate":0,"index":2972},{"krate":0,"index":2980},{"krate":0,"index":2983},{"krate":0,"index":2986},{"krate":0,"index":2989},{"krate":0,"index":2992},{"krate":0,"index":3001},{"krate":0,"index":3004},{"krate":0,"index":3007},{"krate":0,"index":3010},{"krate":0,"index":3013},{"krate":0,"index":3015},{"krate":0,"index":3017},{"krate":0,"index":3019}],"decl_id":null,"docs":" Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\n Counted'.","sig":null,"attributes":[{"value":"! Single-threaded reference-counting pointers. 'Rc' stands for 'Reference","span":{"file_name":"src/liballoc/rc.rs","byte_start":510849,"byte_end":510924,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"! Counted'.","span":{"file_name":"src/liballoc/rc.rs","byte_start":510925,"byte_end":510938,"line_start":2,"line_end":2,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":510939,"byte_end":510942,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! The type [`Rc<T>`][`Rc`] provides shared ownership of a value of type `T`,","span":{"file_name":"src/liballoc/rc.rs","byte_start":510943,"byte_end":511021,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"! allocated in the heap. Invoking [`clone`][clone] on [`Rc`] produces a new","span":{"file_name":"src/liballoc/rc.rs","byte_start":511022,"byte_end":511099,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"! pointer to the same allocation in the heap. When the last [`Rc`] pointer to a","span":{"file_name":"src/liballoc/rc.rs","byte_start":511100,"byte_end":511181,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"! given allocation is destroyed, the value stored in that allocation (often","span":{"file_name":"src/liballoc/rc.rs","byte_start":511182,"byte_end":511259,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"! referred to as \"inner value\") is also dropped.","span":{"file_name":"src/liballoc/rc.rs","byte_start":511260,"byte_end":511310,"line_start":8,"line_end":8,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":511311,"byte_end":511314,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! Shared references in Rust disallow mutation by default, and [`Rc`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":511315,"byte_end":511385,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"! is no exception: you cannot generally obtain a mutable reference to","span":{"file_name":"src/liballoc/rc.rs","byte_start":511386,"byte_end":511457,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"! something inside an [`Rc`]. If you need mutability, put a [`Cell`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":511458,"byte_end":511528,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"! or [`RefCell`] inside the [`Rc`]; see [an example of mutability","span":{"file_name":"src/liballoc/rc.rs","byte_start":511529,"byte_end":511596,"line_start":13,"line_end":13,"column_start":1,"column_end":68}},{"value":"! inside an Rc][mutability].","span":{"file_name":"src/liballoc/rc.rs","byte_start":511597,"byte_end":511627,"line_start":14,"line_end":14,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":511628,"byte_end":511631,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! [`Rc`] uses non-atomic reference counting. This means that overhead is very","span":{"file_name":"src/liballoc/rc.rs","byte_start":511632,"byte_end":511711,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"! low, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":511712,"byte_end":511790,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"! does not implement [`Send`][send]. As a result, the Rust compiler","span":{"file_name":"src/liballoc/rc.rs","byte_start":511791,"byte_end":511860,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"! will check *at compile time* that you are not sending [`Rc`]s between","span":{"file_name":"src/liballoc/rc.rs","byte_start":511861,"byte_end":511934,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"! threads. If you need multi-threaded, atomic reference counting, use","span":{"file_name":"src/liballoc/rc.rs","byte_start":511935,"byte_end":512006,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"! [`sync::Arc`][arc].","span":{"file_name":"src/liballoc/rc.rs","byte_start":512007,"byte_end":512030,"line_start":21,"line_end":21,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":512031,"byte_end":512034,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! The [`downgrade`][downgrade] method can be used to create a non-owning","span":{"file_name":"src/liballoc/rc.rs","byte_start":512035,"byte_end":512109,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"! [`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d","span":{"file_name":"src/liballoc/rc.rs","byte_start":512110,"byte_end":512179,"line_start":24,"line_end":24,"column_start":1,"column_end":70}},{"value":"! to an [`Rc`], but this will return [`None`] if the value stored in the allocation has","span":{"file_name":"src/liballoc/rc.rs","byte_start":512180,"byte_end":512269,"line_start":25,"line_end":25,"column_start":1,"column_end":90}},{"value":"! already been dropped. In other words, `Weak` pointers do not keep the value","span":{"file_name":"src/liballoc/rc.rs","byte_start":512270,"byte_end":512349,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"! inside the allocation alive; however, they *do* keep the allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":512350,"byte_end":512421,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"! (the backing store for the inner value) alive.","span":{"file_name":"src/liballoc/rc.rs","byte_start":512422,"byte_end":512472,"line_start":28,"line_end":28,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":512473,"byte_end":512476,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! A cycle between [`Rc`] pointers will never be deallocated. For this reason,","span":{"file_name":"src/liballoc/rc.rs","byte_start":512477,"byte_end":512556,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"! [`Weak`] is used to break cycles. For example, a tree could have strong","span":{"file_name":"src/liballoc/rc.rs","byte_start":512557,"byte_end":512632,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"! [`Rc`] pointers from parent nodes to children, and [`Weak`] pointers from","span":{"file_name":"src/liballoc/rc.rs","byte_start":512633,"byte_end":512710,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"! children back to their parents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":512711,"byte_end":512746,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":512747,"byte_end":512750,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! `Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),","span":{"file_name":"src/liballoc/rc.rs","byte_start":512751,"byte_end":512823,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"! so you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name","span":{"file_name":"src/liballoc/rc.rs","byte_start":512824,"byte_end":512907,"line_start":36,"line_end":36,"column_start":1,"column_end":84}},{"value":"! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated","span":{"file_name":"src/liballoc/rc.rs","byte_start":512908,"byte_end":512992,"line_start":37,"line_end":37,"column_start":1,"column_end":85}},{"value":"! functions, called using function-like syntax:","span":{"file_name":"src/liballoc/rc.rs","byte_start":512993,"byte_end":513042,"line_start":38,"line_end":38,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":513043,"byte_end":513046,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":513047,"byte_end":513054,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":513055,"byte_end":513075,"line_start":41,"line_end":41,"column_start":1,"column_end":21}},{"value":"! let my_rc = Rc::new(());","span":{"file_name":"src/liballoc/rc.rs","byte_start":513076,"byte_end":513104,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":513105,"byte_end":513108,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! Rc::downgrade(&my_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":513109,"byte_end":513135,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":513136,"byte_end":513143,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":513144,"byte_end":513147,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! [`Weak<T>`][`Weak`] does not auto-dereference to `T`, because the inner value may have","span":{"file_name":"src/liballoc/rc.rs","byte_start":513148,"byte_end":513238,"line_start":47,"line_end":47,"column_start":1,"column_end":91}},{"value":"! already been dropped.","span":{"file_name":"src/liballoc/rc.rs","byte_start":513239,"byte_end":513264,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":513265,"byte_end":513268,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! # Cloning references","span":{"file_name":"src/liballoc/rc.rs","byte_start":513269,"byte_end":513293,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":513294,"byte_end":513297,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! Creating a new reference to the same allocation as an existing reference counted pointer","span":{"file_name":"src/liballoc/rc.rs","byte_start":513298,"byte_end":513390,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"! is done using the `Clone` trait implemented for [`Rc<T>`][`Rc`] and [`Weak<T>`][`Weak`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":513391,"byte_end":513483,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":513484,"byte_end":513487,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":513488,"byte_end":513495,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":513496,"byte_end":513516,"line_start":56,"line_end":56,"column_start":1,"column_end":21}},{"value":"! let foo = Rc::new(vec![1.0, 2.0, 3.0]);","span":{"file_name":"src/liballoc/rc.rs","byte_start":513517,"byte_end":513560,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"! // The two syntaxes below are equivalent.","span":{"file_name":"src/liballoc/rc.rs","byte_start":513561,"byte_end":513606,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"! let a = foo.clone();","span":{"file_name":"src/liballoc/rc.rs","byte_start":513607,"byte_end":513631,"line_start":59,"line_end":59,"column_start":1,"column_end":25}},{"value":"! let b = Rc::clone(&foo);","span":{"file_name":"src/liballoc/rc.rs","byte_start":513632,"byte_end":513660,"line_start":60,"line_end":60,"column_start":1,"column_end":29}},{"value":"! // a and b both point to the same memory location as foo.","span":{"file_name":"src/liballoc/rc.rs","byte_start":513661,"byte_end":513722,"line_start":61,"line_end":61,"column_start":1,"column_end":62}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":513723,"byte_end":513730,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":513731,"byte_end":513734,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! The `Rc::clone(&from)` syntax is the most idiomatic because it conveys more explicitly","span":{"file_name":"src/liballoc/rc.rs","byte_start":513735,"byte_end":513825,"line_start":64,"line_end":64,"column_start":1,"column_end":91}},{"value":"! the meaning of the code. In the example above, this syntax makes it easier to see that","span":{"file_name":"src/liballoc/rc.rs","byte_start":513826,"byte_end":513916,"line_start":65,"line_end":65,"column_start":1,"column_end":91}},{"value":"! this code is creating a new reference rather than copying the whole content of foo.","span":{"file_name":"src/liballoc/rc.rs","byte_start":513917,"byte_end":514004,"line_start":66,"line_end":66,"column_start":1,"column_end":88}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":514005,"byte_end":514008,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":514009,"byte_end":514023,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":514024,"byte_end":514027,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! Consider a scenario where a set of `Gadget`s are owned by a given `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":514028,"byte_end":514106,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"! We want to have our `Gadget`s point to their `Owner`. We can't do this with","span":{"file_name":"src/liballoc/rc.rs","byte_start":514107,"byte_end":514186,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"! unique ownership, because more than one gadget may belong to the same","span":{"file_name":"src/liballoc/rc.rs","byte_start":514187,"byte_end":514260,"line_start":72,"line_end":72,"column_start":1,"column_end":74}},{"value":"! `Owner`. [`Rc`] allows us to share an `Owner` between multiple `Gadget`s,","span":{"file_name":"src/liballoc/rc.rs","byte_start":514261,"byte_end":514338,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"! and have the `Owner` remain allocated as long as any `Gadget` points at it.","span":{"file_name":"src/liballoc/rc.rs","byte_start":514339,"byte_end":514418,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":514419,"byte_end":514422,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":514423,"byte_end":514430,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":514431,"byte_end":514451,"line_start":77,"line_end":77,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":514452,"byte_end":514455,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! struct Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":514456,"byte_end":514474,"line_start":79,"line_end":79,"column_start":1,"column_end":19}},{"value":"!     name: String,","span":{"file_name":"src/liballoc/rc.rs","byte_start":514475,"byte_end":514496,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":514497,"byte_end":514523,"line_start":81,"line_end":81,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":514524,"byte_end":514529,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":514530,"byte_end":514533,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! struct Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":514534,"byte_end":514553,"line_start":84,"line_end":84,"column_start":1,"column_end":20}},{"value":"!     id: i32,","span":{"file_name":"src/liballoc/rc.rs","byte_start":514554,"byte_end":514570,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"!     owner: Rc<Owner>,","span":{"file_name":"src/liballoc/rc.rs","byte_start":514571,"byte_end":514596,"line_start":86,"line_end":86,"column_start":1,"column_end":26}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":514597,"byte_end":514623,"line_start":87,"line_end":87,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":514624,"byte_end":514629,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":514630,"byte_end":514633,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":514634,"byte_end":514649,"line_start":90,"line_end":90,"column_start":1,"column_end":16}},{"value":"!     // Create a reference-counted `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":514650,"byte_end":514696,"line_start":91,"line_end":91,"column_start":1,"column_end":47}},{"value":"!     let gadget_owner: Rc<Owner> = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":514697,"byte_end":514743,"line_start":92,"line_end":92,"column_start":1,"column_end":47}},{"value":"!         Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":514744,"byte_end":514763,"line_start":93,"line_end":93,"column_start":1,"column_end":20}},{"value":"!             name: \"Gadget Man\".to_string(),","span":{"file_name":"src/liballoc/rc.rs","byte_start":514764,"byte_end":514811,"line_start":94,"line_end":94,"column_start":1,"column_end":48}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":514812,"byte_end":514825,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":514826,"byte_end":514836,"line_start":96,"line_end":96,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":514837,"byte_end":514840,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"!     // Create `Gadget`s belonging to `gadget_owner`. Cloning the `Rc<Owner>`","span":{"file_name":"src/liballoc/rc.rs","byte_start":514841,"byte_end":514921,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"!     // gives us a new pointer to the same `Owner` allocation, incrementing","span":{"file_name":"src/liballoc/rc.rs","byte_start":514922,"byte_end":515000,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"!     // the reference count in the process.","span":{"file_name":"src/liballoc/rc.rs","byte_start":515001,"byte_end":515047,"line_start":100,"line_end":100,"column_start":1,"column_end":47}},{"value":"!     let gadget1 = Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":515048,"byte_end":515078,"line_start":101,"line_end":101,"column_start":1,"column_end":31}},{"value":"!         id: 1,","span":{"file_name":"src/liballoc/rc.rs","byte_start":515079,"byte_end":515097,"line_start":102,"line_end":102,"column_start":1,"column_end":19}},{"value":"!         owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":515098,"byte_end":515142,"line_start":103,"line_end":103,"column_start":1,"column_end":45}},{"value":"!     };","span":{"file_name":"src/liballoc/rc.rs","byte_start":515143,"byte_end":515153,"line_start":104,"line_end":104,"column_start":1,"column_end":11}},{"value":"!     let gadget2 = Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":515154,"byte_end":515184,"line_start":105,"line_end":105,"column_start":1,"column_end":31}},{"value":"!         id: 2,","span":{"file_name":"src/liballoc/rc.rs","byte_start":515185,"byte_end":515203,"line_start":106,"line_end":106,"column_start":1,"column_end":19}},{"value":"!         owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":515204,"byte_end":515248,"line_start":107,"line_end":107,"column_start":1,"column_end":45}},{"value":"!     };","span":{"file_name":"src/liballoc/rc.rs","byte_start":515249,"byte_end":515259,"line_start":108,"line_end":108,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":515260,"byte_end":515263,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"!     // Dispose of our local variable `gadget_owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":515264,"byte_end":515320,"line_start":110,"line_end":110,"column_start":1,"column_end":57}},{"value":"!     drop(gadget_owner);","span":{"file_name":"src/liballoc/rc.rs","byte_start":515321,"byte_end":515348,"line_start":111,"line_end":111,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":515349,"byte_end":515352,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"!     // Despite dropping `gadget_owner`, we're still able to print out the name","span":{"file_name":"src/liballoc/rc.rs","byte_start":515353,"byte_end":515435,"line_start":113,"line_end":113,"column_start":1,"column_end":83}},{"value":"!     // of the `Owner` of the `Gadget`s. This is because we've only dropped a","span":{"file_name":"src/liballoc/rc.rs","byte_start":515436,"byte_end":515516,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"!     // single `Rc<Owner>`, not the `Owner` it points to. As long as there are","span":{"file_name":"src/liballoc/rc.rs","byte_start":515517,"byte_end":515598,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"!     // other `Rc<Owner>` pointing at the same `Owner` allocation, it will remain","span":{"file_name":"src/liballoc/rc.rs","byte_start":515599,"byte_end":515683,"line_start":116,"line_end":116,"column_start":1,"column_end":85}},{"value":"!     // live. The field projection `gadget1.owner.name` works because","span":{"file_name":"src/liballoc/rc.rs","byte_start":515684,"byte_end":515756,"line_start":117,"line_end":117,"column_start":1,"column_end":73}},{"value":"!     // `Rc<Owner>` automatically dereferences to `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":515757,"byte_end":515818,"line_start":118,"line_end":118,"column_start":1,"column_end":62}},{"value":"!     println!(\"Gadget {} owned by {}\", gadget1.id, gadget1.owner.name);","span":{"file_name":"src/liballoc/rc.rs","byte_start":515819,"byte_end":515893,"line_start":119,"line_end":119,"column_start":1,"column_end":75}},{"value":"!     println!(\"Gadget {} owned by {}\", gadget2.id, gadget2.owner.name);","span":{"file_name":"src/liballoc/rc.rs","byte_start":515894,"byte_end":515968,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":515969,"byte_end":515972,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"!     // At the end of the function, `gadget1` and `gadget2` are destroyed, and","span":{"file_name":"src/liballoc/rc.rs","byte_start":515973,"byte_end":516054,"line_start":122,"line_end":122,"column_start":1,"column_end":82}},{"value":"!     // with them the last counted references to our `Owner`. Gadget Man now","span":{"file_name":"src/liballoc/rc.rs","byte_start":516055,"byte_end":516134,"line_start":123,"line_end":123,"column_start":1,"column_end":80}},{"value":"!     // gets destroyed as well.","span":{"file_name":"src/liballoc/rc.rs","byte_start":516135,"byte_end":516169,"line_start":124,"line_end":124,"column_start":1,"column_end":35}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":516170,"byte_end":516175,"line_start":125,"line_end":125,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":516176,"byte_end":516183,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":516184,"byte_end":516187,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"! If our requirements change, and we also need to be able to traverse from","span":{"file_name":"src/liballoc/rc.rs","byte_start":516188,"byte_end":516264,"line_start":128,"line_end":128,"column_start":1,"column_end":77}},{"value":"! `Owner` to `Gadget`, we will run into problems. An [`Rc`] pointer from `Owner`","span":{"file_name":"src/liballoc/rc.rs","byte_start":516265,"byte_end":516348,"line_start":129,"line_end":129,"column_start":1,"column_end":83}},{"value":"! to `Gadget` introduces a cycle. This means that their","span":{"file_name":"src/liballoc/rc.rs","byte_start":516349,"byte_end":516406,"line_start":130,"line_end":130,"column_start":1,"column_end":58}},{"value":"! reference counts can never reach 0, and the allocation will never be destroyed:","span":{"file_name":"src/liballoc/rc.rs","byte_start":516407,"byte_end":516490,"line_start":131,"line_end":131,"column_start":1,"column_end":84}},{"value":"! a memory leak. In order to get around this, we can use [`Weak`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":516491,"byte_end":516558,"line_start":132,"line_end":132,"column_start":1,"column_end":68}},{"value":"! pointers.","span":{"file_name":"src/liballoc/rc.rs","byte_start":516559,"byte_end":516572,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":516573,"byte_end":516576,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"! Rust actually makes it somewhat difficult to produce this loop in the first","span":{"file_name":"src/liballoc/rc.rs","byte_start":516577,"byte_end":516656,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"! place. In order to end up with two values that point at each other, one of","span":{"file_name":"src/liballoc/rc.rs","byte_start":516657,"byte_end":516735,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"! them needs to be mutable. This is difficult because [`Rc`] enforces","span":{"file_name":"src/liballoc/rc.rs","byte_start":516736,"byte_end":516807,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"! memory safety by only giving out shared references to the value it wraps,","span":{"file_name":"src/liballoc/rc.rs","byte_start":516808,"byte_end":516885,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"! and these don't allow direct mutation. We need to wrap the part of the","span":{"file_name":"src/liballoc/rc.rs","byte_start":516886,"byte_end":516960,"line_start":139,"line_end":139,"column_start":1,"column_end":75}},{"value":"! value we wish to mutate in a [`RefCell`], which provides *interior","span":{"file_name":"src/liballoc/rc.rs","byte_start":516961,"byte_end":517031,"line_start":140,"line_end":140,"column_start":1,"column_end":71}},{"value":"! mutability*: a method to achieve mutability through a shared reference.","span":{"file_name":"src/liballoc/rc.rs","byte_start":517032,"byte_end":517107,"line_start":141,"line_end":141,"column_start":1,"column_end":76}},{"value":"! [`RefCell`] enforces Rust's borrowing rules at runtime.","span":{"file_name":"src/liballoc/rc.rs","byte_start":517108,"byte_end":517167,"line_start":142,"line_end":142,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":517168,"byte_end":517171,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":517172,"byte_end":517179,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"! use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":517180,"byte_end":517200,"line_start":145,"line_end":145,"column_start":1,"column_end":21}},{"value":"! use std::rc::Weak;","span":{"file_name":"src/liballoc/rc.rs","byte_start":517201,"byte_end":517223,"line_start":146,"line_end":146,"column_start":1,"column_end":23}},{"value":"! use std::cell::RefCell;","span":{"file_name":"src/liballoc/rc.rs","byte_start":517224,"byte_end":517251,"line_start":147,"line_end":147,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":517252,"byte_end":517255,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"! struct Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":517256,"byte_end":517274,"line_start":149,"line_end":149,"column_start":1,"column_end":19}},{"value":"!     name: String,","span":{"file_name":"src/liballoc/rc.rs","byte_start":517275,"byte_end":517296,"line_start":150,"line_end":150,"column_start":1,"column_end":22}},{"value":"!     gadgets: RefCell<Vec<Weak<Gadget>>>,","span":{"file_name":"src/liballoc/rc.rs","byte_start":517297,"byte_end":517341,"line_start":151,"line_end":151,"column_start":1,"column_end":45}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":517342,"byte_end":517368,"line_start":152,"line_end":152,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":517369,"byte_end":517374,"line_start":153,"line_end":153,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":517375,"byte_end":517378,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"! struct Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":517379,"byte_end":517398,"line_start":155,"line_end":155,"column_start":1,"column_end":20}},{"value":"!     id: i32,","span":{"file_name":"src/liballoc/rc.rs","byte_start":517399,"byte_end":517415,"line_start":156,"line_end":156,"column_start":1,"column_end":17}},{"value":"!     owner: Rc<Owner>,","span":{"file_name":"src/liballoc/rc.rs","byte_start":517416,"byte_end":517441,"line_start":157,"line_end":157,"column_start":1,"column_end":26}},{"value":"!     // ...other fields","span":{"file_name":"src/liballoc/rc.rs","byte_start":517442,"byte_end":517468,"line_start":158,"line_end":158,"column_start":1,"column_end":27}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":517469,"byte_end":517474,"line_start":159,"line_end":159,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":517475,"byte_end":517478,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"! fn main() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":517479,"byte_end":517494,"line_start":161,"line_end":161,"column_start":1,"column_end":16}},{"value":"!     // Create a reference-counted `Owner`. Note that we've put the `Owner`'s","span":{"file_name":"src/liballoc/rc.rs","byte_start":517495,"byte_end":517575,"line_start":162,"line_end":162,"column_start":1,"column_end":81}},{"value":"!     // vector of `Gadget`s inside a `RefCell` so that we can mutate it through","span":{"file_name":"src/liballoc/rc.rs","byte_start":517576,"byte_end":517658,"line_start":163,"line_end":163,"column_start":1,"column_end":83}},{"value":"!     // a shared reference.","span":{"file_name":"src/liballoc/rc.rs","byte_start":517659,"byte_end":517689,"line_start":164,"line_end":164,"column_start":1,"column_end":31}},{"value":"!     let gadget_owner: Rc<Owner> = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":517690,"byte_end":517736,"line_start":165,"line_end":165,"column_start":1,"column_end":47}},{"value":"!         Owner {","span":{"file_name":"src/liballoc/rc.rs","byte_start":517737,"byte_end":517756,"line_start":166,"line_end":166,"column_start":1,"column_end":20}},{"value":"!             name: \"Gadget Man\".to_string(),","span":{"file_name":"src/liballoc/rc.rs","byte_start":517757,"byte_end":517804,"line_start":167,"line_end":167,"column_start":1,"column_end":48}},{"value":"!             gadgets: RefCell::new(vec![]),","span":{"file_name":"src/liballoc/rc.rs","byte_start":517805,"byte_end":517851,"line_start":168,"line_end":168,"column_start":1,"column_end":47}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":517852,"byte_end":517865,"line_start":169,"line_end":169,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":517866,"byte_end":517876,"line_start":170,"line_end":170,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":517877,"byte_end":517880,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"!     // Create `Gadget`s belonging to `gadget_owner`, as before.","span":{"file_name":"src/liballoc/rc.rs","byte_start":517881,"byte_end":517948,"line_start":172,"line_end":172,"column_start":1,"column_end":68}},{"value":"!     let gadget1 = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":517949,"byte_end":517979,"line_start":173,"line_end":173,"column_start":1,"column_end":31}},{"value":"!         Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":517980,"byte_end":518000,"line_start":174,"line_end":174,"column_start":1,"column_end":21}},{"value":"!             id: 1,","span":{"file_name":"src/liballoc/rc.rs","byte_start":518001,"byte_end":518023,"line_start":175,"line_end":175,"column_start":1,"column_end":23}},{"value":"!             owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":518024,"byte_end":518072,"line_start":176,"line_end":176,"column_start":1,"column_end":49}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":518073,"byte_end":518086,"line_start":177,"line_end":177,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":518087,"byte_end":518097,"line_start":178,"line_end":178,"column_start":1,"column_end":11}},{"value":"!     let gadget2 = Rc::new(","span":{"file_name":"src/liballoc/rc.rs","byte_start":518098,"byte_end":518128,"line_start":179,"line_end":179,"column_start":1,"column_end":31}},{"value":"!         Gadget {","span":{"file_name":"src/liballoc/rc.rs","byte_start":518129,"byte_end":518149,"line_start":180,"line_end":180,"column_start":1,"column_end":21}},{"value":"!             id: 2,","span":{"file_name":"src/liballoc/rc.rs","byte_start":518150,"byte_end":518172,"line_start":181,"line_end":181,"column_start":1,"column_end":23}},{"value":"!             owner: Rc::clone(&gadget_owner),","span":{"file_name":"src/liballoc/rc.rs","byte_start":518173,"byte_end":518221,"line_start":182,"line_end":182,"column_start":1,"column_end":49}},{"value":"!         }","span":{"file_name":"src/liballoc/rc.rs","byte_start":518222,"byte_end":518235,"line_start":183,"line_end":183,"column_start":1,"column_end":14}},{"value":"!     );","span":{"file_name":"src/liballoc/rc.rs","byte_start":518236,"byte_end":518246,"line_start":184,"line_end":184,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":518247,"byte_end":518250,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"!     // Add the `Gadget`s to their `Owner`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":518251,"byte_end":518297,"line_start":186,"line_end":186,"column_start":1,"column_end":47}},{"value":"!     {","span":{"file_name":"src/liballoc/rc.rs","byte_start":518298,"byte_end":518307,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"!         let mut gadgets = gadget_owner.gadgets.borrow_mut();","span":{"file_name":"src/liballoc/rc.rs","byte_start":518308,"byte_end":518372,"line_start":188,"line_end":188,"column_start":1,"column_end":65}},{"value":"!         gadgets.push(Rc::downgrade(&gadget1));","span":{"file_name":"src/liballoc/rc.rs","byte_start":518373,"byte_end":518423,"line_start":189,"line_end":189,"column_start":1,"column_end":51}},{"value":"!         gadgets.push(Rc::downgrade(&gadget2));","span":{"file_name":"src/liballoc/rc.rs","byte_start":518424,"byte_end":518474,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":518475,"byte_end":518478,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"!         // `RefCell` dynamic borrow ends here.","span":{"file_name":"src/liballoc/rc.rs","byte_start":518479,"byte_end":518529,"line_start":192,"line_end":192,"column_start":1,"column_end":51}},{"value":"!     }","span":{"file_name":"src/liballoc/rc.rs","byte_start":518530,"byte_end":518539,"line_start":193,"line_end":193,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":518540,"byte_end":518543,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"!     // Iterate over our `Gadget`s, printing their details out.","span":{"file_name":"src/liballoc/rc.rs","byte_start":518544,"byte_end":518610,"line_start":195,"line_end":195,"column_start":1,"column_end":67}},{"value":"!     for gadget_weak in gadget_owner.gadgets.borrow().iter() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":518611,"byte_end":518676,"line_start":196,"line_end":196,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":518677,"byte_end":518680,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"!         // `gadget_weak` is a `Weak<Gadget>`. Since `Weak` pointers can't","span":{"file_name":"src/liballoc/rc.rs","byte_start":518681,"byte_end":518758,"line_start":198,"line_end":198,"column_start":1,"column_end":78}},{"value":"!         // guarantee the allocation still exists, we need to call","span":{"file_name":"src/liballoc/rc.rs","byte_start":518759,"byte_end":518828,"line_start":199,"line_end":199,"column_start":1,"column_end":70}},{"value":"!         // `upgrade`, which returns an `Option<Rc<Gadget>>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":518829,"byte_end":518893,"line_start":200,"line_end":200,"column_start":1,"column_end":65}},{"value":"!         //","span":{"file_name":"src/liballoc/rc.rs","byte_start":518894,"byte_end":518908,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"!         // In this case we know the allocation still exists, so we simply","span":{"file_name":"src/liballoc/rc.rs","byte_start":518909,"byte_end":518986,"line_start":202,"line_end":202,"column_start":1,"column_end":78}},{"value":"!         // `unwrap` the `Option`. In a more complicated program, you might","span":{"file_name":"src/liballoc/rc.rs","byte_start":518987,"byte_end":519065,"line_start":203,"line_end":203,"column_start":1,"column_end":79}},{"value":"!         // need graceful error handling for a `None` result.","span":{"file_name":"src/liballoc/rc.rs","byte_start":519066,"byte_end":519130,"line_start":204,"line_end":204,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":519131,"byte_end":519134,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"!         let gadget = gadget_weak.upgrade().unwrap();","span":{"file_name":"src/liballoc/rc.rs","byte_start":519135,"byte_end":519191,"line_start":206,"line_end":206,"column_start":1,"column_end":57}},{"value":"!         println!(\"Gadget {} owned by {}\", gadget.id, gadget.owner.name);","span":{"file_name":"src/liballoc/rc.rs","byte_start":519192,"byte_end":519268,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"!     }","span":{"file_name":"src/liballoc/rc.rs","byte_start":519269,"byte_end":519278,"line_start":208,"line_end":208,"column_start":1,"column_end":10}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":519279,"byte_end":519282,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"!     // At the end of the function, `gadget_owner`, `gadget1`, and `gadget2`","span":{"file_name":"src/liballoc/rc.rs","byte_start":519283,"byte_end":519362,"line_start":210,"line_end":210,"column_start":1,"column_end":80}},{"value":"!     // are destroyed. There are now no strong (`Rc`) pointers to the","span":{"file_name":"src/liballoc/rc.rs","byte_start":519363,"byte_end":519435,"line_start":211,"line_end":211,"column_start":1,"column_end":73}},{"value":"!     // gadgets, so they are destroyed. This zeroes the reference count on","span":{"file_name":"src/liballoc/rc.rs","byte_start":519436,"byte_end":519513,"line_start":212,"line_end":212,"column_start":1,"column_end":78}},{"value":"!     // Gadget Man, so he gets destroyed as well.","span":{"file_name":"src/liballoc/rc.rs","byte_start":519514,"byte_end":519566,"line_start":213,"line_end":213,"column_start":1,"column_end":53}},{"value":"! }","span":{"file_name":"src/liballoc/rc.rs","byte_start":519567,"byte_end":519572,"line_start":214,"line_end":214,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":519573,"byte_end":519580,"line_start":215,"line_end":215,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/rc.rs","byte_start":519581,"byte_end":519584,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"! [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":519585,"byte_end":519611,"line_start":217,"line_end":217,"column_start":1,"column_end":27}},{"value":"! [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":519612,"byte_end":519642,"line_start":218,"line_end":218,"column_start":1,"column_end":31}},{"value":"! [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/rc.rs","byte_start":519643,"byte_end":519703,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"! [`Cell`]: ../../std/cell/struct.Cell.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":519704,"byte_end":519749,"line_start":220,"line_end":220,"column_start":1,"column_end":46}},{"value":"! [`RefCell`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":519750,"byte_end":519801,"line_start":221,"line_end":221,"column_start":1,"column_end":52}},{"value":"! [send]: ../../std/marker/trait.Send.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":519802,"byte_end":519846,"line_start":222,"line_end":222,"column_start":1,"column_end":45}},{"value":"! [arc]: ../../std/sync/struct.Arc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":519847,"byte_end":519888,"line_start":223,"line_end":223,"column_start":1,"column_end":42}},{"value":"! [`Deref`]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":519889,"byte_end":519934,"line_start":224,"line_end":224,"column_start":1,"column_end":46}},{"value":"! [downgrade]: struct.Rc.html#method.downgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":519935,"byte_end":519983,"line_start":225,"line_end":225,"column_start":1,"column_end":49}},{"value":"! [upgrade]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":519984,"byte_end":520030,"line_start":226,"line_end":226,"column_start":1,"column_end":47}},{"value":"! [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/rc.rs","byte_start":520031,"byte_end":520091,"line_start":227,"line_end":227,"column_start":1,"column_end":61}},{"value":"! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable","span":{"file_name":"src/liballoc/rc.rs","byte_start":520092,"byte_end":520188,"line_start":228,"line_end":228,"column_start":1,"column_end":97}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":520190,"byte_end":520236,"line_start":230,"line_end":230,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2760},"span":{"file_name":"src/liballoc/rc.rs","byte_start":521649,"byte_end":521651,"line_start":281,"line_end":281,"column_start":12,"column_end":14},"name":"Rc","qualname":"::rc::Rc","value":"Rc {  }","parent":null,"children":[{"krate":0,"index":2762},{"krate":0,"index":2763}],"decl_id":null,"docs":" A single-threaded reference-counting pointer. 'Rc' stands for 'Reference\n Counted'.","sig":null,"attributes":[{"value":"/ A single-threaded reference-counting pointer. 'Rc' stands for 'Reference","span":{"file_name":"src/liballoc/rc.rs","byte_start":521101,"byte_end":521177,"line_start":268,"line_end":268,"column_start":1,"column_end":77}},{"value":"/ Counted'.","span":{"file_name":"src/liballoc/rc.rs","byte_start":521178,"byte_end":521191,"line_start":269,"line_end":269,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":521192,"byte_end":521195,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ See the [module-level documentation](./index.html) for more details.","span":{"file_name":"src/liballoc/rc.rs","byte_start":521196,"byte_end":521268,"line_start":271,"line_end":271,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":521269,"byte_end":521272,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ The inherent methods of `Rc` are all associated functions, which means","span":{"file_name":"src/liballoc/rc.rs","byte_start":521273,"byte_end":521347,"line_start":273,"line_end":273,"column_start":1,"column_end":75}},{"value":"/ that you have to call them as e.g., [`Rc::get_mut(&mut value)`][get_mut] instead of","span":{"file_name":"src/liballoc/rc.rs","byte_start":521348,"byte_end":521435,"line_start":274,"line_end":274,"column_start":1,"column_end":88}},{"value":"/ `value.get_mut()`. This avoids conflicts with methods of the inner","span":{"file_name":"src/liballoc/rc.rs","byte_start":521436,"byte_end":521506,"line_start":275,"line_end":275,"column_start":1,"column_end":71}},{"value":"/ type `T`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":521507,"byte_end":521520,"line_start":276,"line_end":276,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":521521,"byte_end":521524,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ [get_mut]: #method.get_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":521525,"byte_end":521555,"line_start":278,"line_end":278,"column_start":1,"column_end":31}},{"value":"lang = \"rc\"","span":{"file_name":"src/liballoc/rc.rs","byte_start":521578,"byte_end":521589,"line_start":279,"line_end":279,"column_start":23,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":521592,"byte_end":521637,"line_start":280,"line_end":280,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":"src/liballoc/rc.rs","byte_start":522653,"byte_end":522656,"line_start":318,"line_end":318,"column_start":12,"column_end":15},"name":"new","qualname":"<Rc<T>>::new","value":"fn (value: T) -> Rc<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Rc<T>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Rc<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":522439,"byte_end":522468,"line_start":308,"line_end":308,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":522473,"byte_end":522476,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":522481,"byte_end":522495,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":522500,"byte_end":522503,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":522508,"byte_end":522515,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":522520,"byte_end":522540,"line_start":313,"line_end":313,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":522545,"byte_end":522548,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":522553,"byte_end":522579,"line_start":315,"line_end":315,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":522584,"byte_end":522591,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":522596,"byte_end":522641,"line_start":317,"line_end":317,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":"src/liballoc/rc.rs","byte_start":523695,"byte_end":523705,"line_start":352,"line_end":352,"column_start":12,"column_end":22},"name":"new_uninit","qualname":"<Rc<T>>::new_uninit","value":"fn () -> Rc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Rc` with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new `Rc` with uninitialized contents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":523122,"byte_end":523176,"line_start":330,"line_end":330,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":523181,"byte_end":523184,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":523189,"byte_end":523203,"line_start":332,"line_end":332,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":523208,"byte_end":523211,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":523216,"byte_end":523223,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":523228,"byte_end":523255,"line_start":335,"line_end":335,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":523260,"byte_end":523294,"line_start":336,"line_end":336,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":523299,"byte_end":523302,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":523307,"byte_end":523327,"line_start":338,"line_end":338,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":523332,"byte_end":523335,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let mut five = Rc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/rc.rs","byte_start":523340,"byte_end":523383,"line_start":340,"line_end":340,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":523388,"byte_end":523391,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":523396,"byte_end":523419,"line_start":342,"line_end":342,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":523424,"byte_end":523459,"line_start":343,"line_end":343,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":523464,"byte_end":523527,"line_start":344,"line_end":344,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":523532,"byte_end":523535,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":523540,"byte_end":523566,"line_start":346,"line_end":346,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":523571,"byte_end":523577,"line_start":347,"line_end":347,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":523582,"byte_end":523585,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/rc.rs","byte_start":523590,"byte_end":523614,"line_start":349,"line_end":349,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":523619,"byte_end":523626,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":523631,"byte_end":523683,"line_start":351,"line_end":351,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2783},"span":{"file_name":"src/liballoc/rc.rs","byte_start":524559,"byte_end":524569,"line_start":381,"line_end":381,"column_start":12,"column_end":22},"name":"new_zeroed","qualname":"<Rc<T>>::new_zeroed","value":"fn () -> Rc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Rc` with uninitialized contents, with the memory\n being filled with `0` bytes.","sig":null,"attributes":[{"value":"/ Constructs a new `Rc` with uninitialized contents, with the memory","span":{"file_name":"src/liballoc/rc.rs","byte_start":523923,"byte_end":523993,"line_start":360,"line_end":360,"column_start":5,"column_end":75}},{"value":"/ being filled with `0` bytes.","span":{"file_name":"src/liballoc/rc.rs","byte_start":523998,"byte_end":524030,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":524035,"byte_end":524038,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ See [`MaybeUninit::zeroed`][zeroed] for examples of correct and","span":{"file_name":"src/liballoc/rc.rs","byte_start":524043,"byte_end":524110,"line_start":363,"line_end":363,"column_start":5,"column_end":72}},{"value":"/ incorrect usage of this method.","span":{"file_name":"src/liballoc/rc.rs","byte_start":524115,"byte_end":524150,"line_start":364,"line_end":364,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":524155,"byte_end":524158,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":524163,"byte_end":524177,"line_start":366,"line_end":366,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":524182,"byte_end":524185,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":524190,"byte_end":524197,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":524202,"byte_end":524229,"line_start":369,"line_end":369,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":524234,"byte_end":524237,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":524242,"byte_end":524262,"line_start":371,"line_end":371,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":524267,"byte_end":524270,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let zero = Rc::<u32>::new_zeroed();","span":{"file_name":"src/liballoc/rc.rs","byte_start":524275,"byte_end":524314,"line_start":373,"line_end":373,"column_start":5,"column_end":44}},{"value":"/ let zero = unsafe { zero.assume_init() };","span":{"file_name":"src/liballoc/rc.rs","byte_start":524319,"byte_end":524364,"line_start":374,"line_end":374,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":524369,"byte_end":524372,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*zero, 0)","span":{"file_name":"src/liballoc/rc.rs","byte_start":524377,"byte_end":524401,"line_start":376,"line_end":376,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":524406,"byte_end":524413,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":524418,"byte_end":524421,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed","span":{"file_name":"src/liballoc/rc.rs","byte_start":524426,"byte_end":524490,"line_start":379,"line_end":379,"column_start":5,"column_end":69}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":524495,"byte_end":524547,"line_start":380,"line_end":380,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2784},"span":{"file_name":"src/liballoc/rc.rs","byte_start":524997,"byte_end":525000,"line_start":392,"line_end":392,"column_start":12,"column_end":15},"name":"pin","qualname":"<Rc<T>>::pin","value":"fn (value: T) -> Pin<Rc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n `value` will be pinned in memory and unable to be moved.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then","span":{"file_name":"src/liballoc/rc.rs","byte_start":524797,"byte_end":524871,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ `value` will be pinned in memory and unable to be moved.","span":{"file_name":"src/liballoc/rc.rs","byte_start":524876,"byte_end":524936,"line_start":390,"line_end":390,"column_start":5,"column_end":65}},{"value":"stable(feature = \"pin\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":524941,"byte_end":524985,"line_start":391,"line_end":391,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"src/liballoc/rc.rs","byte_start":525782,"byte_end":525792,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<Rc<T>>::try_unwrap","value":"fn (this: Self) -> Result<T, Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner value, if the `Rc` has exactly one strong reference.","sig":null,"attributes":[{"value":"/ Returns the inner value, if the `Rc` has exactly one strong reference.","span":{"file_name":"src/liballoc/rc.rs","byte_start":525092,"byte_end":525166,"line_start":396,"line_end":396,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":525171,"byte_end":525174,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Otherwise, an [`Err`][result] is returned with the same `Rc` that was","span":{"file_name":"src/liballoc/rc.rs","byte_start":525179,"byte_end":525252,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ passed in.","span":{"file_name":"src/liballoc/rc.rs","byte_start":525257,"byte_end":525271,"line_start":399,"line_end":399,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":525276,"byte_end":525279,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ This will succeed even if there are outstanding weak references.","span":{"file_name":"src/liballoc/rc.rs","byte_start":525284,"byte_end":525352,"line_start":401,"line_end":401,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":525357,"byte_end":525360,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ [result]: ../../std/result/enum.Result.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":525365,"byte_end":525412,"line_start":403,"line_end":403,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":525417,"byte_end":525420,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":525425,"byte_end":525439,"line_start":405,"line_end":405,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":525444,"byte_end":525447,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":525452,"byte_end":525459,"line_start":407,"line_end":407,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":525464,"byte_end":525484,"line_start":408,"line_end":408,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":525489,"byte_end":525492,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":525497,"byte_end":525520,"line_start":410,"line_end":410,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(Rc::try_unwrap(x), Ok(3));","span":{"file_name":"src/liballoc/rc.rs","byte_start":525525,"byte_end":525566,"line_start":411,"line_end":411,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":525571,"byte_end":525574,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(4);","span":{"file_name":"src/liballoc/rc.rs","byte_start":525579,"byte_end":525602,"line_start":413,"line_end":413,"column_start":5,"column_end":28}},{"value":"/ let _y = Rc::clone(&x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":525607,"byte_end":525634,"line_start":414,"line_end":414,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);","span":{"file_name":"src/liballoc/rc.rs","byte_start":525639,"byte_end":525690,"line_start":415,"line_end":415,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":525695,"byte_end":525702,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":525707,"byte_end":525716,"line_start":417,"line_end":417,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":525721,"byte_end":525770,"line_start":418,"line_end":418,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"src/liballoc/rc.rs","byte_start":527235,"byte_end":527251,"line_start":464,"line_end":464,"column_start":12,"column_end":28},"name":"new_uninit_slice","qualname":"<Rc<[T]>>::new_uninit_slice","value":"fn (len: usize) -> Rc<[mem::MaybeUninit<T>]>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new reference-counted slice with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new reference-counted slice with uninitialized contents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":526467,"byte_end":526540,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":526545,"byte_end":526548,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":526553,"byte_end":526567,"line_start":442,"line_end":442,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":526572,"byte_end":526575,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":526580,"byte_end":526587,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":526592,"byte_end":526619,"line_start":445,"line_end":445,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":526624,"byte_end":526658,"line_start":446,"line_end":446,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":526663,"byte_end":526666,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":526671,"byte_end":526691,"line_start":448,"line_end":448,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":526696,"byte_end":526699,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ let mut values = Rc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":526704,"byte_end":526758,"line_start":450,"line_end":450,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":526763,"byte_end":526766,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":526771,"byte_end":526796,"line_start":452,"line_end":452,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":526801,"byte_end":526836,"line_start":453,"line_end":453,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/rc.rs","byte_start":526841,"byte_end":526909,"line_start":454,"line_end":454,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/rc.rs","byte_start":526914,"byte_end":526982,"line_start":455,"line_end":455,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":526987,"byte_end":527055,"line_start":456,"line_end":456,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527060,"byte_end":527063,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":527068,"byte_end":527096,"line_start":458,"line_end":458,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":527101,"byte_end":527107,"line_start":459,"line_end":459,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527112,"byte_end":527115,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/rc.rs","byte_start":527120,"byte_end":527154,"line_start":461,"line_end":461,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":527159,"byte_end":527166,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":527171,"byte_end":527223,"line_start":463,"line_end":463,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2791},"span":{"file_name":"src/liballoc/rc.rs","byte_start":528368,"byte_end":528379,"line_start":503,"line_end":503,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Rc<mem::MaybeUninit<T>>>::assume_init","value":"fn (self) -> Rc<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Rc<T>`.","sig":null,"attributes":[{"value":"/ Converts to `Rc<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":527403,"byte_end":527427,"line_start":470,"line_end":470,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527432,"byte_end":527435,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":527440,"byte_end":527452,"line_start":472,"line_end":472,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527457,"byte_end":527460,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/rc.rs","byte_start":527465,"byte_end":527506,"line_start":474,"line_end":474,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/rc.rs","byte_start":527511,"byte_end":527571,"line_start":475,"line_end":475,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/rc.rs","byte_start":527576,"byte_end":527614,"line_start":476,"line_end":476,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/rc.rs","byte_start":527619,"byte_end":527681,"line_start":477,"line_end":477,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/rc.rs","byte_start":527686,"byte_end":527726,"line_start":478,"line_end":478,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527731,"byte_end":527734,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/rc.rs","byte_start":527739,"byte_end":527828,"line_start":480,"line_end":480,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527833,"byte_end":527836,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":527841,"byte_end":527855,"line_start":482,"line_end":482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527860,"byte_end":527863,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":527868,"byte_end":527875,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":527880,"byte_end":527907,"line_start":485,"line_end":485,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":527912,"byte_end":527946,"line_start":486,"line_end":486,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527951,"byte_end":527954,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":527959,"byte_end":527979,"line_start":488,"line_end":488,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":527984,"byte_end":527987,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let mut five = Rc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/rc.rs","byte_start":527992,"byte_end":528035,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528040,"byte_end":528043,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":528048,"byte_end":528071,"line_start":492,"line_end":492,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":528076,"byte_end":528111,"line_start":493,"line_end":493,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":528116,"byte_end":528179,"line_start":494,"line_end":494,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528184,"byte_end":528187,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":528192,"byte_end":528218,"line_start":496,"line_end":496,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":528223,"byte_end":528229,"line_start":497,"line_end":497,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528234,"byte_end":528237,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/rc.rs","byte_start":528242,"byte_end":528266,"line_start":499,"line_end":499,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":528271,"byte_end":528278,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":528283,"byte_end":528335,"line_start":501,"line_end":501,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":528340,"byte_end":528349,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"src/liballoc/rc.rs","byte_start":529653,"byte_end":529664,"line_start":544,"line_end":544,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Rc<[mem::MaybeUninit<T>]>>::assume_init","value":"fn (self) -> Rc<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Rc<[T]>`.","sig":null,"attributes":[{"value":"/ Converts to `Rc<[T]>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":528510,"byte_end":528536,"line_start":509,"line_end":509,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528541,"byte_end":528544,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":528549,"byte_end":528561,"line_start":511,"line_end":511,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528566,"byte_end":528569,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/rc.rs","byte_start":528574,"byte_end":528615,"line_start":513,"line_end":513,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/rc.rs","byte_start":528620,"byte_end":528680,"line_start":514,"line_end":514,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/rc.rs","byte_start":528685,"byte_end":528723,"line_start":515,"line_end":515,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/rc.rs","byte_start":528728,"byte_end":528790,"line_start":516,"line_end":516,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/rc.rs","byte_start":528795,"byte_end":528835,"line_start":517,"line_end":517,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528840,"byte_end":528843,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/rc.rs","byte_start":528848,"byte_end":528937,"line_start":519,"line_end":519,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528942,"byte_end":528945,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":528950,"byte_end":528964,"line_start":521,"line_end":521,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":528969,"byte_end":528972,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":528977,"byte_end":528984,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":528989,"byte_end":529016,"line_start":524,"line_end":524,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":529021,"byte_end":529055,"line_start":525,"line_end":525,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":529060,"byte_end":529063,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":529068,"byte_end":529088,"line_start":527,"line_end":527,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":529093,"byte_end":529096,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ let mut values = Rc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":529101,"byte_end":529155,"line_start":529,"line_end":529,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":529160,"byte_end":529163,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":529168,"byte_end":529193,"line_start":531,"line_end":531,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/rc.rs","byte_start":529198,"byte_end":529233,"line_start":532,"line_end":532,"column_start":5,"column_end":40}},{"value":"/     Rc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/rc.rs","byte_start":529238,"byte_end":529306,"line_start":533,"line_end":533,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/rc.rs","byte_start":529311,"byte_end":529379,"line_start":534,"line_end":534,"column_start":5,"column_end":73}},{"value":"/     Rc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":529384,"byte_end":529452,"line_start":535,"line_end":535,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":529457,"byte_end":529460,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/rc.rs","byte_start":529465,"byte_end":529493,"line_start":537,"line_end":537,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/rc.rs","byte_start":529498,"byte_end":529504,"line_start":538,"line_end":538,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":529509,"byte_end":529512,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/rc.rs","byte_start":529517,"byte_end":529551,"line_start":540,"line_end":540,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":529556,"byte_end":529563,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":529568,"byte_end":529620,"line_start":542,"line_end":542,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":529625,"byte_end":529634,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2797},"span":{"file_name":"src/liballoc/rc.rs","byte_start":530316,"byte_end":530324,"line_start":567,"line_end":567,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Rc<T>>::into_raw","value":"fn (this: Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Rc`, returning the wrapped pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Rc`, returning the wrapped pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":529790,"byte_end":529843,"line_start":550,"line_end":550,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":529848,"byte_end":529851,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ To avoid a memory leak the pointer must be converted back to an `Rc` using","span":{"file_name":"src/liballoc/rc.rs","byte_start":529856,"byte_end":529934,"line_start":552,"line_end":552,"column_start":5,"column_end":83}},{"value":"/ [`Rc::from_raw`][from_raw].","span":{"file_name":"src/liballoc/rc.rs","byte_start":529939,"byte_end":529970,"line_start":553,"line_end":553,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":529975,"byte_end":529978,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ [from_raw]: struct.Rc.html#method.from_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":529983,"byte_end":530029,"line_start":555,"line_end":555,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":530034,"byte_end":530037,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":530042,"byte_end":530056,"line_start":557,"line_end":557,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":530061,"byte_end":530064,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":530069,"byte_end":530076,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":530081,"byte_end":530101,"line_start":560,"line_end":560,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":530106,"byte_end":530109,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":530114,"byte_end":530154,"line_start":562,"line_end":562,"column_start":5,"column_end":45}},{"value":"/ let x_ptr = Rc::into_raw(x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":530159,"byte_end":530191,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(unsafe { &*x_ptr }, \"hello\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":530196,"byte_end":530240,"line_start":564,"line_end":564,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":530245,"byte_end":530252,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":530257,"byte_end":530304,"line_start":566,"line_end":566,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2798},"span":{"file_name":"src/liballoc/rc.rs","byte_start":532024,"byte_end":532032,"line_start":612,"line_end":612,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Rc<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an `Rc` from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs an `Rc` from a raw pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531010,"byte_end":531052,"line_start":583,"line_end":583,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531057,"byte_end":531060,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ The raw pointer must have been previously returned by a call to a","span":{"file_name":"src/liballoc/rc.rs","byte_start":531065,"byte_end":531134,"line_start":585,"line_end":585,"column_start":5,"column_end":74}},{"value":"/ [`Rc::into_raw`][into_raw].","span":{"file_name":"src/liballoc/rc.rs","byte_start":531139,"byte_end":531170,"line_start":586,"line_end":586,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531175,"byte_end":531178,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because improper use may lead to memory problems. For example, a","span":{"file_name":"src/liballoc/rc.rs","byte_start":531183,"byte_end":531275,"line_start":588,"line_end":588,"column_start":5,"column_end":97}},{"value":"/ double-free may occur if the function is called twice on the same raw pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531280,"byte_end":531362,"line_start":589,"line_end":589,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531367,"byte_end":531370,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ [into_raw]: struct.Rc.html#method.into_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":531375,"byte_end":531421,"line_start":591,"line_end":591,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531426,"byte_end":531429,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":531434,"byte_end":531448,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531453,"byte_end":531456,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":531461,"byte_end":531468,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":531473,"byte_end":531493,"line_start":596,"line_end":596,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531498,"byte_end":531501,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":531506,"byte_end":531546,"line_start":598,"line_end":598,"column_start":5,"column_end":45}},{"value":"/ let x_ptr = Rc::into_raw(x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":531551,"byte_end":531583,"line_start":599,"line_end":599,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531588,"byte_end":531591,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":531596,"byte_end":531608,"line_start":601,"line_end":601,"column_start":5,"column_end":17}},{"value":"/     // Convert back to an `Rc` to prevent leak.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531613,"byte_end":531664,"line_start":602,"line_end":602,"column_start":5,"column_end":56}},{"value":"/     let x = Rc::from_raw(x_ptr);","span":{"file_name":"src/liballoc/rc.rs","byte_start":531669,"byte_end":531705,"line_start":603,"line_end":603,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(&*x, \"hello\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":531710,"byte_end":531743,"line_start":604,"line_end":604,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531748,"byte_end":531751,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/     // Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.","span":{"file_name":"src/liballoc/rc.rs","byte_start":531756,"byte_end":531829,"line_start":606,"line_end":606,"column_start":5,"column_end":78}},{"value":"/ }","span":{"file_name":"src/liballoc/rc.rs","byte_start":531834,"byte_end":531839,"line_start":607,"line_end":607,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":531844,"byte_end":531847,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!","span":{"file_name":"src/liballoc/rc.rs","byte_start":531852,"byte_end":531941,"line_start":609,"line_end":609,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":531946,"byte_end":531953,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":531958,"byte_end":532005,"line_start":611,"line_end":611,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2799},"span":{"file_name":"src/liballoc/rc.rs","byte_start":532797,"byte_end":532814,"line_start":638,"line_end":638,"column_start":12,"column_end":29},"name":"into_raw_non_null","qualname":"<Rc<T>>::into_raw_non_null","value":"fn (this: Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.","sig":null,"attributes":[{"value":"/ Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":532323,"byte_end":532392,"line_start":622,"line_end":622,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":532397,"byte_end":532400,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":532405,"byte_end":532419,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":532424,"byte_end":532427,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":532432,"byte_end":532439,"line_start":626,"line_end":626,"column_start":5,"column_end":12}},{"value":"/ #![feature(rc_into_raw_non_null)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":532444,"byte_end":532481,"line_start":627,"line_end":627,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":532486,"byte_end":532489,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":532494,"byte_end":532514,"line_start":629,"line_end":629,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":532519,"byte_end":532522,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ let x = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":532527,"byte_end":532567,"line_start":631,"line_end":631,"column_start":5,"column_end":45}},{"value":"/ let ptr = Rc::into_raw_non_null(x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":532572,"byte_end":532611,"line_start":632,"line_end":632,"column_start":5,"column_end":44}},{"value":"/ let deref = unsafe { ptr.as_ref() };","span":{"file_name":"src/liballoc/rc.rs","byte_start":532616,"byte_end":532656,"line_start":633,"line_end":633,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(deref, \"hello\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":532661,"byte_end":532692,"line_start":634,"line_end":634,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":532697,"byte_end":532704,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":532709,"byte_end":532771,"line_start":636,"line_end":636,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":532776,"byte_end":532785,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":"src/liballoc/rc.rs","byte_start":533330,"byte_end":533339,"line_start":657,"line_end":657,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<Rc<T>>::downgrade","value":"fn (this: &Self) -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Weak`][weak] pointer to this allocation.","sig":null,"attributes":[{"value":"/ Creates a new [`Weak`][weak] pointer to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":532988,"byte_end":533048,"line_start":643,"line_end":643,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533053,"byte_end":533056,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":533061,"byte_end":533089,"line_start":645,"line_end":645,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533094,"byte_end":533097,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":533102,"byte_end":533116,"line_start":647,"line_end":647,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533121,"byte_end":533124,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":533129,"byte_end":533136,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":533141,"byte_end":533161,"line_start":650,"line_end":650,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533166,"byte_end":533169,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":533174,"byte_end":533200,"line_start":652,"line_end":652,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533205,"byte_end":533208,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Rc::downgrade(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":533213,"byte_end":533254,"line_start":654,"line_end":654,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":533259,"byte_end":533266,"line_start":655,"line_end":655,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":533271,"byte_end":533318,"line_start":656,"line_end":656,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2801},"span":{"file_name":"src/liballoc/rc.rs","byte_start":533946,"byte_end":533956,"line_start":680,"line_end":680,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Rc<T>>::weak_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of [`Weak`][weak] pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of [`Weak`][weak] pointers to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":533534,"byte_end":533600,"line_start":664,"line_end":664,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533605,"byte_end":533608,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":533613,"byte_end":533641,"line_start":666,"line_end":666,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533646,"byte_end":533649,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":533654,"byte_end":533668,"line_start":668,"line_end":668,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533673,"byte_end":533676,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":533681,"byte_end":533688,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":533693,"byte_end":533713,"line_start":671,"line_end":671,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533718,"byte_end":533721,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":533726,"byte_end":533752,"line_start":673,"line_end":673,"column_start":5,"column_end":31}},{"value":"/ let _weak_five = Rc::downgrade(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":533757,"byte_end":533799,"line_start":674,"line_end":674,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":533804,"byte_end":533807,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, Rc::weak_count(&five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":533812,"byte_end":533853,"line_start":676,"line_end":676,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":533858,"byte_end":533865,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":533870,"byte_end":533879,"line_start":678,"line_end":678,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":533884,"byte_end":533934,"line_start":679,"line_end":679,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2802},"span":{"file_name":"src/liballoc/rc.rs","byte_start":534384,"byte_end":534396,"line_start":698,"line_end":698,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Rc<T>>::strong_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Rc`) pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Rc`) pointers to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":534016,"byte_end":534081,"line_start":684,"line_end":684,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":534086,"byte_end":534089,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":534094,"byte_end":534108,"line_start":686,"line_end":686,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":534113,"byte_end":534116,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":534121,"byte_end":534128,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":534133,"byte_end":534153,"line_start":689,"line_end":689,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":534158,"byte_end":534161,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":534166,"byte_end":534192,"line_start":691,"line_end":691,"column_start":5,"column_end":31}},{"value":"/ let _also_five = Rc::clone(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":534197,"byte_end":534235,"line_start":692,"line_end":692,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":534240,"byte_end":534243,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, Rc::strong_count(&five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":534248,"byte_end":534291,"line_start":694,"line_end":694,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":534296,"byte_end":534303,"line_start":695,"line_end":695,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":534308,"byte_end":534317,"line_start":696,"line_end":696,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":534322,"byte_end":534372,"line_start":697,"line_end":697,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2804},"span":{"file_name":"src/liballoc/rc.rs","byte_start":535681,"byte_end":535688,"line_start":739,"line_end":739,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Rc<T>>::get_mut","value":"fn (this: &mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Rc`, if there are\n no other `Rc` or [`Weak`][weak] pointers to the same allocation.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Rc`, if there are","span":{"file_name":"src/liballoc/rc.rs","byte_start":534726,"byte_end":534791,"line_start":711,"line_end":711,"column_start":5,"column_end":70}},{"value":"/ no other `Rc` or [`Weak`][weak] pointers to the same allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":534796,"byte_end":534864,"line_start":712,"line_end":712,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":534869,"byte_end":534872,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] otherwise, because it is not safe to","span":{"file_name":"src/liballoc/rc.rs","byte_start":534877,"byte_end":534934,"line_start":714,"line_end":714,"column_start":5,"column_end":62}},{"value":"/ mutate a shared value.","span":{"file_name":"src/liballoc/rc.rs","byte_start":534939,"byte_end":534965,"line_start":715,"line_end":715,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":534970,"byte_end":534973,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ See also [`make_mut`][make_mut], which will [`clone`][clone]","span":{"file_name":"src/liballoc/rc.rs","byte_start":534978,"byte_end":535042,"line_start":717,"line_end":717,"column_start":5,"column_end":69}},{"value":"/ the inner value when there are other pointers.","span":{"file_name":"src/liballoc/rc.rs","byte_start":535047,"byte_end":535097,"line_start":718,"line_end":718,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":535102,"byte_end":535105,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":535110,"byte_end":535138,"line_start":720,"line_end":720,"column_start":5,"column_end":33}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/rc.rs","byte_start":535143,"byte_end":535203,"line_start":721,"line_end":721,"column_start":5,"column_end":65}},{"value":"/ [make_mut]: struct.Rc.html#method.make_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":535208,"byte_end":535254,"line_start":722,"line_end":722,"column_start":5,"column_end":51}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/rc.rs","byte_start":535259,"byte_end":535319,"line_start":723,"line_end":723,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":535324,"byte_end":535327,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":535332,"byte_end":535346,"line_start":725,"line_end":725,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":535351,"byte_end":535354,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":535359,"byte_end":535366,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":535371,"byte_end":535391,"line_start":728,"line_end":728,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":535396,"byte_end":535399,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ let mut x = Rc::new(3);","span":{"file_name":"src/liballoc/rc.rs","byte_start":535404,"byte_end":535431,"line_start":730,"line_end":730,"column_start":5,"column_end":32}},{"value":"/ *Rc::get_mut(&mut x).unwrap() = 4;","span":{"file_name":"src/liballoc/rc.rs","byte_start":535436,"byte_end":535474,"line_start":731,"line_end":731,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(*x, 4);","span":{"file_name":"src/liballoc/rc.rs","byte_start":535479,"byte_end":535501,"line_start":732,"line_end":732,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":535506,"byte_end":535509,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ let _y = Rc::clone(&x);","span":{"file_name":"src/liballoc/rc.rs","byte_start":535514,"byte_end":535541,"line_start":734,"line_end":734,"column_start":5,"column_end":32}},{"value":"/ assert!(Rc::get_mut(&mut x).is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":535546,"byte_end":535589,"line_start":735,"line_end":735,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":535594,"byte_end":535601,"line_start":736,"line_end":736,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":535606,"byte_end":535615,"line_start":737,"line_end":737,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":535620,"byte_end":535669,"line_start":738,"line_end":738,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2805},"span":{"file_name":"src/liballoc/rc.rs","byte_start":536731,"byte_end":536748,"line_start":772,"line_end":772,"column_start":19,"column_end":36},"name":"get_mut_unchecked","qualname":"<Rc<T>>::get_mut_unchecked","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Rc`,\n without any check.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Rc`,","span":{"file_name":"src/liballoc/rc.rs","byte_start":535831,"byte_end":535883,"line_start":743,"line_end":743,"column_start":5,"column_end":57}},{"value":"/ without any check.","span":{"file_name":"src/liballoc/rc.rs","byte_start":535888,"byte_end":535910,"line_start":744,"line_end":744,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":535915,"byte_end":535918,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`], which is safe and does appropriate checks.","span":{"file_name":"src/liballoc/rc.rs","byte_start":535923,"byte_end":535991,"line_start":746,"line_end":746,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":535996,"byte_end":535999,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: struct.Rc.html#method.get_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":536004,"byte_end":536050,"line_start":748,"line_end":748,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":536055,"byte_end":536058,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":536063,"byte_end":536075,"line_start":750,"line_end":750,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":536080,"byte_end":536083,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Any other `Rc` or [`Weak`] pointers to the same allocation must not be dereferenced","span":{"file_name":"src/liballoc/rc.rs","byte_start":536088,"byte_end":536175,"line_start":752,"line_end":752,"column_start":5,"column_end":92}},{"value":"/ for the duration of the returned borrow.","span":{"file_name":"src/liballoc/rc.rs","byte_start":536180,"byte_end":536224,"line_start":753,"line_end":753,"column_start":5,"column_end":49}},{"value":"/ This is trivially the case if no such pointers exist,","span":{"file_name":"src/liballoc/rc.rs","byte_start":536229,"byte_end":536286,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/ for example immediately after `Rc::new`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":536291,"byte_end":536335,"line_start":755,"line_end":755,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":536340,"byte_end":536343,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":536348,"byte_end":536362,"line_start":757,"line_end":757,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":536367,"byte_end":536370,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":536375,"byte_end":536382,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":536387,"byte_end":536421,"line_start":760,"line_end":760,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":536426,"byte_end":536429,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":536434,"byte_end":536454,"line_start":762,"line_end":762,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":536459,"byte_end":536462,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ let mut x = Rc::new(String::new());","span":{"file_name":"src/liballoc/rc.rs","byte_start":536467,"byte_end":536506,"line_start":764,"line_end":764,"column_start":5,"column_end":44}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/rc.rs","byte_start":536511,"byte_end":536523,"line_start":765,"line_end":765,"column_start":5,"column_end":17}},{"value":"/     Rc::get_mut_unchecked(&mut x).push_str(\"foo\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":536528,"byte_end":536581,"line_start":766,"line_end":766,"column_start":5,"column_end":58}},{"value":"/ }","span":{"file_name":"src/liballoc/rc.rs","byte_start":536586,"byte_end":536591,"line_start":767,"line_end":767,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(*x, \"foo\");","span":{"file_name":"src/liballoc/rc.rs","byte_start":536596,"byte_end":536622,"line_start":768,"line_end":768,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":536627,"byte_end":536634,"line_start":769,"line_end":769,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":536639,"byte_end":536648,"line_start":770,"line_end":770,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"get_mut_unchecked\", issue = \"63292\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":536653,"byte_end":536712,"line_start":771,"line_end":771,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2806},"span":{"file_name":"src/liballoc/rc.rs","byte_start":537374,"byte_end":537380,"line_start":795,"line_end":795,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Rc<T>>::ptr_eq","value":"fn (this: &Self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Rc`s point to the same allocation\n (in a vein similar to [`ptr::eq`]).","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":536826,"byte_end":536835,"line_start":776,"line_end":776,"column_start":5,"column_end":14}},{"value":"stable(feature = \"ptr_eq\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":536840,"byte_end":536887,"line_start":777,"line_end":777,"column_start":5,"column_end":52}},{"value":"/ Returns `true` if the two `Rc`s point to the same allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":536892,"byte_end":536956,"line_start":778,"line_end":778,"column_start":5,"column_end":69}},{"value":"/ (in a vein similar to [`ptr::eq`]).","span":{"file_name":"src/liballoc/rc.rs","byte_start":536961,"byte_end":537000,"line_start":779,"line_end":779,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537005,"byte_end":537008,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":537013,"byte_end":537027,"line_start":781,"line_end":781,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537032,"byte_end":537035,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":537040,"byte_end":537047,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":537052,"byte_end":537072,"line_start":784,"line_end":784,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537077,"byte_end":537080,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":537085,"byte_end":537111,"line_start":786,"line_end":786,"column_start":5,"column_end":31}},{"value":"/ let same_five = Rc::clone(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":537116,"byte_end":537153,"line_start":787,"line_end":787,"column_start":5,"column_end":42}},{"value":"/ let other_five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":537158,"byte_end":537190,"line_start":788,"line_end":788,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537195,"byte_end":537198,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ assert!(Rc::ptr_eq(&five, &same_five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":537203,"byte_end":537246,"line_start":790,"line_end":790,"column_start":5,"column_end":48}},{"value":"/ assert!(!Rc::ptr_eq(&five, &other_five));","span":{"file_name":"src/liballoc/rc.rs","byte_start":537251,"byte_end":537296,"line_start":791,"line_end":791,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":537301,"byte_end":537308,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537313,"byte_end":537316,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":537321,"byte_end":537362,"line_start":794,"line_end":794,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2809},"span":{"file_name":"src/liballoc/rc.rs","byte_start":539290,"byte_end":539298,"line_start":852,"line_end":852,"column_start":12,"column_end":20},"name":"make_mut","qualname":"<Rc<T>>::make_mut","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Makes a mutable reference into the given `Rc`.","sig":null,"attributes":[{"value":"/ Makes a mutable reference into the given `Rc`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":537502,"byte_end":537552,"line_start":801,"line_end":801,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537557,"byte_end":537560,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ If there are other `Rc` pointers to the same allocation, then `make_mut` will","span":{"file_name":"src/liballoc/rc.rs","byte_start":537565,"byte_end":537646,"line_start":803,"line_end":803,"column_start":5,"column_end":86}},{"value":"/ [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also","span":{"file_name":"src/liballoc/rc.rs","byte_start":537651,"byte_end":537742,"line_start":804,"line_end":804,"column_start":5,"column_end":96}},{"value":"/ referred to as clone-on-write.","span":{"file_name":"src/liballoc/rc.rs","byte_start":537747,"byte_end":537781,"line_start":805,"line_end":805,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537786,"byte_end":537789,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ If there are no other `Rc` pointers to this allocation, then [`Weak`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":537794,"byte_end":537867,"line_start":807,"line_end":807,"column_start":5,"column_end":78}},{"value":"/ pointers to this allocation will be disassociated.","span":{"file_name":"src/liballoc/rc.rs","byte_start":537872,"byte_end":537926,"line_start":808,"line_end":808,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":537931,"byte_end":537934,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`], which will fail rather than cloning.","span":{"file_name":"src/liballoc/rc.rs","byte_start":537939,"byte_end":538001,"line_start":810,"line_end":810,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538006,"byte_end":538009,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":538014,"byte_end":538044,"line_start":812,"line_end":812,"column_start":5,"column_end":35}},{"value":"/ [`clone`]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/rc.rs","byte_start":538049,"byte_end":538111,"line_start":813,"line_end":813,"column_start":5,"column_end":67}},{"value":"/ [`get_mut`]: struct.Rc.html#method.get_mut","span":{"file_name":"src/liballoc/rc.rs","byte_start":538116,"byte_end":538162,"line_start":814,"line_end":814,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538167,"byte_end":538170,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":538175,"byte_end":538189,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538194,"byte_end":538197,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":538202,"byte_end":538209,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":538214,"byte_end":538234,"line_start":819,"line_end":819,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538239,"byte_end":538242,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ let mut data = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":538247,"byte_end":538277,"line_start":821,"line_end":821,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538282,"byte_end":538285,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ *Rc::make_mut(&mut data) += 1;        // Won't clone anything","span":{"file_name":"src/liballoc/rc.rs","byte_start":538290,"byte_end":538355,"line_start":823,"line_end":823,"column_start":5,"column_end":70}},{"value":"/ let mut other_data = Rc::clone(&data);    // Won't clone inner data","span":{"file_name":"src/liballoc/rc.rs","byte_start":538360,"byte_end":538431,"line_start":824,"line_end":824,"column_start":5,"column_end":76}},{"value":"/ *Rc::make_mut(&mut data) += 1;        // Clones inner data","span":{"file_name":"src/liballoc/rc.rs","byte_start":538436,"byte_end":538498,"line_start":825,"line_end":825,"column_start":5,"column_end":67}},{"value":"/ *Rc::make_mut(&mut data) += 1;        // Won't clone anything","span":{"file_name":"src/liballoc/rc.rs","byte_start":538503,"byte_end":538568,"line_start":826,"line_end":826,"column_start":5,"column_end":70}},{"value":"/ *Rc::make_mut(&mut other_data) *= 2;  // Won't clone anything","span":{"file_name":"src/liballoc/rc.rs","byte_start":538573,"byte_end":538638,"line_start":827,"line_end":827,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538643,"byte_end":538646,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ // Now `data` and `other_data` point to different allocations.","span":{"file_name":"src/liballoc/rc.rs","byte_start":538651,"byte_end":538717,"line_start":829,"line_end":829,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(*data, 8);","span":{"file_name":"src/liballoc/rc.rs","byte_start":538722,"byte_end":538747,"line_start":830,"line_end":830,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*other_data, 12);","span":{"file_name":"src/liballoc/rc.rs","byte_start":538752,"byte_end":538784,"line_start":831,"line_end":831,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":538789,"byte_end":538796,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538801,"byte_end":538804,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ [`Weak`] pointers will be disassociated:","span":{"file_name":"src/liballoc/rc.rs","byte_start":538809,"byte_end":538853,"line_start":834,"line_end":834,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538858,"byte_end":538861,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":538866,"byte_end":538873,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":538878,"byte_end":538898,"line_start":837,"line_end":837,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538903,"byte_end":538906,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let mut data = Rc::new(75);","span":{"file_name":"src/liballoc/rc.rs","byte_start":538911,"byte_end":538942,"line_start":839,"line_end":839,"column_start":5,"column_end":36}},{"value":"/ let weak = Rc::downgrade(&data);","span":{"file_name":"src/liballoc/rc.rs","byte_start":538947,"byte_end":538983,"line_start":840,"line_end":840,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":538988,"byte_end":538991,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert!(75 == *data);","span":{"file_name":"src/liballoc/rc.rs","byte_start":538996,"byte_end":539021,"line_start":842,"line_end":842,"column_start":5,"column_end":30}},{"value":"/ assert!(75 == *weak.upgrade().unwrap());","span":{"file_name":"src/liballoc/rc.rs","byte_start":539026,"byte_end":539070,"line_start":843,"line_end":843,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":539075,"byte_end":539078,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ *Rc::make_mut(&mut data) += 1;","span":{"file_name":"src/liballoc/rc.rs","byte_start":539083,"byte_end":539117,"line_start":845,"line_end":845,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":539122,"byte_end":539125,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ assert!(76 == *data);","span":{"file_name":"src/liballoc/rc.rs","byte_start":539130,"byte_end":539155,"line_start":847,"line_end":847,"column_start":5,"column_end":30}},{"value":"/ assert!(weak.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":539160,"byte_end":539198,"line_start":848,"line_end":848,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":539203,"byte_end":539210,"line_start":849,"line_end":849,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":539215,"byte_end":539224,"line_start":850,"line_end":850,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":539229,"byte_end":539278,"line_start":851,"line_end":851,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2811},"span":{"file_name":"src/liballoc/rc.rs","byte_start":541035,"byte_end":541043,"line_start":898,"line_end":898,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Rc<Any>>::downcast","value":"fn <T> (self) -> Result<Rc<T>, Rc<dyn Any>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the `Rc<dyn Any>` to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":540428,"byte_end":540437,"line_start":878,"line_end":878,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_downcast\", since = \"1.29.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":540442,"byte_end":540494,"line_start":879,"line_end":879,"column_start":5,"column_end":57}},{"value":"/ Attempt to downcast the `Rc<dyn Any>` to a concrete type.","span":{"file_name":"src/liballoc/rc.rs","byte_start":540499,"byte_end":540560,"line_start":880,"line_end":880,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540565,"byte_end":540568,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":540573,"byte_end":540587,"line_start":882,"line_end":882,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540592,"byte_end":540595,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":540600,"byte_end":540607,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/rc.rs","byte_start":540612,"byte_end":540634,"line_start":885,"line_end":885,"column_start":5,"column_end":27}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":540639,"byte_end":540659,"line_start":886,"line_end":886,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540664,"byte_end":540667,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Rc<dyn Any>) {","span":{"file_name":"src/liballoc/rc.rs","byte_start":540672,"byte_end":540716,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/rc.rs","byte_start":540721,"byte_end":540777,"line_start":889,"line_end":889,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/rc.rs","byte_start":540782,"byte_end":540844,"line_start":890,"line_end":890,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/rc.rs","byte_start":540849,"byte_end":540858,"line_start":891,"line_end":891,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/rc.rs","byte_start":540863,"byte_end":540868,"line_start":892,"line_end":892,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":540873,"byte_end":540876,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/rc.rs","byte_start":540881,"byte_end":540927,"line_start":894,"line_end":894,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Rc::new(my_string));","span":{"file_name":"src/liballoc/rc.rs","byte_start":540932,"byte_end":540972,"line_start":895,"line_end":895,"column_start":5,"column_end":45}},{"value":"/ print_if_string(Rc::new(0i8));","span":{"file_name":"src/liballoc/rc.rs","byte_start":540977,"byte_end":541011,"line_start":896,"line_end":896,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":541016,"byte_end":541023,"line_start":897,"line_end":897,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"src/liballoc/rc.rs","byte_start":546122,"byte_end":546132,"line_start":1048,"line_end":1048,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::rc::RcFromSlice::from_slice","value":"fn (slice: &[T]) -> Self","parent":{"krate":0,"index":2842},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2868},"span":{"file_name":"src/liballoc/rc.rs","byte_start":549133,"byte_end":549135,"line_start":1169,"line_end":1169,"column_start":8,"column_end":10},"name":"eq","qualname":"::rc::RcEqIdent::eq","value":"fn (&self, other: &Rc<T>) -> bool","parent":{"krate":0,"index":2866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2869},"span":{"file_name":"src/liballoc/rc.rs","byte_start":549174,"byte_end":549176,"line_start":1170,"line_end":1170,"column_start":8,"column_end":10},"name":"ne","qualname":"::rc::RcEqIdent::ne","value":"fn (&self, other: &Rc<T>) -> bool","parent":{"krate":0,"index":2866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":"src/liballoc/rc.rs","byte_start":558659,"byte_end":558668,"line_start":1519,"line_end":1519,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::rc::RcFromIter::from_iter","value":"fn (iter: I) -> Self","parent":{"krate":0,"index":2935},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2951},"span":{"file_name":"src/liballoc/rc.rs","byte_start":561675,"byte_end":561679,"line_start":1590,"line_end":1590,"column_start":12,"column_end":16},"name":"Weak","qualname":"::rc::Weak","value":"Weak {  }","parent":null,"children":[{"krate":0,"index":2953}],"decl_id":null,"docs":" `Weak` is a version of [`Rc`] that holds a non-owning reference to the\n managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\n pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.","sig":null,"attributes":[{"value":"/ `Weak` is a version of [`Rc`] that holds a non-owning reference to the","span":{"file_name":"src/liballoc/rc.rs","byte_start":560199,"byte_end":560273,"line_start":1565,"line_end":1565,"column_start":1,"column_end":75}},{"value":"/ managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`","span":{"file_name":"src/liballoc/rc.rs","byte_start":560274,"byte_end":560361,"line_start":1566,"line_end":1566,"column_start":1,"column_end":88}},{"value":"/ pointer, which returns an [`Option`]`<`[`Rc`]`<T>>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":560362,"byte_end":560418,"line_start":1567,"line_end":1567,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":560419,"byte_end":560422,"line_start":1568,"line_end":1568,"column_start":1,"column_end":4}},{"value":"/ Since a `Weak` reference does not count towards ownership, it will not","span":{"file_name":"src/liballoc/rc.rs","byte_start":560423,"byte_end":560497,"line_start":1569,"line_end":1569,"column_start":1,"column_end":75}},{"value":"/ prevent the value stored in the allocation from being dropped, and `Weak` itself makes no","span":{"file_name":"src/liballoc/rc.rs","byte_start":560498,"byte_end":560591,"line_start":1570,"line_end":1570,"column_start":1,"column_end":94}},{"value":"/ guarantees about the value still being present. Thus it may return [`None`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":560592,"byte_end":560671,"line_start":1571,"line_end":1571,"column_start":1,"column_end":80}},{"value":"/ when [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":560672,"byte_end":560761,"line_start":1572,"line_end":1572,"column_start":1,"column_end":90}},{"value":"/ itself (the backing store) from being deallocated.","span":{"file_name":"src/liballoc/rc.rs","byte_start":560762,"byte_end":560816,"line_start":1573,"line_end":1573,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":560817,"byte_end":560820,"line_start":1574,"line_end":1574,"column_start":1,"column_end":4}},{"value":"/ A `Weak` pointer is useful for keeping a temporary reference to the allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":560821,"byte_end":560903,"line_start":1575,"line_end":1575,"column_start":1,"column_end":83}},{"value":"/ managed by [`Rc`] without preventing its inner value from being dropped. It is also used to","span":{"file_name":"src/liballoc/rc.rs","byte_start":560904,"byte_end":560999,"line_start":1576,"line_end":1576,"column_start":1,"column_end":96}},{"value":"/ prevent circular references between [`Rc`] pointers, since mutual owning references","span":{"file_name":"src/liballoc/rc.rs","byte_start":561000,"byte_end":561087,"line_start":1577,"line_end":1577,"column_start":1,"column_end":88}},{"value":"/ would never allow either [`Rc`] to be dropped. For example, a tree could","span":{"file_name":"src/liballoc/rc.rs","byte_start":561088,"byte_end":561164,"line_start":1578,"line_end":1578,"column_start":1,"column_end":77}},{"value":"/ have strong [`Rc`] pointers from parent nodes to children, and `Weak`","span":{"file_name":"src/liballoc/rc.rs","byte_start":561165,"byte_end":561238,"line_start":1579,"line_end":1579,"column_start":1,"column_end":74}},{"value":"/ pointers from children back to their parents.","span":{"file_name":"src/liballoc/rc.rs","byte_start":561239,"byte_end":561288,"line_start":1580,"line_end":1580,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":561289,"byte_end":561292,"line_start":1581,"line_end":1581,"column_start":1,"column_end":4}},{"value":"/ The typical way to obtain a `Weak` pointer is to call [`Rc::downgrade`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":561293,"byte_end":561369,"line_start":1582,"line_end":1582,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":561370,"byte_end":561373,"line_start":1583,"line_end":1583,"column_start":1,"column_end":4}},{"value":"/ [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":561374,"byte_end":561400,"line_start":1584,"line_end":1584,"column_start":1,"column_end":27}},{"value":"/ [`Rc::downgrade`]: struct.Rc.html#method.downgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":561401,"byte_end":561455,"line_start":1585,"line_end":1585,"column_start":1,"column_end":55}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":561456,"byte_end":561504,"line_start":1586,"line_end":1586,"column_start":1,"column_end":49}},{"value":"/ [`Option`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":561505,"byte_end":561554,"line_start":1587,"line_end":1587,"column_start":1,"column_end":50}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/rc.rs","byte_start":561555,"byte_end":561615,"line_start":1588,"line_end":1588,"column_start":1,"column_end":61}},{"value":"stable(feature = \"rc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":561616,"byte_end":561663,"line_start":1589,"line_end":1589,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"src/liballoc/rc.rs","byte_start":563027,"byte_end":563030,"line_start":1626,"line_end":1626,"column_start":12,"column_end":15},"name":"new","qualname":"<Weak<T>>::new","value":"fn () -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Weak<T>`, without allocating any memory.\n Calling [`upgrade`] on the return value always gives [`None`].","sig":null,"attributes":[{"value":"/ Constructs a new `Weak<T>`, without allocating any memory.","span":{"file_name":"src/liballoc/rc.rs","byte_start":562542,"byte_end":562604,"line_start":1611,"line_end":1611,"column_start":5,"column_end":67}},{"value":"/ Calling [`upgrade`] on the return value always gives [`None`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":562609,"byte_end":562675,"line_start":1612,"line_end":1612,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":562680,"byte_end":562683,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ [`upgrade`]: #method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":562688,"byte_end":562720,"line_start":1614,"line_end":1614,"column_start":5,"column_end":37}},{"value":"/ [`None`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":562725,"byte_end":562772,"line_start":1615,"line_end":1615,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":562777,"byte_end":562780,"line_start":1616,"line_end":1616,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":562785,"byte_end":562799,"line_start":1617,"line_end":1617,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":562804,"byte_end":562807,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":562812,"byte_end":562819,"line_start":1619,"line_end":1619,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Weak;","span":{"file_name":"src/liballoc/rc.rs","byte_start":562824,"byte_end":562846,"line_start":1620,"line_end":1620,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":562851,"byte_end":562854,"line_start":1621,"line_end":1621,"column_start":5,"column_end":8}},{"value":"/ let empty: Weak<i64> = Weak::new();","span":{"file_name":"src/liballoc/rc.rs","byte_start":562859,"byte_end":562898,"line_start":1622,"line_end":1622,"column_start":5,"column_end":44}},{"value":"/ assert!(empty.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":562903,"byte_end":562942,"line_start":1623,"line_end":1623,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":562947,"byte_end":562954,"line_start":1624,"line_end":1624,"column_start":5,"column_end":12}},{"value":"stable(feature = \"downgraded_weak\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":562959,"byte_end":563015,"line_start":1625,"line_end":1625,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2967},"span":{"file_name":"src/liballoc/rc.rs","byte_start":564178,"byte_end":564184,"line_start":1658,"line_end":1658,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<Weak<T>>::as_raw","value":"fn (&self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":563144,"byte_end":563217,"line_start":1630,"line_end":1630,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":563222,"byte_end":563225,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ The pointer is valid only if there are some strong references. The pointer may be dangling","span":{"file_name":"src/liballoc/rc.rs","byte_start":563230,"byte_end":563324,"line_start":1632,"line_end":1632,"column_start":5,"column_end":99}},{"value":"/ or even [`null`] otherwise.","span":{"file_name":"src/liballoc/rc.rs","byte_start":563329,"byte_end":563360,"line_start":1633,"line_end":1633,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":563365,"byte_end":563368,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":563373,"byte_end":563387,"line_start":1635,"line_end":1635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":563392,"byte_end":563395,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":563400,"byte_end":563407,"line_start":1637,"line_end":1637,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":563412,"byte_end":563442,"line_start":1638,"line_end":1638,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":563447,"byte_end":563450,"line_start":1639,"line_end":1639,"column_start":5,"column_end":8}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":563455,"byte_end":563475,"line_start":1640,"line_end":1640,"column_start":5,"column_end":25}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/rc.rs","byte_start":563480,"byte_end":563497,"line_start":1641,"line_end":1641,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":563502,"byte_end":563505,"line_start":1642,"line_end":1642,"column_start":5,"column_end":8}},{"value":"/ let strong = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":563510,"byte_end":563555,"line_start":1643,"line_end":1643,"column_start":5,"column_end":50}},{"value":"/ let weak = Rc::downgrade(&strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":563560,"byte_end":563598,"line_start":1644,"line_end":1644,"column_start":5,"column_end":43}},{"value":"/ // Both point to the same object","span":{"file_name":"src/liballoc/rc.rs","byte_start":563603,"byte_end":563639,"line_start":1645,"line_end":1645,"column_start":5,"column_end":41}},{"value":"/ assert!(ptr::eq(&*strong, weak.as_raw()));","span":{"file_name":"src/liballoc/rc.rs","byte_start":563644,"byte_end":563690,"line_start":1646,"line_end":1646,"column_start":5,"column_end":51}},{"value":"/ // The strong here keeps it alive, so we can still access the object.","span":{"file_name":"src/liballoc/rc.rs","byte_start":563695,"byte_end":563768,"line_start":1647,"line_end":1647,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/rc.rs","byte_start":563773,"byte_end":563825,"line_start":1648,"line_end":1648,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":563830,"byte_end":563833,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":563838,"byte_end":563855,"line_start":1650,"line_end":1650,"column_start":5,"column_end":22}},{"value":"/ // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to","span":{"file_name":"src/liballoc/rc.rs","byte_start":563860,"byte_end":563949,"line_start":1651,"line_end":1651,"column_start":5,"column_end":94}},{"value":"/ // undefined behaviour.","span":{"file_name":"src/liballoc/rc.rs","byte_start":563954,"byte_end":563981,"line_start":1652,"line_end":1652,"column_start":5,"column_end":32}},{"value":"/ // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/rc.rs","byte_start":563986,"byte_end":564041,"line_start":1653,"line_end":1653,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":564046,"byte_end":564053,"line_start":1654,"line_end":1654,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":564058,"byte_end":564061,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ [`null`]: ../../std/ptr/fn.null.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":564066,"byte_end":564106,"line_start":1656,"line_end":1656,"column_start":5,"column_end":45}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":564111,"byte_end":564166,"line_start":1657,"line_end":1657,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2968},"span":{"file_name":"src/liballoc/rc.rs","byte_start":565826,"byte_end":565834,"line_start":1702,"line_end":1702,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Weak<T>>::into_raw","value":"fn (self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Weak<T>` and turns it into a raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Weak<T>` and turns it into a raw pointer.","span":{"file_name":"src/liballoc/rc.rs","byte_start":564823,"byte_end":564882,"line_start":1673,"line_end":1673,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":564887,"byte_end":564890,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ This converts the weak pointer into a raw pointer, preserving the original weak count. It","span":{"file_name":"src/liballoc/rc.rs","byte_start":564895,"byte_end":564988,"line_start":1675,"line_end":1675,"column_start":5,"column_end":98}},{"value":"/ can be turned back into the `Weak<T>` with [`from_raw`].","span":{"file_name":"src/liballoc/rc.rs","byte_start":564993,"byte_end":565053,"line_start":1676,"line_end":1676,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565058,"byte_end":565061,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ The same restrictions of accessing the target of the pointer as with","span":{"file_name":"src/liballoc/rc.rs","byte_start":565066,"byte_end":565138,"line_start":1678,"line_end":1678,"column_start":5,"column_end":77}},{"value":"/ [`as_raw`] apply.","span":{"file_name":"src/liballoc/rc.rs","byte_start":565143,"byte_end":565164,"line_start":1679,"line_end":1679,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565169,"byte_end":565172,"line_start":1680,"line_end":1680,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":565177,"byte_end":565191,"line_start":1681,"line_end":1681,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565196,"byte_end":565199,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":565204,"byte_end":565211,"line_start":1683,"line_end":1683,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":565216,"byte_end":565246,"line_start":1684,"line_end":1684,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565251,"byte_end":565254,"line_start":1685,"line_end":1685,"column_start":5,"column_end":8}},{"value":"/ use std::rc::{Rc, Weak};","span":{"file_name":"src/liballoc/rc.rs","byte_start":565259,"byte_end":565287,"line_start":1686,"line_end":1686,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565292,"byte_end":565295,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ let strong = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":565300,"byte_end":565345,"line_start":1688,"line_end":1688,"column_start":5,"column_end":50}},{"value":"/ let weak = Rc::downgrade(&strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":565350,"byte_end":565388,"line_start":1689,"line_end":1689,"column_start":5,"column_end":43}},{"value":"/ let raw = weak.into_raw();","span":{"file_name":"src/liballoc/rc.rs","byte_start":565393,"byte_end":565423,"line_start":1690,"line_end":1690,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565428,"byte_end":565431,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":565436,"byte_end":565479,"line_start":1692,"line_end":1692,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(\"hello\", unsafe { &*raw });","span":{"file_name":"src/liballoc/rc.rs","byte_start":565484,"byte_end":565526,"line_start":1693,"line_end":1693,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565531,"byte_end":565534,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ drop(unsafe { Weak::from_raw(raw) });","span":{"file_name":"src/liballoc/rc.rs","byte_start":565539,"byte_end":565580,"line_start":1695,"line_end":1695,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":565585,"byte_end":565628,"line_start":1696,"line_end":1696,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":565633,"byte_end":565640,"line_start":1697,"line_end":1697,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":565645,"byte_end":565648,"line_start":1698,"line_end":1698,"column_start":5,"column_end":8}},{"value":"/ [`from_raw`]: struct.Weak.html#method.from_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":565653,"byte_end":565703,"line_start":1699,"line_end":1699,"column_start":5,"column_end":55}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":565708,"byte_end":565754,"line_start":1700,"line_end":1700,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":565759,"byte_end":565814,"line_start":1701,"line_end":1701,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2969},"span":{"file_name":"src/liballoc/rc.rs","byte_start":567893,"byte_end":567901,"line_start":1757,"line_end":1757,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Weak<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.","sig":null,"attributes":[{"value":"/ Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":565944,"byte_end":566026,"line_start":1708,"line_end":1708,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566031,"byte_end":566034,"line_start":1709,"line_end":1709,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely get a strong reference (by calling [`upgrade`]","span":{"file_name":"src/liballoc/rc.rs","byte_start":566039,"byte_end":566116,"line_start":1710,"line_end":1710,"column_start":5,"column_end":82}},{"value":"/ later) or to deallocate the weak count by dropping the `Weak<T>`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":566121,"byte_end":566190,"line_start":1711,"line_end":1711,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566195,"byte_end":566198,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/ It takes ownership of one weak count (with the exception of pointers created by [`new`],","span":{"file_name":"src/liballoc/rc.rs","byte_start":566203,"byte_end":566295,"line_start":1713,"line_end":1713,"column_start":5,"column_end":97}},{"value":"/ as these don't have any corresponding weak count).","span":{"file_name":"src/liballoc/rc.rs","byte_start":566300,"byte_end":566354,"line_start":1714,"line_end":1714,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566359,"byte_end":566362,"line_start":1715,"line_end":1715,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/rc.rs","byte_start":566367,"byte_end":566379,"line_start":1716,"line_end":1716,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566384,"byte_end":566387,"line_start":1717,"line_end":1717,"column_start":5,"column_end":8}},{"value":"/ The pointer must have originated from the [`into_raw`] (or [`as_raw`], provided there was","span":{"file_name":"src/liballoc/rc.rs","byte_start":566392,"byte_end":566485,"line_start":1718,"line_end":1718,"column_start":5,"column_end":98}},{"value":"/ a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference","span":{"file_name":"src/liballoc/rc.rs","byte_start":566490,"byte_end":566586,"line_start":1719,"line_end":1719,"column_start":5,"column_end":101}},{"value":"/ count.","span":{"file_name":"src/liballoc/rc.rs","byte_start":566591,"byte_end":566601,"line_start":1720,"line_end":1720,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566606,"byte_end":566609,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ It is allowed for the strong count to be 0 at the time of calling this, but the weak count","span":{"file_name":"src/liballoc/rc.rs","byte_start":566614,"byte_end":566708,"line_start":1722,"line_end":1722,"column_start":5,"column_end":99}},{"value":"/ must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created","span":{"file_name":"src/liballoc/rc.rs","byte_start":566713,"byte_end":566808,"line_start":1723,"line_end":1723,"column_start":5,"column_end":100}},{"value":"/ by [`new`]).","span":{"file_name":"src/liballoc/rc.rs","byte_start":566813,"byte_end":566829,"line_start":1724,"line_end":1724,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566834,"byte_end":566837,"line_start":1725,"line_end":1725,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":566842,"byte_end":566856,"line_start":1726,"line_end":1726,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566861,"byte_end":566864,"line_start":1727,"line_end":1727,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":566869,"byte_end":566876,"line_start":1728,"line_end":1728,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/rc.rs","byte_start":566881,"byte_end":566911,"line_start":1729,"line_end":1729,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566916,"byte_end":566919,"line_start":1730,"line_end":1730,"column_start":5,"column_end":8}},{"value":"/ use std::rc::{Rc, Weak};","span":{"file_name":"src/liballoc/rc.rs","byte_start":566924,"byte_end":566952,"line_start":1731,"line_end":1731,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":566957,"byte_end":566960,"line_start":1732,"line_end":1732,"column_start":5,"column_end":8}},{"value":"/ let strong = Rc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/rc.rs","byte_start":566965,"byte_end":567010,"line_start":1733,"line_end":1733,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":567015,"byte_end":567018,"line_start":1734,"line_end":1734,"column_start":5,"column_end":8}},{"value":"/ let raw_1 = Rc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/rc.rs","byte_start":567023,"byte_end":567073,"line_start":1735,"line_end":1735,"column_start":5,"column_end":55}},{"value":"/ let raw_2 = Rc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/rc.rs","byte_start":567078,"byte_end":567128,"line_start":1736,"line_end":1736,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":567133,"byte_end":567136,"line_start":1737,"line_end":1737,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":567141,"byte_end":567184,"line_start":1738,"line_end":1738,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":567189,"byte_end":567192,"line_start":1739,"line_end":1739,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());","span":{"file_name":"src/liballoc/rc.rs","byte_start":567197,"byte_end":567276,"line_start":1740,"line_end":1740,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(1, Rc::weak_count(&strong));","span":{"file_name":"src/liballoc/rc.rs","byte_start":567281,"byte_end":567324,"line_start":1741,"line_end":1741,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":567329,"byte_end":567332,"line_start":1742,"line_end":1742,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/rc.rs","byte_start":567337,"byte_end":567354,"line_start":1743,"line_end":1743,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":567359,"byte_end":567362,"line_start":1744,"line_end":1744,"column_start":5,"column_end":8}},{"value":"/ // Decrement the last weak count.","span":{"file_name":"src/liballoc/rc.rs","byte_start":567367,"byte_end":567404,"line_start":1745,"line_end":1745,"column_start":5,"column_end":42}},{"value":"/ assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":567409,"byte_end":567475,"line_start":1746,"line_end":1746,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":567480,"byte_end":567487,"line_start":1747,"line_end":1747,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":567492,"byte_end":567495,"line_start":1748,"line_end":1748,"column_start":5,"column_end":8}},{"value":"/ [`into_raw`]: struct.Weak.html#method.into_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":567500,"byte_end":567550,"line_start":1749,"line_end":1749,"column_start":5,"column_end":55}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/rc.rs","byte_start":567555,"byte_end":567603,"line_start":1750,"line_end":1750,"column_start":5,"column_end":53}},{"value":"/ [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":567608,"byte_end":567634,"line_start":1751,"line_end":1751,"column_start":5,"column_end":31}},{"value":"/ [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":567639,"byte_end":567669,"line_start":1752,"line_end":1752,"column_start":5,"column_end":35}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/rc.rs","byte_start":567674,"byte_end":567720,"line_start":1753,"line_end":1753,"column_start":5,"column_end":51}},{"value":"/ [`new`]: struct.Weak.html#method.new","span":{"file_name":"src/liballoc/rc.rs","byte_start":567725,"byte_end":567765,"line_start":1754,"line_end":1754,"column_start":5,"column_end":45}},{"value":"/ [`forget`]: ../../std/mem/fn.forget.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":567770,"byte_end":567814,"line_start":1755,"line_end":1755,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":567819,"byte_end":567874,"line_start":1756,"line_end":1756,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":"src/liballoc/rc.rs","byte_start":569279,"byte_end":569286,"line_start":1803,"line_end":1803,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<Weak<T>>::upgrade","value":"fn (&self) -> Option<Rc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\n dropping of the inner value if successful.","sig":null,"attributes":[{"value":"/ Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying","span":{"file_name":"src/liballoc/rc.rs","byte_start":568494,"byte_end":568559,"line_start":1776,"line_end":1776,"column_start":5,"column_end":70}},{"value":"/ dropping of the inner value if successful.","span":{"file_name":"src/liballoc/rc.rs","byte_start":568564,"byte_end":568610,"line_start":1777,"line_end":1777,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":568615,"byte_end":568618,"line_start":1778,"line_end":1778,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if the inner value has since been dropped.","span":{"file_name":"src/liballoc/rc.rs","byte_start":568623,"byte_end":568686,"line_start":1779,"line_end":1779,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":568691,"byte_end":568694,"line_start":1780,"line_end":1780,"column_start":5,"column_end":8}},{"value":"/ [`Rc`]: struct.Rc.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":568699,"byte_end":568725,"line_start":1781,"line_end":1781,"column_start":5,"column_end":31}},{"value":"/ [`None`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":568730,"byte_end":568777,"line_start":1782,"line_end":1782,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":568782,"byte_end":568785,"line_start":1783,"line_end":1783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":568790,"byte_end":568804,"line_start":1784,"line_end":1784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":568809,"byte_end":568812,"line_start":1785,"line_end":1785,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":568817,"byte_end":568824,"line_start":1786,"line_end":1786,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":568829,"byte_end":568849,"line_start":1787,"line_end":1787,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":568854,"byte_end":568857,"line_start":1788,"line_end":1788,"column_start":5,"column_end":8}},{"value":"/ let five = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":568862,"byte_end":568888,"line_start":1789,"line_end":1789,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":568893,"byte_end":568896,"line_start":1790,"line_end":1790,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Rc::downgrade(&five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":568901,"byte_end":568942,"line_start":1791,"line_end":1791,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":568947,"byte_end":568950,"line_start":1792,"line_end":1792,"column_start":5,"column_end":8}},{"value":"/ let strong_five: Option<Rc<_>> = weak_five.upgrade();","span":{"file_name":"src/liballoc/rc.rs","byte_start":568955,"byte_end":569012,"line_start":1793,"line_end":1793,"column_start":5,"column_end":62}},{"value":"/ assert!(strong_five.is_some());","span":{"file_name":"src/liballoc/rc.rs","byte_start":569017,"byte_end":569052,"line_start":1794,"line_end":1794,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":569057,"byte_end":569060,"line_start":1795,"line_end":1795,"column_start":5,"column_end":8}},{"value":"/ // Destroy all strong pointers.","span":{"file_name":"src/liballoc/rc.rs","byte_start":569065,"byte_end":569100,"line_start":1796,"line_end":1796,"column_start":5,"column_end":40}},{"value":"/ drop(strong_five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":569105,"byte_end":569127,"line_start":1797,"line_end":1797,"column_start":5,"column_end":27}},{"value":"/ drop(five);","span":{"file_name":"src/liballoc/rc.rs","byte_start":569132,"byte_end":569147,"line_start":1798,"line_end":1798,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":569152,"byte_end":569155,"line_start":1799,"line_end":1799,"column_start":5,"column_end":8}},{"value":"/ assert!(weak_five.upgrade().is_none());","span":{"file_name":"src/liballoc/rc.rs","byte_start":569160,"byte_end":569203,"line_start":1800,"line_end":1800,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":569208,"byte_end":569215,"line_start":1801,"line_end":1801,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":569220,"byte_end":569267,"line_start":1802,"line_end":1802,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2975},"span":{"file_name":"src/liballoc/rc.rs","byte_start":569776,"byte_end":569788,"line_start":1819,"line_end":1819,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Weak<T>>::strong_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Rc`) pointers pointing to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Rc`) pointers pointing to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":569511,"byte_end":569585,"line_start":1813,"line_end":1813,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":569590,"byte_end":569593,"line_start":1814,"line_end":1814,"column_start":5,"column_end":8}},{"value":"/ If `self` was created using [`Weak::new`], this will return 0.","span":{"file_name":"src/liballoc/rc.rs","byte_start":569598,"byte_end":569664,"line_start":1815,"line_end":1815,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":569669,"byte_end":569672,"line_start":1816,"line_end":1816,"column_start":5,"column_end":8}},{"value":"/ [`Weak::new`]: #method.new","span":{"file_name":"src/liballoc/rc.rs","byte_start":569677,"byte_end":569707,"line_start":1817,"line_end":1817,"column_start":5,"column_end":35}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":569712,"byte_end":569764,"line_start":1818,"line_end":1818,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2976},"span":{"file_name":"src/liballoc/rc.rs","byte_start":570095,"byte_end":570105,"line_start":1827,"line_end":1827,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Weak<T>>::weak_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of `Weak` pointers pointing to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of `Weak` pointers pointing to this allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":569890,"byte_end":569957,"line_start":1823,"line_end":1823,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":569962,"byte_end":569965,"line_start":1824,"line_end":1824,"column_start":5,"column_end":8}},{"value":"/ If no strong pointers remain, this will return zero.","span":{"file_name":"src/liballoc/rc.rs","byte_start":569970,"byte_end":570026,"line_start":1825,"line_end":1825,"column_start":5,"column_end":61}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":570031,"byte_end":570083,"line_start":1826,"line_end":1826,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2979},"span":{"file_name":"src/liballoc/rc.rs","byte_start":571961,"byte_end":571967,"line_start":1889,"line_end":1889,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Weak<T>>::ptr_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Weak`s point to the same allocation (similar to\n [`ptr::eq`]), or if both don't point to any allocation\n (because they were created with `Weak::new()`).","sig":null,"attributes":[{"value":"/ Returns `true` if the two `Weak`s point to the same allocation (similar to","span":{"file_name":"src/liballoc/rc.rs","byte_start":570697,"byte_end":570775,"line_start":1846,"line_end":1846,"column_start":5,"column_end":83}},{"value":"/ [`ptr::eq`]), or if both don't point to any allocation","span":{"file_name":"src/liballoc/rc.rs","byte_start":570780,"byte_end":570838,"line_start":1847,"line_end":1847,"column_start":5,"column_end":63}},{"value":"/ (because they were created with `Weak::new()`).","span":{"file_name":"src/liballoc/rc.rs","byte_start":570843,"byte_end":570894,"line_start":1848,"line_end":1848,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":570899,"byte_end":570902,"line_start":1849,"line_end":1849,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"src/liballoc/rc.rs","byte_start":570907,"byte_end":570918,"line_start":1850,"line_end":1850,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":570923,"byte_end":570926,"line_start":1851,"line_end":1851,"column_start":5,"column_end":8}},{"value":"/ Since this compares pointers it means that `Weak::new()` will equal each","span":{"file_name":"src/liballoc/rc.rs","byte_start":570931,"byte_end":571007,"line_start":1852,"line_end":1852,"column_start":5,"column_end":81}},{"value":"/ other, even though they don't point to any allocation.","span":{"file_name":"src/liballoc/rc.rs","byte_start":571012,"byte_end":571070,"line_start":1853,"line_end":1853,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571075,"byte_end":571078,"line_start":1854,"line_end":1854,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/rc.rs","byte_start":571083,"byte_end":571097,"line_start":1855,"line_end":1855,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571102,"byte_end":571105,"line_start":1856,"line_end":1856,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":571110,"byte_end":571117,"line_start":1857,"line_end":1857,"column_start":5,"column_end":12}},{"value":"/ use std::rc::Rc;","span":{"file_name":"src/liballoc/rc.rs","byte_start":571122,"byte_end":571142,"line_start":1858,"line_end":1858,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571147,"byte_end":571150,"line_start":1859,"line_end":1859,"column_start":5,"column_end":8}},{"value":"/ let first_rc = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":571155,"byte_end":571185,"line_start":1860,"line_end":1860,"column_start":5,"column_end":35}},{"value":"/ let first = Rc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":571190,"byte_end":571231,"line_start":1861,"line_end":1861,"column_start":5,"column_end":46}},{"value":"/ let second = Rc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":571236,"byte_end":571278,"line_start":1862,"line_end":1862,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571283,"byte_end":571286,"line_start":1863,"line_end":1863,"column_start":5,"column_end":8}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/rc.rs","byte_start":571291,"byte_end":571326,"line_start":1864,"line_end":1864,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571331,"byte_end":571334,"line_start":1865,"line_end":1865,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Rc::new(5);","span":{"file_name":"src/liballoc/rc.rs","byte_start":571339,"byte_end":571369,"line_start":1866,"line_end":1866,"column_start":5,"column_end":35}},{"value":"/ let third = Rc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":571374,"byte_end":571415,"line_start":1867,"line_end":1867,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571420,"byte_end":571423,"line_start":1868,"line_end":1868,"column_start":5,"column_end":8}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/rc.rs","byte_start":571428,"byte_end":571463,"line_start":1869,"line_end":1869,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":571468,"byte_end":571475,"line_start":1870,"line_end":1870,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571480,"byte_end":571483,"line_start":1871,"line_end":1871,"column_start":5,"column_end":8}},{"value":"/ Comparing `Weak::new`.","span":{"file_name":"src/liballoc/rc.rs","byte_start":571488,"byte_end":571514,"line_start":1872,"line_end":1872,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571519,"byte_end":571522,"line_start":1873,"line_end":1873,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":571527,"byte_end":571534,"line_start":1874,"line_end":1874,"column_start":5,"column_end":12}},{"value":"/ use std::rc::{Rc, Weak};","span":{"file_name":"src/liballoc/rc.rs","byte_start":571539,"byte_end":571567,"line_start":1875,"line_end":1875,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571572,"byte_end":571575,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ let first = Weak::new();","span":{"file_name":"src/liballoc/rc.rs","byte_start":571580,"byte_end":571608,"line_start":1877,"line_end":1877,"column_start":5,"column_end":33}},{"value":"/ let second = Weak::new();","span":{"file_name":"src/liballoc/rc.rs","byte_start":571613,"byte_end":571642,"line_start":1878,"line_end":1878,"column_start":5,"column_end":34}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/rc.rs","byte_start":571647,"byte_end":571682,"line_start":1879,"line_end":1879,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571687,"byte_end":571690,"line_start":1880,"line_end":1880,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Rc::new(());","span":{"file_name":"src/liballoc/rc.rs","byte_start":571695,"byte_end":571726,"line_start":1881,"line_end":1881,"column_start":5,"column_end":36}},{"value":"/ let third = Rc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/rc.rs","byte_start":571731,"byte_end":571772,"line_start":1882,"line_end":1882,"column_start":5,"column_end":46}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/rc.rs","byte_start":571777,"byte_end":571812,"line_start":1883,"line_end":1883,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/rc.rs","byte_start":571817,"byte_end":571824,"line_start":1884,"line_end":1884,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/rc.rs","byte_start":571829,"byte_end":571832,"line_start":1885,"line_end":1885,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/rc.rs","byte_start":571837,"byte_end":571878,"line_start":1886,"line_end":1886,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":571883,"byte_end":571892,"line_start":1887,"line_end":1887,"column_start":5,"column_end":14}},{"value":"stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")","span":{"file_name":"src/liballoc/rc.rs","byte_start":571897,"byte_end":571949,"line_start":1888,"line_end":1888,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"src/liballoc/rc.rs","byte_start":575075,"byte_end":575080,"line_start":1995,"line_end":1995,"column_start":8,"column_end":13},"name":"inner","qualname":"::rc::RcBoxPtr::inner","value":"fn (&self) -> &RcBox<T>","parent":{"krate":0,"index":2992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"src/liballoc/rc.rs","byte_start":575124,"byte_end":575130,"line_start":1998,"line_end":1998,"column_start":8,"column_end":14},"name":"strong","qualname":"::rc::RcBoxPtr::strong","value":"fn (&self) -> usize","parent":{"krate":0,"index":2992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":575107,"byte_end":575116,"line_start":1997,"line_end":1997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"src/liballoc/rc.rs","byte_start":575211,"byte_end":575221,"line_start":2003,"line_end":2003,"column_start":8,"column_end":18},"name":"inc_strong","qualname":"::rc::RcBoxPtr::inc_strong","value":"fn (&self) -> ()","parent":{"krate":0,"index":2992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":575194,"byte_end":575203,"line_start":2002,"line_end":2002,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"src/liballoc/rc.rs","byte_start":575720,"byte_end":575730,"line_start":2019,"line_end":2019,"column_start":8,"column_end":18},"name":"dec_strong","qualname":"::rc::RcBoxPtr::dec_strong","value":"fn (&self) -> ()","parent":{"krate":0,"index":2992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":575703,"byte_end":575712,"line_start":2018,"line_end":2018,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"src/liballoc/rc.rs","byte_start":575820,"byte_end":575824,"line_start":2024,"line_end":2024,"column_start":8,"column_end":12},"name":"weak","qualname":"::rc::RcBoxPtr::weak","value":"fn (&self) -> usize","parent":{"krate":0,"index":2992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":575803,"byte_end":575812,"line_start":2023,"line_end":2023,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"src/liballoc/rc.rs","byte_start":575903,"byte_end":575911,"line_start":2029,"line_end":2029,"column_start":8,"column_end":16},"name":"inc_weak","qualname":"::rc::RcBoxPtr::inc_weak","value":"fn (&self) -> ()","parent":{"krate":0,"index":2992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":575886,"byte_end":575895,"line_start":2028,"line_end":2028,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"src/liballoc/rc.rs","byte_start":576398,"byte_end":576406,"line_start":2045,"line_end":2045,"column_start":8,"column_end":16},"name":"dec_weak","qualname":"::rc::RcBoxPtr::dec_weak","value":"fn (&self) -> ()","parent":{"krate":0,"index":2992},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/rc.rs","byte_start":576381,"byte_end":576390,"line_start":2044,"line_end":2044,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":3020},"span":{"file_name":"src/liballoc/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"src/liballoc/slice.rs","parent":null,"children":[{"krate":0,"index":3021},{"krate":0,"index":3024},{"krate":0,"index":3027},{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3035},{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3042},{"krate":0,"index":3045},{"krate":0,"index":3048},{"krate":0,"index":3051},{"krate":0,"index":3055},{"krate":0,"index":3058},{"krate":0,"index":3063},{"krate":0,"index":3066},{"krate":0,"index":3071},{"krate":0,"index":3078},{"krate":0,"index":3102},{"krate":0,"index":3105},{"krate":0,"index":3109},{"krate":0,"index":3113},{"krate":0,"index":3119},{"krate":0,"index":3125},{"krate":0,"index":3131},{"krate":0,"index":3134},{"krate":0,"index":3137},{"krate":0,"index":3142},{"krate":0,"index":3152},{"krate":0,"index":3167}],"decl_id":null,"docs":" A dynamically-sized view into a contiguous sequence, `[T]`.","sig":null,"attributes":[{"value":"! A dynamically-sized view into a contiguous sequence, `[T]`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":577909,"byte_end":577972,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":577973,"byte_end":577976,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! *[See also the slice primitive type](../../std/primitive.slice.html).*","span":{"file_name":"src/liballoc/slice.rs","byte_start":577977,"byte_end":578051,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578052,"byte_end":578055,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Slices are a view into a block of memory represented as a pointer and a","span":{"file_name":"src/liballoc/slice.rs","byte_start":578056,"byte_end":578131,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"! length.","span":{"file_name":"src/liballoc/slice.rs","byte_start":578132,"byte_end":578143,"line_start":6,"line_end":6,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578144,"byte_end":578147,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":578148,"byte_end":578155,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"! // slicing a Vec","span":{"file_name":"src/liballoc/slice.rs","byte_start":578156,"byte_end":578176,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"! let vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/slice.rs","byte_start":578177,"byte_end":578205,"line_start":10,"line_end":10,"column_start":1,"column_end":29}},{"value":"! let int_slice = &vec[..];","span":{"file_name":"src/liballoc/slice.rs","byte_start":578206,"byte_end":578235,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"! // coercing an array to a slice","span":{"file_name":"src/liballoc/slice.rs","byte_start":578236,"byte_end":578271,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"! let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];","span":{"file_name":"src/liballoc/slice.rs","byte_start":578272,"byte_end":578326,"line_start":13,"line_end":13,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":578327,"byte_end":578334,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578335,"byte_end":578338,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! Slices are either mutable or shared. The shared slice type is `&[T]`,","span":{"file_name":"src/liballoc/slice.rs","byte_start":578339,"byte_end":578412,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"! while the mutable slice type is `&mut [T]`, where `T` represents the element","span":{"file_name":"src/liballoc/slice.rs","byte_start":578413,"byte_end":578493,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"! type. For example, you can mutate the block of memory that a mutable slice","span":{"file_name":"src/liballoc/slice.rs","byte_start":578494,"byte_end":578572,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! points to:","span":{"file_name":"src/liballoc/slice.rs","byte_start":578573,"byte_end":578587,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578588,"byte_end":578591,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":578592,"byte_end":578599,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"! let x = &mut [1, 2, 3];","span":{"file_name":"src/liballoc/slice.rs","byte_start":578600,"byte_end":578627,"line_start":22,"line_end":22,"column_start":1,"column_end":28}},{"value":"! x[1] = 7;","span":{"file_name":"src/liballoc/slice.rs","byte_start":578628,"byte_end":578641,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"! assert_eq!(x, &[1, 7, 3]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":578642,"byte_end":578672,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":578673,"byte_end":578680,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578681,"byte_end":578684,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Here are some of the things this module contains:","span":{"file_name":"src/liballoc/slice.rs","byte_start":578685,"byte_end":578738,"line_start":27,"line_end":27,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578739,"byte_end":578742,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ## Structs","span":{"file_name":"src/liballoc/slice.rs","byte_start":578743,"byte_end":578757,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578758,"byte_end":578761,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! There are several structs that are useful for slices, such as [`Iter`], which","span":{"file_name":"src/liballoc/slice.rs","byte_start":578762,"byte_end":578843,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"! represents iteration over a slice.","span":{"file_name":"src/liballoc/slice.rs","byte_start":578844,"byte_end":578882,"line_start":32,"line_end":32,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578883,"byte_end":578886,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! ## Trait Implementations","span":{"file_name":"src/liballoc/slice.rs","byte_start":578887,"byte_end":578915,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":578916,"byte_end":578919,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! There are several implementations of common traits for slices. Some examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":578920,"byte_end":579000,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"! include:","span":{"file_name":"src/liballoc/slice.rs","byte_start":579001,"byte_end":579013,"line_start":37,"line_end":37,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579014,"byte_end":579017,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! * [`Clone`]","span":{"file_name":"src/liballoc/slice.rs","byte_start":579018,"byte_end":579033,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"! * [`Eq`], [`Ord`] - for slices whose element type are [`Eq`] or [`Ord`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":579034,"byte_end":579110,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"! * [`Hash`] - for slices whose element type is [`Hash`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":579111,"byte_end":579170,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579171,"byte_end":579174,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! ## Iteration","span":{"file_name":"src/liballoc/slice.rs","byte_start":579175,"byte_end":579191,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579192,"byte_end":579195,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! The slices implement `IntoIterator`. The iterator yields references to the","span":{"file_name":"src/liballoc/slice.rs","byte_start":579196,"byte_end":579274,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"! slice elements.","span":{"file_name":"src/liballoc/slice.rs","byte_start":579275,"byte_end":579294,"line_start":46,"line_end":46,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579295,"byte_end":579298,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":579299,"byte_end":579306,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"! let numbers = &[0, 1, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":579307,"byte_end":579336,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"! for n in numbers {","span":{"file_name":"src/liballoc/slice.rs","byte_start":579337,"byte_end":579359,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"!     println!(\"{} is a number!\", n);","span":{"file_name":"src/liballoc/slice.rs","byte_start":579360,"byte_end":579399,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"! }","span":{"file_name":"src/liballoc/slice.rs","byte_start":579400,"byte_end":579405,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":579406,"byte_end":579413,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579414,"byte_end":579417,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! The mutable slice yields mutable references to the elements:","span":{"file_name":"src/liballoc/slice.rs","byte_start":579418,"byte_end":579482,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579483,"byte_end":579486,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":579487,"byte_end":579494,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"! let mut scores = [7, 8, 9];","span":{"file_name":"src/liballoc/slice.rs","byte_start":579495,"byte_end":579526,"line_start":58,"line_end":58,"column_start":1,"column_end":32}},{"value":"! for score in &mut scores[..] {","span":{"file_name":"src/liballoc/slice.rs","byte_start":579527,"byte_end":579561,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"!     *score += 1;","span":{"file_name":"src/liballoc/slice.rs","byte_start":579562,"byte_end":579582,"line_start":60,"line_end":60,"column_start":1,"column_end":21}},{"value":"! }","span":{"file_name":"src/liballoc/slice.rs","byte_start":579583,"byte_end":579588,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":579589,"byte_end":579596,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579597,"byte_end":579600,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! This iterator yields mutable references to the slice's elements, so while","span":{"file_name":"src/liballoc/slice.rs","byte_start":579601,"byte_end":579678,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"! the element type of the slice is `i32`, the element type of the iterator is","span":{"file_name":"src/liballoc/slice.rs","byte_start":579679,"byte_end":579758,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"! `&mut i32`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":579759,"byte_end":579774,"line_start":66,"line_end":66,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579775,"byte_end":579778,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! * [`.iter`] and [`.iter_mut`] are the explicit methods to return the default","span":{"file_name":"src/liballoc/slice.rs","byte_start":579779,"byte_end":579859,"line_start":68,"line_end":68,"column_start":1,"column_end":81}},{"value":"!   iterators.","span":{"file_name":"src/liballoc/slice.rs","byte_start":579860,"byte_end":579876,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"! * Further methods that return iterators are [`.split`], [`.splitn`],","span":{"file_name":"src/liballoc/slice.rs","byte_start":579877,"byte_end":579949,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"!   [`.chunks`], [`.windows`] and more.","span":{"file_name":"src/liballoc/slice.rs","byte_start":579950,"byte_end":579991,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"src/liballoc/slice.rs","byte_start":579992,"byte_end":579995,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":579996,"byte_end":580043,"line_start":73,"line_end":73,"column_start":1,"column_end":48}},{"value":"! [`Eq`]: ../../std/cmp/trait.Eq.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":580044,"byte_end":580083,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"! [`Ord`]: ../../std/cmp/trait.Ord.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":580084,"byte_end":580125,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"! [`Iter`]: struct.Iter.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":580126,"byte_end":580156,"line_start":76,"line_end":76,"column_start":1,"column_end":31}},{"value":"! [`Hash`]: ../../std/hash/trait.Hash.html","span":{"file_name":"src/liballoc/slice.rs","byte_start":580157,"byte_end":580201,"line_start":77,"line_end":77,"column_start":1,"column_end":45}},{"value":"! [`.iter`]: ../../std/primitive.slice.html#method.iter","span":{"file_name":"src/liballoc/slice.rs","byte_start":580202,"byte_end":580259,"line_start":78,"line_end":78,"column_start":1,"column_end":58}},{"value":"! [`.iter_mut`]: ../../std/primitive.slice.html#method.iter_mut","span":{"file_name":"src/liballoc/slice.rs","byte_start":580260,"byte_end":580325,"line_start":79,"line_end":79,"column_start":1,"column_end":66}},{"value":"! [`.split`]: ../../std/primitive.slice.html#method.split","span":{"file_name":"src/liballoc/slice.rs","byte_start":580326,"byte_end":580385,"line_start":80,"line_end":80,"column_start":1,"column_end":60}},{"value":"! [`.splitn`]: ../../std/primitive.slice.html#method.splitn","span":{"file_name":"src/liballoc/slice.rs","byte_start":580386,"byte_end":580447,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"! [`.chunks`]: ../../std/primitive.slice.html#method.chunks","span":{"file_name":"src/liballoc/slice.rs","byte_start":580448,"byte_end":580509,"line_start":82,"line_end":82,"column_start":1,"column_end":62}},{"value":"! [`.windows`]: ../../std/primitive.slice.html#method.windows","span":{"file_name":"src/liballoc/slice.rs","byte_start":580510,"byte_end":580573,"line_start":83,"line_end":83,"column_start":1,"column_end":64}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":580574,"byte_end":580620,"line_start":84,"line_end":84,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":3074},"span":{"file_name":"src/liballoc/slice.rs","byte_start":582963,"byte_end":582971,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"into_vec","qualname":"::slice::hack::into_vec","value":"fn <T> (b: Box<[T]>) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3076},"span":{"file_name":"src/liballoc/slice.rs","byte_start":583208,"byte_end":583214,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"to_vec","qualname":"::slice::hack::to_vec","value":"fn <T> (s: &[T]) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":583187,"byte_end":583196,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3080},"span":{"file_name":"src/liballoc/slice.rs","byte_start":584538,"byte_end":584542,"line_start":195,"line_end":195,"column_start":12,"column_end":16},"name":"sort","qualname":"<[T]>::sort","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice.","sig":null,"attributes":[{"value":"/ Sorts the slice.","span":{"file_name":"src/liballoc/slice.rs","byte_start":583446,"byte_end":583466,"line_start":167,"line_end":167,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":583471,"byte_end":583474,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"src/liballoc/slice.rs","byte_start":583479,"byte_end":583571,"line_start":169,"line_end":169,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":583576,"byte_end":583579,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"src/liballoc/slice.rs","byte_start":583584,"byte_end":583677,"line_start":171,"line_end":171,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"src/liballoc/slice.rs","byte_start":583682,"byte_end":583735,"line_start":172,"line_end":172,"column_start":5,"column_end":58}},{"value":"/ See [`sort_unstable`](#method.sort_unstable).","span":{"file_name":"src/liballoc/slice.rs","byte_start":583740,"byte_end":583789,"line_start":173,"line_end":173,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":583794,"byte_end":583797,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":583802,"byte_end":583830,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":583835,"byte_end":583838,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive, iterative merge sort inspired by","span":{"file_name":"src/liballoc/slice.rs","byte_start":583843,"byte_end":583917,"line_start":177,"line_end":177,"column_start":5,"column_end":79}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"src/liballoc/slice.rs","byte_start":583922,"byte_end":583975,"line_start":178,"line_end":178,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"src/liballoc/slice.rs","byte_start":583980,"byte_end":584072,"line_start":179,"line_end":179,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"src/liballoc/slice.rs","byte_start":584077,"byte_end":584141,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":584146,"byte_end":584149,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage half the size of `self`, but for short slices a","span":{"file_name":"src/liballoc/slice.rs","byte_start":584154,"byte_end":584242,"line_start":182,"line_end":182,"column_start":5,"column_end":93}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"src/liballoc/slice.rs","byte_start":584247,"byte_end":584297,"line_start":183,"line_end":183,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":584302,"byte_end":584305,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":584310,"byte_end":584324,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":584329,"byte_end":584332,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":584337,"byte_end":584344,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":584349,"byte_end":584383,"line_start":188,"line_end":188,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":584388,"byte_end":584391,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ v.sort();","span":{"file_name":"src/liballoc/slice.rs","byte_start":584396,"byte_end":584409,"line_start":190,"line_end":190,"column_start":5,"column_end":18}},{"value":"/ assert!(v == [-5, -3, 1, 2, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":584414,"byte_end":584450,"line_start":191,"line_end":191,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":584455,"byte_end":584462,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":584467,"byte_end":584512,"line_start":193,"line_end":193,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":584517,"byte_end":584526,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3082},"span":{"file_name":"src/liballoc/slice.rs","byte_start":586723,"byte_end":586730,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<[T]>::sort_by","value":"fn <F> (&mut self, mut compare: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice with a comparator function.","span":{"file_name":"src/liballoc/slice.rs","byte_start":584639,"byte_end":584686,"line_start":202,"line_end":202,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":584691,"byte_end":584694,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"src/liballoc/slice.rs","byte_start":584699,"byte_end":584791,"line_start":204,"line_end":204,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":584796,"byte_end":584799,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The comparator function must define a total ordering for the elements in the slice. If","span":{"file_name":"src/liballoc/slice.rs","byte_start":584804,"byte_end":584894,"line_start":206,"line_end":206,"column_start":5,"column_end":95}},{"value":"/ the ordering is not total, the order of the elements is unspecified. An order is a","span":{"file_name":"src/liballoc/slice.rs","byte_start":584899,"byte_end":584985,"line_start":207,"line_end":207,"column_start":5,"column_end":91}},{"value":"/ total order if it is (for all `a`, `b` and `c`):","span":{"file_name":"src/liballoc/slice.rs","byte_start":584990,"byte_end":585042,"line_start":208,"line_end":208,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":585047,"byte_end":585050,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ * total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and","span":{"file_name":"src/liballoc/slice.rs","byte_start":585055,"byte_end":585142,"line_start":210,"line_end":210,"column_start":5,"column_end":92}},{"value":"/ * transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":585147,"byte_end":585243,"line_start":211,"line_end":211,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":585248,"byte_end":585251,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ For example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use","span":{"file_name":"src/liballoc/slice.rs","byte_start":585256,"byte_end":585345,"line_start":213,"line_end":213,"column_start":5,"column_end":94}},{"value":"/ `partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":585350,"byte_end":585436,"line_start":214,"line_end":214,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":585441,"byte_end":585444,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":585449,"byte_end":585456,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ let mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];","span":{"file_name":"src/liballoc/slice.rs","byte_start":585461,"byte_end":585509,"line_start":217,"line_end":217,"column_start":5,"column_end":53}},{"value":"/ floats.sort_by(|a, b| a.partial_cmp(b).unwrap());","span":{"file_name":"src/liballoc/slice.rs","byte_start":585514,"byte_end":585567,"line_start":218,"line_end":218,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":585572,"byte_end":585622,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":585627,"byte_end":585634,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":585639,"byte_end":585642,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"src/liballoc/slice.rs","byte_start":585647,"byte_end":585740,"line_start":222,"line_end":222,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"src/liballoc/slice.rs","byte_start":585745,"byte_end":585798,"line_start":223,"line_end":223,"column_start":5,"column_end":58}},{"value":"/ See [`sort_unstable_by`](#method.sort_unstable_by).","span":{"file_name":"src/liballoc/slice.rs","byte_start":585803,"byte_end":585858,"line_start":224,"line_end":224,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":585863,"byte_end":585866,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":585871,"byte_end":585899,"line_start":226,"line_end":226,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":585904,"byte_end":585907,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive, iterative merge sort inspired by","span":{"file_name":"src/liballoc/slice.rs","byte_start":585912,"byte_end":585986,"line_start":228,"line_end":228,"column_start":5,"column_end":79}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"src/liballoc/slice.rs","byte_start":585991,"byte_end":586044,"line_start":229,"line_end":229,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"src/liballoc/slice.rs","byte_start":586049,"byte_end":586141,"line_start":230,"line_end":230,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"src/liballoc/slice.rs","byte_start":586146,"byte_end":586210,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":586215,"byte_end":586218,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage half the size of `self`, but for short slices a","span":{"file_name":"src/liballoc/slice.rs","byte_start":586223,"byte_end":586311,"line_start":233,"line_end":233,"column_start":5,"column_end":93}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"src/liballoc/slice.rs","byte_start":586316,"byte_end":586366,"line_start":234,"line_end":234,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":586371,"byte_end":586374,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":586379,"byte_end":586393,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":586398,"byte_end":586401,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":586406,"byte_end":586413,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":586418,"byte_end":586450,"line_start":239,"line_end":239,"column_start":5,"column_end":37}},{"value":"/ v.sort_by(|a, b| a.cmp(b));","span":{"file_name":"src/liballoc/slice.rs","byte_start":586455,"byte_end":586486,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/ assert!(v == [1, 2, 3, 4, 5]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":586491,"byte_end":586525,"line_start":241,"line_end":241,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":586530,"byte_end":586533,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"src/liballoc/slice.rs","byte_start":586538,"byte_end":586560,"line_start":243,"line_end":243,"column_start":5,"column_end":27}},{"value":"/ v.sort_by(|a, b| b.cmp(a));","span":{"file_name":"src/liballoc/slice.rs","byte_start":586565,"byte_end":586596,"line_start":244,"line_end":244,"column_start":5,"column_end":36}},{"value":"/ assert!(v == [5, 4, 3, 2, 1]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":586601,"byte_end":586635,"line_start":245,"line_end":245,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":586640,"byte_end":586647,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":586652,"byte_end":586697,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":586702,"byte_end":586711,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3085},"span":{"file_name":"src/liballoc/slice.rs","byte_start":588363,"byte_end":588374,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"sort_by_key","qualname":"<[T]>::sort_by_key","value":"fn <K, F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice with a key extraction function.","span":{"file_name":"src/liballoc/slice.rs","byte_start":586882,"byte_end":586933,"line_start":256,"line_end":256,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":586938,"byte_end":586941,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(m n log(m n))`","span":{"file_name":"src/liballoc/slice.rs","byte_start":586946,"byte_end":587031,"line_start":258,"line_end":258,"column_start":5,"column_end":90}},{"value":"/ worst-case, where the key function is `O(m)`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":587036,"byte_end":587085,"line_start":259,"line_end":259,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":587090,"byte_end":587093,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ For expensive key functions (e.g. functions that are not simple property accesses or","span":{"file_name":"src/liballoc/slice.rs","byte_start":587098,"byte_end":587186,"line_start":261,"line_end":261,"column_start":5,"column_end":93}},{"value":"/ basic operations), [`sort_by_cached_key`](#method.sort_by_cached_key) is likely to be","span":{"file_name":"src/liballoc/slice.rs","byte_start":587191,"byte_end":587280,"line_start":262,"line_end":262,"column_start":5,"column_end":94}},{"value":"/ significantly faster, as it does not recompute element keys.","span":{"file_name":"src/liballoc/slice.rs","byte_start":587285,"byte_end":587349,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":587354,"byte_end":587357,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"src/liballoc/slice.rs","byte_start":587362,"byte_end":587455,"line_start":265,"line_end":265,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"src/liballoc/slice.rs","byte_start":587460,"byte_end":587513,"line_start":266,"line_end":266,"column_start":5,"column_end":58}},{"value":"/ See [`sort_unstable_by_key`](#method.sort_unstable_by_key).","span":{"file_name":"src/liballoc/slice.rs","byte_start":587518,"byte_end":587581,"line_start":267,"line_end":267,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":587586,"byte_end":587589,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":587594,"byte_end":587622,"line_start":269,"line_end":269,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":587627,"byte_end":587630,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive, iterative merge sort inspired by","span":{"file_name":"src/liballoc/slice.rs","byte_start":587635,"byte_end":587709,"line_start":271,"line_end":271,"column_start":5,"column_end":79}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"src/liballoc/slice.rs","byte_start":587714,"byte_end":587767,"line_start":272,"line_end":272,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"src/liballoc/slice.rs","byte_start":587772,"byte_end":587864,"line_start":273,"line_end":273,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"src/liballoc/slice.rs","byte_start":587869,"byte_end":587933,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":587938,"byte_end":587941,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage half the size of `self`, but for short slices a","span":{"file_name":"src/liballoc/slice.rs","byte_start":587946,"byte_end":588034,"line_start":276,"line_end":276,"column_start":5,"column_end":93}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"src/liballoc/slice.rs","byte_start":588039,"byte_end":588089,"line_start":277,"line_end":277,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":588094,"byte_end":588097,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":588102,"byte_end":588116,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":588121,"byte_end":588124,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":588129,"byte_end":588136,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":588141,"byte_end":588178,"line_start":282,"line_end":282,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":588183,"byte_end":588186,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ v.sort_by_key(|k| k.abs());","span":{"file_name":"src/liballoc/slice.rs","byte_start":588191,"byte_end":588222,"line_start":284,"line_end":284,"column_start":5,"column_end":36}},{"value":"/ assert!(v == [1, 2, -3, 4, -5]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":588227,"byte_end":588263,"line_start":285,"line_end":285,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":588268,"byte_end":588275,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"stable(feature = \"slice_sort_by_key\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":588280,"byte_end":588337,"line_start":287,"line_end":287,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":588342,"byte_end":588351,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3089},"span":{"file_name":"src/liballoc/slice.rs","byte_start":589937,"byte_end":589955,"line_start":331,"line_end":331,"column_start":12,"column_end":30},"name":"sort_by_cached_key","qualname":"<[T]>::sort_by_cached_key","value":"fn <K, F> (&mut self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts the slice with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice with a key extraction function.","span":{"file_name":"src/liballoc/slice.rs","byte_start":588521,"byte_end":588572,"line_start":297,"line_end":297,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":588577,"byte_end":588580,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ During sorting, the key function is called only once per element.","span":{"file_name":"src/liballoc/slice.rs","byte_start":588585,"byte_end":588654,"line_start":299,"line_end":299,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":588659,"byte_end":588662,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e., does not reorder equal elements) and `O(m n + n log n)`","span":{"file_name":"src/liballoc/slice.rs","byte_start":588667,"byte_end":588753,"line_start":301,"line_end":301,"column_start":5,"column_end":91}},{"value":"/ worst-case, where the key function is `O(m)`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":588758,"byte_end":588807,"line_start":302,"line_end":302,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":588812,"byte_end":588815,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ For simple key functions (e.g., functions that are property accesses or","span":{"file_name":"src/liballoc/slice.rs","byte_start":588820,"byte_end":588895,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ basic operations), [`sort_by_key`](#method.sort_by_key) is likely to be","span":{"file_name":"src/liballoc/slice.rs","byte_start":588900,"byte_end":588975,"line_start":305,"line_end":305,"column_start":5,"column_end":80}},{"value":"/ faster.","span":{"file_name":"src/liballoc/slice.rs","byte_start":588980,"byte_end":588991,"line_start":306,"line_end":306,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":588996,"byte_end":588999,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"src/liballoc/slice.rs","byte_start":589004,"byte_end":589032,"line_start":308,"line_end":308,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":589037,"byte_end":589040,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,","span":{"file_name":"src/liballoc/slice.rs","byte_start":589045,"byte_end":589138,"line_start":310,"line_end":310,"column_start":5,"column_end":98}},{"value":"/ which combines the fast average case of randomized quicksort with the fast worst case of","span":{"file_name":"src/liballoc/slice.rs","byte_start":589143,"byte_end":589235,"line_start":311,"line_end":311,"column_start":5,"column_end":97}},{"value":"/ heapsort, while achieving linear time on slices with certain patterns. It uses some","span":{"file_name":"src/liballoc/slice.rs","byte_start":589240,"byte_end":589327,"line_start":312,"line_end":312,"column_start":5,"column_end":92}},{"value":"/ randomization to avoid degenerate cases, but with a fixed seed to always provide","span":{"file_name":"src/liballoc/slice.rs","byte_start":589332,"byte_end":589416,"line_start":313,"line_end":313,"column_start":5,"column_end":89}},{"value":"/ deterministic behavior.","span":{"file_name":"src/liballoc/slice.rs","byte_start":589421,"byte_end":589448,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":589453,"byte_end":589456,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ In the worst case, the algorithm allocates temporary storage in a `Vec<(K, usize)>` the","span":{"file_name":"src/liballoc/slice.rs","byte_start":589461,"byte_end":589552,"line_start":316,"line_end":316,"column_start":5,"column_end":96}},{"value":"/ length of the slice.","span":{"file_name":"src/liballoc/slice.rs","byte_start":589557,"byte_end":589581,"line_start":317,"line_end":317,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":589586,"byte_end":589589,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":589594,"byte_end":589608,"line_start":319,"line_end":319,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":589613,"byte_end":589616,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":589621,"byte_end":589628,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"/ let mut v = [-5i32, 4, 32, -3, 2];","span":{"file_name":"src/liballoc/slice.rs","byte_start":589633,"byte_end":589671,"line_start":322,"line_end":322,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":589676,"byte_end":589679,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ v.sort_by_cached_key(|k| k.to_string());","span":{"file_name":"src/liballoc/slice.rs","byte_start":589684,"byte_end":589728,"line_start":324,"line_end":324,"column_start":5,"column_end":49}},{"value":"/ assert!(v == [-3, -5, 2, 32, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":589733,"byte_end":589770,"line_start":325,"line_end":325,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":589775,"byte_end":589782,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":589787,"byte_end":589790,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"src/liballoc/slice.rs","byte_start":589795,"byte_end":589841,"line_start":328,"line_end":328,"column_start":5,"column_end":51}},{"value":"stable(feature = \"slice_sort_by_cached_key\", since = \"1.34.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":589846,"byte_end":589911,"line_start":329,"line_end":329,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":589916,"byte_end":589925,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3093},"span":{"file_name":"src/liballoc/slice.rs","byte_start":592010,"byte_end":592016,"line_start":389,"line_end":389,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<[T]>::to_vec","value":"fn (&self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Copies `self` into a new `Vec`.","sig":null,"attributes":[{"value":"/ Copies `self` into a new `Vec`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":591687,"byte_end":591722,"line_start":377,"line_end":377,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":591727,"byte_end":591730,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":591735,"byte_end":591749,"line_start":379,"line_end":379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":591754,"byte_end":591757,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":591762,"byte_end":591769,"line_start":381,"line_end":381,"column_start":5,"column_end":12}},{"value":"/ let s = [10, 40, 30];","span":{"file_name":"src/liballoc/slice.rs","byte_start":591774,"byte_end":591799,"line_start":382,"line_end":382,"column_start":5,"column_end":30}},{"value":"/ let x = s.to_vec();","span":{"file_name":"src/liballoc/slice.rs","byte_start":591804,"byte_end":591827,"line_start":383,"line_end":383,"column_start":5,"column_end":28}},{"value":"/ // Here, `s` and `x` can be modified independently.","span":{"file_name":"src/liballoc/slice.rs","byte_start":591832,"byte_end":591887,"line_start":384,"line_end":384,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":591892,"byte_end":591899,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"rustc_conversion_suggestion","span":{"file_name":"src/liballoc/slice.rs","byte_start":591904,"byte_end":591934,"line_start":386,"line_end":386,"column_start":5,"column_end":35}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":591939,"byte_end":591984,"line_start":387,"line_end":387,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":591989,"byte_end":591998,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":"src/liballoc/slice.rs","byte_start":592703,"byte_end":592711,"line_start":413,"line_end":413,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<[T]>::into_vec","value":"fn (self: Box<Self>) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a vector without clones or allocation.","sig":null,"attributes":[{"value":"/ Converts `self` into a vector without clones or allocation.","span":{"file_name":"src/liballoc/slice.rs","byte_start":592176,"byte_end":592239,"line_start":397,"line_end":397,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":592244,"byte_end":592247,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The resulting vector can be converted back into a box via","span":{"file_name":"src/liballoc/slice.rs","byte_start":592252,"byte_end":592313,"line_start":399,"line_end":399,"column_start":5,"column_end":66}},{"value":"/ `Vec<T>`'s `into_boxed_slice` method.","span":{"file_name":"src/liballoc/slice.rs","byte_start":592318,"byte_end":592359,"line_start":400,"line_end":400,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":592364,"byte_end":592367,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":592372,"byte_end":592386,"line_start":402,"line_end":402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":592391,"byte_end":592394,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":592399,"byte_end":592406,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ let s: Box<[i32]> = Box::new([10, 40, 30]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":592411,"byte_end":592458,"line_start":405,"line_end":405,"column_start":5,"column_end":52}},{"value":"/ let x = s.into_vec();","span":{"file_name":"src/liballoc/slice.rs","byte_start":592463,"byte_end":592488,"line_start":406,"line_end":406,"column_start":5,"column_end":30}},{"value":"/ // `s` cannot be used anymore because it has been converted into `x`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":592493,"byte_end":592566,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":592571,"byte_end":592574,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(x, vec![10, 40, 30]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":592579,"byte_end":592615,"line_start":409,"line_end":409,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":592620,"byte_end":592627,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":592632,"byte_end":592677,"line_start":411,"line_end":411,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":592682,"byte_end":592691,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3095},"span":{"file_name":"src/liballoc/slice.rs","byte_start":593406,"byte_end":593412,"line_start":439,"line_end":439,"column_start":12,"column_end":18},"name":"repeat","qualname":"<[T]>::repeat","value":"fn (&self, n: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a vector by repeating a slice `n` times.","sig":null,"attributes":[{"value":"/ Creates a vector by repeating a slice `n` times.","span":{"file_name":"src/liballoc/slice.rs","byte_start":592851,"byte_end":592903,"line_start":418,"line_end":418,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":592908,"byte_end":592911,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/slice.rs","byte_start":592916,"byte_end":592928,"line_start":420,"line_end":420,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":592933,"byte_end":592936,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"src/liballoc/slice.rs","byte_start":592941,"byte_end":593001,"line_start":422,"line_end":422,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":593006,"byte_end":593009,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":593014,"byte_end":593028,"line_start":424,"line_end":424,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":593033,"byte_end":593036,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/slice.rs","byte_start":593041,"byte_end":593057,"line_start":426,"line_end":426,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":593062,"byte_end":593065,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":593070,"byte_end":593077,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ assert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":593082,"byte_end":593139,"line_start":429,"line_end":429,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":593144,"byte_end":593151,"line_start":430,"line_end":430,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":593156,"byte_end":593159,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ A panic upon overflow:","span":{"file_name":"src/liballoc/slice.rs","byte_start":593164,"byte_end":593190,"line_start":432,"line_end":432,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":593195,"byte_end":593198,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"src/liballoc/slice.rs","byte_start":593203,"byte_end":593222,"line_start":434,"line_end":434,"column_start":5,"column_end":24}},{"value":"/ // this will panic at runtime","span":{"file_name":"src/liballoc/slice.rs","byte_start":593227,"byte_end":593260,"line_start":435,"line_end":435,"column_start":5,"column_end":38}},{"value":"/ b\"0123456789abcdef\".repeat(usize::max_value());","span":{"file_name":"src/liballoc/slice.rs","byte_start":593265,"byte_end":593316,"line_start":436,"line_end":436,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":593321,"byte_end":593328,"line_start":437,"line_end":437,"column_start":5,"column_end":12}},{"value":"stable(feature = \"repeat_generic_slice\", since = \"1.40.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":593333,"byte_end":593394,"line_start":438,"line_end":438,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3096},"span":{"file_name":"src/liballoc/slice.rs","byte_start":595721,"byte_end":595727,"line_start":506,"line_end":506,"column_start":12,"column_end":18},"name":"concat","qualname":"<[T]>::concat","value":"fn <Item> (&self) -> <Self as Concat<Item>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Flattens a slice of `T` into a single value `Self::Output`.","sig":null,"attributes":[{"value":"/ Flattens a slice of `T` into a single value `Self::Output`.","span":{"file_name":"src/liballoc/slice.rs","byte_start":595413,"byte_end":595476,"line_start":497,"line_end":497,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":595481,"byte_end":595484,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":595489,"byte_end":595503,"line_start":499,"line_end":499,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":595508,"byte_end":595511,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":595516,"byte_end":595523,"line_start":501,"line_end":501,"column_start":5,"column_end":12}},{"value":"/ assert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");","span":{"file_name":"src/liballoc/slice.rs","byte_start":595528,"byte_end":595586,"line_start":502,"line_end":502,"column_start":5,"column_end":63}},{"value":"/ assert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":595591,"byte_end":595647,"line_start":503,"line_end":503,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":595652,"byte_end":595659,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":595664,"byte_end":595709,"line_start":505,"line_end":505,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3098},"span":{"file_name":"src/liballoc/slice.rs","byte_start":596321,"byte_end":596325,"line_start":524,"line_end":524,"column_start":12,"column_end":16},"name":"join","qualname":"<[T]>::join","value":"fn <Separator> (&self, sep: Separator) -> <Self as Join<Separator>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Flattens a slice of `T` into a single value `Self::Output`, placing a\n given separator between each.","sig":null,"attributes":[{"value":"/ Flattens a slice of `T` into a single value `Self::Output`, placing a","span":{"file_name":"src/liballoc/slice.rs","byte_start":595867,"byte_end":595940,"line_start":513,"line_end":513,"column_start":5,"column_end":78}},{"value":"/ given separator between each.","span":{"file_name":"src/liballoc/slice.rs","byte_start":595945,"byte_end":595978,"line_start":514,"line_end":514,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":595983,"byte_end":595986,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":595991,"byte_end":596005,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":596010,"byte_end":596013,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596018,"byte_end":596025,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ assert_eq!([\"hello\", \"world\"].join(\" \"), \"hello world\");","span":{"file_name":"src/liballoc/slice.rs","byte_start":596030,"byte_end":596090,"line_start":519,"line_end":519,"column_start":5,"column_end":65}},{"value":"/ assert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":596095,"byte_end":596154,"line_start":520,"line_end":520,"column_start":5,"column_end":64}},{"value":"/ assert_eq!([[1, 2], [3, 4]].join(&[0, 0][..]), [1, 2, 0, 0, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":596159,"byte_end":596230,"line_start":521,"line_end":521,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596235,"byte_end":596242,"line_start":522,"line_end":522,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":596247,"byte_end":596309,"line_start":523,"line_end":523,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3100},"span":{"file_name":"src/liballoc/slice.rs","byte_start":596953,"byte_end":596960,"line_start":543,"line_end":543,"column_start":12,"column_end":19},"name":"connect","qualname":"<[T]>::connect","value":"fn <Separator> (&self, sep: Separator) -> <Self as Join<Separator>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Flattens a slice of `T` into a single value `Self::Output`, placing a\n given separator between each.","sig":null,"attributes":[{"value":"/ Flattens a slice of `T` into a single value `Self::Output`, placing a","span":{"file_name":"src/liballoc/slice.rs","byte_start":596485,"byte_end":596558,"line_start":531,"line_end":531,"column_start":5,"column_end":78}},{"value":"/ given separator between each.","span":{"file_name":"src/liballoc/slice.rs","byte_start":596563,"byte_end":596596,"line_start":532,"line_end":532,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":596601,"byte_end":596604,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/slice.rs","byte_start":596609,"byte_end":596623,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":596628,"byte_end":596631,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596636,"byte_end":596643,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"/ # #![allow(deprecated)]","span":{"file_name":"src/liballoc/slice.rs","byte_start":596648,"byte_end":596675,"line_start":537,"line_end":537,"column_start":5,"column_end":32}},{"value":"/ assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");","span":{"file_name":"src/liballoc/slice.rs","byte_start":596680,"byte_end":596743,"line_start":538,"line_end":538,"column_start":5,"column_end":68}},{"value":"/ assert_eq!([[1, 2], [3, 4]].connect(&0), [1, 2, 0, 3, 4]);","span":{"file_name":"src/liballoc/slice.rs","byte_start":596748,"byte_end":596810,"line_start":539,"line_end":539,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":596815,"byte_end":596822,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":596827,"byte_end":596872,"line_start":541,"line_end":541,"column_start":5,"column_end":50}},{"value":"rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":596877,"byte_end":596941,"line_start":542,"line_end":542,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3103},"span":{"file_name":"src/liballoc/slice.rs","byte_start":597662,"byte_end":597680,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"to_ascii_uppercase","qualname":"<[u8]>::to_ascii_uppercase","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector containing a copy of this slice where each byte\n is mapped to its ASCII upper case equivalent.","sig":null,"attributes":[{"value":"/ Returns a vector containing a copy of this slice where each byte","span":{"file_name":"src/liballoc/slice.rs","byte_start":597179,"byte_end":597247,"line_start":554,"line_end":554,"column_start":5,"column_end":73}},{"value":"/ is mapped to its ASCII upper case equivalent.","span":{"file_name":"src/liballoc/slice.rs","byte_start":597252,"byte_end":597301,"line_start":555,"line_end":555,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":597306,"byte_end":597309,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',","span":{"file_name":"src/liballoc/slice.rs","byte_start":597314,"byte_end":597368,"line_start":557,"line_end":557,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/slice.rs","byte_start":597373,"byte_end":597413,"line_start":558,"line_end":558,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":597418,"byte_end":597421,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ To uppercase the value in-place, use [`make_ascii_uppercase`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":597426,"byte_end":597492,"line_start":560,"line_end":560,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":597497,"byte_end":597500,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_uppercase`]: #method.make_ascii_uppercase","span":{"file_name":"src/liballoc/slice.rs","byte_start":597505,"byte_end":597563,"line_start":562,"line_end":562,"column_start":5,"column_end":63}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":597568,"byte_end":597636,"line_start":563,"line_end":563,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":597641,"byte_end":597650,"line_start":564,"line_end":564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3104},"span":{"file_name":"src/liballoc/slice.rs","byte_start":598277,"byte_end":598295,"line_start":582,"line_end":582,"column_start":12,"column_end":30},"name":"to_ascii_lowercase","qualname":"<[u8]>::to_ascii_lowercase","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector containing a copy of this slice where each byte\n is mapped to its ASCII lower case equivalent.","sig":null,"attributes":[{"value":"/ Returns a vector containing a copy of this slice where each byte","span":{"file_name":"src/liballoc/slice.rs","byte_start":597794,"byte_end":597862,"line_start":571,"line_end":571,"column_start":5,"column_end":73}},{"value":"/ is mapped to its ASCII lower case equivalent.","span":{"file_name":"src/liballoc/slice.rs","byte_start":597867,"byte_end":597916,"line_start":572,"line_end":572,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":597921,"byte_end":597924,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',","span":{"file_name":"src/liballoc/slice.rs","byte_start":597929,"byte_end":597983,"line_start":574,"line_end":574,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/slice.rs","byte_start":597988,"byte_end":598028,"line_start":575,"line_end":575,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":598033,"byte_end":598036,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ To lowercase the value in-place, use [`make_ascii_lowercase`].","span":{"file_name":"src/liballoc/slice.rs","byte_start":598041,"byte_end":598107,"line_start":577,"line_end":577,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":598112,"byte_end":598115,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_lowercase`]: #method.make_ascii_lowercase","span":{"file_name":"src/liballoc/slice.rs","byte_start":598120,"byte_end":598178,"line_start":579,"line_end":579,"column_start":5,"column_end":63}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":598183,"byte_end":598251,"line_start":580,"line_end":580,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/slice.rs","byte_start":598256,"byte_end":598265,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3105},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599643,"byte_end":599649,"line_start":623,"line_end":623,"column_start":11,"column_end":17},"name":"Concat","qualname":"::slice::Concat","value":"Concat<Item: ?Sized>","parent":null,"children":[{"krate":0,"index":3107},{"krate":0,"index":3108}],"decl_id":null,"docs":" Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat).","sig":null,"attributes":[{"value":"/ Helper trait for [`[T]::concat`](../../std/primitive.slice.html#method.concat).","span":{"file_name":"src/liballoc/slice.rs","byte_start":598629,"byte_end":598712,"line_start":593,"line_end":593,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":598713,"byte_end":598716,"line_start":594,"line_end":594,"column_start":1,"column_end":4}},{"value":"/ Note: the `Item` type parameter is not used in this trait,","span":{"file_name":"src/liballoc/slice.rs","byte_start":598717,"byte_end":598779,"line_start":595,"line_end":595,"column_start":1,"column_end":63}},{"value":"/ but it allows impls to be more generic.","span":{"file_name":"src/liballoc/slice.rs","byte_start":598780,"byte_end":598823,"line_start":596,"line_end":596,"column_start":1,"column_end":44}},{"value":"/ Without it, we get this error:","span":{"file_name":"src/liballoc/slice.rs","byte_start":598824,"byte_end":598858,"line_start":597,"line_end":597,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":598859,"byte_end":598862,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/ ```error","span":{"file_name":"src/liballoc/slice.rs","byte_start":598863,"byte_end":598875,"line_start":599,"line_end":599,"column_start":1,"column_end":13}},{"value":"/ error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predica","span":{"file_name":"src/liballoc/slice.rs","byte_start":598876,"byte_end":598976,"line_start":600,"line_end":600,"column_start":1,"column_end":101}},{"value":"/    --> src/liballoc/slice.rs:608:6","span":{"file_name":"src/liballoc/slice.rs","byte_start":598977,"byte_end":599015,"line_start":601,"line_end":601,"column_start":1,"column_end":39}},{"value":"/     |","span":{"file_name":"src/liballoc/slice.rs","byte_start":599016,"byte_end":599025,"line_start":602,"line_end":602,"column_start":1,"column_end":10}},{"value":"/ 608 | impl<T: Clone, V: Borrow<[T]>> Concat for [V] {","span":{"file_name":"src/liballoc/slice.rs","byte_start":599026,"byte_end":599083,"line_start":603,"line_end":603,"column_start":1,"column_end":58}},{"value":"/     |      ^ unconstrained type parameter","span":{"file_name":"src/liballoc/slice.rs","byte_start":599084,"byte_end":599129,"line_start":604,"line_end":604,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":599130,"byte_end":599137,"line_start":605,"line_end":605,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":599138,"byte_end":599141,"line_start":606,"line_end":606,"column_start":1,"column_end":4}},{"value":"/ This is because there could exist `V` types with multiple `Borrow<[_]>` impls,","span":{"file_name":"src/liballoc/slice.rs","byte_start":599142,"byte_end":599224,"line_start":607,"line_end":607,"column_start":1,"column_end":83}},{"value":"/ such that multiple `T` types would apply:","span":{"file_name":"src/liballoc/slice.rs","byte_start":599225,"byte_end":599270,"line_start":608,"line_end":608,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":599271,"byte_end":599274,"line_start":609,"line_end":609,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":599275,"byte_end":599282,"line_start":610,"line_end":610,"column_start":1,"column_end":8}},{"value":"/ # #[allow(dead_code)]","span":{"file_name":"src/liballoc/slice.rs","byte_start":599283,"byte_end":599308,"line_start":611,"line_end":611,"column_start":1,"column_end":26}},{"value":"/ pub struct Foo(Vec<u32>, Vec<String>);","span":{"file_name":"src/liballoc/slice.rs","byte_start":599309,"byte_end":599351,"line_start":612,"line_end":612,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":599352,"byte_end":599355,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ impl std::borrow::Borrow<[u32]> for Foo {","span":{"file_name":"src/liballoc/slice.rs","byte_start":599356,"byte_end":599401,"line_start":614,"line_end":614,"column_start":1,"column_end":46}},{"value":"/     fn borrow(&self) -> &[u32] { &self.0 }","span":{"file_name":"src/liballoc/slice.rs","byte_start":599402,"byte_end":599448,"line_start":615,"line_end":615,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"src/liballoc/slice.rs","byte_start":599449,"byte_end":599454,"line_start":616,"line_end":616,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/slice.rs","byte_start":599455,"byte_end":599458,"line_start":617,"line_end":617,"column_start":1,"column_end":4}},{"value":"/ impl std::borrow::Borrow<[String]> for Foo {","span":{"file_name":"src/liballoc/slice.rs","byte_start":599459,"byte_end":599507,"line_start":618,"line_end":618,"column_start":1,"column_end":49}},{"value":"/     fn borrow(&self) -> &[String] { &self.1 }","span":{"file_name":"src/liballoc/slice.rs","byte_start":599508,"byte_end":599557,"line_start":619,"line_end":619,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"src/liballoc/slice.rs","byte_start":599558,"byte_end":599563,"line_start":620,"line_end":620,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/slice.rs","byte_start":599564,"byte_end":599571,"line_start":621,"line_end":621,"column_start":1,"column_end":8}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":599572,"byte_end":599632,"line_start":622,"line_end":622,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3107},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599787,"byte_end":599793,"line_start":626,"line_end":626,"column_start":10,"column_end":16},"name":"Output","qualname":"::slice::Concat::Output","value":"type Output;","parent":{"krate":0,"index":3105},"children":[],"decl_id":null,"docs":" The resulting type after concatenation\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":599670,"byte_end":599730,"line_start":624,"line_end":624,"column_start":5,"column_end":65}},{"value":"/ The resulting type after concatenation","span":{"file_name":"src/liballoc/slice.rs","byte_start":599735,"byte_end":599777,"line_start":625,"line_end":625,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3108},"span":{"file_name":"src/liballoc/slice.rs","byte_start":599956,"byte_end":599962,"line_start":630,"line_end":630,"column_start":8,"column_end":14},"name":"concat","qualname":"::slice::Concat::concat","value":"fn (slice: &Self) -> Self::Output","parent":{"krate":0,"index":3105},"children":[],"decl_id":null,"docs":" Implementation of [`[T]::concat`](../../std/primitive.slice.html#method.concat)\n","sig":null,"attributes":[{"value":"/ Implementation of [`[T]::concat`](../../std/primitive.slice.html#method.concat)","span":{"file_name":"src/liballoc/slice.rs","byte_start":599800,"byte_end":599883,"line_start":628,"line_end":628,"column_start":5,"column_end":88}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":599888,"byte_end":599948,"line_start":629,"line_end":629,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":3109},"span":{"file_name":"src/liballoc/slice.rs","byte_start":600147,"byte_end":600151,"line_start":635,"line_end":635,"column_start":11,"column_end":15},"name":"Join","qualname":"::slice::Join","value":"Join<Separator>","parent":null,"children":[{"krate":0,"index":3111},{"krate":0,"index":3112}],"decl_id":null,"docs":" Helper trait for [`[T]::join`](../../std/primitive.slice.html#method.join)\n","sig":null,"attributes":[{"value":"/ Helper trait for [`[T]::join`](../../std/primitive.slice.html#method.join)","span":{"file_name":"src/liballoc/slice.rs","byte_start":599997,"byte_end":600075,"line_start":633,"line_end":633,"column_start":1,"column_end":79}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":600076,"byte_end":600136,"line_start":634,"line_end":634,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3111},"span":{"file_name":"src/liballoc/slice.rs","byte_start":600286,"byte_end":600292,"line_start":638,"line_end":638,"column_start":10,"column_end":16},"name":"Output","qualname":"::slice::Join::Output","value":"type Output;","parent":{"krate":0,"index":3109},"children":[],"decl_id":null,"docs":" The resulting type after concatenation\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":600169,"byte_end":600229,"line_start":636,"line_end":636,"column_start":5,"column_end":65}},{"value":"/ The resulting type after concatenation","span":{"file_name":"src/liballoc/slice.rs","byte_start":600234,"byte_end":600276,"line_start":637,"line_end":637,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3112},"span":{"file_name":"src/liballoc/slice.rs","byte_start":600451,"byte_end":600455,"line_start":642,"line_end":642,"column_start":8,"column_end":12},"name":"join","qualname":"::slice::Join::join","value":"fn (slice: &Self, sep: Separator) -> Self::Output","parent":{"krate":0,"index":3109},"children":[],"decl_id":null,"docs":" Implementation of [`[T]::join`](../../std/primitive.slice.html#method.join)\n","sig":null,"attributes":[{"value":"/ Implementation of [`[T]::join`](../../std/primitive.slice.html#method.join)","span":{"file_name":"src/liballoc/slice.rs","byte_start":600299,"byte_end":600378,"line_start":640,"line_end":640,"column_start":5,"column_end":84}},{"value":"unstable(feature = \"slice_concat_trait\", issue = \"27747\")","span":{"file_name":"src/liballoc/slice.rs","byte_start":600383,"byte_end":600443,"line_start":641,"line_end":641,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":3173},"span":{"file_name":"src/liballoc/str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"src/liballoc/str.rs","parent":null,"children":[{"krate":0,"index":3174},{"krate":0,"index":3177},{"krate":0,"index":3178},{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3185},{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3188},{"krate":0,"index":3192},{"krate":0,"index":3193},{"krate":0,"index":3194},{"krate":0,"index":3195},{"krate":0,"index":3196},{"krate":0,"index":3197},{"krate":0,"index":3198},{"krate":0,"index":3204},{"krate":0,"index":3208},{"krate":0,"index":3212},{"krate":0,"index":3215},{"krate":0,"index":3218},{"krate":0,"index":3221},{"krate":0,"index":3224},{"krate":0,"index":3227},{"krate":0,"index":3230},{"krate":0,"index":3233},{"krate":0,"index":3237},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3249},{"krate":0,"index":3251},{"krate":0,"index":3253},{"krate":0,"index":3257},{"krate":0,"index":3278}],"decl_id":null,"docs":" Unicode string slices.","sig":null,"attributes":[{"value":"! Unicode string slices.","span":{"file_name":"src/liballoc/str.rs","byte_start":616441,"byte_end":616467,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":616468,"byte_end":616471,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! *[See also the `str` primitive type](../../std/primitive.str.html).*","span":{"file_name":"src/liballoc/str.rs","byte_start":616472,"byte_end":616544,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":616545,"byte_end":616548,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! The `&str` type is one of the two main string types, the other being `String`.","span":{"file_name":"src/liballoc/str.rs","byte_start":616549,"byte_end":616631,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"! Unlike its `String` counterpart, its contents are borrowed.","span":{"file_name":"src/liballoc/str.rs","byte_start":616632,"byte_end":616695,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":616696,"byte_end":616699,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Basic Usage","span":{"file_name":"src/liballoc/str.rs","byte_start":616700,"byte_end":616717,"line_start":8,"line_end":8,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":616718,"byte_end":616721,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! A basic string declaration of `&str` type:","span":{"file_name":"src/liballoc/str.rs","byte_start":616722,"byte_end":616768,"line_start":10,"line_end":10,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":616769,"byte_end":616772,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":616773,"byte_end":616780,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"! let hello_world = \"Hello, World!\";","span":{"file_name":"src/liballoc/str.rs","byte_start":616781,"byte_end":616819,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":616820,"byte_end":616827,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":616828,"byte_end":616831,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! Here we have declared a string literal, also known as a string slice.","span":{"file_name":"src/liballoc/str.rs","byte_start":616832,"byte_end":616905,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"! String literals have a static lifetime, which means the string `hello_world`","span":{"file_name":"src/liballoc/str.rs","byte_start":616906,"byte_end":616986,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"! is guaranteed to be valid for the duration of the entire program.","span":{"file_name":"src/liballoc/str.rs","byte_start":616987,"byte_end":617056,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"! We can explicitly specify `hello_world`'s lifetime as well:","span":{"file_name":"src/liballoc/str.rs","byte_start":617057,"byte_end":617120,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"src/liballoc/str.rs","byte_start":617121,"byte_end":617124,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":617125,"byte_end":617132,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"! let hello_world: &'static str = \"Hello, world!\";","span":{"file_name":"src/liballoc/str.rs","byte_start":617133,"byte_end":617185,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"! ```","span":{"file_name":"src/liballoc/str.rs","byte_start":617186,"byte_end":617193,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":617195,"byte_end":617241,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"allow(unused_imports)","span":{"file_name":"src/liballoc/str.rs","byte_start":617398,"byte_end":617423,"line_start":28,"line_end":28,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3258},"span":{"file_name":"src/liballoc/str.rs","byte_start":624259,"byte_end":624275,"line_start":233,"line_end":233,"column_start":12,"column_end":28},"name":"into_boxed_bytes","qualname":"<str>::into_boxed_bytes","value":"fn (self: Box<str>) -> Box<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.","sig":null,"attributes":[{"value":"/ Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.","span":{"file_name":"src/liballoc/str.rs","byte_start":623814,"byte_end":623889,"line_start":219,"line_end":219,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":623894,"byte_end":623897,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":623902,"byte_end":623916,"line_start":221,"line_end":221,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":623921,"byte_end":623924,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":623929,"byte_end":623945,"line_start":223,"line_end":223,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":623950,"byte_end":623953,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":623958,"byte_end":623965,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is a string\";","span":{"file_name":"src/liballoc/str.rs","byte_start":623970,"byte_end":624001,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/ let boxed_str = s.to_owned().into_boxed_str();","span":{"file_name":"src/liballoc/str.rs","byte_start":624006,"byte_end":624056,"line_start":227,"line_end":227,"column_start":5,"column_end":55}},{"value":"/ let boxed_bytes = boxed_str.into_boxed_bytes();","span":{"file_name":"src/liballoc/str.rs","byte_start":624061,"byte_end":624112,"line_start":228,"line_end":228,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(*boxed_bytes, *s.as_bytes());","span":{"file_name":"src/liballoc/str.rs","byte_start":624117,"byte_end":624161,"line_start":229,"line_end":229,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":624166,"byte_end":624173,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"stable(feature = \"str_box_extras\", since = \"1.20.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":624178,"byte_end":624233,"line_start":231,"line_end":231,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":624238,"byte_end":624247,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3259},"span":{"file_name":"src/liballoc/str.rs","byte_start":625263,"byte_end":625270,"line_start":265,"line_end":265,"column_start":12,"column_end":19},"name":"replace","qualname":"<str>::replace","value":"fn <'a, P> (&'a self, from: P, to: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Replaces all matches of a pattern with another string.","sig":null,"attributes":[{"value":"/ Replaces all matches of a pattern with another string.","span":{"file_name":"src/liballoc/str.rs","byte_start":624338,"byte_end":624396,"line_start":237,"line_end":237,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624401,"byte_end":624404,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ `replace` creates a new [`String`], and copies the data from this string slice into it.","span":{"file_name":"src/liballoc/str.rs","byte_start":624409,"byte_end":624500,"line_start":239,"line_end":239,"column_start":5,"column_end":96}},{"value":"/ While doing so, it attempts to find matches of a pattern. If it finds any, it","span":{"file_name":"src/liballoc/str.rs","byte_start":624505,"byte_end":624586,"line_start":240,"line_end":240,"column_start":5,"column_end":86}},{"value":"/ replaces them with the replacement string slice.","span":{"file_name":"src/liballoc/str.rs","byte_start":624591,"byte_end":624643,"line_start":241,"line_end":241,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624648,"byte_end":624651,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":624656,"byte_end":624697,"line_start":243,"line_end":243,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624702,"byte_end":624705,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":624710,"byte_end":624724,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624729,"byte_end":624732,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":624737,"byte_end":624753,"line_start":247,"line_end":247,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624758,"byte_end":624761,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":624766,"byte_end":624773,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is old\";","span":{"file_name":"src/liballoc/str.rs","byte_start":624778,"byte_end":624804,"line_start":250,"line_end":250,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624809,"byte_end":624812,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"this is new\", s.replace(\"old\", \"new\"));","span":{"file_name":"src/liballoc/str.rs","byte_start":624817,"byte_end":624872,"line_start":252,"line_end":252,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":624877,"byte_end":624884,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624889,"byte_end":624892,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"src/liballoc/str.rs","byte_start":624897,"byte_end":624932,"line_start":255,"line_end":255,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":624937,"byte_end":624940,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":624945,"byte_end":624952,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is old\";","span":{"file_name":"src/liballoc/str.rs","byte_start":624957,"byte_end":624983,"line_start":258,"line_end":258,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));","span":{"file_name":"src/liballoc/str.rs","byte_start":624988,"byte_end":625050,"line_start":259,"line_end":259,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":625055,"byte_end":625062,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"","span":{"file_name":"src/liballoc/str.rs","byte_start":625067,"byte_end":625187,"line_start":261,"line_end":262,"column_start":5,"column_end":51}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":625192,"byte_end":625237,"line_start":263,"line_end":263,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":625242,"byte_end":625251,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"src/liballoc/str.rs","byte_start":626825,"byte_end":626833,"line_start":305,"line_end":305,"column_start":12,"column_end":20},"name":"replacen","qualname":"<str>::replacen","value":"fn <'a, P> (&'a self, pat: P, to: &str, count: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Replaces first N matches of a pattern with another string.","sig":null,"attributes":[{"value":"/ Replaces first N matches of a pattern with another string.","span":{"file_name":"src/liballoc/str.rs","byte_start":625725,"byte_end":625787,"line_start":277,"line_end":277,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":625792,"byte_end":625795,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ `replacen` creates a new [`String`], and copies the data from this string slice into it.","span":{"file_name":"src/liballoc/str.rs","byte_start":625800,"byte_end":625892,"line_start":279,"line_end":279,"column_start":5,"column_end":97}},{"value":"/ While doing so, it attempts to find matches of a pattern. If it finds any, it","span":{"file_name":"src/liballoc/str.rs","byte_start":625897,"byte_end":625978,"line_start":280,"line_end":280,"column_start":5,"column_end":86}},{"value":"/ replaces them with the replacement string slice at most `count` times.","span":{"file_name":"src/liballoc/str.rs","byte_start":625983,"byte_end":626057,"line_start":281,"line_end":281,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":626062,"byte_end":626065,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":626070,"byte_end":626111,"line_start":283,"line_end":283,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":626116,"byte_end":626119,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":626124,"byte_end":626138,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":626143,"byte_end":626146,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":626151,"byte_end":626167,"line_start":287,"line_end":287,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":626172,"byte_end":626175,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":626180,"byte_end":626187,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"/ let s = \"foo foo 123 foo\";","span":{"file_name":"src/liballoc/str.rs","byte_start":626192,"byte_end":626222,"line_start":290,"line_end":290,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));","span":{"file_name":"src/liballoc/str.rs","byte_start":626227,"byte_end":626290,"line_start":291,"line_end":291,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));","span":{"file_name":"src/liballoc/str.rs","byte_start":626295,"byte_end":626354,"line_start":292,"line_end":292,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));","span":{"file_name":"src/liballoc/str.rs","byte_start":626359,"byte_end":626435,"line_start":293,"line_end":293,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":626440,"byte_end":626447,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":626452,"byte_end":626455,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"src/liballoc/str.rs","byte_start":626460,"byte_end":626495,"line_start":296,"line_end":296,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":626500,"byte_end":626503,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":626508,"byte_end":626515,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ let s = \"this is old\";","span":{"file_name":"src/liballoc/str.rs","byte_start":626520,"byte_end":626546,"line_start":299,"line_end":299,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));","span":{"file_name":"src/liballoc/str.rs","byte_start":626551,"byte_end":626618,"line_start":300,"line_end":300,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":626623,"byte_end":626630,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"","span":{"file_name":"src/liballoc/str.rs","byte_start":626635,"byte_end":626755,"line_start":302,"line_end":303,"column_start":5,"column_end":51}},{"value":"stable(feature = \"str_replacen\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":626760,"byte_end":626813,"line_start":304,"line_end":304,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3265},"span":{"file_name":"src/liballoc/str.rs","byte_start":628599,"byte_end":628611,"line_start":360,"line_end":360,"column_start":12,"column_end":24},"name":"to_lowercase","qualname":"<str>::to_lowercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the lowercase equivalent of this string slice, as a new [`String`].","sig":null,"attributes":[{"value":"/ Returns the lowercase equivalent of this string slice, as a new [`String`].","span":{"file_name":"src/liballoc/str.rs","byte_start":627377,"byte_end":627456,"line_start":318,"line_end":318,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627461,"byte_end":627464,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ 'Lowercase' is defined according to the terms of the Unicode Derived Core Property","span":{"file_name":"src/liballoc/str.rs","byte_start":627469,"byte_end":627555,"line_start":320,"line_end":320,"column_start":5,"column_end":91}},{"value":"/ `Lowercase`.","span":{"file_name":"src/liballoc/str.rs","byte_start":627560,"byte_end":627576,"line_start":321,"line_end":321,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627581,"byte_end":627584,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Since some characters can expand into multiple characters when changing","span":{"file_name":"src/liballoc/str.rs","byte_start":627589,"byte_end":627664,"line_start":323,"line_end":323,"column_start":5,"column_end":80}},{"value":"/ the case, this function returns a [`String`] instead of modifying the","span":{"file_name":"src/liballoc/str.rs","byte_start":627669,"byte_end":627742,"line_start":324,"line_end":324,"column_start":5,"column_end":78}},{"value":"/ parameter in-place.","span":{"file_name":"src/liballoc/str.rs","byte_start":627747,"byte_end":627770,"line_start":325,"line_end":325,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627775,"byte_end":627778,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":627783,"byte_end":627824,"line_start":327,"line_end":327,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627829,"byte_end":627832,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":627837,"byte_end":627851,"line_start":329,"line_end":329,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627856,"byte_end":627859,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":627864,"byte_end":627880,"line_start":331,"line_end":331,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627885,"byte_end":627888,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":627893,"byte_end":627900,"line_start":333,"line_end":333,"column_start":5,"column_end":12}},{"value":"/ let s = \"HELLO\";","span":{"file_name":"src/liballoc/str.rs","byte_start":627905,"byte_end":627925,"line_start":334,"line_end":334,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627930,"byte_end":627933,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", s.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":627938,"byte_end":627980,"line_start":336,"line_end":336,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":627985,"byte_end":627992,"line_start":337,"line_end":337,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":627997,"byte_end":628000,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ A tricky example, with sigma:","span":{"file_name":"src/liballoc/str.rs","byte_start":628005,"byte_end":628038,"line_start":339,"line_end":339,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":628043,"byte_end":628046,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":628051,"byte_end":628058,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ let sigma = \"Σ\";","span":{"file_name":"src/liballoc/str.rs","byte_start":628063,"byte_end":628084,"line_start":342,"line_end":342,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":628089,"byte_end":628092,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"σ\", sigma.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":628097,"byte_end":628140,"line_start":344,"line_end":344,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":628145,"byte_end":628148,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ // but at the end of a word, it's ς, not σ:","span":{"file_name":"src/liballoc/str.rs","byte_start":628153,"byte_end":628202,"line_start":346,"line_end":346,"column_start":5,"column_end":52}},{"value":"/ let odysseus = \"ὈΔΥΣΣΕΎΣ\";","span":{"file_name":"src/liballoc/str.rs","byte_start":628207,"byte_end":628246,"line_start":347,"line_end":347,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":628251,"byte_end":628254,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":628259,"byte_end":628320,"line_start":349,"line_end":349,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":628325,"byte_end":628332,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":628337,"byte_end":628340,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Languages without case are not changed:","span":{"file_name":"src/liballoc/str.rs","byte_start":628345,"byte_end":628388,"line_start":352,"line_end":352,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":628393,"byte_end":628396,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":628401,"byte_end":628408,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ let new_year = \"农历新年\";","span":{"file_name":"src/liballoc/str.rs","byte_start":628413,"byte_end":628447,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":628452,"byte_end":628455,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(new_year, new_year.to_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":628460,"byte_end":628510,"line_start":357,"line_end":357,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":628515,"byte_end":628522,"line_start":358,"line_end":358,"column_start":5,"column_end":12}},{"value":"stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":628527,"byte_end":628587,"line_start":359,"line_end":359,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3273},"span":{"file_name":"src/liballoc/str.rs","byte_start":631512,"byte_end":631524,"line_start":441,"line_end":441,"column_start":12,"column_end":24},"name":"to_uppercase","qualname":"<str>::to_uppercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the uppercase equivalent of this string slice, as a new [`String`].","sig":null,"attributes":[{"value":"/ Returns the uppercase equivalent of this string slice, as a new [`String`].","span":{"file_name":"src/liballoc/str.rs","byte_start":630471,"byte_end":630550,"line_start":405,"line_end":405,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":630555,"byte_end":630558,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ 'Uppercase' is defined according to the terms of the Unicode Derived Core Property","span":{"file_name":"src/liballoc/str.rs","byte_start":630563,"byte_end":630649,"line_start":407,"line_end":407,"column_start":5,"column_end":91}},{"value":"/ `Uppercase`.","span":{"file_name":"src/liballoc/str.rs","byte_start":630654,"byte_end":630670,"line_start":408,"line_end":408,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":630675,"byte_end":630678,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ Since some characters can expand into multiple characters when changing","span":{"file_name":"src/liballoc/str.rs","byte_start":630683,"byte_end":630758,"line_start":410,"line_end":410,"column_start":5,"column_end":80}},{"value":"/ the case, this function returns a [`String`] instead of modifying the","span":{"file_name":"src/liballoc/str.rs","byte_start":630763,"byte_end":630836,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/ parameter in-place.","span":{"file_name":"src/liballoc/str.rs","byte_start":630841,"byte_end":630864,"line_start":412,"line_end":412,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":630869,"byte_end":630872,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":630877,"byte_end":630918,"line_start":414,"line_end":414,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":630923,"byte_end":630926,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":630931,"byte_end":630945,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":630950,"byte_end":630953,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":630958,"byte_end":630974,"line_start":418,"line_end":418,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":630979,"byte_end":630982,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":630987,"byte_end":630994,"line_start":420,"line_end":420,"column_start":5,"column_end":12}},{"value":"/ let s = \"hello\";","span":{"file_name":"src/liballoc/str.rs","byte_start":630999,"byte_end":631019,"line_start":421,"line_end":421,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":631024,"byte_end":631027,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"HELLO\", s.to_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":631032,"byte_end":631074,"line_start":423,"line_end":423,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":631079,"byte_end":631086,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":631091,"byte_end":631094,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"src/liballoc/str.rs","byte_start":631099,"byte_end":631140,"line_start":426,"line_end":426,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":631145,"byte_end":631148,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":631153,"byte_end":631160,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ let new_year = \"农历新年\";","span":{"file_name":"src/liballoc/str.rs","byte_start":631165,"byte_end":631199,"line_start":429,"line_end":429,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":631204,"byte_end":631207,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(new_year, new_year.to_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":631212,"byte_end":631262,"line_start":431,"line_end":431,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":631267,"byte_end":631274,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":631279,"byte_end":631282,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ One character can become multiple:","span":{"file_name":"src/liballoc/str.rs","byte_start":631287,"byte_end":631325,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":631330,"byte_end":631337,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ let s = \"tschüß\";","span":{"file_name":"src/liballoc/str.rs","byte_start":631342,"byte_end":631365,"line_start":436,"line_end":436,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":631370,"byte_end":631373,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"TSCHÜSS\", s.to_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":631378,"byte_end":631423,"line_start":438,"line_end":438,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":631428,"byte_end":631435,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":631440,"byte_end":631500,"line_start":440,"line_end":440,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3274},"span":{"file_name":"src/liballoc/str.rs","byte_start":632534,"byte_end":632545,"line_start":477,"line_end":477,"column_start":12,"column_end":23},"name":"into_string","qualname":"<str>::into_string","value":"fn (self: Box<str>) -> String","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`Box<str>`] into a [`String`] without copying or allocating.","sig":null,"attributes":[{"value":"/ Converts a [`Box<str>`] into a [`String`] without copying or allocating.","span":{"file_name":"src/liballoc/str.rs","byte_start":632024,"byte_end":632100,"line_start":460,"line_end":460,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632105,"byte_end":632108,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":632113,"byte_end":632154,"line_start":462,"line_end":462,"column_start":5,"column_end":46}},{"value":"/ [`Box<str>`]: boxed/struct.Box.html","span":{"file_name":"src/liballoc/str.rs","byte_start":632159,"byte_end":632198,"line_start":463,"line_end":463,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632203,"byte_end":632206,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":632211,"byte_end":632225,"line_start":465,"line_end":465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632230,"byte_end":632233,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":632238,"byte_end":632254,"line_start":467,"line_end":467,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632259,"byte_end":632262,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":632267,"byte_end":632274,"line_start":469,"line_end":469,"column_start":5,"column_end":12}},{"value":"/ let string = String::from(\"birthday gift\");","span":{"file_name":"src/liballoc/str.rs","byte_start":632279,"byte_end":632326,"line_start":470,"line_end":470,"column_start":5,"column_end":52}},{"value":"/ let boxed_str = string.clone().into_boxed_str();","span":{"file_name":"src/liballoc/str.rs","byte_start":632331,"byte_end":632383,"line_start":471,"line_end":471,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632388,"byte_end":632391,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(boxed_str.into_string(), string);","span":{"file_name":"src/liballoc/str.rs","byte_start":632396,"byte_end":632444,"line_start":473,"line_end":473,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":632449,"byte_end":632456,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"stable(feature = \"box_str\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":632461,"byte_end":632508,"line_start":475,"line_end":475,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":632513,"byte_end":632522,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3275},"span":{"file_name":"src/liballoc/str.rs","byte_start":633307,"byte_end":633313,"line_start":505,"line_end":505,"column_start":12,"column_end":18},"name":"repeat","qualname":"<str>::repeat","value":"fn (&self, n: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`String`] by repeating a string `n` times.","sig":null,"attributes":[{"value":"/ Creates a new [`String`] by repeating a string `n` times.","span":{"file_name":"src/liballoc/str.rs","byte_start":632695,"byte_end":632756,"line_start":482,"line_end":482,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632761,"byte_end":632764,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/str.rs","byte_start":632769,"byte_end":632781,"line_start":484,"line_end":484,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632786,"byte_end":632789,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"src/liballoc/str.rs","byte_start":632794,"byte_end":632854,"line_start":486,"line_end":486,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632859,"byte_end":632862,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ [`String`]: string/struct.String.html","span":{"file_name":"src/liballoc/str.rs","byte_start":632867,"byte_end":632908,"line_start":488,"line_end":488,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632913,"byte_end":632916,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":632921,"byte_end":632935,"line_start":490,"line_end":490,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632940,"byte_end":632943,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":632948,"byte_end":632964,"line_start":492,"line_end":492,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":632969,"byte_end":632972,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":632977,"byte_end":632984,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));","span":{"file_name":"src/liballoc/str.rs","byte_start":632989,"byte_end":633051,"line_start":495,"line_end":495,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":633056,"byte_end":633063,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633068,"byte_end":633071,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ A panic upon overflow:","span":{"file_name":"src/liballoc/str.rs","byte_start":633076,"byte_end":633102,"line_start":498,"line_end":498,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633107,"byte_end":633110,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"src/liballoc/str.rs","byte_start":633115,"byte_end":633134,"line_start":500,"line_end":500,"column_start":5,"column_end":24}},{"value":"/ // this will panic at runtime","span":{"file_name":"src/liballoc/str.rs","byte_start":633139,"byte_end":633172,"line_start":501,"line_end":501,"column_start":5,"column_end":38}},{"value":"/ \"0123456789abcdef\".repeat(usize::max_value());","span":{"file_name":"src/liballoc/str.rs","byte_start":633177,"byte_end":633227,"line_start":502,"line_end":502,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":633232,"byte_end":633239,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"stable(feature = \"repeat_str\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":633244,"byte_end":633295,"line_start":504,"line_end":504,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3276},"span":{"file_name":"src/liballoc/str.rs","byte_start":634232,"byte_end":634250,"line_start":532,"line_end":532,"column_start":12,"column_end":30},"name":"to_ascii_uppercase","qualname":"<str>::to_ascii_uppercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this string where each character is mapped to its\n ASCII upper case equivalent.","sig":null,"attributes":[{"value":"/ Returns a copy of this string where each character is mapped to its","span":{"file_name":"src/liballoc/str.rs","byte_start":633428,"byte_end":633499,"line_start":509,"line_end":509,"column_start":5,"column_end":76}},{"value":"/ ASCII upper case equivalent.","span":{"file_name":"src/liballoc/str.rs","byte_start":633504,"byte_end":633536,"line_start":510,"line_end":510,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633541,"byte_end":633544,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',","span":{"file_name":"src/liballoc/str.rs","byte_start":633549,"byte_end":633603,"line_start":512,"line_end":512,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/str.rs","byte_start":633608,"byte_end":633648,"line_start":513,"line_end":513,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633653,"byte_end":633656,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ To uppercase the value in-place, use [`make_ascii_uppercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":633661,"byte_end":633727,"line_start":515,"line_end":515,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633732,"byte_end":633735,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ To uppercase ASCII characters in addition to non-ASCII characters, use","span":{"file_name":"src/liballoc/str.rs","byte_start":633740,"byte_end":633814,"line_start":517,"line_end":517,"column_start":5,"column_end":79}},{"value":"/ [`to_uppercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":633819,"byte_end":633840,"line_start":518,"line_end":518,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633845,"byte_end":633848,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":633853,"byte_end":633867,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633872,"byte_end":633875,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":633880,"byte_end":633887,"line_start":522,"line_end":522,"column_start":5,"column_end":12}},{"value":"/ let s = \"Grüße, Jürgen ❤\";","span":{"file_name":"src/liballoc/str.rs","byte_start":633892,"byte_end":633927,"line_start":523,"line_end":523,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":633932,"byte_end":633935,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":633940,"byte_end":634003,"line_start":525,"line_end":525,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":634008,"byte_end":634015,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":634020,"byte_end":634023,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_uppercase`]: #method.make_ascii_uppercase","span":{"file_name":"src/liballoc/str.rs","byte_start":634028,"byte_end":634086,"line_start":528,"line_end":528,"column_start":5,"column_end":63}},{"value":"/ [`to_uppercase`]: #method.to_uppercase","span":{"file_name":"src/liballoc/str.rs","byte_start":634091,"byte_end":634133,"line_start":529,"line_end":529,"column_start":5,"column_end":47}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":634138,"byte_end":634206,"line_start":530,"line_end":530,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":634211,"byte_end":634220,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3277},"span":{"file_name":"src/liballoc/str.rs","byte_start":635292,"byte_end":635310,"line_start":562,"line_end":562,"column_start":12,"column_end":30},"name":"to_ascii_lowercase","qualname":"<str>::to_ascii_lowercase","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this string where each character is mapped to its\n ASCII lower case equivalent.","sig":null,"attributes":[{"value":"/ Returns a copy of this string where each character is mapped to its","span":{"file_name":"src/liballoc/str.rs","byte_start":634488,"byte_end":634559,"line_start":539,"line_end":539,"column_start":5,"column_end":76}},{"value":"/ ASCII lower case equivalent.","span":{"file_name":"src/liballoc/str.rs","byte_start":634564,"byte_end":634596,"line_start":540,"line_end":540,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":634601,"byte_end":634604,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',","span":{"file_name":"src/liballoc/str.rs","byte_start":634609,"byte_end":634663,"line_start":542,"line_end":542,"column_start":5,"column_end":59}},{"value":"/ but non-ASCII letters are unchanged.","span":{"file_name":"src/liballoc/str.rs","byte_start":634668,"byte_end":634708,"line_start":543,"line_end":543,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":634713,"byte_end":634716,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ To lowercase the value in-place, use [`make_ascii_lowercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":634721,"byte_end":634787,"line_start":545,"line_end":545,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":634792,"byte_end":634795,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ To lowercase ASCII characters in addition to non-ASCII characters, use","span":{"file_name":"src/liballoc/str.rs","byte_start":634800,"byte_end":634874,"line_start":547,"line_end":547,"column_start":5,"column_end":79}},{"value":"/ [`to_lowercase`].","span":{"file_name":"src/liballoc/str.rs","byte_start":634879,"byte_end":634900,"line_start":548,"line_end":548,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":634905,"byte_end":634908,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":634913,"byte_end":634927,"line_start":550,"line_end":550,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":634932,"byte_end":634935,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":634940,"byte_end":634947,"line_start":552,"line_end":552,"column_start":5,"column_end":12}},{"value":"/ let s = \"Grüße, Jürgen ❤\";","span":{"file_name":"src/liballoc/str.rs","byte_start":634952,"byte_end":634987,"line_start":553,"line_end":553,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":634992,"byte_end":634995,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());","span":{"file_name":"src/liballoc/str.rs","byte_start":635000,"byte_end":635063,"line_start":555,"line_end":555,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":635068,"byte_end":635075,"line_start":556,"line_end":556,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":635080,"byte_end":635083,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ [`make_ascii_lowercase`]: #method.make_ascii_lowercase","span":{"file_name":"src/liballoc/str.rs","byte_start":635088,"byte_end":635146,"line_start":558,"line_end":558,"column_start":5,"column_end":63}},{"value":"/ [`to_lowercase`]: #method.to_lowercase","span":{"file_name":"src/liballoc/str.rs","byte_start":635151,"byte_end":635193,"line_start":559,"line_end":559,"column_start":5,"column_end":47}},{"value":"stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":635198,"byte_end":635266,"line_start":560,"line_end":560,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":635271,"byte_end":635280,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":3278},"span":{"file_name":"src/liballoc/str.rs","byte_start":635965,"byte_end":635990,"line_start":585,"line_end":585,"column_start":15,"column_end":40},"name":"from_boxed_utf8_unchecked","qualname":"::str::from_boxed_utf8_unchecked","value":"fn (v: Box<[u8]>) -> Box<str>","parent":null,"children":[],"decl_id":null,"docs":" Converts a boxed slice of bytes to a boxed string slice without checking\n that the string contains valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a boxed slice of bytes to a boxed string slice without checking","span":{"file_name":"src/liballoc/str.rs","byte_start":635546,"byte_end":635622,"line_start":570,"line_end":570,"column_start":1,"column_end":77}},{"value":"/ that the string contains valid UTF-8.","span":{"file_name":"src/liballoc/str.rs","byte_start":635623,"byte_end":635664,"line_start":571,"line_end":571,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":635665,"byte_end":635668,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/str.rs","byte_start":635669,"byte_end":635683,"line_start":573,"line_end":573,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":635684,"byte_end":635687,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/str.rs","byte_start":635688,"byte_end":635704,"line_start":575,"line_end":575,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":635705,"byte_end":635708,"line_start":576,"line_end":576,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":635709,"byte_end":635716,"line_start":577,"line_end":577,"column_start":1,"column_end":8}},{"value":"/ let smile_utf8 = Box::new([226, 152, 186]);","span":{"file_name":"src/liballoc/str.rs","byte_start":635717,"byte_end":635764,"line_start":578,"line_end":578,"column_start":1,"column_end":48}},{"value":"/ let smile = unsafe { std::str::from_boxed_utf8_unchecked(smile_utf8) };","span":{"file_name":"src/liballoc/str.rs","byte_start":635765,"byte_end":635840,"line_start":579,"line_end":579,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/str.rs","byte_start":635841,"byte_end":635844,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"☺\", &*smile);","span":{"file_name":"src/liballoc/str.rs","byte_start":635845,"byte_end":635876,"line_start":581,"line_end":581,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/str.rs","byte_start":635877,"byte_end":635884,"line_start":582,"line_end":582,"column_start":1,"column_end":8}},{"value":"stable(feature = \"str_box_extras\", since = \"1.20.0\")","span":{"file_name":"src/liballoc/str.rs","byte_start":635885,"byte_end":635940,"line_start":583,"line_end":583,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"src/liballoc/str.rs","byte_start":635941,"byte_end":635950,"line_start":584,"line_end":584,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":3279},"span":{"file_name":"src/liballoc/string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::string","value":"src/liballoc/string.rs","parent":null,"children":[{"krate":0,"index":3280},{"krate":0,"index":3283},{"krate":0,"index":3284},{"krate":0,"index":3285},{"krate":0,"index":3288},{"krate":0,"index":3292},{"krate":0,"index":3299},{"krate":0,"index":3300},{"krate":0,"index":3303},{"krate":0,"index":3306},{"krate":0,"index":3307},{"krate":0,"index":3308},{"krate":0,"index":3314},{"krate":0,"index":4553},{"krate":0,"index":4560},{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4555},{"krate":0,"index":4566},{"krate":0,"index":4569},{"krate":0,"index":4571},{"krate":0,"index":4574},{"krate":0,"index":3315},{"krate":0,"index":3360},{"krate":0,"index":3364},{"krate":0,"index":3366},{"krate":0,"index":3368},{"krate":0,"index":3371},{"krate":0,"index":3374},{"krate":0,"index":3378},{"krate":0,"index":3382},{"krate":0,"index":3385},{"krate":0,"index":3389},{"krate":0,"index":3393},{"krate":0,"index":3397},{"krate":0,"index":3402},{"krate":0,"index":3406},{"krate":0,"index":3411},{"krate":0,"index":3418},{"krate":0,"index":3421},{"krate":0,"index":4576},{"krate":0,"index":4581},{"krate":0,"index":4586},{"krate":0,"index":4591},{"krate":0,"index":4596},{"krate":0,"index":4601},{"krate":0,"index":4606},{"krate":0,"index":4611},{"krate":0,"index":4616},{"krate":0,"index":4621},{"krate":0,"index":3422},{"krate":0,"index":3424},{"krate":0,"index":3426},{"krate":0,"index":3428},{"krate":0,"index":3431},{"krate":0,"index":3434},{"krate":0,"index":3436},{"krate":0,"index":3439},{"krate":0,"index":3442},{"krate":0,"index":3445},{"krate":0,"index":3448},{"krate":0,"index":3451},{"krate":0,"index":3454},{"krate":0,"index":3456},{"krate":0,"index":3458},{"krate":0,"index":3460},{"krate":0,"index":3462},{"krate":0,"index":3464},{"krate":0,"index":3466},{"krate":0,"index":3469},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3475},{"krate":0,"index":3477},{"krate":0,"index":3481},{"krate":0,"index":3483},{"krate":0,"index":3485},{"krate":0,"index":3487},{"krate":0,"index":3489},{"krate":0,"index":3491},{"krate":0,"index":3493},{"krate":0,"index":3495},{"krate":0,"index":3497},{"krate":0,"index":3499},{"krate":0,"index":3502},{"krate":0,"index":3505},{"krate":0,"index":3508},{"krate":0,"index":3511},{"krate":0,"index":3515},{"krate":0,"index":3520},{"krate":0,"index":3524},{"krate":0,"index":3526},{"krate":0,"index":3529},{"krate":0,"index":3535},{"krate":0,"index":3537},{"krate":0,"index":3538},{"krate":0,"index":3539},{"krate":0,"index":3541},{"krate":0,"index":3546},{"krate":0,"index":3548}],"decl_id":null,"docs":" A UTF-8 encoded, growable string.","sig":null,"attributes":[{"value":"! A UTF-8 encoded, growable string.","span":{"file_name":"src/liballoc/string.rs","byte_start":636070,"byte_end":636107,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636108,"byte_end":636111,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains the [`String`] type, a trait for converting","span":{"file_name":"src/liballoc/string.rs","byte_start":636112,"byte_end":636180,"line_start":3,"line_end":3,"column_start":1,"column_end":69}},{"value":"! [`ToString`]s, and several error types that may result from working with","span":{"file_name":"src/liballoc/string.rs","byte_start":636181,"byte_end":636257,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"! [`String`]s.","span":{"file_name":"src/liballoc/string.rs","byte_start":636258,"byte_end":636274,"line_start":5,"line_end":5,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636275,"byte_end":636278,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! [`ToString`]: trait.ToString.html","span":{"file_name":"src/liballoc/string.rs","byte_start":636279,"byte_end":636316,"line_start":7,"line_end":7,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636317,"byte_end":636320,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":636321,"byte_end":636335,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636336,"byte_end":636339,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! There are multiple ways to create a new [`String`] from a string literal:","span":{"file_name":"src/liballoc/string.rs","byte_start":636340,"byte_end":636417,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636418,"byte_end":636421,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":636422,"byte_end":636429,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"! let s = \"Hello\".to_string();","span":{"file_name":"src/liballoc/string.rs","byte_start":636430,"byte_end":636462,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636463,"byte_end":636466,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! let s = String::from(\"world\");","span":{"file_name":"src/liballoc/string.rs","byte_start":636467,"byte_end":636501,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"! let s: String = \"also this\".into();","span":{"file_name":"src/liballoc/string.rs","byte_start":636502,"byte_end":636541,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":636542,"byte_end":636549,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636550,"byte_end":636553,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! You can create a new [`String`] from an existing one by concatenating with","span":{"file_name":"src/liballoc/string.rs","byte_start":636554,"byte_end":636632,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"! `+`:","span":{"file_name":"src/liballoc/string.rs","byte_start":636633,"byte_end":636641,"line_start":21,"line_end":21,"column_start":1,"column_end":9}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636642,"byte_end":636645,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":636646,"byte_end":636680,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636681,"byte_end":636684,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":636685,"byte_end":636692,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"! let s = \"Hello\".to_string();","span":{"file_name":"src/liballoc/string.rs","byte_start":636693,"byte_end":636725,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636726,"byte_end":636729,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! let message = s + \" world!\";","span":{"file_name":"src/liballoc/string.rs","byte_start":636730,"byte_end":636762,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":636763,"byte_end":636770,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636771,"byte_end":636774,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! If you have a vector of valid UTF-8 bytes, you can make a [`String`] out of","span":{"file_name":"src/liballoc/string.rs","byte_start":636775,"byte_end":636854,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"! it. You can do the reverse too.","span":{"file_name":"src/liballoc/string.rs","byte_start":636855,"byte_end":636890,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636891,"byte_end":636894,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":636895,"byte_end":636902,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"! let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":636903,"byte_end":636952,"line_start":35,"line_end":35,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":636953,"byte_end":636956,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! // We know these bytes are valid, so we'll use `unwrap()`.","span":{"file_name":"src/liballoc/string.rs","byte_start":636957,"byte_end":637019,"line_start":37,"line_end":37,"column_start":1,"column_end":63}},{"value":"! let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();","span":{"file_name":"src/liballoc/string.rs","byte_start":637020,"byte_end":637086,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":637087,"byte_end":637090,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":637091,"byte_end":637129,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":637130,"byte_end":637133,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! let bytes = sparkle_heart.into_bytes();","span":{"file_name":"src/liballoc/string.rs","byte_start":637134,"byte_end":637177,"line_start":42,"line_end":42,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"src/liballoc/string.rs","byte_start":637178,"byte_end":637181,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! assert_eq!(bytes, [240, 159, 146, 150]);","span":{"file_name":"src/liballoc/string.rs","byte_start":637182,"byte_end":637226,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"! ```","span":{"file_name":"src/liballoc/string.rs","byte_start":637227,"byte_end":637234,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":637236,"byte_end":637282,"line_start":47,"line_end":47,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":4553},"span":{"file_name":"src/liballoc/string.rs","byte_start":644573,"byte_end":644579,"line_start":282,"line_end":282,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":4554}],"decl_id":null,"docs":" A UTF-8 encoded, growable string.","sig":null,"attributes":[{"value":"/ A UTF-8 encoded, growable string.","span":{"file_name":"src/liballoc/string.rs","byte_start":637798,"byte_end":637835,"line_start":64,"line_end":64,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":637836,"byte_end":637839,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The `String` type is the most common string type that has ownership over the","span":{"file_name":"src/liballoc/string.rs","byte_start":637840,"byte_end":637920,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ contents of the string. It has a close relationship with its borrowed","span":{"file_name":"src/liballoc/string.rs","byte_start":637921,"byte_end":637994,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ counterpart, the primitive [`str`].","span":{"file_name":"src/liballoc/string.rs","byte_start":637995,"byte_end":638034,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638035,"byte_end":638038,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ [`str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":638039,"byte_end":638080,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638081,"byte_end":638084,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":638085,"byte_end":638099,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638100,"byte_end":638103,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ You can create a `String` from a literal string with [`String::from`]:","span":{"file_name":"src/liballoc/string.rs","byte_start":638104,"byte_end":638178,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638179,"byte_end":638182,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":638183,"byte_end":638190,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ let hello = String::from(\"Hello, world!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":638191,"byte_end":638237,"line_start":77,"line_end":77,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":638238,"byte_end":638245,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638246,"byte_end":638249,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ You can append a [`char`] to a `String` with the [`push`] method, and","span":{"file_name":"src/liballoc/string.rs","byte_start":638250,"byte_end":638323,"line_start":80,"line_end":80,"column_start":1,"column_end":74}},{"value":"/ append a [`&str`] with the [`push_str`] method:","span":{"file_name":"src/liballoc/string.rs","byte_start":638324,"byte_end":638375,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638376,"byte_end":638379,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":638380,"byte_end":638387,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ let mut hello = String::from(\"Hello, \");","span":{"file_name":"src/liballoc/string.rs","byte_start":638388,"byte_end":638432,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638433,"byte_end":638436,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ hello.push('w');","span":{"file_name":"src/liballoc/string.rs","byte_start":638437,"byte_end":638457,"line_start":86,"line_end":86,"column_start":1,"column_end":21}},{"value":"/ hello.push_str(\"orld!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":638458,"byte_end":638486,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":638487,"byte_end":638494,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638495,"byte_end":638498,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ [`String::from`]: #method.from","span":{"file_name":"src/liballoc/string.rs","byte_start":638499,"byte_end":638533,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":638534,"byte_end":638577,"line_start":91,"line_end":91,"column_start":1,"column_end":44}},{"value":"/ [`push`]: #method.push","span":{"file_name":"src/liballoc/string.rs","byte_start":638578,"byte_end":638604,"line_start":92,"line_end":92,"column_start":1,"column_end":27}},{"value":"/ [`push_str`]: #method.push_str","span":{"file_name":"src/liballoc/string.rs","byte_start":638605,"byte_end":638639,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638640,"byte_end":638643,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ If you have a vector of UTF-8 bytes, you can create a `String` from it with","span":{"file_name":"src/liballoc/string.rs","byte_start":638644,"byte_end":638723,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/ the [`from_utf8`] method:","span":{"file_name":"src/liballoc/string.rs","byte_start":638724,"byte_end":638753,"line_start":96,"line_end":96,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638754,"byte_end":638757,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":638758,"byte_end":638765,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":638766,"byte_end":638796,"line_start":99,"line_end":99,"column_start":1,"column_end":31}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":638797,"byte_end":638846,"line_start":100,"line_end":100,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638847,"byte_end":638850,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ // We know these bytes are valid, so we'll use `unwrap()`.","span":{"file_name":"src/liballoc/string.rs","byte_start":638851,"byte_end":638913,"line_start":102,"line_end":102,"column_start":1,"column_end":63}},{"value":"/ let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();","span":{"file_name":"src/liballoc/string.rs","byte_start":638914,"byte_end":638980,"line_start":103,"line_end":103,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":638981,"byte_end":638984,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":638985,"byte_end":639023,"line_start":105,"line_end":105,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":639024,"byte_end":639031,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639032,"byte_end":639035,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`from_utf8`]: #method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":639036,"byte_end":639072,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639073,"byte_end":639076,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ # UTF-8","span":{"file_name":"src/liballoc/string.rs","byte_start":639077,"byte_end":639088,"line_start":110,"line_end":110,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639089,"byte_end":639092,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ `String`s are always valid UTF-8. This has a few implications, the first of","span":{"file_name":"src/liballoc/string.rs","byte_start":639093,"byte_end":639172,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ which is that if you need a non-UTF-8 string, consider [`OsString`]. It is","span":{"file_name":"src/liballoc/string.rs","byte_start":639173,"byte_end":639251,"line_start":113,"line_end":113,"column_start":1,"column_end":79}},{"value":"/ similar, but without the UTF-8 constraint. The second implication is that","span":{"file_name":"src/liballoc/string.rs","byte_start":639252,"byte_end":639329,"line_start":114,"line_end":114,"column_start":1,"column_end":78}},{"value":"/ you cannot index into a `String`:","span":{"file_name":"src/liballoc/string.rs","byte_start":639330,"byte_end":639367,"line_start":115,"line_end":115,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639368,"byte_end":639371,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```compile_fail,E0277","span":{"file_name":"src/liballoc/string.rs","byte_start":639372,"byte_end":639397,"line_start":117,"line_end":117,"column_start":1,"column_end":26}},{"value":"/ let s = \"hello\";","span":{"file_name":"src/liballoc/string.rs","byte_start":639398,"byte_end":639418,"line_start":118,"line_end":118,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639419,"byte_end":639422,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ println!(\"The first letter of s is {}\", s[0]); // ERROR!!!","span":{"file_name":"src/liballoc/string.rs","byte_start":639423,"byte_end":639485,"line_start":120,"line_end":120,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":639486,"byte_end":639493,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639494,"byte_end":639497,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ [`OsString`]: ../../std/ffi/struct.OsString.html","span":{"file_name":"src/liballoc/string.rs","byte_start":639498,"byte_end":639550,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639551,"byte_end":639554,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ Indexing is intended to be a constant-time operation, but UTF-8 encoding","span":{"file_name":"src/liballoc/string.rs","byte_start":639555,"byte_end":639631,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/ does not allow us to do this. Furthermore, it's not clear what sort of","span":{"file_name":"src/liballoc/string.rs","byte_start":639632,"byte_end":639706,"line_start":126,"line_end":126,"column_start":1,"column_end":75}},{"value":"/ thing the index should return: a byte, a codepoint, or a grapheme cluster.","span":{"file_name":"src/liballoc/string.rs","byte_start":639707,"byte_end":639785,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/ The [`bytes`] and [`chars`] methods return iterators over the first","span":{"file_name":"src/liballoc/string.rs","byte_start":639786,"byte_end":639857,"line_start":128,"line_end":128,"column_start":1,"column_end":72}},{"value":"/ two, respectively.","span":{"file_name":"src/liballoc/string.rs","byte_start":639858,"byte_end":639880,"line_start":129,"line_end":129,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639881,"byte_end":639884,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ [`bytes`]: #method.bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":639885,"byte_end":639913,"line_start":131,"line_end":131,"column_start":1,"column_end":29}},{"value":"/ [`chars`]: #method.chars","span":{"file_name":"src/liballoc/string.rs","byte_start":639914,"byte_end":639942,"line_start":132,"line_end":132,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639943,"byte_end":639946,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ # Deref","span":{"file_name":"src/liballoc/string.rs","byte_start":639947,"byte_end":639958,"line_start":134,"line_end":134,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":639959,"byte_end":639962,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ `String`s implement [`Deref`]`<Target=str>`, and so inherit all of [`str`]'s","span":{"file_name":"src/liballoc/string.rs","byte_start":639963,"byte_end":640043,"line_start":136,"line_end":136,"column_start":1,"column_end":81}},{"value":"/ methods. In addition, this means that you can pass a `String` to a","span":{"file_name":"src/liballoc/string.rs","byte_start":640044,"byte_end":640114,"line_start":137,"line_end":137,"column_start":1,"column_end":71}},{"value":"/ function which takes a [`&str`] by using an ampersand (`&`):","span":{"file_name":"src/liballoc/string.rs","byte_start":640115,"byte_end":640179,"line_start":138,"line_end":138,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":640180,"byte_end":640183,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":640184,"byte_end":640191,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ fn takes_str(s: &str) { }","span":{"file_name":"src/liballoc/string.rs","byte_start":640192,"byte_end":640221,"line_start":141,"line_end":141,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":640222,"byte_end":640225,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ let s = String::from(\"Hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":640226,"byte_end":640260,"line_start":143,"line_end":143,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":640261,"byte_end":640264,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ takes_str(&s);","span":{"file_name":"src/liballoc/string.rs","byte_start":640265,"byte_end":640283,"line_start":145,"line_end":145,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":640284,"byte_end":640291,"line_start":146,"line_end":146,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":640292,"byte_end":640295,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This will create a [`&str`] from the `String` and pass it in. This","span":{"file_name":"src/liballoc/string.rs","byte_start":640296,"byte_end":640366,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"/ conversion is very inexpensive, and so generally, functions will accept","span":{"file_name":"src/liballoc/string.rs","byte_start":640367,"byte_end":640442,"line_start":149,"line_end":149,"column_start":1,"column_end":76}},{"value":"/ [`&str`]s as arguments unless they need a `String` for some specific","span":{"file_name":"src/liballoc/string.rs","byte_start":640443,"byte_end":640515,"line_start":150,"line_end":150,"column_start":1,"column_end":73}},{"value":"/ reason.","span":{"file_name":"src/liballoc/string.rs","byte_start":640516,"byte_end":640527,"line_start":151,"line_end":151,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":640528,"byte_end":640531,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ In certain cases Rust doesn't have enough information to make this","span":{"file_name":"src/liballoc/string.rs","byte_start":640532,"byte_end":640602,"line_start":153,"line_end":153,"column_start":1,"column_end":71}},{"value":"/ conversion, known as [`Deref`] coercion. In the following example a string","span":{"file_name":"src/liballoc/string.rs","byte_start":640603,"byte_end":640681,"line_start":154,"line_end":154,"column_start":1,"column_end":79}},{"value":"/ slice [`&'a str`][`&str`] implements the trait `TraitExample`, and the function","span":{"file_name":"src/liballoc/string.rs","byte_start":640682,"byte_end":640765,"line_start":155,"line_end":155,"column_start":1,"column_end":84}},{"value":"/ `example_func` takes anything that implements the trait. In this case Rust","span":{"file_name":"src/liballoc/string.rs","byte_start":640766,"byte_end":640844,"line_start":156,"line_end":156,"column_start":1,"column_end":79}},{"value":"/ would need to make two implicit conversions, which Rust doesn't have the","span":{"file_name":"src/liballoc/string.rs","byte_start":640845,"byte_end":640921,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/ means to do. For that reason, the following example will not compile.","span":{"file_name":"src/liballoc/string.rs","byte_start":640922,"byte_end":640995,"line_start":158,"line_end":158,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":640996,"byte_end":640999,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ```compile_fail,E0277","span":{"file_name":"src/liballoc/string.rs","byte_start":641000,"byte_end":641025,"line_start":160,"line_end":160,"column_start":1,"column_end":26}},{"value":"/ trait TraitExample {}","span":{"file_name":"src/liballoc/string.rs","byte_start":641026,"byte_end":641051,"line_start":161,"line_end":161,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":641052,"byte_end":641055,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ impl<'a> TraitExample for &'a str {}","span":{"file_name":"src/liballoc/string.rs","byte_start":641056,"byte_end":641096,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":641097,"byte_end":641100,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ fn example_func<A: TraitExample>(example_arg: A) {}","span":{"file_name":"src/liballoc/string.rs","byte_start":641101,"byte_end":641156,"line_start":165,"line_end":165,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":641157,"byte_end":641160,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ let example_string = String::from(\"example_string\");","span":{"file_name":"src/liballoc/string.rs","byte_start":641161,"byte_end":641217,"line_start":167,"line_end":167,"column_start":1,"column_end":57}},{"value":"/ example_func(&example_string);","span":{"file_name":"src/liballoc/string.rs","byte_start":641218,"byte_end":641252,"line_start":168,"line_end":168,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":641253,"byte_end":641260,"line_start":169,"line_end":169,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":641261,"byte_end":641264,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ There are two options that would work instead. The first would be to","span":{"file_name":"src/liballoc/string.rs","byte_start":641265,"byte_end":641337,"line_start":171,"line_end":171,"column_start":1,"column_end":73}},{"value":"/ change the line `example_func(&example_string);` to","span":{"file_name":"src/liballoc/string.rs","byte_start":641338,"byte_end":641393,"line_start":172,"line_end":172,"column_start":1,"column_end":56}},{"value":"/ `example_func(example_string.as_str());`, using the method [`as_str()`]","span":{"file_name":"src/liballoc/string.rs","byte_start":641394,"byte_end":641469,"line_start":173,"line_end":173,"column_start":1,"column_end":76}},{"value":"/ to explicitly extract the string slice containing the string. The second","span":{"file_name":"src/liballoc/string.rs","byte_start":641470,"byte_end":641546,"line_start":174,"line_end":174,"column_start":1,"column_end":77}},{"value":"/ way changes `example_func(&example_string);` to","span":{"file_name":"src/liballoc/string.rs","byte_start":641547,"byte_end":641598,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ `example_func(&*example_string);`. In this case we are dereferencing a","span":{"file_name":"src/liballoc/string.rs","byte_start":641599,"byte_end":641673,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"/ `String` to a [`str`][`&str`], then referencing the [`str`][`&str`] back to","span":{"file_name":"src/liballoc/string.rs","byte_start":641674,"byte_end":641753,"line_start":177,"line_end":177,"column_start":1,"column_end":80}},{"value":"/ [`&str`]. The second way is more idiomatic, however both work to do the","span":{"file_name":"src/liballoc/string.rs","byte_start":641754,"byte_end":641829,"line_start":178,"line_end":178,"column_start":1,"column_end":76}},{"value":"/ conversion explicitly rather than relying on the implicit conversion.","span":{"file_name":"src/liballoc/string.rs","byte_start":641830,"byte_end":641903,"line_start":179,"line_end":179,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":641904,"byte_end":641907,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"src/liballoc/string.rs","byte_start":641908,"byte_end":641928,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":641929,"byte_end":641932,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ A `String` is made up of three components: a pointer to some bytes, a","span":{"file_name":"src/liballoc/string.rs","byte_start":641933,"byte_end":642006,"line_start":183,"line_end":183,"column_start":1,"column_end":74}},{"value":"/ length, and a capacity. The pointer points to an internal buffer `String`","span":{"file_name":"src/liballoc/string.rs","byte_start":642007,"byte_end":642084,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"/ uses to store its data. The length is the number of bytes currently stored","span":{"file_name":"src/liballoc/string.rs","byte_start":642085,"byte_end":642163,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"/ in the buffer, and the capacity is the size of the buffer in bytes. As such,","span":{"file_name":"src/liballoc/string.rs","byte_start":642164,"byte_end":642244,"line_start":186,"line_end":186,"column_start":1,"column_end":81}},{"value":"/ the length will always be less than or equal to the capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":642245,"byte_end":642310,"line_start":187,"line_end":187,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642311,"byte_end":642314,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ This buffer is always stored on the heap.","span":{"file_name":"src/liballoc/string.rs","byte_start":642315,"byte_end":642360,"line_start":189,"line_end":189,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642361,"byte_end":642364,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ You can look at these with the [`as_ptr`], [`len`], and [`capacity`]","span":{"file_name":"src/liballoc/string.rs","byte_start":642365,"byte_end":642437,"line_start":191,"line_end":191,"column_start":1,"column_end":73}},{"value":"/ methods:","span":{"file_name":"src/liballoc/string.rs","byte_start":642438,"byte_end":642450,"line_start":192,"line_end":192,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642451,"byte_end":642454,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":642455,"byte_end":642462,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"/ use std::mem;","span":{"file_name":"src/liballoc/string.rs","byte_start":642463,"byte_end":642480,"line_start":195,"line_end":195,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642481,"byte_end":642484,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ let story = String::from(\"Once upon a time...\");","span":{"file_name":"src/liballoc/string.rs","byte_start":642485,"byte_end":642537,"line_start":197,"line_end":197,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642538,"byte_end":642541,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ // Prevent automatically dropping the String's data","span":{"file_name":"src/liballoc/string.rs","byte_start":642601,"byte_end":642656,"line_start":200,"line_end":200,"column_start":1,"column_end":56}},{"value":"/ let mut story = mem::ManuallyDrop::new(story);","span":{"file_name":"src/liballoc/string.rs","byte_start":642657,"byte_end":642707,"line_start":201,"line_end":201,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642708,"byte_end":642711,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ let ptr = story.as_mut_ptr();","span":{"file_name":"src/liballoc/string.rs","byte_start":642712,"byte_end":642745,"line_start":203,"line_end":203,"column_start":1,"column_end":34}},{"value":"/ let len = story.len();","span":{"file_name":"src/liballoc/string.rs","byte_start":642746,"byte_end":642772,"line_start":204,"line_end":204,"column_start":1,"column_end":27}},{"value":"/ let capacity = story.capacity();","span":{"file_name":"src/liballoc/string.rs","byte_start":642773,"byte_end":642809,"line_start":205,"line_end":205,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642810,"byte_end":642813,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ // story has nineteen bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":642814,"byte_end":642845,"line_start":207,"line_end":207,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(19, len);","span":{"file_name":"src/liballoc/string.rs","byte_start":642846,"byte_end":642870,"line_start":208,"line_end":208,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":642871,"byte_end":642874,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ // We can re-build a String out of ptr, len, and capacity. This is all","span":{"file_name":"src/liballoc/string.rs","byte_start":642875,"byte_end":642949,"line_start":210,"line_end":210,"column_start":1,"column_end":75}},{"value":"/ // unsafe because we are responsible for making sure the components are","span":{"file_name":"src/liballoc/string.rs","byte_start":642950,"byte_end":643025,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ // valid:","span":{"file_name":"src/liballoc/string.rs","byte_start":643026,"byte_end":643039,"line_start":212,"line_end":212,"column_start":1,"column_end":14}},{"value":"/ let s = unsafe { String::from_raw_parts(ptr, len, capacity) } ;","span":{"file_name":"src/liballoc/string.rs","byte_start":643040,"byte_end":643107,"line_start":213,"line_end":213,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643108,"byte_end":643111,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(String::from(\"Once upon a time...\"), s);","span":{"file_name":"src/liballoc/string.rs","byte_start":643112,"byte_end":643167,"line_start":215,"line_end":215,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":643168,"byte_end":643175,"line_start":216,"line_end":216,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643176,"byte_end":643179,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ [`as_ptr`]: #method.as_ptr","span":{"file_name":"src/liballoc/string.rs","byte_start":643180,"byte_end":643210,"line_start":218,"line_end":218,"column_start":1,"column_end":31}},{"value":"/ [`len`]: #method.len","span":{"file_name":"src/liballoc/string.rs","byte_start":643211,"byte_end":643235,"line_start":219,"line_end":219,"column_start":1,"column_end":25}},{"value":"/ [`capacity`]: #method.capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":643236,"byte_end":643270,"line_start":220,"line_end":220,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643271,"byte_end":643274,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ If a `String` has enough capacity, adding elements to it will not","span":{"file_name":"src/liballoc/string.rs","byte_start":643275,"byte_end":643344,"line_start":222,"line_end":222,"column_start":1,"column_end":70}},{"value":"/ re-allocate. For example, consider this program:","span":{"file_name":"src/liballoc/string.rs","byte_start":643345,"byte_end":643397,"line_start":223,"line_end":223,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643398,"byte_end":643401,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":643402,"byte_end":643409,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ let mut s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":643410,"byte_end":643440,"line_start":226,"line_end":226,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643441,"byte_end":643444,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":643445,"byte_end":643478,"line_start":228,"line_end":228,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643479,"byte_end":643482,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..5 {","span":{"file_name":"src/liballoc/string.rs","byte_start":643483,"byte_end":643502,"line_start":230,"line_end":230,"column_start":1,"column_end":20}},{"value":"/     s.push_str(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":643503,"byte_end":643531,"line_start":231,"line_end":231,"column_start":1,"column_end":29}},{"value":"/     println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":643532,"byte_end":643569,"line_start":232,"line_end":232,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":643570,"byte_end":643575,"line_start":233,"line_end":233,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":643576,"byte_end":643583,"line_start":234,"line_end":234,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643584,"byte_end":643587,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ This will output the following:","span":{"file_name":"src/liballoc/string.rs","byte_start":643588,"byte_end":643623,"line_start":236,"line_end":236,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643624,"byte_end":643627,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"src/liballoc/string.rs","byte_start":643628,"byte_end":643639,"line_start":238,"line_end":238,"column_start":1,"column_end":12}},{"value":"/ 0","span":{"file_name":"src/liballoc/string.rs","byte_start":643640,"byte_end":643645,"line_start":239,"line_end":239,"column_start":1,"column_end":6}},{"value":"/ 5","span":{"file_name":"src/liballoc/string.rs","byte_start":643646,"byte_end":643651,"line_start":240,"line_end":240,"column_start":1,"column_end":6}},{"value":"/ 10","span":{"file_name":"src/liballoc/string.rs","byte_start":643652,"byte_end":643658,"line_start":241,"line_end":241,"column_start":1,"column_end":7}},{"value":"/ 20","span":{"file_name":"src/liballoc/string.rs","byte_start":643659,"byte_end":643665,"line_start":242,"line_end":242,"column_start":1,"column_end":7}},{"value":"/ 20","span":{"file_name":"src/liballoc/string.rs","byte_start":643666,"byte_end":643672,"line_start":243,"line_end":243,"column_start":1,"column_end":7}},{"value":"/ 40","span":{"file_name":"src/liballoc/string.rs","byte_start":643673,"byte_end":643679,"line_start":244,"line_end":244,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":643680,"byte_end":643687,"line_start":245,"line_end":245,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643688,"byte_end":643691,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ At first, we have no memory allocated at all, but as we append to the","span":{"file_name":"src/liballoc/string.rs","byte_start":643692,"byte_end":643765,"line_start":247,"line_end":247,"column_start":1,"column_end":74}},{"value":"/ string, it increases its capacity appropriately. If we instead use the","span":{"file_name":"src/liballoc/string.rs","byte_start":643766,"byte_end":643840,"line_start":248,"line_end":248,"column_start":1,"column_end":75}},{"value":"/ [`with_capacity`] method to allocate the correct capacity initially:","span":{"file_name":"src/liballoc/string.rs","byte_start":643841,"byte_end":643913,"line_start":249,"line_end":249,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643914,"byte_end":643917,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":643918,"byte_end":643925,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ let mut s = String::with_capacity(25);","span":{"file_name":"src/liballoc/string.rs","byte_start":643926,"byte_end":643968,"line_start":252,"line_end":252,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":643969,"byte_end":643972,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":643973,"byte_end":644006,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644007,"byte_end":644010,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..5 {","span":{"file_name":"src/liballoc/string.rs","byte_start":644011,"byte_end":644030,"line_start":256,"line_end":256,"column_start":1,"column_end":20}},{"value":"/     s.push_str(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":644031,"byte_end":644059,"line_start":257,"line_end":257,"column_start":1,"column_end":29}},{"value":"/     println!(\"{}\", s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":644060,"byte_end":644097,"line_start":258,"line_end":258,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":644098,"byte_end":644103,"line_start":259,"line_end":259,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":644104,"byte_end":644111,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644112,"byte_end":644115,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ [`with_capacity`]: #method.with_capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":644116,"byte_end":644160,"line_start":262,"line_end":262,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644161,"byte_end":644164,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ We end up with a different output:","span":{"file_name":"src/liballoc/string.rs","byte_start":644165,"byte_end":644203,"line_start":264,"line_end":264,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644204,"byte_end":644207,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"src/liballoc/string.rs","byte_start":644208,"byte_end":644219,"line_start":266,"line_end":266,"column_start":1,"column_end":12}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":644220,"byte_end":644226,"line_start":267,"line_end":267,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":644227,"byte_end":644233,"line_start":268,"line_end":268,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":644234,"byte_end":644240,"line_start":269,"line_end":269,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":644241,"byte_end":644247,"line_start":270,"line_end":270,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":644248,"byte_end":644254,"line_start":271,"line_end":271,"column_start":1,"column_end":7}},{"value":"/ 25","span":{"file_name":"src/liballoc/string.rs","byte_start":644255,"byte_end":644261,"line_start":272,"line_end":272,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":644262,"byte_end":644269,"line_start":273,"line_end":273,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644270,"byte_end":644273,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ Here, there's no need to allocate more memory inside the loop.","span":{"file_name":"src/liballoc/string.rs","byte_start":644274,"byte_end":644340,"line_start":275,"line_end":275,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644341,"byte_end":644344,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":644345,"byte_end":644387,"line_start":277,"line_end":277,"column_start":1,"column_end":43}},{"value":"/ [`Deref`]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/string.rs","byte_start":644388,"byte_end":644433,"line_start":278,"line_end":278,"column_start":1,"column_end":46}},{"value":"/ [`as_str()`]: struct.String.html#method.as_str","span":{"file_name":"src/liballoc/string.rs","byte_start":644434,"byte_end":644484,"line_start":279,"line_end":279,"column_start":1,"column_end":51}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":644516,"byte_end":644561,"line_start":281,"line_end":281,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4566},"span":{"file_name":"src/liballoc/string.rs","byte_start":645946,"byte_end":645959,"line_start":323,"line_end":323,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::string::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":4567},{"krate":0,"index":4568}],"decl_id":null,"docs":" A possible error value when converting a `String` from a UTF-8 byte vector.","sig":null,"attributes":[{"value":"/ A possible error value when converting a `String` from a UTF-8 byte vector.","span":{"file_name":"src/liballoc/string.rs","byte_start":644603,"byte_end":644682,"line_start":286,"line_end":286,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644683,"byte_end":644686,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ This type is the error type for the [`from_utf8`] method on [`String`]. It","span":{"file_name":"src/liballoc/string.rs","byte_start":644687,"byte_end":644765,"line_start":288,"line_end":288,"column_start":1,"column_end":79}},{"value":"/ is designed in such a way to carefully avoid reallocations: the","span":{"file_name":"src/liballoc/string.rs","byte_start":644766,"byte_end":644833,"line_start":289,"line_end":289,"column_start":1,"column_end":68}},{"value":"/ [`into_bytes`] method will give back the byte vector that was used in the","span":{"file_name":"src/liballoc/string.rs","byte_start":644834,"byte_end":644911,"line_start":290,"line_end":290,"column_start":1,"column_end":78}},{"value":"/ conversion attempt.","span":{"file_name":"src/liballoc/string.rs","byte_start":644912,"byte_end":644935,"line_start":291,"line_end":291,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":644936,"byte_end":644939,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ [`from_utf8`]: struct.String.html#method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":644940,"byte_end":644994,"line_start":293,"line_end":293,"column_start":1,"column_end":55}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":644995,"byte_end":645029,"line_start":294,"line_end":294,"column_start":1,"column_end":35}},{"value":"/ [`into_bytes`]: struct.FromUtf8Error.html#method.into_bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":645030,"byte_end":645093,"line_start":295,"line_end":295,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":645094,"byte_end":645097,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ The [`Utf8Error`] type provided by [`std::str`] represents an error that may","span":{"file_name":"src/liballoc/string.rs","byte_start":645098,"byte_end":645178,"line_start":297,"line_end":297,"column_start":1,"column_end":81}},{"value":"/ occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's","span":{"file_name":"src/liballoc/string.rs","byte_start":645179,"byte_end":645258,"line_start":298,"line_end":298,"column_start":1,"column_end":80}},{"value":"/ an analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`","span":{"file_name":"src/liballoc/string.rs","byte_start":645259,"byte_end":645337,"line_start":299,"line_end":299,"column_start":1,"column_end":79}},{"value":"/ through the [`utf8_error`] method.","span":{"file_name":"src/liballoc/string.rs","byte_start":645338,"byte_end":645376,"line_start":300,"line_end":300,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":645377,"byte_end":645380,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ [`Utf8Error`]: ../../std/str/struct.Utf8Error.html","span":{"file_name":"src/liballoc/string.rs","byte_start":645381,"byte_end":645435,"line_start":302,"line_end":302,"column_start":1,"column_end":55}},{"value":"/ [`std::str`]: ../../std/str/index.html","span":{"file_name":"src/liballoc/string.rs","byte_start":645436,"byte_end":645478,"line_start":303,"line_end":303,"column_start":1,"column_end":43}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":645479,"byte_end":645518,"line_start":304,"line_end":304,"column_start":1,"column_end":40}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":645519,"byte_end":645561,"line_start":305,"line_end":305,"column_start":1,"column_end":43}},{"value":"/ [`utf8_error`]: #method.utf8_error","span":{"file_name":"src/liballoc/string.rs","byte_start":645562,"byte_end":645600,"line_start":306,"line_end":306,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":645601,"byte_end":645604,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":645605,"byte_end":645619,"line_start":308,"line_end":308,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":645620,"byte_end":645623,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":645624,"byte_end":645640,"line_start":310,"line_end":310,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":645641,"byte_end":645644,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":645645,"byte_end":645652,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":645653,"byte_end":645691,"line_start":313,"line_end":313,"column_start":1,"column_end":39}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":645692,"byte_end":645721,"line_start":314,"line_end":314,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":645722,"byte_end":645725,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ let value = String::from_utf8(bytes);","span":{"file_name":"src/liballoc/string.rs","byte_start":645726,"byte_end":645767,"line_start":316,"line_end":316,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":645768,"byte_end":645771,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ assert!(value.is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":645772,"byte_end":645800,"line_start":318,"line_end":318,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":645801,"byte_end":645863,"line_start":319,"line_end":319,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":645864,"byte_end":645871,"line_start":320,"line_end":320,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":645872,"byte_end":645917,"line_start":321,"line_end":321,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4571},"span":{"file_name":"src/liballoc/string.rs","byte_start":646557,"byte_end":646571,"line_start":348,"line_end":348,"column_start":12,"column_end":26},"name":"FromUtf16Error","qualname":"::string::FromUtf16Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" A possible error value when converting a `String` from a UTF-16 byte slice.","sig":null,"attributes":[{"value":"/ A possible error value when converting a `String` from a UTF-16 byte slice.","span":{"file_name":"src/liballoc/string.rs","byte_start":646007,"byte_end":646086,"line_start":328,"line_end":328,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":646087,"byte_end":646090,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ This type is the error type for the [`from_utf16`] method on [`String`].","span":{"file_name":"src/liballoc/string.rs","byte_start":646091,"byte_end":646167,"line_start":330,"line_end":330,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":646168,"byte_end":646171,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ [`from_utf16`]: struct.String.html#method.from_utf16","span":{"file_name":"src/liballoc/string.rs","byte_start":646172,"byte_end":646228,"line_start":332,"line_end":332,"column_start":1,"column_end":57}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":646229,"byte_end":646263,"line_start":333,"line_end":333,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":646264,"byte_end":646267,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":646268,"byte_end":646282,"line_start":335,"line_end":335,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":646283,"byte_end":646286,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":646287,"byte_end":646303,"line_start":337,"line_end":337,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":646304,"byte_end":646307,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":646308,"byte_end":646315,"line_start":339,"line_end":339,"column_start":1,"column_end":8}},{"value":"/ // 𝄞mu<invalid>ic","span":{"file_name":"src/liballoc/string.rs","byte_start":646316,"byte_end":646340,"line_start":340,"line_end":340,"column_start":1,"column_end":22}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":646341,"byte_end":646386,"line_start":341,"line_end":341,"column_start":1,"column_end":46}},{"value":"/           0xD800, 0x0069, 0x0063];","span":{"file_name":"src/liballoc/string.rs","byte_start":646387,"byte_end":646425,"line_start":342,"line_end":342,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":646426,"byte_end":646429,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ assert!(String::from_utf16(v).is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":646430,"byte_end":646474,"line_start":344,"line_end":344,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":646475,"byte_end":646482,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":646483,"byte_end":646528,"line_start":346,"line_end":346,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":"src/liballoc/string.rs","byte_start":647354,"byte_end":647357,"line_start":372,"line_end":372,"column_start":18,"column_end":21},"name":"new","qualname":"<String>::new","value":"fn () -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `String`.","sig":null,"attributes":[{"value":"/ Creates a new empty `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":646596,"byte_end":646629,"line_start":351,"line_end":351,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":646634,"byte_end":646637,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Given that the `String` is empty, this will not allocate any initial","span":{"file_name":"src/liballoc/string.rs","byte_start":646642,"byte_end":646714,"line_start":353,"line_end":353,"column_start":5,"column_end":77}},{"value":"/ buffer. While that means that this initial operation is very","span":{"file_name":"src/liballoc/string.rs","byte_start":646719,"byte_end":646783,"line_start":354,"line_end":354,"column_start":5,"column_end":69}},{"value":"/ inexpensive, it may cause excessive allocation later when you add","span":{"file_name":"src/liballoc/string.rs","byte_start":646788,"byte_end":646857,"line_start":355,"line_end":355,"column_start":5,"column_end":74}},{"value":"/ data. If you have an idea of how much data the `String` will hold,","span":{"file_name":"src/liballoc/string.rs","byte_start":646862,"byte_end":646932,"line_start":356,"line_end":356,"column_start":5,"column_end":75}},{"value":"/ consider the [`with_capacity`] method to prevent excessive","span":{"file_name":"src/liballoc/string.rs","byte_start":646937,"byte_end":646999,"line_start":357,"line_end":357,"column_start":5,"column_end":67}},{"value":"/ re-allocation.","span":{"file_name":"src/liballoc/string.rs","byte_start":647004,"byte_end":647022,"line_start":358,"line_end":358,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":647027,"byte_end":647030,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ [`with_capacity`]: #method.with_capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":647035,"byte_end":647079,"line_start":360,"line_end":360,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":647084,"byte_end":647087,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":647092,"byte_end":647106,"line_start":362,"line_end":362,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":647111,"byte_end":647114,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":647119,"byte_end":647135,"line_start":364,"line_end":364,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":647140,"byte_end":647143,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":647148,"byte_end":647155,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"/ let s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":647160,"byte_end":647186,"line_start":367,"line_end":367,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":647191,"byte_end":647198,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":647203,"byte_end":647212,"line_start":369,"line_end":369,"column_start":5,"column_end":14}},{"value":"rustc_const_stable(feature = \"const_string_new\", since = \"1.32.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":647217,"byte_end":647286,"line_start":370,"line_end":370,"column_start":5,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":647291,"byte_end":647336,"line_start":371,"line_end":371,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3317},"span":{"file_name":"src/liballoc/string.rs","byte_start":648738,"byte_end":648751,"line_start":415,"line_end":415,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<String>::with_capacity","value":"fn (capacity: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty `String` with a particular capacity.","sig":null,"attributes":[{"value":"/ Creates a new empty `String` with a particular capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":647418,"byte_end":647478,"line_start":376,"line_end":376,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":647483,"byte_end":647486,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ `String`s have an internal buffer to hold their data. The capacity is","span":{"file_name":"src/liballoc/string.rs","byte_start":647491,"byte_end":647564,"line_start":378,"line_end":378,"column_start":5,"column_end":78}},{"value":"/ the length of that buffer, and can be queried with the [`capacity`]","span":{"file_name":"src/liballoc/string.rs","byte_start":647569,"byte_end":647640,"line_start":379,"line_end":379,"column_start":5,"column_end":76}},{"value":"/ method. This method creates an empty `String`, but one with an initial","span":{"file_name":"src/liballoc/string.rs","byte_start":647645,"byte_end":647719,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ buffer that can hold `capacity` bytes. This is useful when you may be","span":{"file_name":"src/liballoc/string.rs","byte_start":647724,"byte_end":647797,"line_start":381,"line_end":381,"column_start":5,"column_end":78}},{"value":"/ appending a bunch of data to the `String`, reducing the number of","span":{"file_name":"src/liballoc/string.rs","byte_start":647802,"byte_end":647871,"line_start":382,"line_end":382,"column_start":5,"column_end":74}},{"value":"/ reallocations it needs to do.","span":{"file_name":"src/liballoc/string.rs","byte_start":647876,"byte_end":647909,"line_start":383,"line_end":383,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":647914,"byte_end":647917,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ [`capacity`]: #method.capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":647922,"byte_end":647956,"line_start":385,"line_end":385,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":647961,"byte_end":647964,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ If the given capacity is `0`, no allocation will occur, and this method","span":{"file_name":"src/liballoc/string.rs","byte_start":647969,"byte_end":648044,"line_start":387,"line_end":387,"column_start":5,"column_end":80}},{"value":"/ is identical to the [`new`] method.","span":{"file_name":"src/liballoc/string.rs","byte_start":648049,"byte_end":648088,"line_start":388,"line_end":388,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648093,"byte_end":648096,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ [`new`]: #method.new","span":{"file_name":"src/liballoc/string.rs","byte_start":648101,"byte_end":648125,"line_start":390,"line_end":390,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648130,"byte_end":648133,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":648138,"byte_end":648152,"line_start":392,"line_end":392,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648157,"byte_end":648160,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":648165,"byte_end":648181,"line_start":394,"line_end":394,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648186,"byte_end":648189,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":648194,"byte_end":648201,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":648206,"byte_end":648248,"line_start":397,"line_end":397,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648253,"byte_end":648256,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ // The String contains no chars, even though it has capacity for more","span":{"file_name":"src/liballoc/string.rs","byte_start":648261,"byte_end":648334,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(s.len(), 0);","span":{"file_name":"src/liballoc/string.rs","byte_start":648339,"byte_end":648366,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648371,"byte_end":648374,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ // These are all done without reallocating...","span":{"file_name":"src/liballoc/string.rs","byte_start":648379,"byte_end":648428,"line_start":402,"line_end":402,"column_start":5,"column_end":54}},{"value":"/ let cap = s.capacity();","span":{"file_name":"src/liballoc/string.rs","byte_start":648433,"byte_end":648460,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/ for _ in 0..10 {","span":{"file_name":"src/liballoc/string.rs","byte_start":648465,"byte_end":648485,"line_start":404,"line_end":404,"column_start":5,"column_end":25}},{"value":"/     s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":648490,"byte_end":648510,"line_start":405,"line_end":405,"column_start":5,"column_end":25}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":648515,"byte_end":648520,"line_start":406,"line_end":406,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648525,"byte_end":648528,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.capacity(), cap);","span":{"file_name":"src/liballoc/string.rs","byte_start":648533,"byte_end":648567,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":648572,"byte_end":648575,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ // ...but this may make the vector reallocate","span":{"file_name":"src/liballoc/string.rs","byte_start":648580,"byte_end":648629,"line_start":410,"line_end":410,"column_start":5,"column_end":54}},{"value":"/ s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":648634,"byte_end":648650,"line_start":411,"line_end":411,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":648655,"byte_end":648662,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":648667,"byte_end":648676,"line_start":413,"line_end":413,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":648681,"byte_end":648726,"line_start":414,"line_end":414,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"src/liballoc/string.rs","byte_start":651669,"byte_end":651678,"line_start":491,"line_end":491,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<String>::from_utf8","value":"fn (vec: Vec<u8>) -> Result<String, FromUtf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String`.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":649267,"byte_end":649312,"line_start":429,"line_end":429,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":649317,"byte_end":649320,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ A string ([`String`]) is made of bytes ([`u8`]), and a vector of bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":649325,"byte_end":649399,"line_start":431,"line_end":431,"column_start":5,"column_end":79}},{"value":"/ ([`Vec<u8>`]) is made of bytes, so this function converts between the","span":{"file_name":"src/liballoc/string.rs","byte_start":649404,"byte_end":649477,"line_start":432,"line_end":432,"column_start":5,"column_end":78}},{"value":"/ two. Not all byte slices are valid `String`s, however: `String`","span":{"file_name":"src/liballoc/string.rs","byte_start":649482,"byte_end":649549,"line_start":433,"line_end":433,"column_start":5,"column_end":72}},{"value":"/ requires that it is valid UTF-8. `from_utf8()` checks to ensure that","span":{"file_name":"src/liballoc/string.rs","byte_start":649554,"byte_end":649626,"line_start":434,"line_end":434,"column_start":5,"column_end":77}},{"value":"/ the bytes are valid UTF-8, and then does the conversion.","span":{"file_name":"src/liballoc/string.rs","byte_start":649631,"byte_end":649691,"line_start":435,"line_end":435,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":649696,"byte_end":649699,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ If you are sure that the byte slice is valid UTF-8, and you don't want","span":{"file_name":"src/liballoc/string.rs","byte_start":649704,"byte_end":649778,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/ to incur the overhead of the validity check, there is an unsafe version","span":{"file_name":"src/liballoc/string.rs","byte_start":649783,"byte_end":649858,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ of this function, [`from_utf8_unchecked`], which has the same behavior","span":{"file_name":"src/liballoc/string.rs","byte_start":649863,"byte_end":649937,"line_start":439,"line_end":439,"column_start":5,"column_end":79}},{"value":"/ but skips the check.","span":{"file_name":"src/liballoc/string.rs","byte_start":649942,"byte_end":649966,"line_start":440,"line_end":440,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":649971,"byte_end":649974,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ This method will take care to not copy the vector, for efficiency's","span":{"file_name":"src/liballoc/string.rs","byte_start":649979,"byte_end":650050,"line_start":442,"line_end":442,"column_start":5,"column_end":76}},{"value":"/ sake.","span":{"file_name":"src/liballoc/string.rs","byte_start":650055,"byte_end":650064,"line_start":443,"line_end":443,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650069,"byte_end":650072,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ If you need a [`&str`] instead of a `String`, consider","span":{"file_name":"src/liballoc/string.rs","byte_start":650077,"byte_end":650135,"line_start":445,"line_end":445,"column_start":5,"column_end":63}},{"value":"/ [`str::from_utf8`].","span":{"file_name":"src/liballoc/string.rs","byte_start":650140,"byte_end":650163,"line_start":446,"line_end":446,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650168,"byte_end":650171,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ The inverse of this method is [`into_bytes`].","span":{"file_name":"src/liballoc/string.rs","byte_start":650176,"byte_end":650225,"line_start":448,"line_end":448,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650230,"byte_end":650233,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/string.rs","byte_start":650238,"byte_end":650250,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650255,"byte_end":650258,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Returns [`Err`] if the slice is not UTF-8 with a description as to why the","span":{"file_name":"src/liballoc/string.rs","byte_start":650263,"byte_end":650341,"line_start":452,"line_end":452,"column_start":5,"column_end":83}},{"value":"/ provided bytes are not UTF-8. The vector you moved in is also included.","span":{"file_name":"src/liballoc/string.rs","byte_start":650346,"byte_end":650421,"line_start":453,"line_end":453,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650426,"byte_end":650429,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":650434,"byte_end":650448,"line_start":455,"line_end":455,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650453,"byte_end":650456,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":650461,"byte_end":650477,"line_start":457,"line_end":457,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650482,"byte_end":650485,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":650490,"byte_end":650497,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":650502,"byte_end":650532,"line_start":460,"line_end":460,"column_start":5,"column_end":35}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":650537,"byte_end":650586,"line_start":461,"line_end":461,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650591,"byte_end":650594,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ // We know these bytes are valid, so we'll use `unwrap()`.","span":{"file_name":"src/liballoc/string.rs","byte_start":650599,"byte_end":650661,"line_start":463,"line_end":463,"column_start":5,"column_end":67}},{"value":"/ let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();","span":{"file_name":"src/liballoc/string.rs","byte_start":650666,"byte_end":650732,"line_start":464,"line_end":464,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650737,"byte_end":650740,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":650745,"byte_end":650783,"line_start":466,"line_end":466,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":650788,"byte_end":650795,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650800,"byte_end":650803,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Incorrect bytes:","span":{"file_name":"src/liballoc/string.rs","byte_start":650808,"byte_end":650828,"line_start":469,"line_end":469,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650833,"byte_end":650836,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":650841,"byte_end":650848,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":650853,"byte_end":650891,"line_start":472,"line_end":472,"column_start":5,"column_end":43}},{"value":"/ let sparkle_heart = vec![0, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":650896,"byte_end":650943,"line_start":473,"line_end":473,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":650948,"byte_end":650951,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ assert!(String::from_utf8(sparkle_heart).is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":650956,"byte_end":651011,"line_start":475,"line_end":475,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":651016,"byte_end":651023,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":651028,"byte_end":651031,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ See the docs for [`FromUtf8Error`] for more details on what you can do","span":{"file_name":"src/liballoc/string.rs","byte_start":651036,"byte_end":651110,"line_start":478,"line_end":478,"column_start":5,"column_end":79}},{"value":"/ with this error.","span":{"file_name":"src/liballoc/string.rs","byte_start":651115,"byte_end":651135,"line_start":479,"line_end":479,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":651140,"byte_end":651143,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked","span":{"file_name":"src/liballoc/string.rs","byte_start":651148,"byte_end":651222,"line_start":481,"line_end":481,"column_start":5,"column_end":79}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":651227,"byte_end":651261,"line_start":482,"line_end":482,"column_start":5,"column_end":39}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":651266,"byte_end":651305,"line_start":483,"line_end":483,"column_start":5,"column_end":44}},{"value":"/ [`Vec<u8>`]: ../../std/vec/struct.Vec.html","span":{"file_name":"src/liballoc/string.rs","byte_start":651310,"byte_end":651356,"line_start":484,"line_end":484,"column_start":5,"column_end":51}},{"value":"/ [`str::from_utf8`]: ../../std/str/fn.from_utf8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":651361,"byte_end":651416,"line_start":485,"line_end":485,"column_start":5,"column_end":60}},{"value":"/ [`into_bytes`]: struct.String.html#method.into_bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":651421,"byte_end":651477,"line_start":486,"line_end":486,"column_start":5,"column_end":61}},{"value":"/ [`FromUtf8Error`]: struct.FromUtf8Error.html","span":{"file_name":"src/liballoc/string.rs","byte_start":651482,"byte_end":651530,"line_start":487,"line_end":487,"column_start":5,"column_end":53}},{"value":"/ [`Err`]: ../../std/result/enum.Result.html#variant.Err","span":{"file_name":"src/liballoc/string.rs","byte_start":651535,"byte_end":651593,"line_start":488,"line_end":488,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":651598,"byte_end":651607,"line_start":489,"line_end":489,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":651612,"byte_end":651657,"line_start":490,"line_end":490,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3319},"span":{"file_name":"src/liballoc/string.rs","byte_start":653982,"byte_end":653997,"line_start":549,"line_end":549,"column_start":12,"column_end":27},"name":"from_utf8_lossy","qualname":"<String>::from_utf8_lossy","value":"fn (v: &[u8]) -> Cow<'_, str>","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string, including invalid characters.","sig":null,"attributes":[{"value":"/ Converts a slice of bytes to a string, including invalid characters.","span":{"file_name":"src/liballoc/string.rs","byte_start":651895,"byte_end":651967,"line_start":498,"line_end":498,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":651972,"byte_end":651975,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ Strings are made of bytes ([`u8`]), and a slice of bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":651980,"byte_end":652040,"line_start":500,"line_end":500,"column_start":5,"column_end":65}},{"value":"/ ([`&[u8]`][byteslice]) is made of bytes, so this function converts","span":{"file_name":"src/liballoc/string.rs","byte_start":652045,"byte_end":652115,"line_start":501,"line_end":501,"column_start":5,"column_end":75}},{"value":"/ between the two. Not all byte slices are valid strings, however: strings","span":{"file_name":"src/liballoc/string.rs","byte_start":652120,"byte_end":652196,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ are required to be valid UTF-8. During this conversion,","span":{"file_name":"src/liballoc/string.rs","byte_start":652201,"byte_end":652260,"line_start":503,"line_end":503,"column_start":5,"column_end":64}},{"value":"/ `from_utf8_lossy()` will replace any invalid UTF-8 sequences with","span":{"file_name":"src/liballoc/string.rs","byte_start":652265,"byte_end":652334,"line_start":504,"line_end":504,"column_start":5,"column_end":74}},{"value":"/ [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: �","span":{"file_name":"src/liballoc/string.rs","byte_start":652339,"byte_end":652411,"line_start":505,"line_end":505,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":652416,"byte_end":652419,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":652424,"byte_end":652463,"line_start":507,"line_end":507,"column_start":5,"column_end":44}},{"value":"/ [byteslice]: ../../std/primitive.slice.html","span":{"file_name":"src/liballoc/string.rs","byte_start":652468,"byte_end":652515,"line_start":508,"line_end":508,"column_start":5,"column_end":52}},{"value":"/ [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html","span":{"file_name":"src/liballoc/string.rs","byte_start":652520,"byte_end":652577,"line_start":509,"line_end":509,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":652582,"byte_end":652585,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ If you are sure that the byte slice is valid UTF-8, and you don't want","span":{"file_name":"src/liballoc/string.rs","byte_start":652590,"byte_end":652664,"line_start":511,"line_end":511,"column_start":5,"column_end":79}},{"value":"/ to incur the overhead of the conversion, there is an unsafe version","span":{"file_name":"src/liballoc/string.rs","byte_start":652669,"byte_end":652740,"line_start":512,"line_end":512,"column_start":5,"column_end":76}},{"value":"/ of this function, [`from_utf8_unchecked`], which has the same behavior","span":{"file_name":"src/liballoc/string.rs","byte_start":652745,"byte_end":652819,"line_start":513,"line_end":513,"column_start":5,"column_end":79}},{"value":"/ but skips the checks.","span":{"file_name":"src/liballoc/string.rs","byte_start":652824,"byte_end":652849,"line_start":514,"line_end":514,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":652854,"byte_end":652857,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8_unchecked`]: struct.String.html#method.from_utf8_unchecked","span":{"file_name":"src/liballoc/string.rs","byte_start":652862,"byte_end":652936,"line_start":516,"line_end":516,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":652941,"byte_end":652944,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ This function returns a [`Cow<'a, str>`]. If our byte slice is invalid","span":{"file_name":"src/liballoc/string.rs","byte_start":652949,"byte_end":653023,"line_start":518,"line_end":518,"column_start":5,"column_end":79}},{"value":"/ UTF-8, then we need to insert the replacement characters, which will","span":{"file_name":"src/liballoc/string.rs","byte_start":653028,"byte_end":653100,"line_start":519,"line_end":519,"column_start":5,"column_end":77}},{"value":"/ change the size of the string, and hence, require a `String`. But if","span":{"file_name":"src/liballoc/string.rs","byte_start":653105,"byte_end":653177,"line_start":520,"line_end":520,"column_start":5,"column_end":77}},{"value":"/ it's already valid UTF-8, we don't need a new allocation. This return","span":{"file_name":"src/liballoc/string.rs","byte_start":653182,"byte_end":653255,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ type allows us to handle both cases.","span":{"file_name":"src/liballoc/string.rs","byte_start":653260,"byte_end":653300,"line_start":522,"line_end":522,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653305,"byte_end":653308,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ [`Cow<'a, str>`]: ../../std/borrow/enum.Cow.html","span":{"file_name":"src/liballoc/string.rs","byte_start":653313,"byte_end":653365,"line_start":524,"line_end":524,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653370,"byte_end":653373,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":653378,"byte_end":653392,"line_start":526,"line_end":526,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653397,"byte_end":653400,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":653405,"byte_end":653421,"line_start":528,"line_end":528,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653426,"byte_end":653429,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":653434,"byte_end":653441,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":653446,"byte_end":653476,"line_start":531,"line_end":531,"column_start":5,"column_end":35}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":653481,"byte_end":653530,"line_start":532,"line_end":532,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653535,"byte_end":653538,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ let sparkle_heart = String::from_utf8_lossy(&sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":653543,"byte_end":653607,"line_start":534,"line_end":534,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653612,"byte_end":653615,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":653620,"byte_end":653658,"line_start":536,"line_end":536,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":653663,"byte_end":653670,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653675,"byte_end":653678,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ Incorrect bytes:","span":{"file_name":"src/liballoc/string.rs","byte_start":653683,"byte_end":653703,"line_start":539,"line_end":539,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653708,"byte_end":653711,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":653716,"byte_end":653723,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":653728,"byte_end":653753,"line_start":542,"line_end":542,"column_start":5,"column_end":30}},{"value":"/ let input = b\"Hello \\xF0\\x90\\x80World\";","span":{"file_name":"src/liballoc/string.rs","byte_start":653758,"byte_end":653801,"line_start":543,"line_end":543,"column_start":5,"column_end":48}},{"value":"/ let output = String::from_utf8_lossy(input);","span":{"file_name":"src/liballoc/string.rs","byte_start":653806,"byte_end":653854,"line_start":544,"line_end":544,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":653859,"byte_end":653862,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"Hello �World\", output);","span":{"file_name":"src/liballoc/string.rs","byte_start":653867,"byte_end":653908,"line_start":546,"line_end":546,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":653913,"byte_end":653920,"line_start":547,"line_end":547,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":653925,"byte_end":653970,"line_start":548,"line_end":548,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3321},"span":{"file_name":"src/liballoc/string.rs","byte_start":655663,"byte_end":655673,"line_start":603,"line_end":603,"column_start":12,"column_end":22},"name":"from_utf16","qualname":"<String>::from_utf16","value":"fn (v: &[u16]) -> Result<String, FromUtf16Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]\n if `v` contains any invalid data.","sig":null,"attributes":[{"value":"/ Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`]","span":{"file_name":"src/liballoc/string.rs","byte_start":654936,"byte_end":655009,"line_start":581,"line_end":581,"column_start":5,"column_end":78}},{"value":"/ if `v` contains any invalid data.","span":{"file_name":"src/liballoc/string.rs","byte_start":655014,"byte_end":655051,"line_start":582,"line_end":582,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655056,"byte_end":655059,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ [`Err`]: ../../std/result/enum.Result.html#variant.Err","span":{"file_name":"src/liballoc/string.rs","byte_start":655064,"byte_end":655122,"line_start":584,"line_end":584,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655127,"byte_end":655130,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":655135,"byte_end":655149,"line_start":586,"line_end":586,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655154,"byte_end":655157,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":655162,"byte_end":655178,"line_start":588,"line_end":588,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655183,"byte_end":655186,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":655191,"byte_end":655198,"line_start":590,"line_end":590,"column_start":5,"column_end":12}},{"value":"/ // 𝄞music","span":{"file_name":"src/liballoc/string.rs","byte_start":655203,"byte_end":655219,"line_start":591,"line_end":591,"column_start":5,"column_end":18}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":655224,"byte_end":655269,"line_start":592,"line_end":592,"column_start":5,"column_end":50}},{"value":"/           0x0073, 0x0069, 0x0063];","span":{"file_name":"src/liballoc/string.rs","byte_start":655274,"byte_end":655312,"line_start":593,"line_end":593,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(String::from(\"𝄞music\"),","span":{"file_name":"src/liballoc/string.rs","byte_start":655317,"byte_end":655358,"line_start":594,"line_end":594,"column_start":5,"column_end":43}},{"value":"/            String::from_utf16(v).unwrap());","span":{"file_name":"src/liballoc/string.rs","byte_start":655363,"byte_end":655410,"line_start":595,"line_end":595,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":655415,"byte_end":655418,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ // 𝄞mu<invalid>ic","span":{"file_name":"src/liballoc/string.rs","byte_start":655423,"byte_end":655447,"line_start":597,"line_end":597,"column_start":5,"column_end":26}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":655452,"byte_end":655497,"line_start":598,"line_end":598,"column_start":5,"column_end":50}},{"value":"/           0xD800, 0x0069, 0x0063];","span":{"file_name":"src/liballoc/string.rs","byte_start":655502,"byte_end":655540,"line_start":599,"line_end":599,"column_start":5,"column_end":43}},{"value":"/ assert!(String::from_utf16(v).is_err());","span":{"file_name":"src/liballoc/string.rs","byte_start":655545,"byte_end":655589,"line_start":600,"line_end":600,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":655594,"byte_end":655601,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":655606,"byte_end":655651,"line_start":602,"line_end":602,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"src/liballoc/string.rs","byte_start":657124,"byte_end":657140,"line_start":643,"line_end":643,"column_start":12,"column_end":28},"name":"from_utf16_lossy","qualname":"<String>::from_utf16_lossy","value":"fn (v: &[u16]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Decode a UTF-16 encoded slice `v` into a `String`, replacing\n invalid data with [the replacement character (`U+FFFD`)][U+FFFD].","sig":null,"attributes":[{"value":"/ Decode a UTF-16 encoded slice `v` into a `String`, replacing","span":{"file_name":"src/liballoc/string.rs","byte_start":656166,"byte_end":656230,"line_start":617,"line_end":617,"column_start":5,"column_end":69}},{"value":"/ invalid data with [the replacement character (`U+FFFD`)][U+FFFD].","span":{"file_name":"src/liballoc/string.rs","byte_start":656235,"byte_end":656304,"line_start":618,"line_end":618,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656309,"byte_end":656312,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Unlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],","span":{"file_name":"src/liballoc/string.rs","byte_start":656317,"byte_end":656381,"line_start":620,"line_end":620,"column_start":5,"column_end":69}},{"value":"/ `from_utf16_lossy` returns a `String` since the UTF-16 to UTF-8","span":{"file_name":"src/liballoc/string.rs","byte_start":656386,"byte_end":656453,"line_start":621,"line_end":621,"column_start":5,"column_end":72}},{"value":"/ conversion requires a memory allocation.","span":{"file_name":"src/liballoc/string.rs","byte_start":656458,"byte_end":656502,"line_start":622,"line_end":622,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656507,"byte_end":656510,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8_lossy`]: #method.from_utf8_lossy","span":{"file_name":"src/liballoc/string.rs","byte_start":656515,"byte_end":656563,"line_start":624,"line_end":624,"column_start":5,"column_end":53}},{"value":"/ [`Cow<'a, str>`]: ../borrow/enum.Cow.html","span":{"file_name":"src/liballoc/string.rs","byte_start":656568,"byte_end":656613,"line_start":625,"line_end":625,"column_start":5,"column_end":50}},{"value":"/ [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html","span":{"file_name":"src/liballoc/string.rs","byte_start":656618,"byte_end":656675,"line_start":626,"line_end":626,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656680,"byte_end":656683,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":656688,"byte_end":656702,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656707,"byte_end":656710,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":656715,"byte_end":656731,"line_start":630,"line_end":630,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656736,"byte_end":656739,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":656744,"byte_end":656751,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"/ // 𝄞mus<invalid>ic<invalid>","span":{"file_name":"src/liballoc/string.rs","byte_start":656756,"byte_end":656790,"line_start":633,"line_end":633,"column_start":5,"column_end":36}},{"value":"/ let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,","span":{"file_name":"src/liballoc/string.rs","byte_start":656795,"byte_end":656840,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/           0x0073, 0xDD1E, 0x0069, 0x0063,","span":{"file_name":"src/liballoc/string.rs","byte_start":656845,"byte_end":656890,"line_start":635,"line_end":635,"column_start":5,"column_end":50}},{"value":"/           0xD834];","span":{"file_name":"src/liballoc/string.rs","byte_start":656895,"byte_end":656917,"line_start":636,"line_end":636,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":656922,"byte_end":656925,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(String::from(\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"),","span":{"file_name":"src/liballoc/string.rs","byte_start":656930,"byte_end":656987,"line_start":638,"line_end":638,"column_start":5,"column_end":59}},{"value":"/            String::from_utf16_lossy(v));","span":{"file_name":"src/liballoc/string.rs","byte_start":656992,"byte_end":657036,"line_start":639,"line_end":639,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":657041,"byte_end":657048,"line_start":640,"line_end":640,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":657053,"byte_end":657062,"line_start":641,"line_end":641,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":657067,"byte_end":657112,"line_start":642,"line_end":642,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3324},"span":{"file_name":"src/liballoc/string.rs","byte_start":658389,"byte_end":658403,"line_start":674,"line_end":674,"column_start":12,"column_end":26},"name":"into_raw_parts","qualname":"<String>::into_raw_parts","value":"fn (self) -> (*mut u8, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a `String` into its raw components.","sig":null,"attributes":[{"value":"/ Decomposes a `String` into its raw components.","span":{"file_name":"src/liballoc/string.rs","byte_start":657269,"byte_end":657319,"line_start":647,"line_end":647,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657324,"byte_end":657327,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ Returns the raw pointer to the underlying data, the length of","span":{"file_name":"src/liballoc/string.rs","byte_start":657332,"byte_end":657397,"line_start":649,"line_end":649,"column_start":5,"column_end":70}},{"value":"/ the string (in bytes), and the allocated capacity of the data","span":{"file_name":"src/liballoc/string.rs","byte_start":657402,"byte_end":657467,"line_start":650,"line_end":650,"column_start":5,"column_end":70}},{"value":"/ (in bytes). These are the same arguments in the same order as","span":{"file_name":"src/liballoc/string.rs","byte_start":657472,"byte_end":657537,"line_start":651,"line_end":651,"column_start":5,"column_end":70}},{"value":"/ the arguments to [`from_raw_parts`].","span":{"file_name":"src/liballoc/string.rs","byte_start":657542,"byte_end":657582,"line_start":652,"line_end":652,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657587,"byte_end":657590,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/string.rs","byte_start":657595,"byte_end":657661,"line_start":654,"line_end":654,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `String`. The only way to do","span":{"file_name":"src/liballoc/string.rs","byte_start":657666,"byte_end":657731,"line_start":655,"line_end":655,"column_start":5,"column_end":70}},{"value":"/ this is to convert the raw pointer, length, and capacity back","span":{"file_name":"src/liballoc/string.rs","byte_start":657736,"byte_end":657801,"line_start":656,"line_end":656,"column_start":5,"column_end":70}},{"value":"/ into a `String` with the [`from_raw_parts`] function, allowing","span":{"file_name":"src/liballoc/string.rs","byte_start":657806,"byte_end":657872,"line_start":657,"line_end":657,"column_start":5,"column_end":71}},{"value":"/ the destructor to perform the cleanup.","span":{"file_name":"src/liballoc/string.rs","byte_start":657877,"byte_end":657919,"line_start":658,"line_end":658,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657924,"byte_end":657927,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ [`from_raw_parts`]: #method.from_raw_parts","span":{"file_name":"src/liballoc/string.rs","byte_start":657932,"byte_end":657978,"line_start":660,"line_end":660,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":657983,"byte_end":657986,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":657991,"byte_end":658005,"line_start":662,"line_end":662,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658010,"byte_end":658013,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":658018,"byte_end":658025,"line_start":664,"line_end":664,"column_start":5,"column_end":12}},{"value":"/ #![feature(vec_into_raw_parts)]","span":{"file_name":"src/liballoc/string.rs","byte_start":658030,"byte_end":658065,"line_start":665,"line_end":665,"column_start":5,"column_end":40}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":658070,"byte_end":658104,"line_start":666,"line_end":666,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658109,"byte_end":658112,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ let (ptr, len, cap) = s.into_raw_parts();","span":{"file_name":"src/liballoc/string.rs","byte_start":658117,"byte_end":658162,"line_start":668,"line_end":668,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658167,"byte_end":658170,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ let rebuilt = unsafe { String::from_raw_parts(ptr, len, cap) };","span":{"file_name":"src/liballoc/string.rs","byte_start":658175,"byte_end":658242,"line_start":670,"line_end":670,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(rebuilt, \"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":658247,"byte_end":658280,"line_start":671,"line_end":671,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":658285,"byte_end":658292,"line_start":672,"line_end":672,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n           \"65816\")","span":{"file_name":"src/liballoc/string.rs","byte_start":658297,"byte_end":658377,"line_start":673,"line_end":673,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3325},"span":{"file_name":"src/liballoc/string.rs","byte_start":660080,"byte_end":660094,"line_start":724,"line_end":724,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<String>::from_raw_parts","value":"fn (buf: *mut u8, length: usize, capacity: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `String` from a length, capacity, and pointer.","sig":null,"attributes":[{"value":"/ Creates a new `String` from a length, capacity, and pointer.","span":{"file_name":"src/liballoc/string.rs","byte_start":658484,"byte_end":658548,"line_start":678,"line_end":678,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658553,"byte_end":658556,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/string.rs","byte_start":658561,"byte_end":658573,"line_start":680,"line_end":680,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658578,"byte_end":658581,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ This is highly unsafe, due to the number of invariants that aren't","span":{"file_name":"src/liballoc/string.rs","byte_start":658586,"byte_end":658656,"line_start":682,"line_end":682,"column_start":5,"column_end":75}},{"value":"/ checked:","span":{"file_name":"src/liballoc/string.rs","byte_start":658661,"byte_end":658673,"line_start":683,"line_end":683,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658678,"byte_end":658681,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ * The memory at `ptr` needs to have been previously allocated by the","span":{"file_name":"src/liballoc/string.rs","byte_start":658686,"byte_end":658758,"line_start":685,"line_end":685,"column_start":5,"column_end":77}},{"value":"/   same allocator the standard library uses, with a required alignment of exactly 1.","span":{"file_name":"src/liballoc/string.rs","byte_start":658763,"byte_end":658850,"line_start":686,"line_end":686,"column_start":5,"column_end":92}},{"value":"/ * `length` needs to be less than or equal to `capacity`.","span":{"file_name":"src/liballoc/string.rs","byte_start":658855,"byte_end":658915,"line_start":687,"line_end":687,"column_start":5,"column_end":65}},{"value":"/ * `capacity` needs to be the correct value.","span":{"file_name":"src/liballoc/string.rs","byte_start":658920,"byte_end":658967,"line_start":688,"line_end":688,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":658972,"byte_end":658975,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ Violating these may cause problems like corrupting the allocator's","span":{"file_name":"src/liballoc/string.rs","byte_start":658980,"byte_end":659050,"line_start":690,"line_end":690,"column_start":5,"column_end":75}},{"value":"/ internal data structures.","span":{"file_name":"src/liballoc/string.rs","byte_start":659055,"byte_end":659084,"line_start":691,"line_end":691,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659089,"byte_end":659092,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ The ownership of `ptr` is effectively transferred to the","span":{"file_name":"src/liballoc/string.rs","byte_start":659097,"byte_end":659157,"line_start":693,"line_end":693,"column_start":5,"column_end":65}},{"value":"/ `String` which may then deallocate, reallocate or change the","span":{"file_name":"src/liballoc/string.rs","byte_start":659162,"byte_end":659226,"line_start":694,"line_end":694,"column_start":5,"column_end":69}},{"value":"/ contents of memory pointed to by the pointer at will. Ensure","span":{"file_name":"src/liballoc/string.rs","byte_start":659231,"byte_end":659295,"line_start":695,"line_end":695,"column_start":5,"column_end":69}},{"value":"/ that nothing else uses the pointer after calling this","span":{"file_name":"src/liballoc/string.rs","byte_start":659300,"byte_end":659357,"line_start":696,"line_end":696,"column_start":5,"column_end":62}},{"value":"/ function.","span":{"file_name":"src/liballoc/string.rs","byte_start":659362,"byte_end":659375,"line_start":697,"line_end":697,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659380,"byte_end":659383,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":659388,"byte_end":659402,"line_start":699,"line_end":699,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659407,"byte_end":659410,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":659415,"byte_end":659431,"line_start":701,"line_end":701,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659436,"byte_end":659439,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":659444,"byte_end":659451,"line_start":703,"line_end":703,"column_start":5,"column_end":12}},{"value":"/ use std::mem;","span":{"file_name":"src/liballoc/string.rs","byte_start":659456,"byte_end":659473,"line_start":704,"line_end":704,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659478,"byte_end":659481,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/string.rs","byte_start":659486,"byte_end":659498,"line_start":706,"line_end":706,"column_start":5,"column_end":17}},{"value":"/     let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":659503,"byte_end":659541,"line_start":707,"line_end":707,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659546,"byte_end":659549,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/     // Prevent automatically dropping the String's data","span":{"file_name":"src/liballoc/string.rs","byte_start":659617,"byte_end":659676,"line_start":710,"line_end":710,"column_start":5,"column_end":64}},{"value":"/     let mut s = mem::ManuallyDrop::new(s);","span":{"file_name":"src/liballoc/string.rs","byte_start":659681,"byte_end":659727,"line_start":711,"line_end":711,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659732,"byte_end":659735,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/     let ptr = s.as_mut_ptr();","span":{"file_name":"src/liballoc/string.rs","byte_start":659740,"byte_end":659773,"line_start":713,"line_end":713,"column_start":5,"column_end":38}},{"value":"/     let len = s.len();","span":{"file_name":"src/liballoc/string.rs","byte_start":659778,"byte_end":659804,"line_start":714,"line_end":714,"column_start":5,"column_end":31}},{"value":"/     let capacity = s.capacity();","span":{"file_name":"src/liballoc/string.rs","byte_start":659809,"byte_end":659845,"line_start":715,"line_end":715,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659850,"byte_end":659853,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/     let s = String::from_raw_parts(ptr, len, capacity);","span":{"file_name":"src/liballoc/string.rs","byte_start":659858,"byte_end":659917,"line_start":717,"line_end":717,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":659922,"byte_end":659925,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(String::from(\"hello\"), s);","span":{"file_name":"src/liballoc/string.rs","byte_start":659930,"byte_end":659975,"line_start":719,"line_end":719,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":659980,"byte_end":659985,"line_start":720,"line_end":720,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":659990,"byte_end":659997,"line_start":721,"line_end":721,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":660002,"byte_end":660011,"line_start":722,"line_end":722,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":660016,"byte_end":660061,"line_start":723,"line_end":723,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3326},"span":{"file_name":"src/liballoc/string.rs","byte_start":661237,"byte_end":661256,"line_start":758,"line_end":758,"column_start":19,"column_end":38},"name":"from_utf8_unchecked","qualname":"<String>::from_utf8_unchecked","value":"fn (bytes: Vec<u8>) -> String","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String` without checking that the\n string contains valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `String` without checking that the","span":{"file_name":"src/liballoc/string.rs","byte_start":660231,"byte_end":660301,"line_start":728,"line_end":728,"column_start":5,"column_end":75}},{"value":"/ string contains valid UTF-8.","span":{"file_name":"src/liballoc/string.rs","byte_start":660306,"byte_end":660338,"line_start":729,"line_end":729,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660343,"byte_end":660346,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ See the safe version, [`from_utf8`], for more details.","span":{"file_name":"src/liballoc/string.rs","byte_start":660351,"byte_end":660409,"line_start":731,"line_end":731,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660414,"byte_end":660417,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8`]: struct.String.html#method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":660422,"byte_end":660476,"line_start":733,"line_end":733,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660481,"byte_end":660484,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/string.rs","byte_start":660489,"byte_end":660501,"line_start":735,"line_end":735,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660506,"byte_end":660509,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it does not check that the bytes passed","span":{"file_name":"src/liballoc/string.rs","byte_start":660514,"byte_end":660589,"line_start":737,"line_end":737,"column_start":5,"column_end":80}},{"value":"/ to it are valid UTF-8. If this constraint is violated, it may cause","span":{"file_name":"src/liballoc/string.rs","byte_start":660594,"byte_end":660665,"line_start":738,"line_end":738,"column_start":5,"column_end":76}},{"value":"/ memory unsafety issues with future users of the `String`, as the rest of","span":{"file_name":"src/liballoc/string.rs","byte_start":660670,"byte_end":660746,"line_start":739,"line_end":739,"column_start":5,"column_end":81}},{"value":"/ the standard library assumes that `String`s are valid UTF-8.","span":{"file_name":"src/liballoc/string.rs","byte_start":660751,"byte_end":660815,"line_start":740,"line_end":740,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660820,"byte_end":660823,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":660828,"byte_end":660842,"line_start":742,"line_end":742,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660847,"byte_end":660850,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":660855,"byte_end":660871,"line_start":744,"line_end":744,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660876,"byte_end":660879,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":660884,"byte_end":660891,"line_start":746,"line_end":746,"column_start":5,"column_end":12}},{"value":"/ // some bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":660896,"byte_end":660926,"line_start":747,"line_end":747,"column_start":5,"column_end":35}},{"value":"/ let sparkle_heart = vec![240, 159, 146, 150];","span":{"file_name":"src/liballoc/string.rs","byte_start":660931,"byte_end":660980,"line_start":748,"line_end":748,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":660985,"byte_end":660988,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let sparkle_heart = unsafe {","span":{"file_name":"src/liballoc/string.rs","byte_start":660993,"byte_end":661025,"line_start":750,"line_end":750,"column_start":5,"column_end":37}},{"value":"/     String::from_utf8_unchecked(sparkle_heart)","span":{"file_name":"src/liballoc/string.rs","byte_start":661030,"byte_end":661080,"line_start":751,"line_end":751,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"src/liballoc/string.rs","byte_start":661085,"byte_end":661091,"line_start":752,"line_end":752,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661096,"byte_end":661099,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"💖\", sparkle_heart);","span":{"file_name":"src/liballoc/string.rs","byte_start":661104,"byte_end":661142,"line_start":754,"line_end":754,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661147,"byte_end":661154,"line_start":755,"line_end":755,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":661159,"byte_end":661168,"line_start":756,"line_end":756,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":661173,"byte_end":661218,"line_start":757,"line_end":757,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3327},"span":{"file_name":"src/liballoc/string.rs","byte_start":661764,"byte_end":661774,"line_start":778,"line_end":778,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String>::into_bytes","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"/ Converts a `String` into a byte vector.","span":{"file_name":"src/liballoc/string.rs","byte_start":661326,"byte_end":661369,"line_start":762,"line_end":762,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661374,"byte_end":661377,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ This consumes the `String`, so we do not need to copy its contents.","span":{"file_name":"src/liballoc/string.rs","byte_start":661382,"byte_end":661453,"line_start":764,"line_end":764,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661458,"byte_end":661461,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":661466,"byte_end":661480,"line_start":766,"line_end":766,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661485,"byte_end":661488,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":661493,"byte_end":661509,"line_start":768,"line_end":768,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661514,"byte_end":661517,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661522,"byte_end":661529,"line_start":770,"line_end":770,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":661534,"byte_end":661568,"line_start":771,"line_end":771,"column_start":5,"column_end":39}},{"value":"/ let bytes = s.into_bytes();","span":{"file_name":"src/liballoc/string.rs","byte_start":661573,"byte_end":661604,"line_start":772,"line_end":772,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661609,"byte_end":661612,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&[104, 101, 108, 108, 111][..], &bytes[..]);","span":{"file_name":"src/liballoc/string.rs","byte_start":661617,"byte_end":661676,"line_start":774,"line_end":774,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661681,"byte_end":661688,"line_start":775,"line_end":775,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":661693,"byte_end":661702,"line_start":776,"line_end":776,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":661707,"byte_end":661752,"line_start":777,"line_end":777,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3328},"span":{"file_name":"src/liballoc/string.rs","byte_start":662137,"byte_end":662143,"line_start":795,"line_end":795,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire `String`.","sig":null,"attributes":[{"value":"/ Extracts a string slice containing the entire `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":661822,"byte_end":661881,"line_start":782,"line_end":782,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661886,"byte_end":661889,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":661894,"byte_end":661908,"line_start":784,"line_end":784,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661913,"byte_end":661916,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":661921,"byte_end":661937,"line_start":786,"line_end":786,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661942,"byte_end":661945,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":661950,"byte_end":661957,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":661962,"byte_end":661994,"line_start":789,"line_end":789,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":661999,"byte_end":662002,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foo\", s.as_str());","span":{"file_name":"src/liballoc/string.rs","byte_start":662007,"byte_end":662041,"line_start":791,"line_end":791,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":662046,"byte_end":662053,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":662058,"byte_end":662067,"line_start":793,"line_end":793,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_as_str\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":662072,"byte_end":662125,"line_start":794,"line_end":794,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"src/liballoc/string.rs","byte_start":662592,"byte_end":662602,"line_start":815,"line_end":815,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String>::as_mut_str","value":"fn (&mut self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"/ Converts a `String` into a mutable string slice.","span":{"file_name":"src/liballoc/string.rs","byte_start":662185,"byte_end":662237,"line_start":799,"line_end":799,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662242,"byte_end":662245,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":662250,"byte_end":662264,"line_start":801,"line_end":801,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662269,"byte_end":662272,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":662277,"byte_end":662293,"line_start":803,"line_end":803,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662298,"byte_end":662301,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":662306,"byte_end":662313,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foobar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":662318,"byte_end":662357,"line_start":806,"line_end":806,"column_start":5,"column_end":44}},{"value":"/ let s_mut_str = s.as_mut_str();","span":{"file_name":"src/liballoc/string.rs","byte_start":662362,"byte_end":662397,"line_start":807,"line_end":807,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662402,"byte_end":662405,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ s_mut_str.make_ascii_uppercase();","span":{"file_name":"src/liballoc/string.rs","byte_start":662410,"byte_end":662447,"line_start":809,"line_end":809,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662452,"byte_end":662455,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"FOOBAR\", s_mut_str);","span":{"file_name":"src/liballoc/string.rs","byte_start":662460,"byte_end":662496,"line_start":811,"line_end":811,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":662501,"byte_end":662508,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":662513,"byte_end":662522,"line_start":813,"line_end":813,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_as_str\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":662527,"byte_end":662580,"line_start":814,"line_end":814,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3330},"span":{"file_name":"src/liballoc/string.rs","byte_start":662996,"byte_end":663004,"line_start":834,"line_end":834,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String>::push_str","value":"fn (&mut self, string: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends a given string slice onto the end of this `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":662652,"byte_end":662715,"line_start":819,"line_end":819,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662720,"byte_end":662723,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":662728,"byte_end":662742,"line_start":821,"line_end":821,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662747,"byte_end":662750,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":662755,"byte_end":662771,"line_start":823,"line_end":823,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662776,"byte_end":662779,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":662784,"byte_end":662791,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":662796,"byte_end":662832,"line_start":826,"line_end":826,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662837,"byte_end":662840,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ s.push_str(\"bar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":662845,"byte_end":662867,"line_start":828,"line_end":828,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":662872,"byte_end":662875,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":662880,"byte_end":662908,"line_start":830,"line_end":830,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":662913,"byte_end":662920,"line_start":831,"line_end":831,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":662925,"byte_end":662934,"line_start":832,"line_end":832,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":662939,"byte_end":662984,"line_start":833,"line_end":833,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3331},"span":{"file_name":"src/liballoc/string.rs","byte_start":663396,"byte_end":663404,"line_start":851,"line_end":851,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns this `String`'s capacity, in bytes.","sig":null,"attributes":[{"value":"/ Returns this `String`'s capacity, in bytes.","span":{"file_name":"src/liballoc/string.rs","byte_start":663097,"byte_end":663144,"line_start":838,"line_end":838,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663149,"byte_end":663152,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":663157,"byte_end":663171,"line_start":840,"line_end":840,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663176,"byte_end":663179,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":663184,"byte_end":663200,"line_start":842,"line_end":842,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663205,"byte_end":663208,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":663213,"byte_end":663220,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"/ let s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":663225,"byte_end":663263,"line_start":845,"line_end":845,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663268,"byte_end":663271,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":663276,"byte_end":663308,"line_start":847,"line_end":847,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":663313,"byte_end":663320,"line_start":848,"line_end":848,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":663325,"byte_end":663334,"line_start":849,"line_end":849,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":663339,"byte_end":663384,"line_start":850,"line_end":850,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3332},"span":{"file_name":"src/liballoc/string.rs","byte_start":664798,"byte_end":664805,"line_start":902,"line_end":902,"column_start":12,"column_end":19},"name":"reserve","qualname":"<String>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that this `String`'s capacity is at least `additional` bytes\n larger than its length.","sig":null,"attributes":[{"value":"/ Ensures that this `String`'s capacity is at least `additional` bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":663462,"byte_end":663534,"line_start":855,"line_end":855,"column_start":5,"column_end":77}},{"value":"/ larger than its length.","span":{"file_name":"src/liballoc/string.rs","byte_start":663539,"byte_end":663566,"line_start":856,"line_end":856,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663571,"byte_end":663574,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ The capacity may be increased by more than `additional` bytes if it","span":{"file_name":"src/liballoc/string.rs","byte_start":663579,"byte_end":663650,"line_start":858,"line_end":858,"column_start":5,"column_end":76}},{"value":"/ chooses, to prevent frequent reallocations.","span":{"file_name":"src/liballoc/string.rs","byte_start":663655,"byte_end":663702,"line_start":859,"line_end":859,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663707,"byte_end":663710,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ If you do not want this \"at least\" behavior, see the [`reserve_exact`]","span":{"file_name":"src/liballoc/string.rs","byte_start":663715,"byte_end":663789,"line_start":861,"line_end":861,"column_start":5,"column_end":79}},{"value":"/ method.","span":{"file_name":"src/liballoc/string.rs","byte_start":663794,"byte_end":663805,"line_start":862,"line_end":862,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663810,"byte_end":663813,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":663818,"byte_end":663830,"line_start":864,"line_end":864,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663835,"byte_end":663838,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows [`usize`].","span":{"file_name":"src/liballoc/string.rs","byte_start":663843,"byte_end":663894,"line_start":866,"line_end":866,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":663899,"byte_end":663902,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ [`reserve_exact`]: struct.String.html#method.reserve_exact","span":{"file_name":"src/liballoc/string.rs","byte_start":663907,"byte_end":663969,"line_start":868,"line_end":868,"column_start":5,"column_end":67}},{"value":"/ [`usize`]: ../../std/primitive.usize.html","span":{"file_name":"src/liballoc/string.rs","byte_start":663974,"byte_end":664019,"line_start":869,"line_end":869,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664024,"byte_end":664027,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":664032,"byte_end":664046,"line_start":871,"line_end":871,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664051,"byte_end":664054,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":664059,"byte_end":664075,"line_start":873,"line_end":873,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664080,"byte_end":664083,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":664088,"byte_end":664095,"line_start":875,"line_end":875,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":664100,"byte_end":664130,"line_start":876,"line_end":876,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664135,"byte_end":664138,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ s.reserve(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":664143,"byte_end":664161,"line_start":878,"line_end":878,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664166,"byte_end":664169,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":664174,"byte_end":664206,"line_start":880,"line_end":880,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":664211,"byte_end":664218,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664223,"byte_end":664226,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ This may not actually increase the capacity:","span":{"file_name":"src/liballoc/string.rs","byte_start":664231,"byte_end":664279,"line_start":883,"line_end":883,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664284,"byte_end":664287,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":664292,"byte_end":664299,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":664304,"byte_end":664346,"line_start":886,"line_end":886,"column_start":5,"column_end":47}},{"value":"/ s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":664351,"byte_end":664367,"line_start":887,"line_end":887,"column_start":5,"column_end":21}},{"value":"/ s.push('b');","span":{"file_name":"src/liballoc/string.rs","byte_start":664372,"byte_end":664388,"line_start":888,"line_end":888,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664393,"byte_end":664396,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ // s now has a length of 2 and a capacity of 10","span":{"file_name":"src/liballoc/string.rs","byte_start":664401,"byte_end":664452,"line_start":890,"line_end":890,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(2, s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":664457,"byte_end":664484,"line_start":891,"line_end":891,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":664489,"byte_end":664522,"line_start":892,"line_end":892,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664527,"byte_end":664530,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ // Since we already have an extra 8 capacity, calling this...","span":{"file_name":"src/liballoc/string.rs","byte_start":664535,"byte_end":664600,"line_start":894,"line_end":894,"column_start":5,"column_end":70}},{"value":"/ s.reserve(8);","span":{"file_name":"src/liballoc/string.rs","byte_start":664605,"byte_end":664622,"line_start":895,"line_end":895,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664627,"byte_end":664630,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ // ... doesn't actually increase.","span":{"file_name":"src/liballoc/string.rs","byte_start":664635,"byte_end":664672,"line_start":897,"line_end":897,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":664677,"byte_end":664710,"line_start":898,"line_end":898,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":664715,"byte_end":664722,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":664727,"byte_end":664736,"line_start":900,"line_end":900,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":664741,"byte_end":664786,"line_start":901,"line_end":901,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3333},"span":{"file_name":"src/liballoc/string.rs","byte_start":666020,"byte_end":666033,"line_start":949,"line_end":949,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<String>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that this `String`'s capacity is `additional` bytes\n larger than its length.","sig":null,"attributes":[{"value":"/ Ensures that this `String`'s capacity is `additional` bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":664886,"byte_end":664949,"line_start":906,"line_end":906,"column_start":5,"column_end":68}},{"value":"/ larger than its length.","span":{"file_name":"src/liballoc/string.rs","byte_start":664954,"byte_end":664981,"line_start":907,"line_end":907,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":664986,"byte_end":664989,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ Consider using the [`reserve`] method unless you absolutely know","span":{"file_name":"src/liballoc/string.rs","byte_start":664994,"byte_end":665062,"line_start":909,"line_end":909,"column_start":5,"column_end":73}},{"value":"/ better than the allocator.","span":{"file_name":"src/liballoc/string.rs","byte_start":665067,"byte_end":665097,"line_start":910,"line_end":910,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665102,"byte_end":665105,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"src/liballoc/string.rs","byte_start":665110,"byte_end":665142,"line_start":912,"line_end":912,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665147,"byte_end":665150,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":665155,"byte_end":665167,"line_start":914,"line_end":914,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665172,"byte_end":665175,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/string.rs","byte_start":665180,"byte_end":665229,"line_start":916,"line_end":916,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665234,"byte_end":665237,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":665242,"byte_end":665256,"line_start":918,"line_end":918,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665261,"byte_end":665264,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":665269,"byte_end":665285,"line_start":920,"line_end":920,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665290,"byte_end":665293,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":665298,"byte_end":665305,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":665310,"byte_end":665340,"line_start":923,"line_end":923,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665345,"byte_end":665348,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ s.reserve_exact(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":665353,"byte_end":665377,"line_start":925,"line_end":925,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665382,"byte_end":665385,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":665390,"byte_end":665422,"line_start":927,"line_end":927,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":665427,"byte_end":665434,"line_start":928,"line_end":928,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665439,"byte_end":665442,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ This may not actually increase the capacity:","span":{"file_name":"src/liballoc/string.rs","byte_start":665447,"byte_end":665495,"line_start":930,"line_end":930,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665500,"byte_end":665503,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":665508,"byte_end":665515,"line_start":932,"line_end":932,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":665520,"byte_end":665562,"line_start":933,"line_end":933,"column_start":5,"column_end":47}},{"value":"/ s.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":665567,"byte_end":665583,"line_start":934,"line_end":934,"column_start":5,"column_end":21}},{"value":"/ s.push('b');","span":{"file_name":"src/liballoc/string.rs","byte_start":665588,"byte_end":665604,"line_start":935,"line_end":935,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665609,"byte_end":665612,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ // s now has a length of 2 and a capacity of 10","span":{"file_name":"src/liballoc/string.rs","byte_start":665617,"byte_end":665668,"line_start":937,"line_end":937,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(2, s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":665673,"byte_end":665700,"line_start":938,"line_end":938,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":665705,"byte_end":665738,"line_start":939,"line_end":939,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665743,"byte_end":665746,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ // Since we already have an extra 8 capacity, calling this...","span":{"file_name":"src/liballoc/string.rs","byte_start":665751,"byte_end":665816,"line_start":941,"line_end":941,"column_start":5,"column_end":70}},{"value":"/ s.reserve_exact(8);","span":{"file_name":"src/liballoc/string.rs","byte_start":665821,"byte_end":665844,"line_start":942,"line_end":942,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":665849,"byte_end":665852,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ // ... doesn't actually increase.","span":{"file_name":"src/liballoc/string.rs","byte_start":665857,"byte_end":665894,"line_start":944,"line_end":944,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(10, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":665899,"byte_end":665932,"line_start":945,"line_end":945,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":665937,"byte_end":665944,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":665949,"byte_end":665958,"line_start":947,"line_end":947,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":665963,"byte_end":666008,"line_start":948,"line_end":948,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3334},"span":{"file_name":"src/liballoc/string.rs","byte_start":667322,"byte_end":667333,"line_start":984,"line_end":984,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<String>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `String`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/string.rs","byte_start":666120,"byte_end":666204,"line_start":953,"line_end":953,"column_start":5,"column_end":89}},{"value":"/ in the given `String`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/string.rs","byte_start":666209,"byte_end":666282,"line_start":954,"line_end":954,"column_start":5,"column_end":78}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/string.rs","byte_start":666287,"byte_end":666356,"line_start":955,"line_end":955,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/string.rs","byte_start":666361,"byte_end":666432,"line_start":956,"line_end":956,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/string.rs","byte_start":666437,"byte_end":666472,"line_start":957,"line_end":957,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666477,"byte_end":666480,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/string.rs","byte_start":666485,"byte_end":666497,"line_start":959,"line_end":959,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666502,"byte_end":666505,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/string.rs","byte_start":666510,"byte_end":666590,"line_start":961,"line_end":961,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/string.rs","byte_start":666595,"byte_end":666611,"line_start":962,"line_end":962,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666616,"byte_end":666619,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":666624,"byte_end":666638,"line_start":964,"line_end":964,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666643,"byte_end":666646,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":666651,"byte_end":666658,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/string.rs","byte_start":666663,"byte_end":666691,"line_start":967,"line_end":967,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/string.rs","byte_start":666696,"byte_end":666738,"line_start":968,"line_end":968,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666743,"byte_end":666746,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &str) -> Result<String, TryReserveError> {","span":{"file_name":"src/liballoc/string.rs","byte_start":666751,"byte_end":666819,"line_start":970,"line_end":970,"column_start":5,"column_end":73}},{"value":"/     let mut output = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":666824,"byte_end":666863,"line_start":971,"line_end":971,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666868,"byte_end":666871,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/string.rs","byte_start":666876,"byte_end":666930,"line_start":973,"line_end":973,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/string.rs","byte_start":666935,"byte_end":666975,"line_start":974,"line_end":974,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":666980,"byte_end":666983,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/string.rs","byte_start":666988,"byte_end":667059,"line_start":976,"line_end":976,"column_start":5,"column_end":76}},{"value":"/     output.push_str(data);","span":{"file_name":"src/liballoc/string.rs","byte_start":667064,"byte_end":667094,"line_start":977,"line_end":977,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667099,"byte_end":667102,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/string.rs","byte_start":667107,"byte_end":667125,"line_start":979,"line_end":979,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":667130,"byte_end":667135,"line_start":980,"line_end":980,"column_start":5,"column_end":10}},{"value":"/ # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");","span":{"file_name":"src/liballoc/string.rs","byte_start":667140,"byte_end":667220,"line_start":981,"line_end":981,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":667225,"byte_end":667232,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/string.rs","byte_start":667237,"byte_end":667310,"line_start":983,"line_end":983,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3335},"span":{"file_name":"src/liballoc/string.rs","byte_start":668823,"byte_end":668840,"line_start":1022,"line_end":1022,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<String>::try_reserve_exact","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `String`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/string.rs","byte_start":667449,"byte_end":667533,"line_start":988,"line_end":988,"column_start":5,"column_end":89}},{"value":"/ be inserted in the given `String`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/string.rs","byte_start":667538,"byte_end":667607,"line_start":989,"line_end":989,"column_start":5,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/string.rs","byte_start":667612,"byte_end":667684,"line_start":990,"line_end":990,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/string.rs","byte_start":667689,"byte_end":667744,"line_start":991,"line_end":991,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667749,"byte_end":667752,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/string.rs","byte_start":667757,"byte_end":667827,"line_start":993,"line_end":993,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/string.rs","byte_start":667832,"byte_end":667904,"line_start":994,"line_end":994,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/string.rs","byte_start":667909,"byte_end":667973,"line_start":995,"line_end":995,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":667978,"byte_end":667981,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/string.rs","byte_start":667986,"byte_end":667998,"line_start":997,"line_end":997,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668003,"byte_end":668006,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/string.rs","byte_start":668011,"byte_end":668091,"line_start":999,"line_end":999,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/string.rs","byte_start":668096,"byte_end":668112,"line_start":1000,"line_end":1000,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668117,"byte_end":668120,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":668125,"byte_end":668139,"line_start":1002,"line_end":1002,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668144,"byte_end":668147,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":668152,"byte_end":668159,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/string.rs","byte_start":668164,"byte_end":668192,"line_start":1005,"line_end":1005,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/string.rs","byte_start":668197,"byte_end":668239,"line_start":1006,"line_end":1006,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668244,"byte_end":668247,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &str) -> Result<String, TryReserveError> {","span":{"file_name":"src/liballoc/string.rs","byte_start":668252,"byte_end":668320,"line_start":1008,"line_end":1008,"column_start":5,"column_end":73}},{"value":"/     let mut output = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":668325,"byte_end":668364,"line_start":1009,"line_end":1009,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668369,"byte_end":668372,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/string.rs","byte_start":668377,"byte_end":668431,"line_start":1011,"line_end":1011,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/string.rs","byte_start":668436,"byte_end":668476,"line_start":1012,"line_end":1012,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668481,"byte_end":668484,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/string.rs","byte_start":668489,"byte_end":668560,"line_start":1014,"line_end":1014,"column_start":5,"column_end":76}},{"value":"/     output.push_str(data);","span":{"file_name":"src/liballoc/string.rs","byte_start":668565,"byte_end":668595,"line_start":1015,"line_end":1015,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":668600,"byte_end":668603,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/string.rs","byte_start":668608,"byte_end":668626,"line_start":1017,"line_end":1017,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":668631,"byte_end":668636,"line_start":1018,"line_end":1018,"column_start":5,"column_end":10}},{"value":"/ # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");","span":{"file_name":"src/liballoc/string.rs","byte_start":668641,"byte_end":668721,"line_start":1019,"line_end":1019,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":668726,"byte_end":668733,"line_start":1020,"line_end":1020,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/string.rs","byte_start":668738,"byte_end":668811,"line_start":1021,"line_end":1021,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"src/liballoc/string.rs","byte_start":669371,"byte_end":669384,"line_start":1043,"line_end":1043,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<String>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of this `String` to match its length.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of this `String` to match its length.","span":{"file_name":"src/liballoc/string.rs","byte_start":668962,"byte_end":669024,"line_start":1026,"line_end":1026,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669029,"byte_end":669032,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":669037,"byte_end":669051,"line_start":1028,"line_end":1028,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669056,"byte_end":669059,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":669064,"byte_end":669080,"line_start":1030,"line_end":1030,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669085,"byte_end":669088,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":669093,"byte_end":669100,"line_start":1032,"line_end":1032,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":669105,"byte_end":669141,"line_start":1033,"line_end":1033,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669146,"byte_end":669149,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ s.reserve(100);","span":{"file_name":"src/liballoc/string.rs","byte_start":669154,"byte_end":669173,"line_start":1035,"line_end":1035,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 100);","span":{"file_name":"src/liballoc/string.rs","byte_start":669178,"byte_end":669211,"line_start":1036,"line_end":1036,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669216,"byte_end":669219,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ s.shrink_to_fit();","span":{"file_name":"src/liballoc/string.rs","byte_start":669224,"byte_end":669246,"line_start":1038,"line_end":1038,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(3, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":669251,"byte_end":669283,"line_start":1039,"line_end":1039,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":669288,"byte_end":669295,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":669300,"byte_end":669309,"line_start":1041,"line_end":1041,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":669314,"byte_end":669359,"line_start":1042,"line_end":1042,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3337},"span":{"file_name":"src/liballoc/string.rs","byte_start":670148,"byte_end":670157,"line_start":1071,"line_end":1071,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<String>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of this `String` with a lower bound.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of this `String` with a lower bound.","span":{"file_name":"src/liballoc/string.rs","byte_start":669442,"byte_end":669503,"line_start":1047,"line_end":1047,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669508,"byte_end":669511,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/string.rs","byte_start":669516,"byte_end":669581,"line_start":1049,"line_end":1049,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/string.rs","byte_start":669586,"byte_end":669613,"line_start":1050,"line_end":1050,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669618,"byte_end":669621,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/string.rs","byte_start":669626,"byte_end":669689,"line_start":1052,"line_end":1052,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":669694,"byte_end":669715,"line_start":1053,"line_end":1053,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669720,"byte_end":669723,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":669728,"byte_end":669742,"line_start":1055,"line_end":1055,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669747,"byte_end":669750,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":669755,"byte_end":669762,"line_start":1057,"line_end":1057,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/string.rs","byte_start":669767,"byte_end":669793,"line_start":1058,"line_end":1058,"column_start":5,"column_end":31}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":669798,"byte_end":669834,"line_start":1059,"line_end":1059,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669839,"byte_end":669842,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ s.reserve(100);","span":{"file_name":"src/liballoc/string.rs","byte_start":669847,"byte_end":669866,"line_start":1061,"line_end":1061,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 100);","span":{"file_name":"src/liballoc/string.rs","byte_start":669871,"byte_end":669904,"line_start":1062,"line_end":1062,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":669909,"byte_end":669912,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ s.shrink_to(10);","span":{"file_name":"src/liballoc/string.rs","byte_start":669917,"byte_end":669937,"line_start":1064,"line_end":1064,"column_start":5,"column_end":25}},{"value":"/ assert!(s.capacity() >= 10);","span":{"file_name":"src/liballoc/string.rs","byte_start":669942,"byte_end":669974,"line_start":1065,"line_end":1065,"column_start":5,"column_end":37}},{"value":"/ s.shrink_to(0);","span":{"file_name":"src/liballoc/string.rs","byte_start":669979,"byte_end":669998,"line_start":1066,"line_end":1066,"column_start":5,"column_end":24}},{"value":"/ assert!(s.capacity() >= 3);","span":{"file_name":"src/liballoc/string.rs","byte_start":670003,"byte_end":670034,"line_start":1067,"line_end":1067,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":670039,"byte_end":670046,"line_start":1068,"line_end":1068,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":670051,"byte_end":670060,"line_start":1069,"line_end":1069,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/string.rs","byte_start":670065,"byte_end":670136,"line_start":1070,"line_end":1070,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3338},"span":{"file_name":"src/liballoc/string.rs","byte_start":670676,"byte_end":670680,"line_start":1094,"line_end":1094,"column_start":12,"column_end":16},"name":"push","qualname":"<String>::push","value":"fn (&mut self, ch: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends the given [`char`] to the end of this `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":670244,"byte_end":670303,"line_start":1075,"line_end":1075,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670308,"byte_end":670311,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":670316,"byte_end":670359,"line_start":1077,"line_end":1077,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670364,"byte_end":670367,"line_start":1078,"line_end":1078,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":670372,"byte_end":670386,"line_start":1079,"line_end":1079,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670391,"byte_end":670394,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":670399,"byte_end":670415,"line_start":1081,"line_end":1081,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670420,"byte_end":670423,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":670428,"byte_end":670435,"line_start":1083,"line_end":1083,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"abc\");","span":{"file_name":"src/liballoc/string.rs","byte_start":670440,"byte_end":670476,"line_start":1084,"line_end":1084,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670481,"byte_end":670484,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ s.push('1');","span":{"file_name":"src/liballoc/string.rs","byte_start":670489,"byte_end":670505,"line_start":1086,"line_end":1086,"column_start":5,"column_end":21}},{"value":"/ s.push('2');","span":{"file_name":"src/liballoc/string.rs","byte_start":670510,"byte_end":670526,"line_start":1087,"line_end":1087,"column_start":5,"column_end":21}},{"value":"/ s.push('3');","span":{"file_name":"src/liballoc/string.rs","byte_start":670531,"byte_end":670547,"line_start":1088,"line_end":1088,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670552,"byte_end":670555,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"abc123\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":670560,"byte_end":670588,"line_start":1090,"line_end":1090,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":670593,"byte_end":670600,"line_start":1091,"line_end":1091,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":670605,"byte_end":670614,"line_start":1092,"line_end":1092,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":670619,"byte_end":670664,"line_start":1093,"line_end":1093,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3340},"span":{"file_name":"src/liballoc/string.rs","byte_start":671318,"byte_end":671326,"line_start":1118,"line_end":1118,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<String>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a byte slice of this `String`'s contents.","sig":null,"attributes":[{"value":"/ Returns a byte slice of this `String`'s contents.","span":{"file_name":"src/liballoc/string.rs","byte_start":670882,"byte_end":670935,"line_start":1101,"line_end":1101,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":670940,"byte_end":670943,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ The inverse of this method is [`from_utf8`].","span":{"file_name":"src/liballoc/string.rs","byte_start":670948,"byte_end":670996,"line_start":1103,"line_end":1103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671001,"byte_end":671004,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8`]: #method.from_utf8","span":{"file_name":"src/liballoc/string.rs","byte_start":671009,"byte_end":671045,"line_start":1105,"line_end":1105,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671050,"byte_end":671053,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":671058,"byte_end":671072,"line_start":1107,"line_end":1107,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671077,"byte_end":671080,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":671085,"byte_end":671101,"line_start":1109,"line_end":1109,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671106,"byte_end":671109,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":671114,"byte_end":671121,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":671126,"byte_end":671160,"line_start":1112,"line_end":1112,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671165,"byte_end":671168,"line_start":1113,"line_end":1113,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":671173,"byte_end":671230,"line_start":1114,"line_end":1114,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":671235,"byte_end":671242,"line_start":1115,"line_end":1115,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":671247,"byte_end":671256,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":671261,"byte_end":671306,"line_start":1117,"line_end":1117,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3341},"span":{"file_name":"src/liballoc/string.rs","byte_start":672056,"byte_end":672064,"line_start":1149,"line_end":1149,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String>::truncate","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"/ Shortens this `String` to the specified length.","span":{"file_name":"src/liballoc/string.rs","byte_start":671374,"byte_end":671425,"line_start":1122,"line_end":1122,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671430,"byte_end":671433,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than the string's current length, this has no","span":{"file_name":"src/liballoc/string.rs","byte_start":671438,"byte_end":671511,"line_start":1124,"line_end":1124,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"src/liballoc/string.rs","byte_start":671516,"byte_end":671527,"line_start":1125,"line_end":1125,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671532,"byte_end":671535,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"src/liballoc/string.rs","byte_start":671540,"byte_end":671605,"line_start":1127,"line_end":1127,"column_start":5,"column_end":70}},{"value":"/ of the string","span":{"file_name":"src/liballoc/string.rs","byte_start":671610,"byte_end":671627,"line_start":1128,"line_end":1128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671632,"byte_end":671635,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":671640,"byte_end":671652,"line_start":1130,"line_end":1130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671657,"byte_end":671660,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ Panics if `new_len` does not lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":671665,"byte_end":671725,"line_start":1132,"line_end":1132,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671730,"byte_end":671733,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":671738,"byte_end":671781,"line_start":1134,"line_end":1134,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671786,"byte_end":671789,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":671794,"byte_end":671808,"line_start":1136,"line_end":1136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671813,"byte_end":671816,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":671821,"byte_end":671837,"line_start":1138,"line_end":1138,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671842,"byte_end":671845,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":671850,"byte_end":671857,"line_start":1140,"line_end":1140,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":671862,"byte_end":671900,"line_start":1141,"line_end":1141,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671905,"byte_end":671908,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ s.truncate(2);","span":{"file_name":"src/liballoc/string.rs","byte_start":671913,"byte_end":671931,"line_start":1143,"line_end":1143,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":671936,"byte_end":671939,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"he\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":671944,"byte_end":671968,"line_start":1145,"line_end":1145,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":671973,"byte_end":671980,"line_start":1146,"line_end":1146,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":671985,"byte_end":671994,"line_start":1147,"line_end":1147,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":671999,"byte_end":672044,"line_start":1148,"line_end":1148,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3342},"span":{"file_name":"src/liballoc/string.rs","byte_start":672820,"byte_end":672823,"line_start":1177,"line_end":1177,"column_start":12,"column_end":15},"name":"pop","qualname":"<String>::pop","value":"fn (&mut self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[{"value":"/ Removes the last character from the string buffer and returns it.","span":{"file_name":"src/liballoc/string.rs","byte_start":672242,"byte_end":672311,"line_start":1156,"line_end":1156,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672316,"byte_end":672319,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if this `String` is empty.","span":{"file_name":"src/liballoc/string.rs","byte_start":672324,"byte_end":672371,"line_start":1158,"line_end":1158,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672376,"byte_end":672379,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/string.rs","byte_start":672384,"byte_end":672444,"line_start":1160,"line_end":1160,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672449,"byte_end":672452,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":672457,"byte_end":672471,"line_start":1162,"line_end":1162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672476,"byte_end":672479,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":672484,"byte_end":672500,"line_start":1164,"line_end":1164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672505,"byte_end":672508,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":672513,"byte_end":672520,"line_start":1166,"line_end":1166,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":672525,"byte_end":672561,"line_start":1167,"line_end":1167,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672566,"byte_end":672569,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"src/liballoc/string.rs","byte_start":672574,"byte_end":672609,"line_start":1169,"line_end":1169,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"src/liballoc/string.rs","byte_start":672614,"byte_end":672649,"line_start":1170,"line_end":1170,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('f'));","span":{"file_name":"src/liballoc/string.rs","byte_start":672654,"byte_end":672689,"line_start":1171,"line_end":1171,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":672694,"byte_end":672697,"line_start":1172,"line_end":1172,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), None);","span":{"file_name":"src/liballoc/string.rs","byte_start":672702,"byte_end":672732,"line_start":1173,"line_end":1173,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":672737,"byte_end":672744,"line_start":1174,"line_end":1174,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":672749,"byte_end":672758,"line_start":1175,"line_end":1175,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":672763,"byte_end":672808,"line_start":1176,"line_end":1176,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3343},"span":{"file_name":"src/liballoc/string.rs","byte_start":673765,"byte_end":673771,"line_start":1211,"line_end":1211,"column_start":12,"column_end":18},"name":"remove","qualname":"<String>::remove","value":"fn (&mut self, idx: usize) -> char","parent":null,"children":[],"decl_id":null,"docs":" Removes a [`char`] from this `String` at a byte position and returns it.","sig":null,"attributes":[{"value":"/ Removes a [`char`] from this `String` at a byte position and returns it.","span":{"file_name":"src/liballoc/string.rs","byte_start":673040,"byte_end":673116,"line_start":1186,"line_end":1186,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673121,"byte_end":673124,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation, as it requires copying every element in the","span":{"file_name":"src/liballoc/string.rs","byte_start":673129,"byte_end":673205,"line_start":1188,"line_end":1188,"column_start":5,"column_end":81}},{"value":"/ buffer.","span":{"file_name":"src/liballoc/string.rs","byte_start":673210,"byte_end":673221,"line_start":1189,"line_end":1189,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673226,"byte_end":673229,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":673234,"byte_end":673246,"line_start":1191,"line_end":1191,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673251,"byte_end":673254,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ Panics if `idx` is larger than or equal to the `String`'s length,","span":{"file_name":"src/liballoc/string.rs","byte_start":673259,"byte_end":673328,"line_start":1193,"line_end":1193,"column_start":5,"column_end":74}},{"value":"/ or if it does not lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":673333,"byte_end":673382,"line_start":1194,"line_end":1194,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673387,"byte_end":673390,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":673395,"byte_end":673438,"line_start":1196,"line_end":1196,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673443,"byte_end":673446,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":673451,"byte_end":673465,"line_start":1198,"line_end":1198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673470,"byte_end":673473,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":673478,"byte_end":673494,"line_start":1200,"line_end":1200,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673499,"byte_end":673502,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":673507,"byte_end":673514,"line_start":1202,"line_end":1202,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":673519,"byte_end":673555,"line_start":1203,"line_end":1203,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":673560,"byte_end":673563,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.remove(0), 'f');","span":{"file_name":"src/liballoc/string.rs","byte_start":673568,"byte_end":673601,"line_start":1205,"line_end":1205,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.remove(1), 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":673606,"byte_end":673639,"line_start":1206,"line_end":1206,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.remove(0), 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":673644,"byte_end":673677,"line_start":1207,"line_end":1207,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":673682,"byte_end":673689,"line_start":1208,"line_end":1208,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":673694,"byte_end":673703,"line_start":1209,"line_end":1209,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":673708,"byte_end":673753,"line_start":1210,"line_end":1210,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3344},"span":{"file_name":"src/liballoc/string.rs","byte_start":675135,"byte_end":675141,"line_start":1253,"line_end":1253,"column_start":12,"column_end":18},"name":"retain","qualname":"<String>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the characters specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the characters specified by the predicate.","span":{"file_name":"src/liballoc/string.rs","byte_start":674239,"byte_end":674298,"line_start":1226,"line_end":1226,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674303,"byte_end":674306,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all characters `c` such that `f(c)` returns `false`.","span":{"file_name":"src/liballoc/string.rs","byte_start":674311,"byte_end":674390,"line_start":1228,"line_end":1228,"column_start":5,"column_end":84}},{"value":"/ This method operates in place, visiting each character exactly once in the","span":{"file_name":"src/liballoc/string.rs","byte_start":674395,"byte_end":674473,"line_start":1229,"line_end":1229,"column_start":5,"column_end":83}},{"value":"/ original order, and preserves the order of the retained characters.","span":{"file_name":"src/liballoc/string.rs","byte_start":674478,"byte_end":674549,"line_start":1230,"line_end":1230,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674554,"byte_end":674557,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":674562,"byte_end":674576,"line_start":1232,"line_end":1232,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674581,"byte_end":674584,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":674589,"byte_end":674596,"line_start":1234,"line_end":1234,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"f_o_ob_ar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":674601,"byte_end":674643,"line_start":1235,"line_end":1235,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674648,"byte_end":674651,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ s.retain(|c| c != '_');","span":{"file_name":"src/liballoc/string.rs","byte_start":674656,"byte_end":674683,"line_start":1237,"line_end":1237,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674688,"byte_end":674691,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"foobar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":674696,"byte_end":674724,"line_start":1239,"line_end":1239,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":674729,"byte_end":674736,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674741,"byte_end":674744,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ The exact order may be useful for tracking external state, like an index.","span":{"file_name":"src/liballoc/string.rs","byte_start":674749,"byte_end":674826,"line_start":1242,"line_end":1242,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":674831,"byte_end":674834,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":674839,"byte_end":674846,"line_start":1244,"line_end":1244,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"abcde\");","span":{"file_name":"src/liballoc/string.rs","byte_start":674851,"byte_end":674889,"line_start":1245,"line_end":1245,"column_start":5,"column_end":43}},{"value":"/ let keep = [false, true, true, false, true];","span":{"file_name":"src/liballoc/string.rs","byte_start":674894,"byte_end":674942,"line_start":1246,"line_end":1246,"column_start":5,"column_end":53}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/string.rs","byte_start":674947,"byte_end":674965,"line_start":1247,"line_end":1247,"column_start":5,"column_end":23}},{"value":"/ s.retain(|_| (keep[i], i += 1).0);","span":{"file_name":"src/liballoc/string.rs","byte_start":674970,"byte_end":675008,"line_start":1248,"line_end":1248,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(s, \"bce\");","span":{"file_name":"src/liballoc/string.rs","byte_start":675013,"byte_end":675038,"line_start":1249,"line_end":1249,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":675043,"byte_end":675050,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":675055,"byte_end":675064,"line_start":1251,"line_end":1251,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_retain\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":675069,"byte_end":675123,"line_start":1252,"line_end":1252,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3346},"span":{"file_name":"src/liballoc/string.rs","byte_start":676736,"byte_end":676742,"line_start":1315,"line_end":1315,"column_start":12,"column_end":18},"name":"insert","qualname":"<String>::insert","value":"fn (&mut self, idx: usize, ch: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a character into this `String` at a byte position.","sig":null,"attributes":[{"value":"/ Inserts a character into this `String` at a byte position.","span":{"file_name":"src/liballoc/string.rs","byte_start":676031,"byte_end":676093,"line_start":1288,"line_end":1288,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676098,"byte_end":676101,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it requires copying every element in the","span":{"file_name":"src/liballoc/string.rs","byte_start":676106,"byte_end":676181,"line_start":1290,"line_end":1290,"column_start":5,"column_end":80}},{"value":"/ buffer.","span":{"file_name":"src/liballoc/string.rs","byte_start":676186,"byte_end":676197,"line_start":1291,"line_end":1291,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676202,"byte_end":676205,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":676210,"byte_end":676222,"line_start":1293,"line_end":1293,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676227,"byte_end":676230,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ Panics if `idx` is larger than the `String`'s length, or if it does not","span":{"file_name":"src/liballoc/string.rs","byte_start":676235,"byte_end":676310,"line_start":1295,"line_end":1295,"column_start":5,"column_end":80}},{"value":"/ lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":676315,"byte_end":676346,"line_start":1296,"line_end":1296,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676351,"byte_end":676354,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":676359,"byte_end":676402,"line_start":1298,"line_end":1298,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676407,"byte_end":676410,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":676415,"byte_end":676429,"line_start":1300,"line_end":1300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676434,"byte_end":676437,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":676442,"byte_end":676458,"line_start":1302,"line_end":1302,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676463,"byte_end":676466,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":676471,"byte_end":676478,"line_start":1304,"line_end":1304,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::with_capacity(3);","span":{"file_name":"src/liballoc/string.rs","byte_start":676483,"byte_end":676524,"line_start":1305,"line_end":1305,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676529,"byte_end":676532,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ s.insert(0, 'f');","span":{"file_name":"src/liballoc/string.rs","byte_start":676537,"byte_end":676558,"line_start":1307,"line_end":1307,"column_start":5,"column_end":26}},{"value":"/ s.insert(1, 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":676563,"byte_end":676584,"line_start":1308,"line_end":1308,"column_start":5,"column_end":26}},{"value":"/ s.insert(2, 'o');","span":{"file_name":"src/liballoc/string.rs","byte_start":676589,"byte_end":676610,"line_start":1309,"line_end":1309,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":676615,"byte_end":676618,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foo\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":676623,"byte_end":676648,"line_start":1311,"line_end":1311,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":676653,"byte_end":676660,"line_start":1312,"line_end":1312,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":676665,"byte_end":676674,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":676679,"byte_end":676724,"line_start":1314,"line_end":1314,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3349},"span":{"file_name":"src/liballoc/string.rs","byte_start":678029,"byte_end":678039,"line_start":1360,"line_end":1360,"column_start":12,"column_end":22},"name":"insert_str","qualname":"<String>::insert_str","value":"fn (&mut self, idx: usize, string: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a string slice into this `String` at a byte position.","sig":null,"attributes":[{"value":"/ Inserts a string slice into this `String` at a byte position.","span":{"file_name":"src/liballoc/string.rs","byte_start":677363,"byte_end":677428,"line_start":1335,"line_end":1335,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677433,"byte_end":677436,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it requires copying every element in the","span":{"file_name":"src/liballoc/string.rs","byte_start":677441,"byte_end":677516,"line_start":1337,"line_end":1337,"column_start":5,"column_end":80}},{"value":"/ buffer.","span":{"file_name":"src/liballoc/string.rs","byte_start":677521,"byte_end":677532,"line_start":1338,"line_end":1338,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677537,"byte_end":677540,"line_start":1339,"line_end":1339,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":677545,"byte_end":677557,"line_start":1340,"line_end":1340,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677562,"byte_end":677565,"line_start":1341,"line_end":1341,"column_start":5,"column_end":8}},{"value":"/ Panics if `idx` is larger than the `String`'s length, or if it does not","span":{"file_name":"src/liballoc/string.rs","byte_start":677570,"byte_end":677645,"line_start":1342,"line_end":1342,"column_start":5,"column_end":80}},{"value":"/ lie on a [`char`] boundary.","span":{"file_name":"src/liballoc/string.rs","byte_start":677650,"byte_end":677681,"line_start":1343,"line_end":1343,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677686,"byte_end":677689,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":677694,"byte_end":677737,"line_start":1345,"line_end":1345,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677742,"byte_end":677745,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":677750,"byte_end":677764,"line_start":1347,"line_end":1347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677769,"byte_end":677772,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":677777,"byte_end":677793,"line_start":1349,"line_end":1349,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677798,"byte_end":677801,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":677806,"byte_end":677813,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"bar\");","span":{"file_name":"src/liballoc/string.rs","byte_start":677818,"byte_end":677854,"line_start":1352,"line_end":1352,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677859,"byte_end":677862,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ s.insert_str(0, \"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":677867,"byte_end":677894,"line_start":1354,"line_end":1354,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":677899,"byte_end":677902,"line_start":1355,"line_end":1355,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"src/liballoc/string.rs","byte_start":677907,"byte_end":677935,"line_start":1356,"line_end":1356,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":677940,"byte_end":677947,"line_start":1357,"line_end":1357,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":677952,"byte_end":677961,"line_start":1358,"line_end":1358,"column_start":5,"column_end":14}},{"value":"stable(feature = \"insert_str\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":677966,"byte_end":678017,"line_start":1359,"line_end":1359,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3350},"span":{"file_name":"src/liballoc/string.rs","byte_start":679042,"byte_end":679052,"line_start":1394,"line_end":1394,"column_start":19,"column_end":29},"name":"as_mut_vec","qualname":"<String>::as_mut_vec","value":"fn (&mut self) -> &mut Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the contents of this `String`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the contents of this `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":678218,"byte_end":678283,"line_start":1368,"line_end":1368,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678288,"byte_end":678291,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/string.rs","byte_start":678296,"byte_end":678308,"line_start":1370,"line_end":1370,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678313,"byte_end":678316,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it does not check that the bytes passed","span":{"file_name":"src/liballoc/string.rs","byte_start":678321,"byte_end":678396,"line_start":1372,"line_end":1372,"column_start":5,"column_end":80}},{"value":"/ to it are valid UTF-8. If this constraint is violated, it may cause","span":{"file_name":"src/liballoc/string.rs","byte_start":678401,"byte_end":678472,"line_start":1373,"line_end":1373,"column_start":5,"column_end":76}},{"value":"/ memory unsafety issues with future users of the `String`, as the rest of","span":{"file_name":"src/liballoc/string.rs","byte_start":678477,"byte_end":678553,"line_start":1374,"line_end":1374,"column_start":5,"column_end":81}},{"value":"/ the standard library assumes that `String`s are valid UTF-8.","span":{"file_name":"src/liballoc/string.rs","byte_start":678558,"byte_end":678622,"line_start":1375,"line_end":1375,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678627,"byte_end":678630,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":678635,"byte_end":678649,"line_start":1377,"line_end":1377,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678654,"byte_end":678657,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":678662,"byte_end":678678,"line_start":1379,"line_end":1379,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678683,"byte_end":678686,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":678691,"byte_end":678698,"line_start":1381,"line_end":1381,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":678703,"byte_end":678741,"line_start":1382,"line_end":1382,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678746,"byte_end":678749,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/string.rs","byte_start":678754,"byte_end":678766,"line_start":1384,"line_end":1384,"column_start":5,"column_end":17}},{"value":"/     let vec = s.as_mut_vec();","span":{"file_name":"src/liballoc/string.rs","byte_start":678771,"byte_end":678804,"line_start":1385,"line_end":1385,"column_start":5,"column_end":38}},{"value":"/     assert_eq!(&[104, 101, 108, 108, 111][..], &vec[..]);","span":{"file_name":"src/liballoc/string.rs","byte_start":678809,"byte_end":678870,"line_start":1386,"line_end":1386,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":678875,"byte_end":678878,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/     vec.reverse();","span":{"file_name":"src/liballoc/string.rs","byte_start":678883,"byte_end":678905,"line_start":1388,"line_end":1388,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"src/liballoc/string.rs","byte_start":678910,"byte_end":678915,"line_start":1389,"line_end":1389,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"olleh\");","span":{"file_name":"src/liballoc/string.rs","byte_start":678920,"byte_end":678947,"line_start":1390,"line_end":1390,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":678952,"byte_end":678959,"line_start":1391,"line_end":1391,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":678964,"byte_end":678973,"line_start":1392,"line_end":1392,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":678978,"byte_end":679023,"line_start":1393,"line_end":1393,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3351},"span":{"file_name":"src/liballoc/string.rs","byte_start":679659,"byte_end":679662,"line_start":1416,"line_end":1416,"column_start":12,"column_end":15},"name":"len","qualname":"<String>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of this `String`, in bytes, not [`char`]s or\n graphemes. In other words, it may not be what a human considers the\n length of the string.","sig":null,"attributes":[{"value":"/ Returns the length of this `String`, in bytes, not [`char`]s or","span":{"file_name":"src/liballoc/string.rs","byte_start":679115,"byte_end":679182,"line_start":1398,"line_end":1398,"column_start":5,"column_end":72}},{"value":"/ graphemes. In other words, it may not be what a human considers the","span":{"file_name":"src/liballoc/string.rs","byte_start":679187,"byte_end":679258,"line_start":1399,"line_end":1399,"column_start":5,"column_end":76}},{"value":"/ length of the string.","span":{"file_name":"src/liballoc/string.rs","byte_start":679263,"byte_end":679288,"line_start":1400,"line_end":1400,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679293,"byte_end":679296,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":679301,"byte_end":679315,"line_start":1402,"line_end":1402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679320,"byte_end":679323,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":679328,"byte_end":679344,"line_start":1404,"line_end":1404,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679349,"byte_end":679352,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679357,"byte_end":679364,"line_start":1406,"line_end":1406,"column_start":5,"column_end":12}},{"value":"/ let a = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":679369,"byte_end":679401,"line_start":1407,"line_end":1407,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"src/liballoc/string.rs","byte_start":679406,"byte_end":679433,"line_start":1408,"line_end":1408,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679438,"byte_end":679441,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ let fancy_f = String::from(\"ƒoo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":679446,"byte_end":679485,"line_start":1410,"line_end":1410,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(fancy_f.len(), 4);","span":{"file_name":"src/liballoc/string.rs","byte_start":679490,"byte_end":679523,"line_start":1411,"line_end":1411,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(fancy_f.chars().count(), 3);","span":{"file_name":"src/liballoc/string.rs","byte_start":679528,"byte_end":679571,"line_start":1412,"line_end":1412,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679576,"byte_end":679583,"line_start":1413,"line_end":1413,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":679588,"byte_end":679597,"line_start":1414,"line_end":1414,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":679602,"byte_end":679647,"line_start":1415,"line_end":1415,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3352},"span":{"file_name":"src/liballoc/string.rs","byte_start":680086,"byte_end":680094,"line_start":1435,"line_end":1435,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<String>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this `String` has a length of zero, and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this `String` has a length of zero, and `false` otherwise.","span":{"file_name":"src/liballoc/string.rs","byte_start":679715,"byte_end":679795,"line_start":1420,"line_end":1420,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679800,"byte_end":679803,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":679808,"byte_end":679822,"line_start":1422,"line_end":1422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679827,"byte_end":679830,"line_start":1423,"line_end":1423,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":679835,"byte_end":679851,"line_start":1424,"line_end":1424,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679856,"byte_end":679859,"line_start":1425,"line_end":1425,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":679864,"byte_end":679871,"line_start":1426,"line_end":1426,"column_start":5,"column_end":12}},{"value":"/ let mut v = String::new();","span":{"file_name":"src/liballoc/string.rs","byte_start":679876,"byte_end":679906,"line_start":1427,"line_end":1427,"column_start":5,"column_end":35}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/string.rs","byte_start":679911,"byte_end":679937,"line_start":1428,"line_end":1428,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":679942,"byte_end":679945,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ v.push('a');","span":{"file_name":"src/liballoc/string.rs","byte_start":679950,"byte_end":679966,"line_start":1430,"line_end":1430,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/string.rs","byte_start":679971,"byte_end":679998,"line_start":1431,"line_end":1431,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":680003,"byte_end":680010,"line_start":1432,"line_end":1432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":680015,"byte_end":680024,"line_start":1433,"line_end":1433,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":680029,"byte_end":680074,"line_start":1434,"line_end":1434,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3353},"span":{"file_name":"src/liballoc/string.rs","byte_start":680980,"byte_end":680989,"line_start":1464,"line_end":1464,"column_start":12,"column_end":21},"name":"split_off","qualname":"<String>::split_off","value":"fn (&mut self, at: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Splits the string into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the string into two at the given index.","span":{"file_name":"src/liballoc/string.rs","byte_start":680147,"byte_end":680197,"line_start":1439,"line_end":1439,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680202,"byte_end":680205,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and","span":{"file_name":"src/liballoc/string.rs","byte_start":680210,"byte_end":680286,"line_start":1441,"line_end":1441,"column_start":5,"column_end":81}},{"value":"/ the returned `String` contains bytes `[at, len)`. `at` must be on the","span":{"file_name":"src/liballoc/string.rs","byte_start":680291,"byte_end":680364,"line_start":1442,"line_end":1442,"column_start":5,"column_end":78}},{"value":"/ boundary of a UTF-8 code point.","span":{"file_name":"src/liballoc/string.rs","byte_start":680369,"byte_end":680404,"line_start":1443,"line_end":1443,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680409,"byte_end":680412,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of `self` does not change.","span":{"file_name":"src/liballoc/string.rs","byte_start":680417,"byte_end":680470,"line_start":1445,"line_end":1445,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680475,"byte_end":680478,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":680483,"byte_end":680495,"line_start":1447,"line_end":1447,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680500,"byte_end":680503,"line_start":1448,"line_end":1448,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is not on a `UTF-8` code point boundary, or if it is beyond the last","span":{"file_name":"src/liballoc/string.rs","byte_start":680508,"byte_end":680595,"line_start":1449,"line_end":1449,"column_start":5,"column_end":92}},{"value":"/ code point of the string.","span":{"file_name":"src/liballoc/string.rs","byte_start":680600,"byte_end":680629,"line_start":1450,"line_end":1450,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680634,"byte_end":680637,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":680642,"byte_end":680656,"line_start":1452,"line_end":1452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":680661,"byte_end":680664,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":680669,"byte_end":680676,"line_start":1454,"line_end":1454,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"src/liballoc/string.rs","byte_start":680681,"byte_end":680698,"line_start":1455,"line_end":1455,"column_start":5,"column_end":22}},{"value":"/ let mut hello = String::from(\"Hello, World!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":680703,"byte_end":680753,"line_start":1456,"line_end":1456,"column_start":5,"column_end":55}},{"value":"/ let world = hello.split_off(7);","span":{"file_name":"src/liballoc/string.rs","byte_start":680758,"byte_end":680793,"line_start":1457,"line_end":1457,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hello, \"Hello, \");","span":{"file_name":"src/liballoc/string.rs","byte_start":680798,"byte_end":680831,"line_start":1458,"line_end":1458,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(world, \"World!\");","span":{"file_name":"src/liballoc/string.rs","byte_start":680836,"byte_end":680868,"line_start":1459,"line_end":1459,"column_start":5,"column_end":37}},{"value":"/ # }","span":{"file_name":"src/liballoc/string.rs","byte_start":680873,"byte_end":680880,"line_start":1460,"line_end":1460,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":680885,"byte_end":680892,"line_start":1461,"line_end":1461,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":680897,"byte_end":680906,"line_start":1462,"line_end":1462,"column_start":5,"column_end":14}},{"value":"stable(feature = \"string_split_off\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":680911,"byte_end":680968,"line_start":1463,"line_end":1463,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3354},"span":{"file_name":"src/liballoc/string.rs","byte_start":681682,"byte_end":681687,"line_start":1490,"line_end":1490,"column_start":12,"column_end":17},"name":"clear","qualname":"<String>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"/ Truncates this `String`, removing all contents.","span":{"file_name":"src/liballoc/string.rs","byte_start":681177,"byte_end":681228,"line_start":1470,"line_end":1470,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681233,"byte_end":681236,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ While this means the `String` will have a length of zero, it does not","span":{"file_name":"src/liballoc/string.rs","byte_start":681241,"byte_end":681314,"line_start":1472,"line_end":1472,"column_start":5,"column_end":78}},{"value":"/ touch its capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":681319,"byte_end":681342,"line_start":1473,"line_end":1473,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681347,"byte_end":681350,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":681355,"byte_end":681369,"line_start":1475,"line_end":1475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681374,"byte_end":681377,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":681382,"byte_end":681398,"line_start":1477,"line_end":1477,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681403,"byte_end":681406,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":681411,"byte_end":681418,"line_start":1479,"line_end":1479,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"foo\");","span":{"file_name":"src/liballoc/string.rs","byte_start":681423,"byte_end":681459,"line_start":1480,"line_end":1480,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681464,"byte_end":681467,"line_start":1481,"line_end":1481,"column_start":5,"column_end":8}},{"value":"/ s.clear();","span":{"file_name":"src/liballoc/string.rs","byte_start":681472,"byte_end":681486,"line_start":1482,"line_end":1482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681491,"byte_end":681494,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ assert!(s.is_empty());","span":{"file_name":"src/liballoc/string.rs","byte_start":681499,"byte_end":681525,"line_start":1484,"line_end":1484,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(0, s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":681530,"byte_end":681557,"line_start":1485,"line_end":1485,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(3, s.capacity());","span":{"file_name":"src/liballoc/string.rs","byte_start":681562,"byte_end":681594,"line_start":1486,"line_end":1486,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":681599,"byte_end":681606,"line_start":1487,"line_end":1487,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":681611,"byte_end":681620,"line_start":1488,"line_end":1488,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":681625,"byte_end":681670,"line_start":1489,"line_end":1489,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3355},"span":{"file_name":"src/liballoc/string.rs","byte_start":682750,"byte_end":682755,"line_start":1525,"line_end":1525,"column_start":12,"column_end":17},"name":"drain","qualname":"<String>::drain","value":"fn <R> (&mut self, range: R) -> Drain<'_>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the `String`\n and yields the removed `chars`.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the `String`","span":{"file_name":"src/liballoc/string.rs","byte_start":681737,"byte_end":681817,"line_start":1494,"line_end":1494,"column_start":5,"column_end":85}},{"value":"/ and yields the removed `chars`.","span":{"file_name":"src/liballoc/string.rs","byte_start":681822,"byte_end":681857,"line_start":1495,"line_end":1495,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681862,"byte_end":681865,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ Note: The element range is removed even if the iterator is not","span":{"file_name":"src/liballoc/string.rs","byte_start":681870,"byte_end":681936,"line_start":1497,"line_end":1497,"column_start":5,"column_end":71}},{"value":"/ consumed until the end.","span":{"file_name":"src/liballoc/string.rs","byte_start":681941,"byte_end":681968,"line_start":1498,"line_end":1498,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681973,"byte_end":681976,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":681981,"byte_end":681993,"line_start":1500,"line_end":1500,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":681998,"byte_end":682001,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point or end point do not lie on a [`char`]","span":{"file_name":"src/liballoc/string.rs","byte_start":682006,"byte_end":682076,"line_start":1502,"line_end":1502,"column_start":5,"column_end":75}},{"value":"/ boundary, or if they're out of bounds.","span":{"file_name":"src/liballoc/string.rs","byte_start":682081,"byte_end":682123,"line_start":1503,"line_end":1503,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682128,"byte_end":682131,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":682136,"byte_end":682179,"line_start":1505,"line_end":1505,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682184,"byte_end":682187,"line_start":1506,"line_end":1506,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":682192,"byte_end":682206,"line_start":1507,"line_end":1507,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682211,"byte_end":682214,"line_start":1508,"line_end":1508,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":682219,"byte_end":682235,"line_start":1509,"line_end":1509,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682240,"byte_end":682243,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":682248,"byte_end":682255,"line_start":1511,"line_end":1511,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"α is alpha, β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":682260,"byte_end":682316,"line_start":1512,"line_end":1512,"column_start":5,"column_end":59}},{"value":"/ let beta_offset = s.find('β').unwrap_or(s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":682321,"byte_end":682375,"line_start":1513,"line_end":1513,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682380,"byte_end":682383,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ // Remove the range up until the β from the string","span":{"file_name":"src/liballoc/string.rs","byte_start":682388,"byte_end":682443,"line_start":1515,"line_end":1515,"column_start":5,"column_end":59}},{"value":"/ let t: String = s.drain(..beta_offset).collect();","span":{"file_name":"src/liballoc/string.rs","byte_start":682448,"byte_end":682501,"line_start":1516,"line_end":1516,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t, \"α is alpha, \");","span":{"file_name":"src/liballoc/string.rs","byte_start":682506,"byte_end":682541,"line_start":1517,"line_end":1517,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(s, \"β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":682546,"byte_end":682578,"line_start":1518,"line_end":1518,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":682583,"byte_end":682586,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ // A full range clears the string","span":{"file_name":"src/liballoc/string.rs","byte_start":682591,"byte_end":682628,"line_start":1520,"line_end":1520,"column_start":5,"column_end":42}},{"value":"/ s.drain(..);","span":{"file_name":"src/liballoc/string.rs","byte_start":682633,"byte_end":682649,"line_start":1521,"line_end":1521,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(s, \"\");","span":{"file_name":"src/liballoc/string.rs","byte_start":682654,"byte_end":682676,"line_start":1522,"line_end":1522,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":682681,"byte_end":682688,"line_start":1523,"line_end":1523,"column_start":5,"column_end":12}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":682693,"byte_end":682738,"line_start":1524,"line_end":1524,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3357},"span":{"file_name":"src/liballoc/string.rs","byte_start":684737,"byte_end":684750,"line_start":1581,"line_end":1581,"column_start":12,"column_end":25},"name":"replace_range","qualname":"<String>::replace_range","value":"fn <R> (&mut self, range: R, replace_with: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the specified range in the string,\n and replaces it with the given string.\n The given string doesn't need to be the same length as the range.","sig":null,"attributes":[{"value":"/ Removes the specified range in the string,","span":{"file_name":"src/liballoc/string.rs","byte_start":683826,"byte_end":683872,"line_start":1556,"line_end":1556,"column_start":5,"column_end":51}},{"value":"/ and replaces it with the given string.","span":{"file_name":"src/liballoc/string.rs","byte_start":683877,"byte_end":683919,"line_start":1557,"line_end":1557,"column_start":5,"column_end":47}},{"value":"/ The given string doesn't need to be the same length as the range.","span":{"file_name":"src/liballoc/string.rs","byte_start":683924,"byte_end":683993,"line_start":1558,"line_end":1558,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":683998,"byte_end":684001,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/string.rs","byte_start":684006,"byte_end":684018,"line_start":1560,"line_end":1560,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684023,"byte_end":684026,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point or end point do not lie on a [`char`]","span":{"file_name":"src/liballoc/string.rs","byte_start":684031,"byte_end":684101,"line_start":1562,"line_end":1562,"column_start":5,"column_end":75}},{"value":"/ boundary, or if they're out of bounds.","span":{"file_name":"src/liballoc/string.rs","byte_start":684106,"byte_end":684148,"line_start":1563,"line_end":1563,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684153,"byte_end":684156,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"src/liballoc/string.rs","byte_start":684161,"byte_end":684204,"line_start":1565,"line_end":1565,"column_start":5,"column_end":48}},{"value":"/ [`Vec::splice`]: ../../std/vec/struct.Vec.html#method.splice","span":{"file_name":"src/liballoc/string.rs","byte_start":684209,"byte_end":684273,"line_start":1566,"line_end":1566,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684278,"byte_end":684281,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":684286,"byte_end":684300,"line_start":1568,"line_end":1568,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684305,"byte_end":684308,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":684313,"byte_end":684329,"line_start":1570,"line_end":1570,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684334,"byte_end":684337,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":684342,"byte_end":684349,"line_start":1572,"line_end":1572,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"α is alpha, β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":684354,"byte_end":684410,"line_start":1573,"line_end":1573,"column_start":5,"column_end":59}},{"value":"/ let beta_offset = s.find('β').unwrap_or(s.len());","span":{"file_name":"src/liballoc/string.rs","byte_start":684415,"byte_end":684469,"line_start":1574,"line_end":1574,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":684474,"byte_end":684477,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/ // Replace the range up until the β from the string","span":{"file_name":"src/liballoc/string.rs","byte_start":684482,"byte_end":684538,"line_start":1576,"line_end":1576,"column_start":5,"column_end":60}},{"value":"/ s.replace_range(..beta_offset, \"Α is capital alpha; \");","span":{"file_name":"src/liballoc/string.rs","byte_start":684543,"byte_end":684603,"line_start":1577,"line_end":1577,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(s, \"Α is capital alpha; β is beta\");","span":{"file_name":"src/liballoc/string.rs","byte_start":684608,"byte_end":684661,"line_start":1578,"line_end":1578,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":684666,"byte_end":684673,"line_start":1579,"line_end":1579,"column_start":5,"column_end":12}},{"value":"stable(feature = \"splice\", since = \"1.27.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":684678,"byte_end":684725,"line_start":1580,"line_end":1580,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3359},"span":{"file_name":"src/liballoc/string.rs","byte_start":685980,"byte_end":685994,"line_start":1622,"line_end":1622,"column_start":12,"column_end":26},"name":"into_boxed_str","qualname":"<String>::into_boxed_str","value":"fn (self) -> Box<str>","parent":null,"children":[],"decl_id":null,"docs":" Converts this `String` into a [`Box`]`<`[`str`]`>`.","sig":null,"attributes":[{"value":"/ Converts this `String` into a [`Box`]`<`[`str`]`>`.","span":{"file_name":"src/liballoc/string.rs","byte_start":685521,"byte_end":685576,"line_start":1604,"line_end":1604,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685581,"byte_end":685584,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ This will drop any excess capacity.","span":{"file_name":"src/liballoc/string.rs","byte_start":685589,"byte_end":685628,"line_start":1606,"line_end":1606,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685633,"byte_end":685636,"line_start":1607,"line_end":1607,"column_start":5,"column_end":8}},{"value":"/ [`Box`]: ../../std/boxed/struct.Box.html","span":{"file_name":"src/liballoc/string.rs","byte_start":685641,"byte_end":685685,"line_start":1608,"line_end":1608,"column_start":5,"column_end":49}},{"value":"/ [`str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":685690,"byte_end":685731,"line_start":1609,"line_end":1609,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685736,"byte_end":685739,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":685744,"byte_end":685758,"line_start":1611,"line_end":1611,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685763,"byte_end":685766,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":685771,"byte_end":685787,"line_start":1613,"line_end":1613,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685792,"byte_end":685795,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":685800,"byte_end":685807,"line_start":1615,"line_end":1615,"column_start":5,"column_end":12}},{"value":"/ let s = String::from(\"hello\");","span":{"file_name":"src/liballoc/string.rs","byte_start":685812,"byte_end":685846,"line_start":1616,"line_end":1616,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":685851,"byte_end":685854,"line_start":1617,"line_end":1617,"column_start":5,"column_end":8}},{"value":"/ let b = s.into_boxed_str();","span":{"file_name":"src/liballoc/string.rs","byte_start":685859,"byte_end":685890,"line_start":1618,"line_end":1618,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":685895,"byte_end":685902,"line_start":1619,"line_end":1619,"column_start":5,"column_end":12}},{"value":"stable(feature = \"box_str\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":685907,"byte_end":685954,"line_start":1620,"line_end":1620,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"src/liballoc/string.rs","byte_start":685959,"byte_end":685968,"line_start":1621,"line_end":1621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3361},"span":{"file_name":"src/liballoc/string.rs","byte_start":686603,"byte_end":686611,"line_start":1644,"line_end":1644,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<FromUtf8Error>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.","sig":null,"attributes":[{"value":"/ Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":686150,"byte_end":686232,"line_start":1629,"line_end":1629,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686237,"byte_end":686240,"line_start":1630,"line_end":1630,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":686245,"byte_end":686259,"line_start":1631,"line_end":1631,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686264,"byte_end":686267,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":686272,"byte_end":686288,"line_start":1633,"line_end":1633,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686293,"byte_end":686296,"line_start":1634,"line_end":1634,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":686301,"byte_end":686308,"line_start":1635,"line_end":1635,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":686313,"byte_end":686351,"line_start":1636,"line_end":1636,"column_start":5,"column_end":43}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":686356,"byte_end":686385,"line_start":1637,"line_end":1637,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686390,"byte_end":686393,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ let value = String::from_utf8(bytes);","span":{"file_name":"src/liballoc/string.rs","byte_start":686398,"byte_end":686439,"line_start":1639,"line_end":1639,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686444,"byte_end":686447,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&[0, 159], value.unwrap_err().as_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":686452,"byte_end":686509,"line_start":1641,"line_end":1641,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":686514,"byte_end":686521,"line_start":1642,"line_end":1642,"column_start":5,"column_end":12}},{"value":"stable(feature = \"from_utf8_error_as_bytes\", since = \"1.26.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":686526,"byte_end":686591,"line_start":1643,"line_end":1643,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3362},"span":{"file_name":"src/liballoc/string.rs","byte_start":687281,"byte_end":687291,"line_start":1667,"line_end":1667,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<FromUtf8Error>::into_bytes","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the bytes that were attempted to convert to a `String`.","sig":null,"attributes":[{"value":"/ Returns the bytes that were attempted to convert to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":686665,"byte_end":686732,"line_start":1648,"line_end":1648,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686737,"byte_end":686740,"line_start":1649,"line_end":1649,"column_start":5,"column_end":8}},{"value":"/ This method is carefully constructed to avoid allocation. It will","span":{"file_name":"src/liballoc/string.rs","byte_start":686745,"byte_end":686814,"line_start":1650,"line_end":1650,"column_start":5,"column_end":74}},{"value":"/ consume the error, moving out the bytes, so that a copy of the bytes","span":{"file_name":"src/liballoc/string.rs","byte_start":686819,"byte_end":686891,"line_start":1651,"line_end":1651,"column_start":5,"column_end":77}},{"value":"/ does not need to be made.","span":{"file_name":"src/liballoc/string.rs","byte_start":686896,"byte_end":686925,"line_start":1652,"line_end":1652,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686930,"byte_end":686933,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":686938,"byte_end":686952,"line_start":1654,"line_end":1654,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686957,"byte_end":686960,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":686965,"byte_end":686981,"line_start":1656,"line_end":1656,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":686986,"byte_end":686989,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":686994,"byte_end":687001,"line_start":1658,"line_end":1658,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":687006,"byte_end":687044,"line_start":1659,"line_end":1659,"column_start":5,"column_end":43}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":687049,"byte_end":687078,"line_start":1660,"line_end":1660,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687083,"byte_end":687086,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ let value = String::from_utf8(bytes);","span":{"file_name":"src/liballoc/string.rs","byte_start":687091,"byte_end":687132,"line_start":1662,"line_end":1662,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687137,"byte_end":687140,"line_start":1663,"line_end":1663,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());","span":{"file_name":"src/liballoc/string.rs","byte_start":687145,"byte_end":687207,"line_start":1664,"line_end":1664,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":687212,"byte_end":687219,"line_start":1665,"line_end":1665,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":687224,"byte_end":687269,"line_start":1666,"line_end":1666,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3363},"span":{"file_name":"src/liballoc/string.rs","byte_start":688297,"byte_end":688307,"line_start":1697,"line_end":1697,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"fn (&self) -> Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Fetch a `Utf8Error` to get more details about the conversion failure.","sig":null,"attributes":[{"value":"/ Fetch a `Utf8Error` to get more details about the conversion failure.","span":{"file_name":"src/liballoc/string.rs","byte_start":687341,"byte_end":687414,"line_start":1671,"line_end":1671,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687419,"byte_end":687422,"line_start":1672,"line_end":1672,"column_start":5,"column_end":8}},{"value":"/ The [`Utf8Error`] type provided by [`std::str`] represents an error that may","span":{"file_name":"src/liballoc/string.rs","byte_start":687427,"byte_end":687507,"line_start":1673,"line_end":1673,"column_start":5,"column_end":85}},{"value":"/ occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's","span":{"file_name":"src/liballoc/string.rs","byte_start":687512,"byte_end":687591,"line_start":1674,"line_end":1674,"column_start":5,"column_end":84}},{"value":"/ an analogue to `FromUtf8Error`. See its documentation for more details","span":{"file_name":"src/liballoc/string.rs","byte_start":687596,"byte_end":687670,"line_start":1675,"line_end":1675,"column_start":5,"column_end":79}},{"value":"/ on using it.","span":{"file_name":"src/liballoc/string.rs","byte_start":687675,"byte_end":687691,"line_start":1676,"line_end":1676,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687696,"byte_end":687699,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ [`Utf8Error`]: ../../std/str/struct.Utf8Error.html","span":{"file_name":"src/liballoc/string.rs","byte_start":687704,"byte_end":687758,"line_start":1678,"line_end":1678,"column_start":5,"column_end":59}},{"value":"/ [`std::str`]: ../../std/str/index.html","span":{"file_name":"src/liballoc/string.rs","byte_start":687763,"byte_end":687805,"line_start":1679,"line_end":1679,"column_start":5,"column_end":47}},{"value":"/ [`u8`]: ../../std/primitive.u8.html","span":{"file_name":"src/liballoc/string.rs","byte_start":687810,"byte_end":687849,"line_start":1680,"line_end":1680,"column_start":5,"column_end":44}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/string.rs","byte_start":687854,"byte_end":687896,"line_start":1681,"line_end":1681,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687901,"byte_end":687904,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":687909,"byte_end":687923,"line_start":1683,"line_end":1683,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687928,"byte_end":687931,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":687936,"byte_end":687952,"line_start":1685,"line_end":1685,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":687957,"byte_end":687960,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":687965,"byte_end":687972,"line_start":1687,"line_end":1687,"column_start":5,"column_end":12}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"src/liballoc/string.rs","byte_start":687977,"byte_end":688015,"line_start":1688,"line_end":1688,"column_start":5,"column_end":43}},{"value":"/ let bytes = vec![0, 159];","span":{"file_name":"src/liballoc/string.rs","byte_start":688020,"byte_end":688049,"line_start":1689,"line_end":1689,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688054,"byte_end":688057,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ let error = String::from_utf8(bytes).unwrap_err().utf8_error();","span":{"file_name":"src/liballoc/string.rs","byte_start":688062,"byte_end":688129,"line_start":1691,"line_end":1691,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":688134,"byte_end":688137,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ // the first byte is invalid here","span":{"file_name":"src/liballoc/string.rs","byte_start":688142,"byte_end":688179,"line_start":1693,"line_end":1693,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(1, error.valid_up_to());","span":{"file_name":"src/liballoc/string.rs","byte_start":688184,"byte_end":688223,"line_start":1694,"line_end":1694,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":688228,"byte_end":688235,"line_start":1695,"line_end":1695,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":688240,"byte_end":688285,"line_start":1696,"line_end":1696,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":3471},"span":{"file_name":"src/liballoc/string.rs","byte_start":700880,"byte_end":700890,"line_start":2122,"line_end":2122,"column_start":10,"column_end":20},"name":"ParseError","qualname":"::string::ParseError","value":"core::convert::Infallible","parent":null,"children":[],"decl_id":null,"docs":" An error when parsing a `String`.","sig":null,"attributes":[{"value":"/ An error when parsing a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":700161,"byte_end":700198,"line_start":2109,"line_end":2109,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":700199,"byte_end":700202,"line_start":2110,"line_end":2110,"column_start":1,"column_end":4}},{"value":"/ This `enum` is slightly awkward: it will never actually exist. This error is","span":{"file_name":"src/liballoc/string.rs","byte_start":700203,"byte_end":700283,"line_start":2111,"line_end":2111,"column_start":1,"column_end":81}},{"value":"/ part of the type signature of the implementation of [`FromStr`] on","span":{"file_name":"src/liballoc/string.rs","byte_start":700284,"byte_end":700354,"line_start":2112,"line_end":2112,"column_start":1,"column_end":71}},{"value":"/ [`String`]. The return type of [`from_str`], requires that an error be","span":{"file_name":"src/liballoc/string.rs","byte_start":700355,"byte_end":700429,"line_start":2113,"line_end":2113,"column_start":1,"column_end":75}},{"value":"/ defined, but, given that a [`String`] can always be made into a new","span":{"file_name":"src/liballoc/string.rs","byte_start":700430,"byte_end":700501,"line_start":2114,"line_end":2114,"column_start":1,"column_end":72}},{"value":"/ [`String`] without error, this type will never actually be returned. As","span":{"file_name":"src/liballoc/string.rs","byte_start":700502,"byte_end":700577,"line_start":2115,"line_end":2115,"column_start":1,"column_end":76}},{"value":"/ such, it is only here to satisfy said signature, and is useless otherwise.","span":{"file_name":"src/liballoc/string.rs","byte_start":700578,"byte_end":700656,"line_start":2116,"line_end":2116,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":700657,"byte_end":700660,"line_start":2117,"line_end":2117,"column_start":1,"column_end":4}},{"value":"/ [`FromStr`]: ../../std/str/trait.FromStr.html","span":{"file_name":"src/liballoc/string.rs","byte_start":700661,"byte_end":700710,"line_start":2118,"line_end":2118,"column_start":1,"column_end":50}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":700711,"byte_end":700745,"line_start":2119,"line_end":2119,"column_start":1,"column_end":35}},{"value":"/ [`from_str`]: ../../std/str/trait.FromStr.html#tymethod.from_str","span":{"file_name":"src/liballoc/string.rs","byte_start":700746,"byte_end":700814,"line_start":2120,"line_end":2120,"column_start":1,"column_end":69}},{"value":"stable(feature = \"str_parse_error\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":700815,"byte_end":700870,"line_start":2121,"line_end":2121,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":3475},"span":{"file_name":"src/liballoc/string.rs","byte_start":701566,"byte_end":701574,"line_start":2142,"line_end":2142,"column_start":11,"column_end":19},"name":"ToString","qualname":"::string::ToString","value":"ToString","parent":null,"children":[{"krate":0,"index":3476}],"decl_id":null,"docs":" A trait for converting a value to a `String`.","sig":null,"attributes":[{"value":"/ A trait for converting a value to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":701143,"byte_end":701192,"line_start":2133,"line_end":2133,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701193,"byte_end":701196,"line_start":2134,"line_end":2134,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented for any type which implements the","span":{"file_name":"src/liballoc/string.rs","byte_start":701197,"byte_end":701274,"line_start":2135,"line_end":2135,"column_start":1,"column_end":78}},{"value":"/ [`Display`] trait. As such, `ToString` shouldn't be implemented directly:","span":{"file_name":"src/liballoc/string.rs","byte_start":701275,"byte_end":701352,"line_start":2136,"line_end":2136,"column_start":1,"column_end":78}},{"value":"/ [`Display`] should be implemented instead, and you get the `ToString`","span":{"file_name":"src/liballoc/string.rs","byte_start":701353,"byte_end":701426,"line_start":2137,"line_end":2137,"column_start":1,"column_end":74}},{"value":"/ implementation for free.","span":{"file_name":"src/liballoc/string.rs","byte_start":701427,"byte_end":701455,"line_start":2138,"line_end":2138,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701456,"byte_end":701459,"line_start":2139,"line_end":2139,"column_start":1,"column_end":4}},{"value":"/ [`Display`]: ../../std/fmt/trait.Display.html","span":{"file_name":"src/liballoc/string.rs","byte_start":701460,"byte_end":701509,"line_start":2140,"line_end":2140,"column_start":1,"column_end":50}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":701510,"byte_end":701555,"line_start":2141,"line_end":2141,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":"src/liballoc/string.rs","byte_start":701911,"byte_end":701920,"line_start":2157,"line_end":2157,"column_start":8,"column_end":17},"name":"to_string","qualname":"::string::ToString::to_string","value":"fn (&self) -> String","parent":{"krate":0,"index":3475},"children":[],"decl_id":null,"docs":" Converts the given value to a `String`.","sig":null,"attributes":[{"value":"/ Converts the given value to a `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":701581,"byte_end":701624,"line_start":2143,"line_end":2143,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701629,"byte_end":701632,"line_start":2144,"line_end":2144,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/string.rs","byte_start":701637,"byte_end":701651,"line_start":2145,"line_end":2145,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701656,"byte_end":701659,"line_start":2146,"line_end":2146,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"src/liballoc/string.rs","byte_start":701664,"byte_end":701680,"line_start":2147,"line_end":2147,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701685,"byte_end":701688,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":701693,"byte_end":701700,"line_start":2149,"line_end":2149,"column_start":5,"column_end":12}},{"value":"/ let i = 5;","span":{"file_name":"src/liballoc/string.rs","byte_start":701705,"byte_end":701719,"line_start":2150,"line_end":2150,"column_start":5,"column_end":19}},{"value":"/ let five = String::from(\"5\");","span":{"file_name":"src/liballoc/string.rs","byte_start":701724,"byte_end":701757,"line_start":2151,"line_end":2151,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":701762,"byte_end":701765,"line_start":2152,"line_end":2152,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(five, i.to_string());","span":{"file_name":"src/liballoc/string.rs","byte_start":701770,"byte_end":701806,"line_start":2153,"line_end":2153,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"src/liballoc/string.rs","byte_start":701811,"byte_end":701818,"line_start":2154,"line_end":2154,"column_start":5,"column_end":12}},{"value":"rustc_conversion_suggestion","span":{"file_name":"src/liballoc/string.rs","byte_start":701823,"byte_end":701853,"line_start":2155,"line_end":2155,"column_start":5,"column_end":35}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":701858,"byte_end":701903,"line_start":2156,"line_end":2156,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":3529},"span":{"file_name":"src/liballoc/string.rs","byte_start":707431,"byte_end":707436,"line_start":2374,"line_end":2374,"column_start":12,"column_end":17},"name":"Drain","qualname":"::string::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":3531},{"krate":0,"index":3532},{"krate":0,"index":3533},{"krate":0,"index":3534}],"decl_id":null,"docs":" A draining iterator for `String`.","sig":null,"attributes":[{"value":"/ A draining iterator for `String`.","span":{"file_name":"src/liballoc/string.rs","byte_start":707144,"byte_end":707181,"line_start":2366,"line_end":2366,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":707182,"byte_end":707185,"line_start":2367,"line_end":2367,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`drain`] method on [`String`]. See its","span":{"file_name":"src/liballoc/string.rs","byte_start":707186,"byte_end":707259,"line_start":2368,"line_end":2368,"column_start":1,"column_end":74}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/string.rs","byte_start":707260,"byte_end":707287,"line_start":2369,"line_end":2369,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/string.rs","byte_start":707288,"byte_end":707291,"line_start":2370,"line_end":2370,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.String.html#method.drain","span":{"file_name":"src/liballoc/string.rs","byte_start":707292,"byte_end":707338,"line_start":2371,"line_end":2371,"column_start":1,"column_end":47}},{"value":"/ [`String`]: struct.String.html","span":{"file_name":"src/liballoc/string.rs","byte_start":707339,"byte_end":707373,"line_start":2372,"line_end":2372,"column_start":1,"column_end":35}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/string.rs","byte_start":707374,"byte_end":707419,"line_start":2373,"line_end":2373,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":3549},"span":{"file_name":"src/liballoc/sync.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"src/liballoc/sync.rs","parent":null,"children":[{"krate":0,"index":3550},{"krate":0,"index":3551},{"krate":0,"index":3552},{"krate":0,"index":3553},{"krate":0,"index":3554},{"krate":0,"index":3557},{"krate":0,"index":3558},{"krate":0,"index":3561},{"krate":0,"index":3562},{"krate":0,"index":3563},{"krate":0,"index":3567},{"krate":0,"index":3572},{"krate":0,"index":3577},{"krate":0,"index":3578},{"krate":0,"index":3581},{"krate":0,"index":3584},{"krate":0,"index":3585},{"krate":0,"index":3590},{"krate":0,"index":3593},{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3608},{"krate":0,"index":3610},{"krate":0,"index":3612},{"krate":0,"index":3615},{"krate":0,"index":3618},{"krate":0,"index":3622},{"krate":0,"index":3625},{"krate":0,"index":3627},{"krate":0,"index":3629},{"krate":0,"index":3632},{"krate":0,"index":3635},{"krate":0,"index":3638},{"krate":0,"index":3643},{"krate":0,"index":3645},{"krate":0,"index":3647},{"krate":0,"index":3655},{"krate":0,"index":3658},{"krate":0,"index":3661},{"krate":0,"index":3664},{"krate":0,"index":3675},{"krate":0,"index":3683},{"krate":0,"index":3687},{"krate":0,"index":3690},{"krate":0,"index":3704},{"krate":0,"index":3707},{"krate":0,"index":3710},{"krate":0,"index":3713},{"krate":0,"index":3716},{"krate":0,"index":3720},{"krate":0,"index":3722},{"krate":0,"index":3725},{"krate":0,"index":3730},{"krate":0,"index":3733},{"krate":0,"index":3736},{"krate":0,"index":3742},{"krate":0,"index":3750},{"krate":0,"index":3753},{"krate":0,"index":3756},{"krate":0,"index":3759},{"krate":0,"index":3763},{"krate":0,"index":3767},{"krate":0,"index":3771},{"krate":0,"index":3775},{"krate":0,"index":3782},{"krate":0,"index":3785},{"krate":0,"index":3787},{"krate":0,"index":3790},{"krate":0,"index":3793},{"krate":0,"index":3796},{"krate":0,"index":3799},{"krate":0,"index":3803},{"krate":0,"index":3806},{"krate":0,"index":3809},{"krate":0,"index":3811},{"krate":0,"index":3813},{"krate":0,"index":3816},{"krate":0,"index":3819},{"krate":0,"index":3827},{"krate":0,"index":3831},{"krate":0,"index":3835},{"krate":0,"index":3839},{"krate":0,"index":3843},{"krate":0,"index":3847},{"krate":0,"index":3850},{"krate":0,"index":3853},{"krate":0,"index":3855},{"krate":0,"index":3857},{"krate":0,"index":3859}],"decl_id":null,"docs":" Thread-safe reference-counting pointers.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"src/liballoc/lib.rs","byte_start":5257,"byte_end":5290,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":709117,"byte_end":709163,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"! Thread-safe reference-counting pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":709165,"byte_end":709209,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"src/liballoc/sync.rs","byte_start":709210,"byte_end":709213,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! See the [`Arc<T>`][arc] documentation for more details.","span":{"file_name":"src/liballoc/sync.rs","byte_start":709214,"byte_end":709273,"line_start":5,"line_end":5,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"src/liballoc/sync.rs","byte_start":709274,"byte_end":709277,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! [arc]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":709278,"byte_end":709304,"line_start":7,"line_end":7,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":3604},"span":{"file_name":"src/liballoc/sync.rs","byte_start":716531,"byte_end":716534,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"Arc","qualname":"::sync::Arc","value":"Arc {  }","parent":null,"children":[{"krate":0,"index":3606},{"krate":0,"index":3607}],"decl_id":null,"docs":" A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically\n Reference Counted'.","sig":null,"attributes":[{"value":"/ A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically","span":{"file_name":"src/liballoc/sync.rs","byte_start":710378,"byte_end":710452,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ Reference Counted'.","span":{"file_name":"src/liballoc/sync.rs","byte_start":710453,"byte_end":710476,"line_start":44,"line_end":44,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":710477,"byte_end":710480,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The type `Arc<T>` provides shared ownership of a value of type `T`,","span":{"file_name":"src/liballoc/sync.rs","byte_start":710481,"byte_end":710552,"line_start":46,"line_end":46,"column_start":1,"column_end":72}},{"value":"/ allocated in the heap. Invoking [`clone`][clone] on `Arc` produces","span":{"file_name":"src/liballoc/sync.rs","byte_start":710553,"byte_end":710623,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/ a new `Arc` instance, which points to the same allocation on the heap as the","span":{"file_name":"src/liballoc/sync.rs","byte_start":710624,"byte_end":710704,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ source `Arc`, while increasing a reference count. When the last `Arc`","span":{"file_name":"src/liballoc/sync.rs","byte_start":710705,"byte_end":710778,"line_start":49,"line_end":49,"column_start":1,"column_end":74}},{"value":"/ pointer to a given allocation is destroyed, the value stored in that allocation (often","span":{"file_name":"src/liballoc/sync.rs","byte_start":710779,"byte_end":710869,"line_start":50,"line_end":50,"column_start":1,"column_end":91}},{"value":"/ referred to as \"inner value\") is also dropped.","span":{"file_name":"src/liballoc/sync.rs","byte_start":710870,"byte_end":710920,"line_start":51,"line_end":51,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":710921,"byte_end":710924,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Shared references in Rust disallow mutation by default, and `Arc` is no","span":{"file_name":"src/liballoc/sync.rs","byte_start":710925,"byte_end":711000,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ exception: you cannot generally obtain a mutable reference to something","span":{"file_name":"src/liballoc/sync.rs","byte_start":711001,"byte_end":711076,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ inside an `Arc`. If you need to mutate through an `Arc`, use","span":{"file_name":"src/liballoc/sync.rs","byte_start":711077,"byte_end":711141,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ [`Mutex`][mutex], [`RwLock`][rwlock], or one of the [`Atomic`][atomic]","span":{"file_name":"src/liballoc/sync.rs","byte_start":711142,"byte_end":711216,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ types.","span":{"file_name":"src/liballoc/sync.rs","byte_start":711217,"byte_end":711227,"line_start":57,"line_end":57,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":711228,"byte_end":711231,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ## Thread Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":711232,"byte_end":711252,"line_start":59,"line_end":59,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":711253,"byte_end":711256,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Unlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference","span":{"file_name":"src/liballoc/sync.rs","byte_start":711257,"byte_end":711328,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/ counting. This means that it is thread-safe. The disadvantage is that","span":{"file_name":"src/liballoc/sync.rs","byte_start":711329,"byte_end":711402,"line_start":62,"line_end":62,"column_start":1,"column_end":74}},{"value":"/ atomic operations are more expensive than ordinary memory accesses. If you","span":{"file_name":"src/liballoc/sync.rs","byte_start":711403,"byte_end":711481,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ are not sharing reference-counted allocations between threads, consider using","span":{"file_name":"src/liballoc/sync.rs","byte_start":711482,"byte_end":711563,"line_start":64,"line_end":64,"column_start":1,"column_end":82}},{"value":"/ [`Rc<T>`] for lower overhead. [`Rc<T>`] is a safe default, because the","span":{"file_name":"src/liballoc/sync.rs","byte_start":711564,"byte_end":711638,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ compiler will catch any attempt to send an [`Rc<T>`] between threads.","span":{"file_name":"src/liballoc/sync.rs","byte_start":711639,"byte_end":711712,"line_start":66,"line_end":66,"column_start":1,"column_end":74}},{"value":"/ However, a library might choose `Arc<T>` in order to give library consumers","span":{"file_name":"src/liballoc/sync.rs","byte_start":711713,"byte_end":711792,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ more flexibility.","span":{"file_name":"src/liballoc/sync.rs","byte_start":711793,"byte_end":711814,"line_start":68,"line_end":68,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":711815,"byte_end":711818,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ `Arc<T>` will implement [`Send`] and [`Sync`] as long as the `T` implements","span":{"file_name":"src/liballoc/sync.rs","byte_start":711819,"byte_end":711898,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ [`Send`] and [`Sync`]. Why can't you put a non-thread-safe type `T` in an","span":{"file_name":"src/liballoc/sync.rs","byte_start":711899,"byte_end":711976,"line_start":71,"line_end":71,"column_start":1,"column_end":78}},{"value":"/ `Arc<T>` to make it thread-safe? This may be a bit counter-intuitive at","span":{"file_name":"src/liballoc/sync.rs","byte_start":711977,"byte_end":712052,"line_start":72,"line_end":72,"column_start":1,"column_end":76}},{"value":"/ first: after all, isn't the point of `Arc<T>` thread safety? The key is","span":{"file_name":"src/liballoc/sync.rs","byte_start":712053,"byte_end":712128,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/ this: `Arc<T>` makes it thread safe to have multiple ownership of the same","span":{"file_name":"src/liballoc/sync.rs","byte_start":712129,"byte_end":712207,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"/ data, but it  doesn't add thread safety to its data. Consider","span":{"file_name":"src/liballoc/sync.rs","byte_start":712208,"byte_end":712273,"line_start":75,"line_end":75,"column_start":1,"column_end":66}},{"value":"/ `Arc<`[`RefCell<T>`]`>`. [`RefCell<T>`] isn't [`Sync`], and if `Arc<T>` was always","span":{"file_name":"src/liballoc/sync.rs","byte_start":712274,"byte_end":712360,"line_start":76,"line_end":76,"column_start":1,"column_end":87}},{"value":"/ [`Send`], `Arc<`[`RefCell<T>`]`>` would be as well. But then we'd have a problem:","span":{"file_name":"src/liballoc/sync.rs","byte_start":712361,"byte_end":712446,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ [`RefCell<T>`] is not thread safe; it keeps track of the borrowing count using","span":{"file_name":"src/liballoc/sync.rs","byte_start":712447,"byte_end":712529,"line_start":78,"line_end":78,"column_start":1,"column_end":83}},{"value":"/ non-atomic operations.","span":{"file_name":"src/liballoc/sync.rs","byte_start":712530,"byte_end":712556,"line_start":79,"line_end":79,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":712557,"byte_end":712560,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ In the end, this means that you may need to pair `Arc<T>` with some sort of","span":{"file_name":"src/liballoc/sync.rs","byte_start":712561,"byte_end":712640,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ [`std::sync`] type, usually [`Mutex<T>`][mutex].","span":{"file_name":"src/liballoc/sync.rs","byte_start":712641,"byte_end":712693,"line_start":82,"line_end":82,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":712694,"byte_end":712697,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ## Breaking cycles with `Weak`","span":{"file_name":"src/liballoc/sync.rs","byte_start":712698,"byte_end":712732,"line_start":84,"line_end":84,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":712733,"byte_end":712736,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ The [`downgrade`][downgrade] method can be used to create a non-owning","span":{"file_name":"src/liballoc/sync.rs","byte_start":712737,"byte_end":712811,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ [`Weak`][weak] pointer. A [`Weak`][weak] pointer can be [`upgrade`][upgrade]d","span":{"file_name":"src/liballoc/sync.rs","byte_start":712812,"byte_end":712893,"line_start":87,"line_end":87,"column_start":1,"column_end":82}},{"value":"/ to an `Arc`, but this will return [`None`] if the value stored in the allocation has","span":{"file_name":"src/liballoc/sync.rs","byte_start":712894,"byte_end":712982,"line_start":88,"line_end":88,"column_start":1,"column_end":89}},{"value":"/ already been dropped. In other words, `Weak` pointers do not keep the value","span":{"file_name":"src/liballoc/sync.rs","byte_start":712983,"byte_end":713062,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ inside the allocation alive; however, they *do* keep the allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":713063,"byte_end":713134,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/ (the backing store for the value) alive.","span":{"file_name":"src/liballoc/sync.rs","byte_start":713135,"byte_end":713179,"line_start":91,"line_end":91,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":713180,"byte_end":713183,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ A cycle between `Arc` pointers will never be deallocated. For this reason,","span":{"file_name":"src/liballoc/sync.rs","byte_start":713184,"byte_end":713262,"line_start":93,"line_end":93,"column_start":1,"column_end":79}},{"value":"/ [`Weak`][weak] is used to break cycles. For example, a tree could have","span":{"file_name":"src/liballoc/sync.rs","byte_start":713263,"byte_end":713337,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ strong `Arc` pointers from parent nodes to children, and [`Weak`][weak]","span":{"file_name":"src/liballoc/sync.rs","byte_start":713338,"byte_end":713413,"line_start":95,"line_end":95,"column_start":1,"column_end":76}},{"value":"/ pointers from children back to their parents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":713414,"byte_end":713463,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":713464,"byte_end":713467,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ # Cloning references","span":{"file_name":"src/liballoc/sync.rs","byte_start":713468,"byte_end":713492,"line_start":98,"line_end":98,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":713493,"byte_end":713496,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Creating a new reference from an existing reference counted pointer is done using the","span":{"file_name":"src/liballoc/sync.rs","byte_start":713497,"byte_end":713586,"line_start":100,"line_end":100,"column_start":1,"column_end":90}},{"value":"/ `Clone` trait implemented for [`Arc<T>`][arc] and [`Weak<T>`][weak].","span":{"file_name":"src/liballoc/sync.rs","byte_start":713587,"byte_end":713659,"line_start":101,"line_end":101,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":713660,"byte_end":713663,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":713664,"byte_end":713671,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":713672,"byte_end":713695,"line_start":104,"line_end":104,"column_start":1,"column_end":24}},{"value":"/ let foo = Arc::new(vec![1.0, 2.0, 3.0]);","span":{"file_name":"src/liballoc/sync.rs","byte_start":713696,"byte_end":713740,"line_start":105,"line_end":105,"column_start":1,"column_end":45}},{"value":"/ // The two syntaxes below are equivalent.","span":{"file_name":"src/liballoc/sync.rs","byte_start":713741,"byte_end":713786,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ let a = foo.clone();","span":{"file_name":"src/liballoc/sync.rs","byte_start":713787,"byte_end":713811,"line_start":107,"line_end":107,"column_start":1,"column_end":25}},{"value":"/ let b = Arc::clone(&foo);","span":{"file_name":"src/liballoc/sync.rs","byte_start":713812,"byte_end":713841,"line_start":108,"line_end":108,"column_start":1,"column_end":30}},{"value":"/ // a, b, and foo are all Arcs that point to the same memory location","span":{"file_name":"src/liballoc/sync.rs","byte_start":713842,"byte_end":713914,"line_start":109,"line_end":109,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":713915,"byte_end":713922,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":713923,"byte_end":713926,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ ## `Deref` behavior","span":{"file_name":"src/liballoc/sync.rs","byte_start":713927,"byte_end":713950,"line_start":112,"line_end":112,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":713951,"byte_end":713954,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),","span":{"file_name":"src/liballoc/sync.rs","byte_start":713955,"byte_end":714035,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/ so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name","span":{"file_name":"src/liballoc/sync.rs","byte_start":714036,"byte_end":714112,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/ clashes with `T`'s methods, the methods of `Arc<T>` itself are associated","span":{"file_name":"src/liballoc/sync.rs","byte_start":714113,"byte_end":714190,"line_start":116,"line_end":116,"column_start":1,"column_end":78}},{"value":"/ functions, called using function-like syntax:","span":{"file_name":"src/liballoc/sync.rs","byte_start":714191,"byte_end":714240,"line_start":117,"line_end":117,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":714241,"byte_end":714244,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":714245,"byte_end":714252,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":714253,"byte_end":714276,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let my_arc = Arc::new(());","span":{"file_name":"src/liballoc/sync.rs","byte_start":714277,"byte_end":714307,"line_start":121,"line_end":121,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":714308,"byte_end":714311,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ Arc::downgrade(&my_arc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":714312,"byte_end":714340,"line_start":123,"line_end":123,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":714341,"byte_end":714348,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":714349,"byte_end":714352,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Weak<T>`][weak] does not auto-dereference to `T`, because the inner value may have","span":{"file_name":"src/liballoc/sync.rs","byte_start":714353,"byte_end":714441,"line_start":126,"line_end":126,"column_start":1,"column_end":89}},{"value":"/ already been dropped.","span":{"file_name":"src/liballoc/sync.rs","byte_start":714442,"byte_end":714467,"line_start":127,"line_end":127,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":714468,"byte_end":714471,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [arc]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714472,"byte_end":714498,"line_start":129,"line_end":129,"column_start":1,"column_end":27}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714499,"byte_end":714527,"line_start":130,"line_end":130,"column_start":1,"column_end":29}},{"value":"/ [`Rc<T>`]: ../../std/rc/struct.Rc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714528,"byte_end":714570,"line_start":131,"line_end":131,"column_start":1,"column_end":43}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":714571,"byte_end":714631,"line_start":132,"line_end":132,"column_start":1,"column_end":61}},{"value":"/ [mutex]: ../../std/sync/struct.Mutex.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714632,"byte_end":714677,"line_start":133,"line_end":133,"column_start":1,"column_end":46}},{"value":"/ [rwlock]: ../../std/sync/struct.RwLock.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714678,"byte_end":714725,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/ [atomic]: ../../std/sync/atomic/index.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714726,"byte_end":714772,"line_start":135,"line_end":135,"column_start":1,"column_end":47}},{"value":"/ [`Send`]: ../../std/marker/trait.Send.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714773,"byte_end":714819,"line_start":136,"line_end":136,"column_start":1,"column_end":47}},{"value":"/ [`Sync`]: ../../std/marker/trait.Sync.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714820,"byte_end":714866,"line_start":137,"line_end":137,"column_start":1,"column_end":47}},{"value":"/ [deref]: ../../std/ops/trait.Deref.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":714867,"byte_end":714910,"line_start":138,"line_end":138,"column_start":1,"column_end":44}},{"value":"/ [downgrade]: struct.Arc.html#method.downgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":714911,"byte_end":714960,"line_start":139,"line_end":139,"column_start":1,"column_end":50}},{"value":"/ [upgrade]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":714961,"byte_end":715007,"line_start":140,"line_end":140,"column_start":1,"column_end":47}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":715008,"byte_end":715068,"line_start":141,"line_end":141,"column_start":1,"column_end":61}},{"value":"/ [`RefCell<T>`]: ../../std/cell/struct.RefCell.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":715069,"byte_end":715123,"line_start":142,"line_end":142,"column_start":1,"column_end":55}},{"value":"/ [`std::sync`]: ../../std/sync/index.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":715124,"byte_end":715168,"line_start":143,"line_end":143,"column_start":1,"column_end":45}},{"value":"/ [`Arc::clone(&from)`]: #method.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":715169,"byte_end":715209,"line_start":144,"line_end":144,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715210,"byte_end":715213,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":715214,"byte_end":715228,"line_start":146,"line_end":146,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715229,"byte_end":715232,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ Sharing some immutable data between threads:","span":{"file_name":"src/liballoc/sync.rs","byte_start":715233,"byte_end":715281,"line_start":148,"line_end":148,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715282,"byte_end":715285,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"src/liballoc/sync.rs","byte_start":715533,"byte_end":715546,"line_start":154,"line_end":154,"column_start":1,"column_end":14}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":715547,"byte_end":715570,"line_start":155,"line_end":155,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"src/liballoc/sync.rs","byte_start":715571,"byte_end":715591,"line_start":156,"line_end":156,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715592,"byte_end":715595,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":715596,"byte_end":715623,"line_start":158,"line_end":158,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715624,"byte_end":715627,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..10 {","span":{"file_name":"src/liballoc/sync.rs","byte_start":715628,"byte_end":715648,"line_start":160,"line_end":160,"column_start":1,"column_end":21}},{"value":"/     let five = Arc::clone(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":715649,"byte_end":715686,"line_start":161,"line_end":161,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715687,"byte_end":715690,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/     thread::spawn(move || {","span":{"file_name":"src/liballoc/sync.rs","byte_start":715691,"byte_end":715722,"line_start":163,"line_end":163,"column_start":1,"column_end":32}},{"value":"/         println!(\"{:?}\", five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":715723,"byte_end":715758,"line_start":164,"line_end":164,"column_start":1,"column_end":36}},{"value":"/     });","span":{"file_name":"src/liballoc/sync.rs","byte_start":715759,"byte_end":715770,"line_start":165,"line_end":165,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":715771,"byte_end":715776,"line_start":166,"line_end":166,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":715777,"byte_end":715784,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715785,"byte_end":715788,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Sharing a mutable [`AtomicUsize`]:","span":{"file_name":"src/liballoc/sync.rs","byte_start":715789,"byte_end":715827,"line_start":169,"line_end":169,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715828,"byte_end":715831,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ [`AtomicUsize`]: ../../std/sync/atomic/struct.AtomicUsize.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":715832,"byte_end":715898,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":715899,"byte_end":715902,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"src/liballoc/sync.rs","byte_start":715903,"byte_end":715916,"line_start":173,"line_end":173,"column_start":1,"column_end":14}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":715917,"byte_end":715940,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"src/liballoc/sync.rs","byte_start":715941,"byte_end":715992,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ use std::thread;","span":{"file_name":"src/liballoc/sync.rs","byte_start":715993,"byte_end":716013,"line_start":176,"line_end":176,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":716014,"byte_end":716017,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ let val = Arc::new(AtomicUsize::new(5));","span":{"file_name":"src/liballoc/sync.rs","byte_start":716018,"byte_end":716062,"line_start":178,"line_end":178,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":716063,"byte_end":716066,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..10 {","span":{"file_name":"src/liballoc/sync.rs","byte_start":716067,"byte_end":716087,"line_start":180,"line_end":180,"column_start":1,"column_end":21}},{"value":"/     let val = Arc::clone(&val);","span":{"file_name":"src/liballoc/sync.rs","byte_start":716088,"byte_end":716123,"line_start":181,"line_end":181,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":716124,"byte_end":716127,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/     thread::spawn(move || {","span":{"file_name":"src/liballoc/sync.rs","byte_start":716128,"byte_end":716159,"line_start":183,"line_end":183,"column_start":1,"column_end":32}},{"value":"/         let v = val.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"src/liballoc/sync.rs","byte_start":716160,"byte_end":716215,"line_start":184,"line_end":184,"column_start":1,"column_end":56}},{"value":"/         println!(\"{:?}\", v);","span":{"file_name":"src/liballoc/sync.rs","byte_start":716216,"byte_end":716248,"line_start":185,"line_end":185,"column_start":1,"column_end":33}},{"value":"/     });","span":{"file_name":"src/liballoc/sync.rs","byte_start":716249,"byte_end":716260,"line_start":186,"line_end":186,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":716261,"byte_end":716266,"line_start":187,"line_end":187,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":716267,"byte_end":716274,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":716275,"byte_end":716278,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ See the [`rc` documentation][rc_examples] for more examples of reference","span":{"file_name":"src/liballoc/sync.rs","byte_start":716279,"byte_end":716355,"line_start":190,"line_end":190,"column_start":1,"column_end":77}},{"value":"/ counting in general.","span":{"file_name":"src/liballoc/sync.rs","byte_start":716356,"byte_end":716380,"line_start":191,"line_end":191,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":716381,"byte_end":716384,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [rc_examples]: ../../std/rc/index.html#examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":716385,"byte_end":716436,"line_start":193,"line_end":193,"column_start":1,"column_end":52}},{"value":"lang = \"arc\"","span":{"file_name":"src/liballoc/sync.rs","byte_start":716459,"byte_end":716471,"line_start":194,"line_end":194,"column_start":23,"column_end":35}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":716474,"byte_end":716519,"line_start":195,"line_end":195,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3622},"span":{"file_name":"src/liballoc/sync.rs","byte_start":718833,"byte_end":718837,"line_start":247,"line_end":247,"column_start":12,"column_end":16},"name":"Weak","qualname":"::sync::Weak","value":"Weak {  }","parent":null,"children":[{"krate":0,"index":3624}],"decl_id":null,"docs":" `Weak` is a version of [`Arc`] that holds a non-owning reference to the\n managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\n pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.","sig":null,"attributes":[{"value":"/ `Weak` is a version of [`Arc`] that holds a non-owning reference to the","span":{"file_name":"src/liballoc/sync.rs","byte_start":717345,"byte_end":717420,"line_start":222,"line_end":222,"column_start":1,"column_end":76}},{"value":"/ managed allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`","span":{"file_name":"src/liballoc/sync.rs","byte_start":717421,"byte_end":717508,"line_start":223,"line_end":223,"column_start":1,"column_end":88}},{"value":"/ pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":717509,"byte_end":717566,"line_start":224,"line_end":224,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":717567,"byte_end":717570,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Since a `Weak` reference does not count towards ownership, it will not","span":{"file_name":"src/liballoc/sync.rs","byte_start":717571,"byte_end":717645,"line_start":226,"line_end":226,"column_start":1,"column_end":75}},{"value":"/ prevent the value stored in the allocation from being dropped, and `Weak` itself makes no","span":{"file_name":"src/liballoc/sync.rs","byte_start":717646,"byte_end":717739,"line_start":227,"line_end":227,"column_start":1,"column_end":94}},{"value":"/ guarantees about the value still being present. Thus it may return [`None`]","span":{"file_name":"src/liballoc/sync.rs","byte_start":717740,"byte_end":717819,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/ when [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":717820,"byte_end":717909,"line_start":229,"line_end":229,"column_start":1,"column_end":90}},{"value":"/ itself (the backing store) from being deallocated.","span":{"file_name":"src/liballoc/sync.rs","byte_start":717910,"byte_end":717964,"line_start":230,"line_end":230,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":717965,"byte_end":717968,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ A `Weak` pointer is useful for keeping a temporary reference to the allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":717969,"byte_end":718051,"line_start":232,"line_end":232,"column_start":1,"column_end":83}},{"value":"/ managed by [`Arc`] without preventing its inner value from being dropped. It is also used to","span":{"file_name":"src/liballoc/sync.rs","byte_start":718052,"byte_end":718148,"line_start":233,"line_end":233,"column_start":1,"column_end":97}},{"value":"/ prevent circular references between [`Arc`] pointers, since mutual owning references","span":{"file_name":"src/liballoc/sync.rs","byte_start":718149,"byte_end":718237,"line_start":234,"line_end":234,"column_start":1,"column_end":89}},{"value":"/ would never allow either [`Arc`] to be dropped. For example, a tree could","span":{"file_name":"src/liballoc/sync.rs","byte_start":718238,"byte_end":718315,"line_start":235,"line_end":235,"column_start":1,"column_end":78}},{"value":"/ have strong [`Arc`] pointers from parent nodes to children, and `Weak`","span":{"file_name":"src/liballoc/sync.rs","byte_start":718316,"byte_end":718390,"line_start":236,"line_end":236,"column_start":1,"column_end":75}},{"value":"/ pointers from children back to their parents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":718391,"byte_end":718440,"line_start":237,"line_end":237,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":718441,"byte_end":718444,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ The typical way to obtain a `Weak` pointer is to call [`Arc::downgrade`].","span":{"file_name":"src/liballoc/sync.rs","byte_start":718445,"byte_end":718522,"line_start":239,"line_end":239,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":718523,"byte_end":718526,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ [`Arc`]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":718527,"byte_end":718555,"line_start":241,"line_end":241,"column_start":1,"column_end":29}},{"value":"/ [`Arc::downgrade`]: struct.Arc.html#method.downgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":718556,"byte_end":718612,"line_start":242,"line_end":242,"column_start":1,"column_end":57}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":718613,"byte_end":718661,"line_start":243,"line_end":243,"column_start":1,"column_end":49}},{"value":"/ [`Option`]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":718662,"byte_end":718711,"line_start":244,"line_end":244,"column_start":1,"column_end":50}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":718712,"byte_end":718772,"line_start":245,"line_end":245,"column_start":1,"column_end":61}},{"value":"stable(feature = \"arc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":718773,"byte_end":718821,"line_start":246,"line_end":246,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3649},"span":{"file_name":"src/liballoc/sync.rs","byte_start":720604,"byte_end":720607,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"new","qualname":"<Arc<T>>::new","value":"fn (data: T) -> Arc<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Arc<T>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Arc<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":720371,"byte_end":720401,"line_start":288,"line_end":288,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":720406,"byte_end":720409,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":720414,"byte_end":720428,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":720433,"byte_end":720436,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":720441,"byte_end":720448,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":720453,"byte_end":720476,"line_start":293,"line_end":293,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":720481,"byte_end":720484,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":720489,"byte_end":720516,"line_start":295,"line_end":295,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":720521,"byte_end":720528,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":720533,"byte_end":720542,"line_start":297,"line_end":297,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":720547,"byte_end":720592,"line_start":298,"line_end":298,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3650},"span":{"file_name":"src/liballoc/sync.rs","byte_start":721593,"byte_end":721603,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"new_uninit","qualname":"<Arc<T>>::new_uninit","value":"fn () -> Arc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Arc` with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new `Arc` with uninitialized contents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":721014,"byte_end":721069,"line_start":310,"line_end":310,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721074,"byte_end":721077,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":721082,"byte_end":721096,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721101,"byte_end":721104,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":721109,"byte_end":721116,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":721121,"byte_end":721148,"line_start":315,"line_end":315,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":721153,"byte_end":721187,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721192,"byte_end":721195,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":721200,"byte_end":721223,"line_start":318,"line_end":318,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721228,"byte_end":721231,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ let mut five = Arc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/sync.rs","byte_start":721236,"byte_end":721280,"line_start":320,"line_end":320,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721285,"byte_end":721288,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":721293,"byte_end":721316,"line_start":322,"line_end":322,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":721321,"byte_end":721356,"line_start":323,"line_end":323,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":721361,"byte_end":721425,"line_start":324,"line_end":324,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721430,"byte_end":721433,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":721438,"byte_end":721464,"line_start":326,"line_end":326,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":721469,"byte_end":721475,"line_start":327,"line_end":327,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721480,"byte_end":721483,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/sync.rs","byte_start":721488,"byte_end":721512,"line_start":329,"line_end":329,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":721517,"byte_end":721524,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":721529,"byte_end":721581,"line_start":331,"line_end":331,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":"src/liballoc/sync.rs","byte_start":722468,"byte_end":722478,"line_start":361,"line_end":361,"column_start":12,"column_end":22},"name":"new_zeroed","qualname":"<Arc<T>>::new_zeroed","value":"fn () -> Arc<mem::MaybeUninit<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Arc` with uninitialized contents, with the memory\n being filled with `0` bytes.","sig":null,"attributes":[{"value":"/ Constructs a new `Arc` with uninitialized contents, with the memory","span":{"file_name":"src/liballoc/sync.rs","byte_start":721827,"byte_end":721898,"line_start":340,"line_end":340,"column_start":5,"column_end":76}},{"value":"/ being filled with `0` bytes.","span":{"file_name":"src/liballoc/sync.rs","byte_start":721903,"byte_end":721935,"line_start":341,"line_end":341,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":721940,"byte_end":721943,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage","span":{"file_name":"src/liballoc/sync.rs","byte_start":721948,"byte_end":722031,"line_start":343,"line_end":343,"column_start":5,"column_end":88}},{"value":"/ of this method.","span":{"file_name":"src/liballoc/sync.rs","byte_start":722036,"byte_end":722055,"line_start":344,"line_end":344,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":722060,"byte_end":722063,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":722068,"byte_end":722082,"line_start":346,"line_end":346,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":722087,"byte_end":722090,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":722095,"byte_end":722102,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":722107,"byte_end":722134,"line_start":349,"line_end":349,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":722139,"byte_end":722142,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":722147,"byte_end":722170,"line_start":351,"line_end":351,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":722175,"byte_end":722178,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ let zero = Arc::<u32>::new_zeroed();","span":{"file_name":"src/liballoc/sync.rs","byte_start":722183,"byte_end":722223,"line_start":353,"line_end":353,"column_start":5,"column_end":45}},{"value":"/ let zero = unsafe { zero.assume_init() };","span":{"file_name":"src/liballoc/sync.rs","byte_start":722228,"byte_end":722273,"line_start":354,"line_end":354,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":722278,"byte_end":722281,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*zero, 0)","span":{"file_name":"src/liballoc/sync.rs","byte_start":722286,"byte_end":722310,"line_start":356,"line_end":356,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":722315,"byte_end":722322,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":722327,"byte_end":722330,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed","span":{"file_name":"src/liballoc/sync.rs","byte_start":722335,"byte_end":722399,"line_start":359,"line_end":359,"column_start":5,"column_end":69}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":722404,"byte_end":722456,"line_start":360,"line_end":360,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3653},"span":{"file_name":"src/liballoc/sync.rs","byte_start":722908,"byte_end":722911,"line_start":372,"line_end":372,"column_start":12,"column_end":15},"name":"pin","qualname":"<Arc<T>>::pin","value":"fn (data: T) -> Pin<Arc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n `data` will be pinned in memory and unable to be moved.\n","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then","span":{"file_name":"src/liballoc/sync.rs","byte_start":722708,"byte_end":722783,"line_start":369,"line_end":369,"column_start":5,"column_end":80}},{"value":"/ `data` will be pinned in memory and unable to be moved.","span":{"file_name":"src/liballoc/sync.rs","byte_start":722788,"byte_end":722847,"line_start":370,"line_end":370,"column_start":5,"column_end":64}},{"value":"stable(feature = \"pin\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":722852,"byte_end":722896,"line_start":371,"line_end":371,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3654},"span":{"file_name":"src/liballoc/sync.rs","byte_start":723704,"byte_end":723714,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<Arc<T>>::try_unwrap","value":"fn (this: Self) -> Result<T, Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner value, if the `Arc` has exactly one strong reference.","sig":null,"attributes":[{"value":"/ Returns the inner value, if the `Arc` has exactly one strong reference.","span":{"file_name":"src/liballoc/sync.rs","byte_start":723003,"byte_end":723078,"line_start":376,"line_end":376,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":723083,"byte_end":723086,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Otherwise, an [`Err`][result] is returned with the same `Arc` that was","span":{"file_name":"src/liballoc/sync.rs","byte_start":723091,"byte_end":723165,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ passed in.","span":{"file_name":"src/liballoc/sync.rs","byte_start":723170,"byte_end":723184,"line_start":379,"line_end":379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":723189,"byte_end":723192,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This will succeed even if there are outstanding weak references.","span":{"file_name":"src/liballoc/sync.rs","byte_start":723197,"byte_end":723265,"line_start":381,"line_end":381,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":723270,"byte_end":723273,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ [result]: ../../std/result/enum.Result.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":723278,"byte_end":723325,"line_start":383,"line_end":383,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":723330,"byte_end":723333,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":723338,"byte_end":723352,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":723357,"byte_end":723360,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":723365,"byte_end":723372,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":723377,"byte_end":723400,"line_start":388,"line_end":388,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":723405,"byte_end":723408,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":723413,"byte_end":723437,"line_start":390,"line_end":390,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Arc::try_unwrap(x), Ok(3));","span":{"file_name":"src/liballoc/sync.rs","byte_start":723442,"byte_end":723484,"line_start":391,"line_end":391,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":723489,"byte_end":723492,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(4);","span":{"file_name":"src/liballoc/sync.rs","byte_start":723497,"byte_end":723521,"line_start":393,"line_end":393,"column_start":5,"column_end":29}},{"value":"/ let _y = Arc::clone(&x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":723526,"byte_end":723554,"line_start":394,"line_end":394,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(*Arc::try_unwrap(x).unwrap_err(), 4);","span":{"file_name":"src/liballoc/sync.rs","byte_start":723559,"byte_end":723611,"line_start":395,"line_end":395,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":723616,"byte_end":723623,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":723628,"byte_end":723637,"line_start":397,"line_end":397,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":723642,"byte_end":723692,"line_start":398,"line_end":398,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3657},"span":{"file_name":"src/liballoc/sync.rs","byte_start":725044,"byte_end":725060,"line_start":444,"line_end":444,"column_start":12,"column_end":28},"name":"new_uninit_slice","qualname":"<Arc<[T]>>::new_uninit_slice","value":"fn (len: usize) -> Arc<[mem::MaybeUninit<T>]>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new reference-counted slice with uninitialized contents.","sig":null,"attributes":[{"value":"/ Constructs a new reference-counted slice with uninitialized contents.","span":{"file_name":"src/liballoc/sync.rs","byte_start":724269,"byte_end":724342,"line_start":420,"line_end":420,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":724347,"byte_end":724350,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":724355,"byte_end":724369,"line_start":422,"line_end":422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":724374,"byte_end":724377,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":724382,"byte_end":724389,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":724394,"byte_end":724421,"line_start":425,"line_end":425,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":724426,"byte_end":724460,"line_start":426,"line_end":426,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":724465,"byte_end":724468,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":724473,"byte_end":724496,"line_start":428,"line_end":428,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":724501,"byte_end":724504,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let mut values = Arc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":724509,"byte_end":724564,"line_start":430,"line_end":430,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":724569,"byte_end":724572,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":724577,"byte_end":724602,"line_start":432,"line_end":432,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":724607,"byte_end":724642,"line_start":433,"line_end":433,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/sync.rs","byte_start":724647,"byte_end":724716,"line_start":434,"line_end":434,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/sync.rs","byte_start":724721,"byte_end":724790,"line_start":435,"line_end":435,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":724795,"byte_end":724864,"line_start":436,"line_end":436,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":724869,"byte_end":724872,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":724877,"byte_end":724905,"line_start":438,"line_end":438,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":724910,"byte_end":724916,"line_start":439,"line_end":439,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":724921,"byte_end":724924,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/sync.rs","byte_start":724929,"byte_end":724963,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":724968,"byte_end":724975,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":724980,"byte_end":725032,"line_start":443,"line_end":443,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":"src/liballoc/sync.rs","byte_start":726187,"byte_end":726198,"line_start":483,"line_end":483,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Arc<mem::MaybeUninit<T>>>::assume_init","value":"fn (self) -> Arc<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Arc<T>`.","sig":null,"attributes":[{"value":"/ Converts to `Arc<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":725216,"byte_end":725241,"line_start":450,"line_end":450,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725246,"byte_end":725249,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":725254,"byte_end":725266,"line_start":452,"line_end":452,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725271,"byte_end":725274,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/sync.rs","byte_start":725279,"byte_end":725320,"line_start":454,"line_end":454,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/sync.rs","byte_start":725325,"byte_end":725385,"line_start":455,"line_end":455,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/sync.rs","byte_start":725390,"byte_end":725428,"line_start":456,"line_end":456,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/sync.rs","byte_start":725433,"byte_end":725495,"line_start":457,"line_end":457,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/sync.rs","byte_start":725500,"byte_end":725540,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725545,"byte_end":725548,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/sync.rs","byte_start":725553,"byte_end":725642,"line_start":460,"line_end":460,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725647,"byte_end":725650,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":725655,"byte_end":725669,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725674,"byte_end":725677,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":725682,"byte_end":725689,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":725694,"byte_end":725721,"line_start":465,"line_end":465,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":725726,"byte_end":725760,"line_start":466,"line_end":466,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725765,"byte_end":725768,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":725773,"byte_end":725796,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725801,"byte_end":725804,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ let mut five = Arc::<u32>::new_uninit();","span":{"file_name":"src/liballoc/sync.rs","byte_start":725809,"byte_end":725853,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":725858,"byte_end":725861,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ let five = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":725866,"byte_end":725889,"line_start":472,"line_end":472,"column_start":5,"column_end":28}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":725894,"byte_end":725929,"line_start":473,"line_end":473,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut five).as_mut_ptr().write(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":725934,"byte_end":725998,"line_start":474,"line_end":474,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726003,"byte_end":726006,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/     five.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":726011,"byte_end":726037,"line_start":476,"line_end":476,"column_start":5,"column_end":31}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":726042,"byte_end":726048,"line_start":477,"line_end":477,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726053,"byte_end":726056,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*five, 5)","span":{"file_name":"src/liballoc/sync.rs","byte_start":726061,"byte_end":726085,"line_start":479,"line_end":479,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":726090,"byte_end":726097,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":726102,"byte_end":726154,"line_start":481,"line_end":481,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":726159,"byte_end":726168,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3663},"span":{"file_name":"src/liballoc/sync.rs","byte_start":727483,"byte_end":727494,"line_start":524,"line_end":524,"column_start":19,"column_end":30},"name":"assume_init","qualname":"<Arc<[mem::MaybeUninit<T>]>>::assume_init","value":"fn (self) -> Arc<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts to `Arc<[T]>`.","sig":null,"attributes":[{"value":"/ Converts to `Arc<[T]>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":726332,"byte_end":726359,"line_start":489,"line_end":489,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726364,"byte_end":726367,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":726372,"byte_end":726384,"line_start":491,"line_end":491,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726389,"byte_end":726392,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ As with [`MaybeUninit::assume_init`],","span":{"file_name":"src/liballoc/sync.rs","byte_start":726397,"byte_end":726438,"line_start":493,"line_end":493,"column_start":5,"column_end":46}},{"value":"/ it is up to the caller to guarantee that the inner value","span":{"file_name":"src/liballoc/sync.rs","byte_start":726443,"byte_end":726503,"line_start":494,"line_end":494,"column_start":5,"column_end":65}},{"value":"/ really is in an initialized state.","span":{"file_name":"src/liballoc/sync.rs","byte_start":726508,"byte_end":726546,"line_start":495,"line_end":495,"column_start":5,"column_end":43}},{"value":"/ Calling this when the content is not yet fully initialized","span":{"file_name":"src/liballoc/sync.rs","byte_start":726551,"byte_end":726613,"line_start":496,"line_end":496,"column_start":5,"column_end":67}},{"value":"/ causes immediate undefined behavior.","span":{"file_name":"src/liballoc/sync.rs","byte_start":726618,"byte_end":726658,"line_start":497,"line_end":497,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726663,"byte_end":726666,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ [`MaybeUninit::assume_init`]: ../../std/mem/union.MaybeUninit.html#method.assume_init","span":{"file_name":"src/liballoc/sync.rs","byte_start":726671,"byte_end":726760,"line_start":499,"line_end":499,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726765,"byte_end":726768,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":726773,"byte_end":726787,"line_start":501,"line_end":501,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726792,"byte_end":726795,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":726800,"byte_end":726807,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/ #![feature(new_uninit)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":726812,"byte_end":726839,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":726844,"byte_end":726878,"line_start":505,"line_end":505,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726883,"byte_end":726886,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":726891,"byte_end":726914,"line_start":507,"line_end":507,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726919,"byte_end":726922,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ let mut values = Arc::<[u32]>::new_uninit_slice(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":726927,"byte_end":726982,"line_start":509,"line_end":509,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":726987,"byte_end":726990,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let values = unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":726995,"byte_end":727020,"line_start":511,"line_end":511,"column_start":5,"column_end":30}},{"value":"/     // Deferred initialization:","span":{"file_name":"src/liballoc/sync.rs","byte_start":727025,"byte_end":727060,"line_start":512,"line_end":512,"column_start":5,"column_end":40}},{"value":"/     Arc::get_mut_unchecked(&mut values)[0].as_mut_ptr().write(1);","span":{"file_name":"src/liballoc/sync.rs","byte_start":727065,"byte_end":727134,"line_start":513,"line_end":513,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[1].as_mut_ptr().write(2);","span":{"file_name":"src/liballoc/sync.rs","byte_start":727139,"byte_end":727208,"line_start":514,"line_end":514,"column_start":5,"column_end":74}},{"value":"/     Arc::get_mut_unchecked(&mut values)[2].as_mut_ptr().write(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":727213,"byte_end":727282,"line_start":515,"line_end":515,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727287,"byte_end":727290,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/     values.assume_init()","span":{"file_name":"src/liballoc/sync.rs","byte_start":727295,"byte_end":727323,"line_start":517,"line_end":517,"column_start":5,"column_end":33}},{"value":"/ };","span":{"file_name":"src/liballoc/sync.rs","byte_start":727328,"byte_end":727334,"line_start":518,"line_end":518,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727339,"byte_end":727342,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*values, [1, 2, 3])","span":{"file_name":"src/liballoc/sync.rs","byte_start":727347,"byte_end":727381,"line_start":520,"line_end":520,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":727386,"byte_end":727393,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"new_uninit\", issue = \"63291\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":727398,"byte_end":727450,"line_start":522,"line_end":522,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":727455,"byte_end":727464,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3666},"span":{"file_name":"src/liballoc/sync.rs","byte_start":728158,"byte_end":728166,"line_start":547,"line_end":547,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Arc<T>>::into_raw","value":"fn (this: Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Arc`, returning the wrapped pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Arc`, returning the wrapped pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":727623,"byte_end":727677,"line_start":530,"line_end":530,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727682,"byte_end":727685,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ To avoid a memory leak the pointer must be converted back to an `Arc` using","span":{"file_name":"src/liballoc/sync.rs","byte_start":727690,"byte_end":727769,"line_start":532,"line_end":532,"column_start":5,"column_end":84}},{"value":"/ [`Arc::from_raw`][from_raw].","span":{"file_name":"src/liballoc/sync.rs","byte_start":727774,"byte_end":727806,"line_start":533,"line_end":533,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727811,"byte_end":727814,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ [from_raw]: struct.Arc.html#method.from_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":727819,"byte_end":727866,"line_start":535,"line_end":535,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727871,"byte_end":727874,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":727879,"byte_end":727893,"line_start":537,"line_end":537,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727898,"byte_end":727901,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":727906,"byte_end":727913,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":727918,"byte_end":727941,"line_start":540,"line_end":540,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":727946,"byte_end":727949,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":727954,"byte_end":727995,"line_start":542,"line_end":542,"column_start":5,"column_end":46}},{"value":"/ let x_ptr = Arc::into_raw(x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":728000,"byte_end":728033,"line_start":543,"line_end":543,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(unsafe { &*x_ptr }, \"hello\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":728038,"byte_end":728082,"line_start":544,"line_end":544,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":728087,"byte_end":728094,"line_start":545,"line_end":545,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":728099,"byte_end":728146,"line_start":546,"line_end":546,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3667},"span":{"file_name":"src/liballoc/sync.rs","byte_start":729880,"byte_end":729888,"line_start":592,"line_end":592,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Arc<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an `Arc` from a raw pointer.","sig":null,"attributes":[{"value":"/ Constructs an `Arc` from a raw pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":728855,"byte_end":728898,"line_start":563,"line_end":563,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":728903,"byte_end":728906,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ The raw pointer must have been previously returned by a call to a","span":{"file_name":"src/liballoc/sync.rs","byte_start":728911,"byte_end":728980,"line_start":565,"line_end":565,"column_start":5,"column_end":74}},{"value":"/ [`Arc::into_raw`][into_raw].","span":{"file_name":"src/liballoc/sync.rs","byte_start":728985,"byte_end":729017,"line_start":566,"line_end":566,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729022,"byte_end":729025,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because improper use may lead to memory problems. For example, a","span":{"file_name":"src/liballoc/sync.rs","byte_start":729030,"byte_end":729122,"line_start":568,"line_end":568,"column_start":5,"column_end":97}},{"value":"/ double-free may occur if the function is called twice on the same raw pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":729127,"byte_end":729209,"line_start":569,"line_end":569,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729214,"byte_end":729217,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ [into_raw]: struct.Arc.html#method.into_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":729222,"byte_end":729269,"line_start":571,"line_end":571,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729274,"byte_end":729277,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":729282,"byte_end":729296,"line_start":573,"line_end":573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729301,"byte_end":729304,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":729309,"byte_end":729316,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":729321,"byte_end":729344,"line_start":576,"line_end":576,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729349,"byte_end":729352,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":729357,"byte_end":729398,"line_start":578,"line_end":578,"column_start":5,"column_end":46}},{"value":"/ let x_ptr = Arc::into_raw(x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":729403,"byte_end":729436,"line_start":579,"line_end":579,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729441,"byte_end":729444,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":729449,"byte_end":729461,"line_start":581,"line_end":581,"column_start":5,"column_end":17}},{"value":"/     // Convert back to an `Arc` to prevent leak.","span":{"file_name":"src/liballoc/sync.rs","byte_start":729466,"byte_end":729518,"line_start":582,"line_end":582,"column_start":5,"column_end":57}},{"value":"/     let x = Arc::from_raw(x_ptr);","span":{"file_name":"src/liballoc/sync.rs","byte_start":729523,"byte_end":729560,"line_start":583,"line_end":583,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(&*x, \"hello\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":729565,"byte_end":729598,"line_start":584,"line_end":584,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729603,"byte_end":729606,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/     // Further calls to `Arc::from_raw(x_ptr)` would be memory-unsafe.","span":{"file_name":"src/liballoc/sync.rs","byte_start":729611,"byte_end":729685,"line_start":586,"line_end":586,"column_start":5,"column_end":79}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":729690,"byte_end":729695,"line_start":587,"line_end":587,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":729700,"byte_end":729703,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ // The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!","span":{"file_name":"src/liballoc/sync.rs","byte_start":729708,"byte_end":729797,"line_start":589,"line_end":589,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":729802,"byte_end":729809,"line_start":590,"line_end":590,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rc_raw\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":729814,"byte_end":729861,"line_start":591,"line_end":591,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3668},"span":{"file_name":"src/liballoc/sync.rs","byte_start":730667,"byte_end":730684,"line_start":618,"line_end":618,"column_start":12,"column_end":29},"name":"into_raw_non_null","qualname":"<Arc<T>>::into_raw_non_null","value":"fn (this: Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.","sig":null,"attributes":[{"value":"/ Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":730187,"byte_end":730257,"line_start":602,"line_end":602,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730262,"byte_end":730265,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":730270,"byte_end":730284,"line_start":604,"line_end":604,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730289,"byte_end":730292,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":730297,"byte_end":730304,"line_start":606,"line_end":606,"column_start":5,"column_end":12}},{"value":"/ #![feature(rc_into_raw_non_null)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":730309,"byte_end":730346,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730351,"byte_end":730354,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":730359,"byte_end":730382,"line_start":609,"line_end":609,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730387,"byte_end":730390,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ let x = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":730395,"byte_end":730436,"line_start":611,"line_end":611,"column_start":5,"column_end":46}},{"value":"/ let ptr = Arc::into_raw_non_null(x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":730441,"byte_end":730481,"line_start":612,"line_end":612,"column_start":5,"column_end":45}},{"value":"/ let deref = unsafe { ptr.as_ref() };","span":{"file_name":"src/liballoc/sync.rs","byte_start":730486,"byte_end":730526,"line_start":613,"line_end":613,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(deref, \"hello\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":730531,"byte_end":730562,"line_start":614,"line_end":614,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":730567,"byte_end":730574,"line_start":615,"line_end":615,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":730579,"byte_end":730641,"line_start":616,"line_end":616,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":730646,"byte_end":730655,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3669},"span":{"file_name":"src/liballoc/sync.rs","byte_start":731208,"byte_end":731217,"line_start":637,"line_end":637,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<Arc<T>>::downgrade","value":"fn (this: &Self) -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Weak`][weak] pointer to this allocation.","sig":null,"attributes":[{"value":"/ Creates a new [`Weak`][weak] pointer to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":730860,"byte_end":730920,"line_start":623,"line_end":623,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730925,"byte_end":730928,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":730933,"byte_end":730961,"line_start":625,"line_end":625,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730966,"byte_end":730969,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":730974,"byte_end":730988,"line_start":627,"line_end":627,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":730993,"byte_end":730996,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":731001,"byte_end":731008,"line_start":629,"line_end":629,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":731013,"byte_end":731036,"line_start":630,"line_end":630,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":731041,"byte_end":731044,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":731049,"byte_end":731076,"line_start":632,"line_end":632,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":731081,"byte_end":731084,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Arc::downgrade(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":731089,"byte_end":731131,"line_start":634,"line_end":634,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":731136,"byte_end":731143,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"stable(feature = \"arc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":731148,"byte_end":731196,"line_start":636,"line_end":636,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3670},"span":{"file_name":"src/liballoc/sync.rs","byte_start":733215,"byte_end":733225,"line_start":691,"line_end":691,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Arc<T>>::weak_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of [`Weak`][weak] pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of [`Weak`][weak] pointers to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":732417,"byte_end":732483,"line_start":667,"line_end":667,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732488,"byte_end":732491,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":732496,"byte_end":732524,"line_start":669,"line_end":669,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732529,"byte_end":732532,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":732537,"byte_end":732549,"line_start":671,"line_end":671,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732554,"byte_end":732557,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ This method by itself is safe, but using it correctly requires extra care.","span":{"file_name":"src/liballoc/sync.rs","byte_start":732562,"byte_end":732640,"line_start":673,"line_end":673,"column_start":5,"column_end":83}},{"value":"/ Another thread can change the weak count at any time,","span":{"file_name":"src/liballoc/sync.rs","byte_start":732645,"byte_end":732702,"line_start":674,"line_end":674,"column_start":5,"column_end":62}},{"value":"/ including potentially between calling this method and acting on the result.","span":{"file_name":"src/liballoc/sync.rs","byte_start":732707,"byte_end":732786,"line_start":675,"line_end":675,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732791,"byte_end":732794,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":732799,"byte_end":732813,"line_start":677,"line_end":677,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732818,"byte_end":732821,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":732826,"byte_end":732833,"line_start":679,"line_end":679,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":732838,"byte_end":732861,"line_start":680,"line_end":680,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732866,"byte_end":732869,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":732874,"byte_end":732901,"line_start":682,"line_end":682,"column_start":5,"column_end":32}},{"value":"/ let _weak_five = Arc::downgrade(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":732906,"byte_end":732949,"line_start":683,"line_end":683,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":732954,"byte_end":732957,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ // This assertion is deterministic because we haven't shared","span":{"file_name":"src/liballoc/sync.rs","byte_start":732962,"byte_end":733026,"line_start":685,"line_end":685,"column_start":5,"column_end":69}},{"value":"/ // the `Arc` or `Weak` between threads.","span":{"file_name":"src/liballoc/sync.rs","byte_start":733031,"byte_end":733074,"line_start":686,"line_end":686,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(1, Arc::weak_count(&five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":733079,"byte_end":733121,"line_start":687,"line_end":687,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":733126,"byte_end":733133,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":733138,"byte_end":733147,"line_start":689,"line_end":689,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":733152,"byte_end":733203,"line_start":690,"line_end":690,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3671},"span":{"file_name":"src/liballoc/sync.rs","byte_start":734229,"byte_end":734241,"line_start":720,"line_end":720,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Arc<T>>::strong_count","value":"fn (this: &Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Arc`) pointers to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Arc`) pointers to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":733482,"byte_end":733548,"line_start":698,"line_end":698,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733553,"byte_end":733556,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":733561,"byte_end":733573,"line_start":700,"line_end":700,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733578,"byte_end":733581,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ This method by itself is safe, but using it correctly requires extra care.","span":{"file_name":"src/liballoc/sync.rs","byte_start":733586,"byte_end":733664,"line_start":702,"line_end":702,"column_start":5,"column_end":83}},{"value":"/ Another thread can change the strong count at any time,","span":{"file_name":"src/liballoc/sync.rs","byte_start":733669,"byte_end":733728,"line_start":703,"line_end":703,"column_start":5,"column_end":64}},{"value":"/ including potentially between calling this method and acting on the result.","span":{"file_name":"src/liballoc/sync.rs","byte_start":733733,"byte_end":733812,"line_start":704,"line_end":704,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733817,"byte_end":733820,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":733825,"byte_end":733839,"line_start":706,"line_end":706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733844,"byte_end":733847,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":733852,"byte_end":733859,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":733864,"byte_end":733887,"line_start":709,"line_end":709,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733892,"byte_end":733895,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":733900,"byte_end":733927,"line_start":711,"line_end":711,"column_start":5,"column_end":32}},{"value":"/ let _also_five = Arc::clone(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":733932,"byte_end":733971,"line_start":712,"line_end":712,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":733976,"byte_end":733979,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ // This assertion is deterministic because we haven't shared","span":{"file_name":"src/liballoc/sync.rs","byte_start":733984,"byte_end":734048,"line_start":714,"line_end":714,"column_start":5,"column_end":69}},{"value":"/ // the `Arc` between threads.","span":{"file_name":"src/liballoc/sync.rs","byte_start":734053,"byte_end":734086,"line_start":715,"line_end":715,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(2, Arc::strong_count(&five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":734091,"byte_end":734135,"line_start":716,"line_end":716,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":734140,"byte_end":734147,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":734152,"byte_end":734161,"line_start":718,"line_end":718,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_counts\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":734166,"byte_end":734217,"line_start":719,"line_end":719,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3674},"span":{"file_name":"src/liballoc/sync.rs","byte_start":735802,"byte_end":735808,"line_start":766,"line_end":766,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Arc<T>>::ptr_eq","value":"fn (this: &Self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Arc`s point to the same allocation\n (in a vein similar to [`ptr::eq`]).","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":735245,"byte_end":735254,"line_start":747,"line_end":747,"column_start":5,"column_end":14}},{"value":"stable(feature = \"ptr_eq\", since = \"1.17.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":735259,"byte_end":735306,"line_start":748,"line_end":748,"column_start":5,"column_end":52}},{"value":"/ Returns `true` if the two `Arc`s point to the same allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":735311,"byte_end":735376,"line_start":749,"line_end":749,"column_start":5,"column_end":70}},{"value":"/ (in a vein similar to [`ptr::eq`]).","span":{"file_name":"src/liballoc/sync.rs","byte_start":735381,"byte_end":735420,"line_start":750,"line_end":750,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735425,"byte_end":735428,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":735433,"byte_end":735447,"line_start":752,"line_end":752,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735452,"byte_end":735455,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":735460,"byte_end":735467,"line_start":754,"line_end":754,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":735472,"byte_end":735495,"line_start":755,"line_end":755,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735500,"byte_end":735503,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":735508,"byte_end":735535,"line_start":757,"line_end":757,"column_start":5,"column_end":32}},{"value":"/ let same_five = Arc::clone(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":735540,"byte_end":735578,"line_start":758,"line_end":758,"column_start":5,"column_end":43}},{"value":"/ let other_five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":735583,"byte_end":735616,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735621,"byte_end":735624,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ assert!(Arc::ptr_eq(&five, &same_five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":735629,"byte_end":735673,"line_start":761,"line_end":761,"column_start":5,"column_end":49}},{"value":"/ assert!(!Arc::ptr_eq(&five, &other_five));","span":{"file_name":"src/liballoc/sync.rs","byte_start":735678,"byte_end":735724,"line_start":762,"line_end":762,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":735729,"byte_end":735736,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":735741,"byte_end":735744,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":735749,"byte_end":735790,"line_start":765,"line_end":765,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3706},"span":{"file_name":"src/liballoc/sync.rs","byte_start":740804,"byte_end":740814,"line_start":909,"line_end":909,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::sync::ArcFromSlice::from_slice","value":"fn (slice: &[T]) -> Self","parent":{"krate":0,"index":3704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3724},"span":{"file_name":"src/liballoc/sync.rs","byte_start":744834,"byte_end":744842,"line_start":1025,"line_end":1025,"column_start":12,"column_end":20},"name":"make_mut","qualname":"<Arc<T>>::make_mut","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Makes a mutable reference into the given `Arc`.","sig":null,"attributes":[{"value":"/ Makes a mutable reference into the given `Arc`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":743347,"byte_end":743398,"line_start":990,"line_end":990,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743403,"byte_end":743406,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ If there are other `Arc` or [`Weak`][weak] pointers to the same allocation,","span":{"file_name":"src/liballoc/sync.rs","byte_start":743411,"byte_end":743490,"line_start":992,"line_end":992,"column_start":5,"column_end":84}},{"value":"/ then `make_mut` will create a new allocation and invoke [`clone`][clone] on the inner value","span":{"file_name":"src/liballoc/sync.rs","byte_start":743495,"byte_end":743590,"line_start":993,"line_end":993,"column_start":5,"column_end":100}},{"value":"/ to ensure unique ownership. This is also referred to as clone-on-write.","span":{"file_name":"src/liballoc/sync.rs","byte_start":743595,"byte_end":743670,"line_start":994,"line_end":994,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743675,"byte_end":743678,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Note that this differs from the behavior of [`Rc::make_mut`] which disassociates","span":{"file_name":"src/liballoc/sync.rs","byte_start":743683,"byte_end":743767,"line_start":996,"line_end":996,"column_start":5,"column_end":89}},{"value":"/ any remaining `Weak` pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":743772,"byte_end":743806,"line_start":997,"line_end":997,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743811,"byte_end":743814,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`][get_mut], which will fail rather than cloning.","span":{"file_name":"src/liballoc/sync.rs","byte_start":743819,"byte_end":743890,"line_start":999,"line_end":999,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":743895,"byte_end":743898,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":743903,"byte_end":743931,"line_start":1001,"line_end":1001,"column_start":5,"column_end":33}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":743936,"byte_end":743996,"line_start":1002,"line_end":1002,"column_start":5,"column_end":65}},{"value":"/ [get_mut]: struct.Arc.html#method.get_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":744001,"byte_end":744046,"line_start":1003,"line_end":1003,"column_start":5,"column_end":50}},{"value":"/ [`Rc::make_mut`]: ../rc/struct.Rc.html#method.make_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":744051,"byte_end":744109,"line_start":1004,"line_end":1004,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744114,"byte_end":744117,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":744122,"byte_end":744136,"line_start":1006,"line_end":1006,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744141,"byte_end":744144,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":744149,"byte_end":744156,"line_start":1008,"line_end":1008,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":744161,"byte_end":744184,"line_start":1009,"line_end":1009,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744189,"byte_end":744192,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ let mut data = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":744197,"byte_end":744228,"line_start":1011,"line_end":1011,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744233,"byte_end":744236,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ *Arc::make_mut(&mut data) += 1;         // Won't clone anything","span":{"file_name":"src/liballoc/sync.rs","byte_start":744241,"byte_end":744308,"line_start":1013,"line_end":1013,"column_start":5,"column_end":72}},{"value":"/ let mut other_data = Arc::clone(&data); // Won't clone inner data","span":{"file_name":"src/liballoc/sync.rs","byte_start":744313,"byte_end":744382,"line_start":1014,"line_end":1014,"column_start":5,"column_end":74}},{"value":"/ *Arc::make_mut(&mut data) += 1;         // Clones inner data","span":{"file_name":"src/liballoc/sync.rs","byte_start":744387,"byte_end":744451,"line_start":1015,"line_end":1015,"column_start":5,"column_end":69}},{"value":"/ *Arc::make_mut(&mut data) += 1;         // Won't clone anything","span":{"file_name":"src/liballoc/sync.rs","byte_start":744456,"byte_end":744523,"line_start":1016,"line_end":1016,"column_start":5,"column_end":72}},{"value":"/ *Arc::make_mut(&mut other_data) *= 2;   // Won't clone anything","span":{"file_name":"src/liballoc/sync.rs","byte_start":744528,"byte_end":744595,"line_start":1017,"line_end":1017,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":744600,"byte_end":744603,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ // Now `data` and `other_data` point to different allocations.","span":{"file_name":"src/liballoc/sync.rs","byte_start":744608,"byte_end":744674,"line_start":1019,"line_end":1019,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(*data, 8);","span":{"file_name":"src/liballoc/sync.rs","byte_start":744679,"byte_end":744704,"line_start":1020,"line_end":1020,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*other_data, 12);","span":{"file_name":"src/liballoc/sync.rs","byte_start":744709,"byte_end":744741,"line_start":1021,"line_end":1021,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":744746,"byte_end":744753,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":744758,"byte_end":744767,"line_start":1023,"line_end":1023,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":744772,"byte_end":744822,"line_start":1024,"line_end":1024,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3727},"span":{"file_name":"src/liballoc/sync.rs","byte_start":748293,"byte_end":748300,"line_start":1105,"line_end":1105,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Arc<T>>::get_mut","value":"fn (this: &mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Arc`, if there are\n no other `Arc` or [`Weak`][weak] pointers to the same allocation.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Arc`, if there are","span":{"file_name":"src/liballoc/sync.rs","byte_start":747332,"byte_end":747398,"line_start":1077,"line_end":1077,"column_start":5,"column_end":71}},{"value":"/ no other `Arc` or [`Weak`][weak] pointers to the same allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":747403,"byte_end":747472,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747477,"byte_end":747480,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`][option] otherwise, because it is not safe to","span":{"file_name":"src/liballoc/sync.rs","byte_start":747485,"byte_end":747550,"line_start":1080,"line_end":1080,"column_start":5,"column_end":70}},{"value":"/ mutate a shared value.","span":{"file_name":"src/liballoc/sync.rs","byte_start":747555,"byte_end":747581,"line_start":1081,"line_end":1081,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747586,"byte_end":747589,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ See also [`make_mut`][make_mut], which will [`clone`][clone]","span":{"file_name":"src/liballoc/sync.rs","byte_start":747594,"byte_end":747658,"line_start":1083,"line_end":1083,"column_start":5,"column_end":69}},{"value":"/ the inner value when there are other pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":747663,"byte_end":747713,"line_start":1084,"line_end":1084,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747718,"byte_end":747721,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ [weak]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":747726,"byte_end":747754,"line_start":1086,"line_end":1086,"column_start":5,"column_end":33}},{"value":"/ [option]: ../../std/option/enum.Option.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":747759,"byte_end":747806,"line_start":1087,"line_end":1087,"column_start":5,"column_end":52}},{"value":"/ [make_mut]: struct.Arc.html#method.make_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":747811,"byte_end":747858,"line_start":1088,"line_end":1088,"column_start":5,"column_end":52}},{"value":"/ [clone]: ../../std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"src/liballoc/sync.rs","byte_start":747863,"byte_end":747923,"line_start":1089,"line_end":1089,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747928,"byte_end":747931,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":747936,"byte_end":747950,"line_start":1091,"line_end":1091,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":747955,"byte_end":747958,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":747963,"byte_end":747970,"line_start":1093,"line_end":1093,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":747975,"byte_end":747998,"line_start":1094,"line_end":1094,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":748003,"byte_end":748006,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ let mut x = Arc::new(3);","span":{"file_name":"src/liballoc/sync.rs","byte_start":748011,"byte_end":748039,"line_start":1096,"line_end":1096,"column_start":5,"column_end":33}},{"value":"/ *Arc::get_mut(&mut x).unwrap() = 4;","span":{"file_name":"src/liballoc/sync.rs","byte_start":748044,"byte_end":748083,"line_start":1097,"line_end":1097,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(*x, 4);","span":{"file_name":"src/liballoc/sync.rs","byte_start":748088,"byte_end":748110,"line_start":1098,"line_end":1098,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":748115,"byte_end":748118,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ let _y = Arc::clone(&x);","span":{"file_name":"src/liballoc/sync.rs","byte_start":748123,"byte_end":748151,"line_start":1100,"line_end":1100,"column_start":5,"column_end":33}},{"value":"/ assert!(Arc::get_mut(&mut x).is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":748156,"byte_end":748200,"line_start":1101,"line_end":1101,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":748205,"byte_end":748212,"line_start":1102,"line_end":1102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":748217,"byte_end":748226,"line_start":1103,"line_end":1103,"column_start":5,"column_end":14}},{"value":"stable(feature = \"arc_unique\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":748231,"byte_end":748281,"line_start":1104,"line_end":1104,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3728},"span":{"file_name":"src/liballoc/sync.rs","byte_start":749758,"byte_end":749775,"line_start":1147,"line_end":1147,"column_start":19,"column_end":36},"name":"get_mut_unchecked","qualname":"<Arc<T>>::get_mut_unchecked","value":"fn (this: &mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference into the given `Arc`,\n without any check.","sig":null,"attributes":[{"value":"/ Returns a mutable reference into the given `Arc`,","span":{"file_name":"src/liballoc/sync.rs","byte_start":748849,"byte_end":748902,"line_start":1118,"line_end":1118,"column_start":5,"column_end":58}},{"value":"/ without any check.","span":{"file_name":"src/liballoc/sync.rs","byte_start":748907,"byte_end":748929,"line_start":1119,"line_end":1119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":748934,"byte_end":748937,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ See also [`get_mut`], which is safe and does appropriate checks.","span":{"file_name":"src/liballoc/sync.rs","byte_start":748942,"byte_end":749010,"line_start":1121,"line_end":1121,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749015,"byte_end":749018,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: struct.Arc.html#method.get_mut","span":{"file_name":"src/liballoc/sync.rs","byte_start":749023,"byte_end":749070,"line_start":1123,"line_end":1123,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749075,"byte_end":749078,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":749083,"byte_end":749095,"line_start":1125,"line_end":1125,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749100,"byte_end":749103,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ Any other `Arc` or [`Weak`] pointers to the same allocation must not be dereferenced","span":{"file_name":"src/liballoc/sync.rs","byte_start":749108,"byte_end":749196,"line_start":1127,"line_end":1127,"column_start":5,"column_end":93}},{"value":"/ for the duration of the returned borrow.","span":{"file_name":"src/liballoc/sync.rs","byte_start":749201,"byte_end":749245,"line_start":1128,"line_end":1128,"column_start":5,"column_end":49}},{"value":"/ This is trivially the case if no such pointers exist,","span":{"file_name":"src/liballoc/sync.rs","byte_start":749250,"byte_end":749307,"line_start":1129,"line_end":1129,"column_start":5,"column_end":62}},{"value":"/ for example immediately after `Arc::new`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":749312,"byte_end":749357,"line_start":1130,"line_end":1130,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749362,"byte_end":749365,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":749370,"byte_end":749384,"line_start":1132,"line_end":1132,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749389,"byte_end":749392,"line_start":1133,"line_end":1133,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":749397,"byte_end":749404,"line_start":1134,"line_end":1134,"column_start":5,"column_end":12}},{"value":"/ #![feature(get_mut_unchecked)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":749409,"byte_end":749443,"line_start":1135,"line_end":1135,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749448,"byte_end":749451,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":749456,"byte_end":749479,"line_start":1137,"line_end":1137,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":749484,"byte_end":749487,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ let mut x = Arc::new(String::new());","span":{"file_name":"src/liballoc/sync.rs","byte_start":749492,"byte_end":749532,"line_start":1139,"line_end":1139,"column_start":5,"column_end":45}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/sync.rs","byte_start":749537,"byte_end":749549,"line_start":1140,"line_end":1140,"column_start":5,"column_end":17}},{"value":"/     Arc::get_mut_unchecked(&mut x).push_str(\"foo\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":749554,"byte_end":749608,"line_start":1141,"line_end":1141,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":749613,"byte_end":749618,"line_start":1142,"line_end":1142,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(*x, \"foo\");","span":{"file_name":"src/liballoc/sync.rs","byte_start":749623,"byte_end":749649,"line_start":1143,"line_end":1143,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":749654,"byte_end":749661,"line_start":1144,"line_end":1144,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":749666,"byte_end":749675,"line_start":1145,"line_end":1145,"column_start":5,"column_end":14}},{"value":"unstable(feature = \"get_mut_unchecked\", issue = \"63292\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":749680,"byte_end":749739,"line_start":1146,"line_end":1146,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3734},"span":{"file_name":"src/liballoc/sync.rs","byte_start":754877,"byte_end":754885,"line_start":1275,"line_end":1275,"column_start":12,"column_end":20},"name":"downcast","qualname":"<Arc<Any + Send + Sync>>::downcast","value":"fn <T> (self) -> Result<Arc<T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":754235,"byte_end":754244,"line_start":1255,"line_end":1255,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rc_downcast\", since = \"1.29.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":754249,"byte_end":754301,"line_start":1256,"line_end":1256,"column_start":5,"column_end":57}},{"value":"/ Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.","span":{"file_name":"src/liballoc/sync.rs","byte_start":754306,"byte_end":754382,"line_start":1257,"line_end":1257,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":754387,"byte_end":754390,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":754395,"byte_end":754409,"line_start":1259,"line_end":1259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":754414,"byte_end":754417,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":754422,"byte_end":754429,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}},{"value":"/ use std::any::Any;","span":{"file_name":"src/liballoc/sync.rs","byte_start":754434,"byte_end":754456,"line_start":1262,"line_end":1262,"column_start":5,"column_end":27}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":754461,"byte_end":754484,"line_start":1263,"line_end":1263,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":754489,"byte_end":754492,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ fn print_if_string(value: Arc<dyn Any + Send + Sync>) {","span":{"file_name":"src/liballoc/sync.rs","byte_start":754497,"byte_end":754556,"line_start":1265,"line_end":1265,"column_start":5,"column_end":64}},{"value":"/     if let Ok(string) = value.downcast::<String>() {","span":{"file_name":"src/liballoc/sync.rs","byte_start":754561,"byte_end":754617,"line_start":1266,"line_end":1266,"column_start":5,"column_end":61}},{"value":"/         println!(\"String ({}): {}\", string.len(), string);","span":{"file_name":"src/liballoc/sync.rs","byte_start":754622,"byte_end":754684,"line_start":1267,"line_end":1267,"column_start":5,"column_end":67}},{"value":"/     }","span":{"file_name":"src/liballoc/sync.rs","byte_start":754689,"byte_end":754698,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/sync.rs","byte_start":754703,"byte_end":754708,"line_start":1269,"line_end":1269,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":754713,"byte_end":754716,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ let my_string = \"Hello World\".to_string();","span":{"file_name":"src/liballoc/sync.rs","byte_start":754721,"byte_end":754767,"line_start":1271,"line_end":1271,"column_start":5,"column_end":51}},{"value":"/ print_if_string(Arc::new(my_string));","span":{"file_name":"src/liballoc/sync.rs","byte_start":754772,"byte_end":754813,"line_start":1272,"line_end":1272,"column_start":5,"column_end":46}},{"value":"/ print_if_string(Arc::new(0i8));","span":{"file_name":"src/liballoc/sync.rs","byte_start":754818,"byte_end":754853,"line_start":1273,"line_end":1273,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":754858,"byte_end":754865,"line_start":1274,"line_end":1274,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3738},"span":{"file_name":"src/liballoc/sync.rs","byte_start":755724,"byte_end":755727,"line_start":1305,"line_end":1305,"column_start":12,"column_end":15},"name":"new","qualname":"<Weak<T>>::new","value":"fn () -> Weak<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Weak<T>`, without allocating any memory.\n Calling [`upgrade`] on the return value always gives [`None`].","sig":null,"attributes":[{"value":"/ Constructs a new `Weak<T>`, without allocating any memory.","span":{"file_name":"src/liballoc/sync.rs","byte_start":755208,"byte_end":755270,"line_start":1290,"line_end":1290,"column_start":5,"column_end":67}},{"value":"/ Calling [`upgrade`] on the return value always gives [`None`].","span":{"file_name":"src/liballoc/sync.rs","byte_start":755275,"byte_end":755341,"line_start":1291,"line_end":1291,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":755346,"byte_end":755349,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":755354,"byte_end":755402,"line_start":1293,"line_end":1293,"column_start":5,"column_end":53}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":755407,"byte_end":755467,"line_start":1294,"line_end":1294,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":755472,"byte_end":755475,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":755480,"byte_end":755494,"line_start":1296,"line_end":1296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":755499,"byte_end":755502,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":755507,"byte_end":755514,"line_start":1298,"line_end":1298,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Weak;","span":{"file_name":"src/liballoc/sync.rs","byte_start":755519,"byte_end":755543,"line_start":1299,"line_end":1299,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":755548,"byte_end":755551,"line_start":1300,"line_end":1300,"column_start":5,"column_end":8}},{"value":"/ let empty: Weak<i64> = Weak::new();","span":{"file_name":"src/liballoc/sync.rs","byte_start":755556,"byte_end":755595,"line_start":1301,"line_end":1301,"column_start":5,"column_end":44}},{"value":"/ assert!(empty.upgrade().is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":755600,"byte_end":755639,"line_start":1302,"line_end":1302,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":755644,"byte_end":755651,"line_start":1303,"line_end":1303,"column_start":5,"column_end":12}},{"value":"stable(feature = \"downgraded_weak\", since = \"1.10.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":755656,"byte_end":755712,"line_start":1304,"line_end":1304,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3739},"span":{"file_name":"src/liballoc/sync.rs","byte_start":756883,"byte_end":756889,"line_start":1337,"line_end":1337,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<Weak<T>>::as_raw","value":"fn (&self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":755844,"byte_end":755917,"line_start":1309,"line_end":1309,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":755922,"byte_end":755925,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ The pointer is valid only if there are some strong references. The pointer may be dangling","span":{"file_name":"src/liballoc/sync.rs","byte_start":755930,"byte_end":756024,"line_start":1311,"line_end":1311,"column_start":5,"column_end":99}},{"value":"/ or even [`null`] otherwise.","span":{"file_name":"src/liballoc/sync.rs","byte_start":756029,"byte_end":756060,"line_start":1312,"line_end":1312,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":756065,"byte_end":756068,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":756073,"byte_end":756087,"line_start":1314,"line_end":1314,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":756092,"byte_end":756095,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":756100,"byte_end":756107,"line_start":1316,"line_end":1316,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":756112,"byte_end":756142,"line_start":1317,"line_end":1317,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":756147,"byte_end":756150,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":756155,"byte_end":756178,"line_start":1319,"line_end":1319,"column_start":5,"column_end":28}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/sync.rs","byte_start":756183,"byte_end":756200,"line_start":1320,"line_end":1320,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":756205,"byte_end":756208,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ let strong = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":756213,"byte_end":756259,"line_start":1322,"line_end":1322,"column_start":5,"column_end":51}},{"value":"/ let weak = Arc::downgrade(&strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":756264,"byte_end":756303,"line_start":1323,"line_end":1323,"column_start":5,"column_end":44}},{"value":"/ // Both point to the same object","span":{"file_name":"src/liballoc/sync.rs","byte_start":756308,"byte_end":756344,"line_start":1324,"line_end":1324,"column_start":5,"column_end":41}},{"value":"/ assert!(ptr::eq(&*strong, weak.as_raw()));","span":{"file_name":"src/liballoc/sync.rs","byte_start":756349,"byte_end":756395,"line_start":1325,"line_end":1325,"column_start":5,"column_end":51}},{"value":"/ // The strong here keeps it alive, so we can still access the object.","span":{"file_name":"src/liballoc/sync.rs","byte_start":756400,"byte_end":756473,"line_start":1326,"line_end":1326,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/sync.rs","byte_start":756478,"byte_end":756530,"line_start":1327,"line_end":1327,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":756535,"byte_end":756538,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":756543,"byte_end":756560,"line_start":1329,"line_end":1329,"column_start":5,"column_end":22}},{"value":"/ // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to","span":{"file_name":"src/liballoc/sync.rs","byte_start":756565,"byte_end":756654,"line_start":1330,"line_end":1330,"column_start":5,"column_end":94}},{"value":"/ // undefined behaviour.","span":{"file_name":"src/liballoc/sync.rs","byte_start":756659,"byte_end":756686,"line_start":1331,"line_end":1331,"column_start":5,"column_end":32}},{"value":"/ // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });","span":{"file_name":"src/liballoc/sync.rs","byte_start":756691,"byte_end":756746,"line_start":1332,"line_end":1332,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":756751,"byte_end":756758,"line_start":1333,"line_end":1333,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":756763,"byte_end":756766,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ [`null`]: ../../std/ptr/fn.null.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":756771,"byte_end":756811,"line_start":1335,"line_end":1335,"column_start":5,"column_end":45}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":756816,"byte_end":756871,"line_start":1336,"line_end":1336,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3740},"span":{"file_name":"src/liballoc/sync.rs","byte_start":758541,"byte_end":758549,"line_start":1381,"line_end":1381,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Weak<T>>::into_raw","value":"fn (self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Weak<T>` and turns it into a raw pointer.","sig":null,"attributes":[{"value":"/ Consumes the `Weak<T>` and turns it into a raw pointer.","span":{"file_name":"src/liballoc/sync.rs","byte_start":757531,"byte_end":757590,"line_start":1352,"line_end":1352,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":757595,"byte_end":757598,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ This converts the weak pointer into a raw pointer, preserving the original weak count. It","span":{"file_name":"src/liballoc/sync.rs","byte_start":757603,"byte_end":757696,"line_start":1354,"line_end":1354,"column_start":5,"column_end":98}},{"value":"/ can be turned back into the `Weak<T>` with [`from_raw`].","span":{"file_name":"src/liballoc/sync.rs","byte_start":757701,"byte_end":757761,"line_start":1355,"line_end":1355,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":757766,"byte_end":757769,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ The same restrictions of accessing the target of the pointer as with","span":{"file_name":"src/liballoc/sync.rs","byte_start":757774,"byte_end":757846,"line_start":1357,"line_end":1357,"column_start":5,"column_end":77}},{"value":"/ [`as_raw`] apply.","span":{"file_name":"src/liballoc/sync.rs","byte_start":757851,"byte_end":757872,"line_start":1358,"line_end":1358,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":757877,"byte_end":757880,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":757885,"byte_end":757899,"line_start":1360,"line_end":1360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":757904,"byte_end":757907,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":757912,"byte_end":757919,"line_start":1362,"line_end":1362,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":757924,"byte_end":757954,"line_start":1363,"line_end":1363,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":757959,"byte_end":757962,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ use std::sync::{Arc, Weak};","span":{"file_name":"src/liballoc/sync.rs","byte_start":757967,"byte_end":757998,"line_start":1365,"line_end":1365,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":758003,"byte_end":758006,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ let strong = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":758011,"byte_end":758057,"line_start":1367,"line_end":1367,"column_start":5,"column_end":51}},{"value":"/ let weak = Arc::downgrade(&strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":758062,"byte_end":758101,"line_start":1368,"line_end":1368,"column_start":5,"column_end":44}},{"value":"/ let raw = weak.into_raw();","span":{"file_name":"src/liballoc/sync.rs","byte_start":758106,"byte_end":758136,"line_start":1369,"line_end":1369,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":758141,"byte_end":758144,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(1, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":758149,"byte_end":758193,"line_start":1371,"line_end":1371,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(\"hello\", unsafe { &*raw });","span":{"file_name":"src/liballoc/sync.rs","byte_start":758198,"byte_end":758240,"line_start":1372,"line_end":1372,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":758245,"byte_end":758248,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ drop(unsafe { Weak::from_raw(raw) });","span":{"file_name":"src/liballoc/sync.rs","byte_start":758253,"byte_end":758294,"line_start":1374,"line_end":1374,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(0, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":758299,"byte_end":758343,"line_start":1375,"line_end":1375,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":758348,"byte_end":758355,"line_start":1376,"line_end":1376,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":758360,"byte_end":758363,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ [`from_raw`]: struct.Weak.html#method.from_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":758368,"byte_end":758418,"line_start":1378,"line_end":1378,"column_start":5,"column_end":55}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":758423,"byte_end":758469,"line_start":1379,"line_end":1379,"column_start":5,"column_end":51}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":758474,"byte_end":758529,"line_start":1380,"line_end":1380,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3741},"span":{"file_name":"src/liballoc/sync.rs","byte_start":760626,"byte_end":760634,"line_start":1437,"line_end":1437,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Weak<T>>::from_raw","value":"fn (ptr: *const T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a raw pointer previously created by [`into_raw`] back into\n `Weak<T>`.","sig":null,"attributes":[{"value":"/ Converts a raw pointer previously created by [`into_raw`] back into","span":{"file_name":"src/liballoc/sync.rs","byte_start":758659,"byte_end":758730,"line_start":1387,"line_end":1387,"column_start":5,"column_end":76}},{"value":"/ `Weak<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":758735,"byte_end":758749,"line_start":1388,"line_end":1388,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":758754,"byte_end":758757,"line_start":1389,"line_end":1389,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely get a strong reference (by calling [`upgrade`]","span":{"file_name":"src/liballoc/sync.rs","byte_start":758762,"byte_end":758839,"line_start":1390,"line_end":1390,"column_start":5,"column_end":82}},{"value":"/ later) or to deallocate the weak count by dropping the `Weak<T>`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":758844,"byte_end":758913,"line_start":1391,"line_end":1391,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":758918,"byte_end":758921,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ It takes ownership of one weak count (with the exception of pointers created by [`new`],","span":{"file_name":"src/liballoc/sync.rs","byte_start":758926,"byte_end":759018,"line_start":1393,"line_end":1393,"column_start":5,"column_end":97}},{"value":"/ as these don't have any corresponding weak count).","span":{"file_name":"src/liballoc/sync.rs","byte_start":759023,"byte_end":759077,"line_start":1394,"line_end":1394,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759082,"byte_end":759085,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/sync.rs","byte_start":759090,"byte_end":759102,"line_start":1396,"line_end":1396,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759107,"byte_end":759110,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ The pointer must have originated from the [`into_raw`] (or [`as_raw'], provided there was","span":{"file_name":"src/liballoc/sync.rs","byte_start":759115,"byte_end":759208,"line_start":1398,"line_end":1398,"column_start":5,"column_end":98}},{"value":"/ a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference","span":{"file_name":"src/liballoc/sync.rs","byte_start":759213,"byte_end":759309,"line_start":1399,"line_end":1399,"column_start":5,"column_end":101}},{"value":"/ count.","span":{"file_name":"src/liballoc/sync.rs","byte_start":759314,"byte_end":759324,"line_start":1400,"line_end":1400,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759329,"byte_end":759332,"line_start":1401,"line_end":1401,"column_start":5,"column_end":8}},{"value":"/ It is allowed for the strong count to be 0 at the time of calling this, but the weak count","span":{"file_name":"src/liballoc/sync.rs","byte_start":759337,"byte_end":759431,"line_start":1402,"line_end":1402,"column_start":5,"column_end":99}},{"value":"/ must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created","span":{"file_name":"src/liballoc/sync.rs","byte_start":759436,"byte_end":759531,"line_start":1403,"line_end":1403,"column_start":5,"column_end":100}},{"value":"/ by [`new`]).","span":{"file_name":"src/liballoc/sync.rs","byte_start":759536,"byte_end":759552,"line_start":1404,"line_end":1404,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759557,"byte_end":759560,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":759565,"byte_end":759579,"line_start":1406,"line_end":1406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759584,"byte_end":759587,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":759592,"byte_end":759599,"line_start":1408,"line_end":1408,"column_start":5,"column_end":12}},{"value":"/ #![feature(weak_into_raw)]","span":{"file_name":"src/liballoc/sync.rs","byte_start":759604,"byte_end":759634,"line_start":1409,"line_end":1409,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759639,"byte_end":759642,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ use std::sync::{Arc, Weak};","span":{"file_name":"src/liballoc/sync.rs","byte_start":759647,"byte_end":759678,"line_start":1411,"line_end":1411,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759683,"byte_end":759686,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ let strong = Arc::new(\"hello\".to_owned());","span":{"file_name":"src/liballoc/sync.rs","byte_start":759691,"byte_end":759737,"line_start":1413,"line_end":1413,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759742,"byte_end":759745,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ let raw_1 = Arc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/sync.rs","byte_start":759750,"byte_end":759801,"line_start":1415,"line_end":1415,"column_start":5,"column_end":56}},{"value":"/ let raw_2 = Arc::downgrade(&strong).into_raw();","span":{"file_name":"src/liballoc/sync.rs","byte_start":759806,"byte_end":759857,"line_start":1416,"line_end":1416,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759862,"byte_end":759865,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":759870,"byte_end":759914,"line_start":1418,"line_end":1418,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":759919,"byte_end":759922,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());","span":{"file_name":"src/liballoc/sync.rs","byte_start":759927,"byte_end":760006,"line_start":1420,"line_end":1420,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(1, Arc::weak_count(&strong));","span":{"file_name":"src/liballoc/sync.rs","byte_start":760011,"byte_end":760055,"line_start":1421,"line_end":1421,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":760060,"byte_end":760063,"line_start":1422,"line_end":1422,"column_start":5,"column_end":8}},{"value":"/ drop(strong);","span":{"file_name":"src/liballoc/sync.rs","byte_start":760068,"byte_end":760085,"line_start":1423,"line_end":1423,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":760090,"byte_end":760093,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ // Decrement the last weak count.","span":{"file_name":"src/liballoc/sync.rs","byte_start":760098,"byte_end":760135,"line_start":1425,"line_end":1425,"column_start":5,"column_end":42}},{"value":"/ assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":760140,"byte_end":760206,"line_start":1426,"line_end":1426,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":760211,"byte_end":760218,"line_start":1427,"line_end":1427,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":760223,"byte_end":760226,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ [`as_raw`]: struct.Weak.html#method.as_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":760231,"byte_end":760277,"line_start":1429,"line_end":1429,"column_start":5,"column_end":51}},{"value":"/ [`new`]: struct.Weak.html#method.new","span":{"file_name":"src/liballoc/sync.rs","byte_start":760282,"byte_end":760322,"line_start":1430,"line_end":1430,"column_start":5,"column_end":45}},{"value":"/ [`into_raw`]: struct.Weak.html#method.into_raw","span":{"file_name":"src/liballoc/sync.rs","byte_start":760327,"byte_end":760377,"line_start":1431,"line_end":1431,"column_start":5,"column_end":55}},{"value":"/ [`upgrade`]: struct.Weak.html#method.upgrade","span":{"file_name":"src/liballoc/sync.rs","byte_start":760382,"byte_end":760430,"line_start":1432,"line_end":1432,"column_start":5,"column_end":53}},{"value":"/ [`Weak`]: struct.Weak.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":760435,"byte_end":760465,"line_start":1433,"line_end":1433,"column_start":5,"column_end":35}},{"value":"/ [`Arc`]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":760470,"byte_end":760498,"line_start":1434,"line_end":1434,"column_start":5,"column_end":33}},{"value":"/ [`forget`]: ../../std/mem/fn.forget.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":760503,"byte_end":760547,"line_start":1435,"line_end":1435,"column_start":5,"column_end":49}},{"value":"unstable(feature = \"weak_into_raw\", issue = \"60728\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":760552,"byte_end":760607,"line_start":1436,"line_end":1436,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3744},"span":{"file_name":"src/liballoc/sync.rs","byte_start":761894,"byte_end":761901,"line_start":1478,"line_end":1478,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<Weak<T>>::upgrade","value":"fn (&self) -> Option<Arc<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\n dropping of the inner value if successful.","sig":null,"attributes":[{"value":"/ Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying","span":{"file_name":"src/liballoc/sync.rs","byte_start":761086,"byte_end":761152,"line_start":1451,"line_end":1451,"column_start":5,"column_end":71}},{"value":"/ dropping of the inner value if successful.","span":{"file_name":"src/liballoc/sync.rs","byte_start":761157,"byte_end":761203,"line_start":1452,"line_end":1452,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761208,"byte_end":761211,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if the inner value has since been dropped.","span":{"file_name":"src/liballoc/sync.rs","byte_start":761216,"byte_end":761279,"line_start":1454,"line_end":1454,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761284,"byte_end":761287,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ [`Arc`]: struct.Arc.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":761292,"byte_end":761320,"line_start":1456,"line_end":1456,"column_start":5,"column_end":33}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/sync.rs","byte_start":761325,"byte_end":761385,"line_start":1457,"line_end":1457,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761390,"byte_end":761393,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":761398,"byte_end":761412,"line_start":1459,"line_end":1459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761417,"byte_end":761420,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":761425,"byte_end":761432,"line_start":1461,"line_end":1461,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":761437,"byte_end":761460,"line_start":1462,"line_end":1462,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761465,"byte_end":761468,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ let five = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":761473,"byte_end":761500,"line_start":1464,"line_end":1464,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761505,"byte_end":761508,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ let weak_five = Arc::downgrade(&five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":761513,"byte_end":761555,"line_start":1466,"line_end":1466,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761560,"byte_end":761563,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ let strong_five: Option<Arc<_>> = weak_five.upgrade();","span":{"file_name":"src/liballoc/sync.rs","byte_start":761568,"byte_end":761626,"line_start":1468,"line_end":1468,"column_start":5,"column_end":63}},{"value":"/ assert!(strong_five.is_some());","span":{"file_name":"src/liballoc/sync.rs","byte_start":761631,"byte_end":761666,"line_start":1469,"line_end":1469,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761671,"byte_end":761674,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ // Destroy all strong pointers.","span":{"file_name":"src/liballoc/sync.rs","byte_start":761679,"byte_end":761714,"line_start":1471,"line_end":1471,"column_start":5,"column_end":40}},{"value":"/ drop(strong_five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":761719,"byte_end":761741,"line_start":1472,"line_end":1472,"column_start":5,"column_end":27}},{"value":"/ drop(five);","span":{"file_name":"src/liballoc/sync.rs","byte_start":761746,"byte_end":761761,"line_start":1473,"line_end":1473,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":761766,"byte_end":761769,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ assert!(weak_five.upgrade().is_none());","span":{"file_name":"src/liballoc/sync.rs","byte_start":761774,"byte_end":761817,"line_start":1475,"line_end":1475,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":761822,"byte_end":761829,"line_start":1476,"line_end":1476,"column_start":5,"column_end":12}},{"value":"stable(feature = \"arc_weak\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":761834,"byte_end":761882,"line_start":1477,"line_end":1477,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3745},"span":{"file_name":"src/liballoc/sync.rs","byte_start":763268,"byte_end":763280,"line_start":1515,"line_end":1515,"column_start":12,"column_end":24},"name":"strong_count","qualname":"<Weak<T>>::strong_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of strong (`Arc`) pointers pointing to this allocation.","sig":null,"attributes":[{"value":"/ Gets the number of strong (`Arc`) pointers pointing to this allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":763002,"byte_end":763077,"line_start":1509,"line_end":1509,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":763082,"byte_end":763085,"line_start":1510,"line_end":1510,"column_start":5,"column_end":8}},{"value":"/ If `self` was created using [`Weak::new`], this will return 0.","span":{"file_name":"src/liballoc/sync.rs","byte_start":763090,"byte_end":763156,"line_start":1511,"line_end":1511,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":763161,"byte_end":763164,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ [`Weak::new`]: #method.new","span":{"file_name":"src/liballoc/sync.rs","byte_start":763169,"byte_end":763199,"line_start":1513,"line_end":1513,"column_start":5,"column_end":35}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":763204,"byte_end":763256,"line_start":1514,"line_end":1514,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3746},"span":{"file_name":"src/liballoc/sync.rs","byte_start":763969,"byte_end":763979,"line_start":1533,"line_end":1533,"column_start":12,"column_end":22},"name":"weak_count","qualname":"<Weak<T>>::weak_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets an approximation of the number of `Weak` pointers pointing to this\n allocation.","sig":null,"attributes":[{"value":"/ Gets an approximation of the number of `Weak` pointers pointing to this","span":{"file_name":"src/liballoc/sync.rs","byte_start":763393,"byte_end":763468,"line_start":1519,"line_end":1519,"column_start":5,"column_end":80}},{"value":"/ allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":763473,"byte_end":763488,"line_start":1520,"line_end":1520,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":763493,"byte_end":763496,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ If `self` was created using [`Weak::new`], or if there are no remaining","span":{"file_name":"src/liballoc/sync.rs","byte_start":763501,"byte_end":763576,"line_start":1522,"line_end":1522,"column_start":5,"column_end":80}},{"value":"/ strong pointers, this will return 0.","span":{"file_name":"src/liballoc/sync.rs","byte_start":763581,"byte_end":763621,"line_start":1523,"line_end":1523,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":763626,"byte_end":763629,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ # Accuracy","span":{"file_name":"src/liballoc/sync.rs","byte_start":763634,"byte_end":763648,"line_start":1525,"line_end":1525,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":763653,"byte_end":763656,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ Due to implementation details, the returned value can be off by 1 in","span":{"file_name":"src/liballoc/sync.rs","byte_start":763661,"byte_end":763733,"line_start":1527,"line_end":1527,"column_start":5,"column_end":77}},{"value":"/ either direction when other threads are manipulating any `Arc`s or","span":{"file_name":"src/liballoc/sync.rs","byte_start":763738,"byte_end":763808,"line_start":1528,"line_end":1528,"column_start":5,"column_end":75}},{"value":"/ `Weak`s pointing to the same allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":763813,"byte_end":763857,"line_start":1529,"line_end":1529,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":763862,"byte_end":763865,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ [`Weak::new`]: #method.new","span":{"file_name":"src/liballoc/sync.rs","byte_start":763870,"byte_end":763900,"line_start":1531,"line_end":1531,"column_start":5,"column_end":35}},{"value":"stable(feature = \"weak_counts\", since = \"1.41.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":763905,"byte_end":763957,"line_start":1532,"line_end":1532,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3749},"span":{"file_name":"src/liballoc/sync.rs","byte_start":766300,"byte_end":766306,"line_start":1602,"line_end":1602,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Weak<T>>::ptr_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two `Weak`s point to the same allocation (similar to\n [`ptr::eq`]), or if both don't point to any allocation\n (because they were created with `Weak::new()`).","sig":null,"attributes":[{"value":"/ Returns `true` if the two `Weak`s point to the same allocation (similar to","span":{"file_name":"src/liballoc/sync.rs","byte_start":765023,"byte_end":765101,"line_start":1559,"line_end":1559,"column_start":5,"column_end":83}},{"value":"/ [`ptr::eq`]), or if both don't point to any allocation","span":{"file_name":"src/liballoc/sync.rs","byte_start":765106,"byte_end":765164,"line_start":1560,"line_end":1560,"column_start":5,"column_end":63}},{"value":"/ (because they were created with `Weak::new()`).","span":{"file_name":"src/liballoc/sync.rs","byte_start":765169,"byte_end":765220,"line_start":1561,"line_end":1561,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765225,"byte_end":765228,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"src/liballoc/sync.rs","byte_start":765233,"byte_end":765244,"line_start":1563,"line_end":1563,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765249,"byte_end":765252,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ Since this compares pointers it means that `Weak::new()` will equal each","span":{"file_name":"src/liballoc/sync.rs","byte_start":765257,"byte_end":765333,"line_start":1565,"line_end":1565,"column_start":5,"column_end":81}},{"value":"/ other, even though they don't point to any allocation.","span":{"file_name":"src/liballoc/sync.rs","byte_start":765338,"byte_end":765396,"line_start":1566,"line_end":1566,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765401,"byte_end":765404,"line_start":1567,"line_end":1567,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/sync.rs","byte_start":765409,"byte_end":765423,"line_start":1568,"line_end":1568,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765428,"byte_end":765431,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":765436,"byte_end":765443,"line_start":1570,"line_end":1570,"column_start":5,"column_end":12}},{"value":"/ use std::sync::Arc;","span":{"file_name":"src/liballoc/sync.rs","byte_start":765448,"byte_end":765471,"line_start":1571,"line_end":1571,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765476,"byte_end":765479,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ let first_rc = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765484,"byte_end":765515,"line_start":1573,"line_end":1573,"column_start":5,"column_end":36}},{"value":"/ let first = Arc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765520,"byte_end":765562,"line_start":1574,"line_end":1574,"column_start":5,"column_end":47}},{"value":"/ let second = Arc::downgrade(&first_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765567,"byte_end":765610,"line_start":1575,"line_end":1575,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765615,"byte_end":765618,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/sync.rs","byte_start":765623,"byte_end":765658,"line_start":1577,"line_end":1577,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765663,"byte_end":765666,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Arc::new(5);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765671,"byte_end":765702,"line_start":1579,"line_end":1579,"column_start":5,"column_end":36}},{"value":"/ let third = Arc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":765707,"byte_end":765749,"line_start":1580,"line_end":1580,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765754,"byte_end":765757,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/sync.rs","byte_start":765762,"byte_end":765797,"line_start":1582,"line_end":1582,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":765802,"byte_end":765809,"line_start":1583,"line_end":1583,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765814,"byte_end":765817,"line_start":1584,"line_end":1584,"column_start":5,"column_end":8}},{"value":"/ Comparing `Weak::new`.","span":{"file_name":"src/liballoc/sync.rs","byte_start":765822,"byte_end":765848,"line_start":1585,"line_end":1585,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765853,"byte_end":765856,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":765861,"byte_end":765868,"line_start":1587,"line_end":1587,"column_start":5,"column_end":12}},{"value":"/ use std::sync::{Arc, Weak};","span":{"file_name":"src/liballoc/sync.rs","byte_start":765873,"byte_end":765904,"line_start":1588,"line_end":1588,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":765909,"byte_end":765912,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ let first = Weak::new();","span":{"file_name":"src/liballoc/sync.rs","byte_start":765917,"byte_end":765945,"line_start":1590,"line_end":1590,"column_start":5,"column_end":33}},{"value":"/ let second = Weak::new();","span":{"file_name":"src/liballoc/sync.rs","byte_start":765950,"byte_end":765979,"line_start":1591,"line_end":1591,"column_start":5,"column_end":34}},{"value":"/ assert!(first.ptr_eq(&second));","span":{"file_name":"src/liballoc/sync.rs","byte_start":765984,"byte_end":766019,"line_start":1592,"line_end":1592,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766024,"byte_end":766027,"line_start":1593,"line_end":1593,"column_start":5,"column_end":8}},{"value":"/ let third_rc = Arc::new(());","span":{"file_name":"src/liballoc/sync.rs","byte_start":766032,"byte_end":766064,"line_start":1594,"line_end":1594,"column_start":5,"column_end":37}},{"value":"/ let third = Arc::downgrade(&third_rc);","span":{"file_name":"src/liballoc/sync.rs","byte_start":766069,"byte_end":766111,"line_start":1595,"line_end":1595,"column_start":5,"column_end":47}},{"value":"/ assert!(!first.ptr_eq(&third));","span":{"file_name":"src/liballoc/sync.rs","byte_start":766116,"byte_end":766151,"line_start":1596,"line_end":1596,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/sync.rs","byte_start":766156,"byte_end":766163,"line_start":1597,"line_end":1597,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/sync.rs","byte_start":766168,"byte_end":766171,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ [`ptr::eq`]: ../../std/ptr/fn.eq.html","span":{"file_name":"src/liballoc/sync.rs","byte_start":766176,"byte_end":766217,"line_start":1599,"line_end":1599,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"src/liballoc/sync.rs","byte_start":766222,"byte_end":766231,"line_start":1600,"line_end":1600,"column_start":5,"column_end":14}},{"value":"stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")","span":{"file_name":"src/liballoc/sync.rs","byte_start":766236,"byte_end":766288,"line_start":1601,"line_end":1601,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3761},"span":{"file_name":"src/liballoc/sync.rs","byte_start":769727,"byte_end":769729,"line_start":1712,"line_end":1712,"column_start":8,"column_end":10},"name":"eq","qualname":"::sync::ArcEqIdent::eq","value":"fn (&self, other: &Arc<T>) -> bool","parent":{"krate":0,"index":3759},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3762},"span":{"file_name":"src/liballoc/sync.rs","byte_start":769769,"byte_end":769771,"line_start":1713,"line_end":1713,"column_start":8,"column_end":10},"name":"ne","qualname":"::sync::ArcEqIdent::ne","value":"fn (&self, other: &Arc<T>) -> bool","parent":{"krate":0,"index":3759},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":"src/liballoc/sync.rs","byte_start":779647,"byte_end":779656,"line_start":2068,"line_end":2068,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::sync::ArcFromIter::from_iter","value":"fn (iter: I) -> Self","parent":{"krate":0,"index":3831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":3860},"span":{"file_name":"src/liballoc/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"src/liballoc/vec.rs","parent":null,"children":[{"krate":0,"index":3861},{"krate":0,"index":3862},{"krate":0,"index":3865},{"krate":0,"index":3866},{"krate":0,"index":3869},{"krate":0,"index":3872},{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3878},{"krate":0,"index":3882},{"krate":0,"index":3887},{"krate":0,"index":3890},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3903},{"krate":0,"index":3948},{"krate":0,"index":3952},{"krate":0,"index":3955},{"krate":0,"index":3959},{"krate":0,"index":3963},{"krate":0,"index":3967},{"krate":0,"index":3969},{"krate":0,"index":3973},{"krate":0,"index":3977},{"krate":0,"index":3982},{"krate":0,"index":3986},{"krate":0,"index":3990},{"krate":0,"index":3994},{"krate":0,"index":3996},{"krate":0,"index":4000},{"krate":0,"index":4005},{"krate":0,"index":4007},{"krate":0,"index":4009},{"krate":0,"index":4012},{"krate":0,"index":4014},{"krate":0,"index":4017},{"krate":0,"index":4019},{"krate":0,"index":4626},{"krate":0,"index":4629},{"krate":0,"index":4632},{"krate":0,"index":4635},{"krate":0,"index":4638},{"krate":0,"index":4641},{"krate":0,"index":4644},{"krate":0,"index":4647},{"krate":0,"index":4650},{"krate":0,"index":4653},{"krate":0,"index":4656},{"krate":0,"index":4659},{"krate":0,"index":4662},{"krate":0,"index":4665},{"krate":0,"index":4668},{"krate":0,"index":4020},{"krate":0,"index":4023},{"krate":0,"index":4026},{"krate":0,"index":4029},{"krate":0,"index":4032},{"krate":0,"index":4035},{"krate":0,"index":4039},{"krate":0,"index":4043},{"krate":0,"index":4048},{"krate":0,"index":4052},{"krate":0,"index":4056},{"krate":0,"index":4059},{"krate":0,"index":4063},{"krate":0,"index":4068},{"krate":0,"index":4074},{"krate":0,"index":4080},{"krate":0,"index":4084},{"krate":0,"index":4089},{"krate":0,"index":4094},{"krate":0,"index":4100},{"krate":0,"index":4104},{"krate":0,"index":4110},{"krate":0,"index":4114},{"krate":0,"index":4123},{"krate":0,"index":4128},{"krate":0,"index":4671},{"krate":0,"index":4676},{"krate":0,"index":4681},{"krate":0,"index":4686},{"krate":0,"index":4691},{"krate":0,"index":4696},{"krate":0,"index":4701},{"krate":0,"index":4711},{"krate":0,"index":4129},{"krate":0,"index":4132},{"krate":0,"index":4134},{"krate":0,"index":4137},{"krate":0,"index":4140},{"krate":0,"index":4143},{"krate":0,"index":4146},{"krate":0,"index":4149},{"krate":0,"index":4152},{"krate":0,"index":4155},{"krate":0,"index":4158},{"krate":0,"index":4161},{"krate":0,"index":4164},{"krate":0,"index":4168},{"krate":0,"index":4171},{"krate":0,"index":4174},{"krate":0,"index":4176},{"krate":0,"index":4180},{"krate":0,"index":4184},{"krate":0,"index":4188},{"krate":0,"index":4193},{"krate":0,"index":4200},{"krate":0,"index":4203},{"krate":0,"index":4207},{"krate":0,"index":4209},{"krate":0,"index":4211},{"krate":0,"index":4217},{"krate":0,"index":4220},{"krate":0,"index":4223},{"krate":0,"index":4225},{"krate":0,"index":4227},{"krate":0,"index":4230},{"krate":0,"index":4233},{"krate":0,"index":4240},{"krate":0,"index":4243},{"krate":0,"index":4247},{"krate":0,"index":4249},{"krate":0,"index":4251},{"krate":0,"index":4257},{"krate":0,"index":4261},{"krate":0,"index":4264},{"krate":0,"index":4267},{"krate":0,"index":4269},{"krate":0,"index":4721},{"krate":0,"index":4726},{"krate":0,"index":4271},{"krate":0,"index":4276},{"krate":0,"index":4279},{"krate":0,"index":4281},{"krate":0,"index":4284},{"krate":0,"index":4730},{"krate":0,"index":4740},{"krate":0,"index":4289},{"krate":0,"index":4295}],"decl_id":null,"docs":" A contiguous growable array type with heap-allocated contents, written\n `Vec<T>`.","sig":null,"attributes":[{"value":"! A contiguous growable array type with heap-allocated contents, written","span":{"file_name":"src/liballoc/vec.rs","byte_start":782441,"byte_end":782515,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"! `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":782516,"byte_end":782529,"line_start":2,"line_end":2,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782530,"byte_end":782533,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! Vectors have `O(1)` indexing, amortized `O(1)` push (to the end) and","span":{"file_name":"src/liballoc/vec.rs","byte_start":782534,"byte_end":782606,"line_start":4,"line_end":4,"column_start":1,"column_end":73}},{"value":"! `O(1)` pop (from the end).","span":{"file_name":"src/liballoc/vec.rs","byte_start":782607,"byte_end":782637,"line_start":5,"line_end":5,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782638,"byte_end":782641,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":782642,"byte_end":782656,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782657,"byte_end":782660,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! You can explicitly create a [`Vec<T>`] with [`new`]:","span":{"file_name":"src/liballoc/vec.rs","byte_start":782661,"byte_end":782717,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782718,"byte_end":782721,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":782722,"byte_end":782729,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"! let v: Vec<i32> = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":782730,"byte_end":782763,"line_start":12,"line_end":12,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":782764,"byte_end":782771,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782772,"byte_end":782775,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! ...or by using the [`vec!`] macro:","span":{"file_name":"src/liballoc/vec.rs","byte_start":782776,"byte_end":782814,"line_start":15,"line_end":15,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782815,"byte_end":782818,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":782819,"byte_end":782826,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"! let v: Vec<i32> = vec![];","span":{"file_name":"src/liballoc/vec.rs","byte_start":782827,"byte_end":782856,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782857,"byte_end":782860,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! let v = vec![1, 2, 3, 4, 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":782861,"byte_end":782893,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782894,"byte_end":782897,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! let v = vec![0; 10]; // ten zeroes","span":{"file_name":"src/liballoc/vec.rs","byte_start":782898,"byte_end":782936,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":782937,"byte_end":782944,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":782945,"byte_end":782948,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! You can [`push`] values onto the end of a vector (which will grow the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":782949,"byte_end":783029,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"! as needed):","span":{"file_name":"src/liballoc/vec.rs","byte_start":783030,"byte_end":783045,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783046,"byte_end":783049,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":783050,"byte_end":783057,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"! let mut v = vec![1, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":783058,"byte_end":783085,"line_start":29,"line_end":29,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783086,"byte_end":783089,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! v.push(3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":783090,"byte_end":783104,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":783105,"byte_end":783112,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783113,"byte_end":783116,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Popping values works in much the same way:","span":{"file_name":"src/liballoc/vec.rs","byte_start":783117,"byte_end":783163,"line_start":34,"line_end":34,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783164,"byte_end":783167,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":783168,"byte_end":783175,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"! let mut v = vec![1, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":783176,"byte_end":783203,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783204,"byte_end":783207,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! let two = v.pop();","span":{"file_name":"src/liballoc/vec.rs","byte_start":783208,"byte_end":783230,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":783231,"byte_end":783238,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783239,"byte_end":783242,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! Vectors also support indexing (through the [`Index`] and [`IndexMut`] traits):","span":{"file_name":"src/liballoc/vec.rs","byte_start":783243,"byte_end":783325,"line_start":42,"line_end":42,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783326,"byte_end":783329,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":783330,"byte_end":783337,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"! let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":783338,"byte_end":783368,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"! let three = v[2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":783369,"byte_end":783390,"line_start":46,"line_end":46,"column_start":1,"column_end":22}},{"value":"! v[1] = v[1] + 5;","span":{"file_name":"src/liballoc/vec.rs","byte_start":783391,"byte_end":783411,"line_start":47,"line_end":47,"column_start":1,"column_end":21}},{"value":"! ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":783412,"byte_end":783419,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"src/liballoc/vec.rs","byte_start":783420,"byte_end":783423,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! [`Vec<T>`]: ../../std/vec/struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":783424,"byte_end":783469,"line_start":50,"line_end":50,"column_start":1,"column_end":46}},{"value":"! [`new`]: ../../std/vec/struct.Vec.html#method.new","span":{"file_name":"src/liballoc/vec.rs","byte_start":783470,"byte_end":783523,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"! [`push`]: ../../std/vec/struct.Vec.html#method.push","span":{"file_name":"src/liballoc/vec.rs","byte_start":783524,"byte_end":783579,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"! [`Index`]: ../../std/ops/trait.Index.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":783580,"byte_end":783625,"line_start":53,"line_end":53,"column_start":1,"column_end":46}},{"value":"! [`IndexMut`]: ../../std/ops/trait.IndexMut.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":783626,"byte_end":783677,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"! [`vec!`]: ../../std/macro.vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":783678,"byte_end":783716,"line_start":55,"line_end":55,"column_start":1,"column_end":39}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":783718,"byte_end":783764,"line_start":57,"line_end":57,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3899},"span":{"file_name":"src/liballoc/vec.rs","byte_start":793687,"byte_end":793690,"line_start":297,"line_end":297,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":3901},{"krate":0,"index":3902}],"decl_id":null,"docs":" A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.","sig":null,"attributes":[{"value":"/ A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.","span":{"file_name":"src/liballoc/vec.rs","byte_start":784334,"byte_end":784413,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784414,"byte_end":784417,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":784418,"byte_end":784432,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784433,"byte_end":784436,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":784437,"byte_end":784444,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ let mut vec = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":784445,"byte_end":784474,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ vec.push(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784475,"byte_end":784491,"line_start":83,"line_end":83,"column_start":1,"column_end":17}},{"value":"/ vec.push(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784492,"byte_end":784508,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784509,"byte_end":784512,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.len(), 2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784513,"byte_end":784542,"line_start":86,"line_end":86,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(vec[0], 1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784543,"byte_end":784569,"line_start":87,"line_end":87,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784570,"byte_end":784573,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.pop(), Some(2));","span":{"file_name":"src/liballoc/vec.rs","byte_start":784574,"byte_end":784609,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(vec.len(), 1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784610,"byte_end":784639,"line_start":90,"line_end":90,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784640,"byte_end":784643,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ vec[0] = 7;","span":{"file_name":"src/liballoc/vec.rs","byte_start":784644,"byte_end":784659,"line_start":92,"line_end":92,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(vec[0], 7);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784660,"byte_end":784686,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784687,"byte_end":784690,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ vec.extend([1, 2, 3].iter().copied());","span":{"file_name":"src/liballoc/vec.rs","byte_start":784691,"byte_end":784733,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784734,"byte_end":784737,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ for x in &vec {","span":{"file_name":"src/liballoc/vec.rs","byte_start":784738,"byte_end":784757,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784758,"byte_end":784784,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":784785,"byte_end":784790,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec, [7, 1, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784791,"byte_end":784825,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":784826,"byte_end":784833,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784834,"byte_end":784837,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The [`vec!`] macro is provided to make initialization more convenient:","span":{"file_name":"src/liballoc/vec.rs","byte_start":784838,"byte_end":784912,"line_start":103,"line_end":103,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":784913,"byte_end":784916,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":784917,"byte_end":784924,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":784925,"byte_end":784957,"line_start":106,"line_end":106,"column_start":1,"column_end":33}},{"value":"/ vec.push(4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784958,"byte_end":784974,"line_start":107,"line_end":107,"column_start":1,"column_end":17}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":784975,"byte_end":785009,"line_start":108,"line_end":108,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":785010,"byte_end":785017,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785018,"byte_end":785021,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ It can also initialize each element of a `Vec<T>` with a given value.","span":{"file_name":"src/liballoc/vec.rs","byte_start":785022,"byte_end":785095,"line_start":111,"line_end":111,"column_start":1,"column_end":74}},{"value":"/ This may be more efficient than performing allocation and initialization","span":{"file_name":"src/liballoc/vec.rs","byte_start":785096,"byte_end":785172,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/ in separate steps, especially when initializing a vector of zeros:","span":{"file_name":"src/liballoc/vec.rs","byte_start":785173,"byte_end":785243,"line_start":113,"line_end":113,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785244,"byte_end":785247,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":785248,"byte_end":785255,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ let vec = vec![0; 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":785256,"byte_end":785281,"line_start":116,"line_end":116,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(vec, [0, 0, 0, 0, 0]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":785282,"byte_end":785319,"line_start":117,"line_end":117,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785320,"byte_end":785323,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ // The following is equivalent, but potentially slower:","span":{"file_name":"src/liballoc/vec.rs","byte_start":785324,"byte_end":785383,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/ let mut vec1 = Vec::with_capacity(5);","span":{"file_name":"src/liballoc/vec.rs","byte_start":785384,"byte_end":785425,"line_start":120,"line_end":120,"column_start":1,"column_end":42}},{"value":"/ vec1.resize(5, 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":785426,"byte_end":785448,"line_start":121,"line_end":121,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":785449,"byte_end":785456,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785457,"byte_end":785460,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ Use a `Vec<T>` as an efficient stack:","span":{"file_name":"src/liballoc/vec.rs","byte_start":785461,"byte_end":785502,"line_start":124,"line_end":124,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785503,"byte_end":785506,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":785507,"byte_end":785514,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/ let mut stack = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":785515,"byte_end":785546,"line_start":127,"line_end":127,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785547,"byte_end":785550,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ stack.push(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":785551,"byte_end":785569,"line_start":129,"line_end":129,"column_start":1,"column_end":19}},{"value":"/ stack.push(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":785570,"byte_end":785588,"line_start":130,"line_end":130,"column_start":1,"column_end":19}},{"value":"/ stack.push(3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":785589,"byte_end":785607,"line_start":131,"line_end":131,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785608,"byte_end":785611,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ while let Some(top) = stack.pop() {","span":{"file_name":"src/liballoc/vec.rs","byte_start":785612,"byte_end":785651,"line_start":133,"line_end":133,"column_start":1,"column_end":40}},{"value":"/     // Prints 3, 2, 1","span":{"file_name":"src/liballoc/vec.rs","byte_start":785652,"byte_end":785677,"line_start":134,"line_end":134,"column_start":1,"column_end":26}},{"value":"/     println!(\"{}\", top);","span":{"file_name":"src/liballoc/vec.rs","byte_start":785678,"byte_end":785706,"line_start":135,"line_end":135,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":785707,"byte_end":785712,"line_start":136,"line_end":136,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":785713,"byte_end":785720,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785721,"byte_end":785724,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Indexing","span":{"file_name":"src/liballoc/vec.rs","byte_start":785725,"byte_end":785739,"line_start":139,"line_end":139,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785740,"byte_end":785743,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ The `Vec` type allows to access values by index, because it implements the","span":{"file_name":"src/liballoc/vec.rs","byte_start":785744,"byte_end":785822,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ [`Index`] trait. An example will be more explicit:","span":{"file_name":"src/liballoc/vec.rs","byte_start":785823,"byte_end":785877,"line_start":142,"line_end":142,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785878,"byte_end":785881,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":785882,"byte_end":785889,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ let v = vec![0, 2, 4, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":785890,"byte_end":785919,"line_start":145,"line_end":145,"column_start":1,"column_end":30}},{"value":"/ println!(\"{}\", v[1]); // it will display '2'","span":{"file_name":"src/liballoc/vec.rs","byte_start":785920,"byte_end":785968,"line_start":146,"line_end":146,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":785969,"byte_end":785976,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":785977,"byte_end":785980,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ However be careful: if you try to access an index which isn't in the `Vec`,","span":{"file_name":"src/liballoc/vec.rs","byte_start":785981,"byte_end":786060,"line_start":149,"line_end":149,"column_start":1,"column_end":80}},{"value":"/ your software will panic! You cannot do this:","span":{"file_name":"src/liballoc/vec.rs","byte_start":786061,"byte_end":786110,"line_start":150,"line_end":150,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786111,"byte_end":786114,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ ```should_panic","span":{"file_name":"src/liballoc/vec.rs","byte_start":786115,"byte_end":786134,"line_start":152,"line_end":152,"column_start":1,"column_end":20}},{"value":"/ let v = vec![0, 2, 4, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":786135,"byte_end":786164,"line_start":153,"line_end":153,"column_start":1,"column_end":30}},{"value":"/ println!(\"{}\", v[6]); // it will panic!","span":{"file_name":"src/liballoc/vec.rs","byte_start":786165,"byte_end":786208,"line_start":154,"line_end":154,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":786209,"byte_end":786216,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786217,"byte_end":786220,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Use [`get`] and [`get_mut`] if you want to check whether the index is in","span":{"file_name":"src/liballoc/vec.rs","byte_start":786221,"byte_end":786297,"line_start":157,"line_end":157,"column_start":1,"column_end":77}},{"value":"/ the `Vec`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":786298,"byte_end":786312,"line_start":158,"line_end":158,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786313,"byte_end":786316,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ # Slicing","span":{"file_name":"src/liballoc/vec.rs","byte_start":786317,"byte_end":786330,"line_start":160,"line_end":160,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786331,"byte_end":786334,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ A `Vec` can be mutable. Slices, on the other hand, are read-only objects.","span":{"file_name":"src/liballoc/vec.rs","byte_start":786335,"byte_end":786412,"line_start":162,"line_end":162,"column_start":1,"column_end":78}},{"value":"/ To get a slice, use `&`. Example:","span":{"file_name":"src/liballoc/vec.rs","byte_start":786413,"byte_end":786450,"line_start":163,"line_end":163,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786451,"byte_end":786454,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":786455,"byte_end":786462,"line_start":165,"line_end":165,"column_start":1,"column_end":8}},{"value":"/ fn read_slice(slice: &[usize]) {","span":{"file_name":"src/liballoc/vec.rs","byte_start":786463,"byte_end":786499,"line_start":166,"line_end":166,"column_start":1,"column_end":37}},{"value":"/     // ...","span":{"file_name":"src/liballoc/vec.rs","byte_start":786500,"byte_end":786514,"line_start":167,"line_end":167,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":786515,"byte_end":786520,"line_start":168,"line_end":168,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786521,"byte_end":786524,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ let v = vec![0, 1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":786525,"byte_end":786548,"line_start":170,"line_end":170,"column_start":1,"column_end":24}},{"value":"/ read_slice(&v);","span":{"file_name":"src/liballoc/vec.rs","byte_start":786549,"byte_end":786568,"line_start":171,"line_end":171,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786569,"byte_end":786572,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // ... and that's all!","span":{"file_name":"src/liballoc/vec.rs","byte_start":786573,"byte_end":786599,"line_start":173,"line_end":173,"column_start":1,"column_end":27}},{"value":"/ // you can also do it like this:","span":{"file_name":"src/liballoc/vec.rs","byte_start":786600,"byte_end":786636,"line_start":174,"line_end":174,"column_start":1,"column_end":37}},{"value":"/ let x : &[usize] = &v;","span":{"file_name":"src/liballoc/vec.rs","byte_start":786637,"byte_end":786663,"line_start":175,"line_end":175,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":786664,"byte_end":786671,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786672,"byte_end":786675,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ In Rust, it's more common to pass slices as arguments rather than vectors","span":{"file_name":"src/liballoc/vec.rs","byte_start":786676,"byte_end":786753,"line_start":178,"line_end":178,"column_start":1,"column_end":78}},{"value":"/ when you just want to provide a read access. The same goes for [`String`] and","span":{"file_name":"src/liballoc/vec.rs","byte_start":786754,"byte_end":786835,"line_start":179,"line_end":179,"column_start":1,"column_end":82}},{"value":"/ [`&str`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":786836,"byte_end":786849,"line_start":180,"line_end":180,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786850,"byte_end":786853,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ # Capacity and reallocation","span":{"file_name":"src/liballoc/vec.rs","byte_start":786854,"byte_end":786885,"line_start":182,"line_end":182,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":786886,"byte_end":786889,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ The capacity of a vector is the amount of space allocated for any future","span":{"file_name":"src/liballoc/vec.rs","byte_start":786890,"byte_end":786966,"line_start":184,"line_end":184,"column_start":1,"column_end":77}},{"value":"/ elements that will be added onto the vector. This is not to be confused with","span":{"file_name":"src/liballoc/vec.rs","byte_start":786967,"byte_end":787047,"line_start":185,"line_end":185,"column_start":1,"column_end":81}},{"value":"/ the *length* of a vector, which specifies the number of actual elements","span":{"file_name":"src/liballoc/vec.rs","byte_start":787048,"byte_end":787123,"line_start":186,"line_end":186,"column_start":1,"column_end":76}},{"value":"/ within the vector. If a vector's length exceeds its capacity, its capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":787124,"byte_end":787202,"line_start":187,"line_end":187,"column_start":1,"column_end":79}},{"value":"/ will automatically be increased, but its elements will have to be","span":{"file_name":"src/liballoc/vec.rs","byte_start":787203,"byte_end":787272,"line_start":188,"line_end":188,"column_start":1,"column_end":70}},{"value":"/ reallocated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":787273,"byte_end":787289,"line_start":189,"line_end":189,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":787290,"byte_end":787293,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ For example, a vector with capacity 10 and length 0 would be an empty vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":787294,"byte_end":787374,"line_start":191,"line_end":191,"column_start":1,"column_end":81}},{"value":"/ with space for 10 more elements. Pushing 10 or fewer elements onto the","span":{"file_name":"src/liballoc/vec.rs","byte_start":787375,"byte_end":787449,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"/ vector will not change its capacity or cause reallocation to occur. However,","span":{"file_name":"src/liballoc/vec.rs","byte_start":787450,"byte_end":787530,"line_start":193,"line_end":193,"column_start":1,"column_end":81}},{"value":"/ if the vector's length is increased to 11, it will have to reallocate, which","span":{"file_name":"src/liballoc/vec.rs","byte_start":787531,"byte_end":787611,"line_start":194,"line_end":194,"column_start":1,"column_end":81}},{"value":"/ can be slow. For this reason, it is recommended to use [`Vec::with_capacity`]","span":{"file_name":"src/liballoc/vec.rs","byte_start":787612,"byte_end":787693,"line_start":195,"line_end":195,"column_start":1,"column_end":82}},{"value":"/ whenever possible to specify how big the vector is expected to get.","span":{"file_name":"src/liballoc/vec.rs","byte_start":787694,"byte_end":787765,"line_start":196,"line_end":196,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":787766,"byte_end":787769,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ # Guarantees","span":{"file_name":"src/liballoc/vec.rs","byte_start":787770,"byte_end":787786,"line_start":198,"line_end":198,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":787787,"byte_end":787790,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ Due to its incredibly fundamental nature, `Vec` makes a lot of guarantees","span":{"file_name":"src/liballoc/vec.rs","byte_start":787791,"byte_end":787868,"line_start":200,"line_end":200,"column_start":1,"column_end":78}},{"value":"/ about its design. This ensures that it's as low-overhead as possible in","span":{"file_name":"src/liballoc/vec.rs","byte_start":787869,"byte_end":787944,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/ the general case, and can be correctly manipulated in primitive ways","span":{"file_name":"src/liballoc/vec.rs","byte_start":787945,"byte_end":788017,"line_start":202,"line_end":202,"column_start":1,"column_end":73}},{"value":"/ by unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":788018,"byte_end":788098,"line_start":203,"line_end":203,"column_start":1,"column_end":81}},{"value":"/ If additional type parameters are added (e.g., to support custom allocators),","span":{"file_name":"src/liballoc/vec.rs","byte_start":788099,"byte_end":788180,"line_start":204,"line_end":204,"column_start":1,"column_end":82}},{"value":"/ overriding their defaults may change the behavior.","span":{"file_name":"src/liballoc/vec.rs","byte_start":788181,"byte_end":788235,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":788236,"byte_end":788239,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ Most fundamentally, `Vec` is and always will be a (pointer, capacity, length)","span":{"file_name":"src/liballoc/vec.rs","byte_start":788240,"byte_end":788321,"line_start":207,"line_end":207,"column_start":1,"column_end":82}},{"value":"/ triplet. No more, no less. The order of these fields is completely","span":{"file_name":"src/liballoc/vec.rs","byte_start":788322,"byte_end":788392,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"/ unspecified, and you should use the appropriate methods to modify these.","span":{"file_name":"src/liballoc/vec.rs","byte_start":788393,"byte_end":788469,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ The pointer will never be null, so this type is null-pointer-optimized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":788470,"byte_end":788545,"line_start":210,"line_end":210,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":788546,"byte_end":788549,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ However, the pointer may not actually point to allocated memory. In particular,","span":{"file_name":"src/liballoc/vec.rs","byte_start":788550,"byte_end":788633,"line_start":212,"line_end":212,"column_start":1,"column_end":84}},{"value":"/ if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],","span":{"file_name":"src/liballoc/vec.rs","byte_start":788634,"byte_end":788716,"line_start":213,"line_end":213,"column_start":1,"column_end":83}},{"value":"/ [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]","span":{"file_name":"src/liballoc/vec.rs","byte_start":788717,"byte_end":788801,"line_start":214,"line_end":214,"column_start":1,"column_end":85}},{"value":"/ on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized","span":{"file_name":"src/liballoc/vec.rs","byte_start":788802,"byte_end":788886,"line_start":215,"line_end":215,"column_start":1,"column_end":85}},{"value":"/ types inside a `Vec`, it will not allocate space for them. *Note that in this case","span":{"file_name":"src/liballoc/vec.rs","byte_start":788887,"byte_end":788973,"line_start":216,"line_end":216,"column_start":1,"column_end":87}},{"value":"/ the `Vec` may not report a [`capacity`] of 0*. `Vec` will allocate if and only","span":{"file_name":"src/liballoc/vec.rs","byte_start":788974,"byte_end":789056,"line_start":217,"line_end":217,"column_start":1,"column_end":83}},{"value":"/ if [`mem::size_of::<T>`]`() * capacity() > 0`. In general, `Vec`'s allocation","span":{"file_name":"src/liballoc/vec.rs","byte_start":789057,"byte_end":789138,"line_start":218,"line_end":218,"column_start":1,"column_end":82}},{"value":"/ details are very subtle &mdash; if you intend to allocate memory using a `Vec`","span":{"file_name":"src/liballoc/vec.rs","byte_start":789139,"byte_end":789221,"line_start":219,"line_end":219,"column_start":1,"column_end":83}},{"value":"/ and use it for something else (either to pass to unsafe code, or to build your","span":{"file_name":"src/liballoc/vec.rs","byte_start":789222,"byte_end":789304,"line_start":220,"line_end":220,"column_start":1,"column_end":83}},{"value":"/ own memory-backed collection), be sure to deallocate this memory by using","span":{"file_name":"src/liballoc/vec.rs","byte_start":789305,"byte_end":789382,"line_start":221,"line_end":221,"column_start":1,"column_end":78}},{"value":"/ `from_raw_parts` to recover the `Vec` and then dropping it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":789383,"byte_end":789446,"line_start":222,"line_end":222,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":789447,"byte_end":789450,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ If a `Vec` *has* allocated memory, then the memory it points to is on the heap","span":{"file_name":"src/liballoc/vec.rs","byte_start":789451,"byte_end":789533,"line_start":224,"line_end":224,"column_start":1,"column_end":83}},{"value":"/ (as defined by the allocator Rust is configured to use by default), and its","span":{"file_name":"src/liballoc/vec.rs","byte_start":789534,"byte_end":789613,"line_start":225,"line_end":225,"column_start":1,"column_end":80}},{"value":"/ pointer points to [`len`] initialized, contiguous elements in order (what","span":{"file_name":"src/liballoc/vec.rs","byte_start":789614,"byte_end":789691,"line_start":226,"line_end":226,"column_start":1,"column_end":78}},{"value":"/ you would see if you coerced it to a slice), followed by [`capacity`]` -","span":{"file_name":"src/liballoc/vec.rs","byte_start":789692,"byte_end":789768,"line_start":227,"line_end":227,"column_start":1,"column_end":77}},{"value":"/ `[`len`] logically uninitialized, contiguous elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":789769,"byte_end":789827,"line_start":228,"line_end":228,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":789828,"byte_end":789831,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ `Vec` will never perform a \"small optimization\" where elements are actually","span":{"file_name":"src/liballoc/vec.rs","byte_start":789832,"byte_end":789911,"line_start":230,"line_end":230,"column_start":1,"column_end":80}},{"value":"/ stored on the stack for two reasons:","span":{"file_name":"src/liballoc/vec.rs","byte_start":789912,"byte_end":789952,"line_start":231,"line_end":231,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":789953,"byte_end":789956,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ * It would make it more difficult for unsafe code to correctly manipulate","span":{"file_name":"src/liballoc/vec.rs","byte_start":789957,"byte_end":790034,"line_start":233,"line_end":233,"column_start":1,"column_end":78}},{"value":"/   a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were","span":{"file_name":"src/liballoc/vec.rs","byte_start":790035,"byte_end":790115,"line_start":234,"line_end":234,"column_start":1,"column_end":81}},{"value":"/   only moved, and it would be more difficult to determine if a `Vec` had","span":{"file_name":"src/liballoc/vec.rs","byte_start":790116,"byte_end":790192,"line_start":235,"line_end":235,"column_start":1,"column_end":77}},{"value":"/   actually allocated memory.","span":{"file_name":"src/liballoc/vec.rs","byte_start":790193,"byte_end":790225,"line_start":236,"line_end":236,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":790226,"byte_end":790229,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ * It would penalize the general case, incurring an additional branch","span":{"file_name":"src/liballoc/vec.rs","byte_start":790230,"byte_end":790302,"line_start":238,"line_end":238,"column_start":1,"column_end":73}},{"value":"/   on every access.","span":{"file_name":"src/liballoc/vec.rs","byte_start":790303,"byte_end":790325,"line_start":239,"line_end":239,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":790326,"byte_end":790329,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ `Vec` will never automatically shrink itself, even if completely empty. This","span":{"file_name":"src/liballoc/vec.rs","byte_start":790330,"byte_end":790410,"line_start":241,"line_end":241,"column_start":1,"column_end":81}},{"value":"/ ensures no unnecessary allocations or deallocations occur. Emptying a `Vec`","span":{"file_name":"src/liballoc/vec.rs","byte_start":790411,"byte_end":790490,"line_start":242,"line_end":242,"column_start":1,"column_end":80}},{"value":"/ and then filling it back up to the same [`len`] should incur no calls to","span":{"file_name":"src/liballoc/vec.rs","byte_start":790491,"byte_end":790567,"line_start":243,"line_end":243,"column_start":1,"column_end":77}},{"value":"/ the allocator. If you wish to free up unused memory, use","span":{"file_name":"src/liballoc/vec.rs","byte_start":790568,"byte_end":790628,"line_start":244,"line_end":244,"column_start":1,"column_end":61}},{"value":"/ [`shrink_to_fit`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":790629,"byte_end":790651,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":790652,"byte_end":790655,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ [`push`] and [`insert`] will never (re)allocate if the reported capacity is","span":{"file_name":"src/liballoc/vec.rs","byte_start":790656,"byte_end":790735,"line_start":247,"line_end":247,"column_start":1,"column_end":80}},{"value":"/ sufficient. [`push`] and [`insert`] *will* (re)allocate if","span":{"file_name":"src/liballoc/vec.rs","byte_start":790736,"byte_end":790798,"line_start":248,"line_end":248,"column_start":1,"column_end":63}},{"value":"/ [`len`]` == `[`capacity`]. That is, the reported capacity is completely","span":{"file_name":"src/liballoc/vec.rs","byte_start":790799,"byte_end":790874,"line_start":249,"line_end":249,"column_start":1,"column_end":76}},{"value":"/ accurate, and can be relied on. It can even be used to manually free the memory","span":{"file_name":"src/liballoc/vec.rs","byte_start":790875,"byte_end":790958,"line_start":250,"line_end":250,"column_start":1,"column_end":84}},{"value":"/ allocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even","span":{"file_name":"src/liballoc/vec.rs","byte_start":790959,"byte_end":791041,"line_start":251,"line_end":251,"column_start":1,"column_end":83}},{"value":"/ when not necessary.","span":{"file_name":"src/liballoc/vec.rs","byte_start":791042,"byte_end":791065,"line_start":252,"line_end":252,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":791066,"byte_end":791069,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ `Vec` does not guarantee any particular growth strategy when reallocating","span":{"file_name":"src/liballoc/vec.rs","byte_start":791070,"byte_end":791147,"line_start":254,"line_end":254,"column_start":1,"column_end":78}},{"value":"/ when full, nor when [`reserve`] is called. The current strategy is basic","span":{"file_name":"src/liballoc/vec.rs","byte_start":791148,"byte_end":791224,"line_start":255,"line_end":255,"column_start":1,"column_end":77}},{"value":"/ and it may prove desirable to use a non-constant growth factor. Whatever","span":{"file_name":"src/liballoc/vec.rs","byte_start":791225,"byte_end":791301,"line_start":256,"line_end":256,"column_start":1,"column_end":77}},{"value":"/ strategy is used will of course guarantee `O(1)` amortized [`push`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":791302,"byte_end":791374,"line_start":257,"line_end":257,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":791375,"byte_end":791378,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ `vec![x; n]`, `vec![a, b, c, d]`, and","span":{"file_name":"src/liballoc/vec.rs","byte_start":791379,"byte_end":791420,"line_start":259,"line_end":259,"column_start":1,"column_end":42}},{"value":"/ [`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`","span":{"file_name":"src/liballoc/vec.rs","byte_start":791421,"byte_end":791498,"line_start":260,"line_end":260,"column_start":1,"column_end":78}},{"value":"/ with exactly the requested capacity. If [`len`]` == `[`capacity`],","span":{"file_name":"src/liballoc/vec.rs","byte_start":791499,"byte_end":791569,"line_start":261,"line_end":261,"column_start":1,"column_end":71}},{"value":"/ (as is the case for the [`vec!`] macro), then a `Vec<T>` can be converted to","span":{"file_name":"src/liballoc/vec.rs","byte_start":791570,"byte_end":791650,"line_start":262,"line_end":262,"column_start":1,"column_end":81}},{"value":"/ and from a [`Box<[T]>`][owned slice] without reallocating or moving the elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":791651,"byte_end":791736,"line_start":263,"line_end":263,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":791737,"byte_end":791740,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ `Vec` will not specifically overwrite any data that is removed from it,","span":{"file_name":"src/liballoc/vec.rs","byte_start":791741,"byte_end":791816,"line_start":265,"line_end":265,"column_start":1,"column_end":76}},{"value":"/ but also won't specifically preserve it. Its uninitialized memory is","span":{"file_name":"src/liballoc/vec.rs","byte_start":791817,"byte_end":791889,"line_start":266,"line_end":266,"column_start":1,"column_end":73}},{"value":"/ scratch space that it may use however it wants. It will generally just do","span":{"file_name":"src/liballoc/vec.rs","byte_start":791890,"byte_end":791967,"line_start":267,"line_end":267,"column_start":1,"column_end":78}},{"value":"/ whatever is most efficient or otherwise easy to implement. Do not rely on","span":{"file_name":"src/liballoc/vec.rs","byte_start":791968,"byte_end":792045,"line_start":268,"line_end":268,"column_start":1,"column_end":78}},{"value":"/ removed data to be erased for security purposes. Even if you drop a `Vec`, its","span":{"file_name":"src/liballoc/vec.rs","byte_start":792046,"byte_end":792128,"line_start":269,"line_end":269,"column_start":1,"column_end":83}},{"value":"/ buffer may simply be reused by another `Vec`. Even if you zero a `Vec`'s memory","span":{"file_name":"src/liballoc/vec.rs","byte_start":792129,"byte_end":792212,"line_start":270,"line_end":270,"column_start":1,"column_end":84}},{"value":"/ first, that may not actually happen because the optimizer does not consider","span":{"file_name":"src/liballoc/vec.rs","byte_start":792213,"byte_end":792292,"line_start":271,"line_end":271,"column_start":1,"column_end":80}},{"value":"/ this a side-effect that must be preserved. There is one case which we will","span":{"file_name":"src/liballoc/vec.rs","byte_start":792293,"byte_end":792371,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ not break, however: using `unsafe` code to write to the excess capacity,","span":{"file_name":"src/liballoc/vec.rs","byte_start":792372,"byte_end":792448,"line_start":273,"line_end":273,"column_start":1,"column_end":77}},{"value":"/ and then increasing the length to match, is always valid.","span":{"file_name":"src/liballoc/vec.rs","byte_start":792449,"byte_end":792510,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":792511,"byte_end":792514,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ `Vec` does not currently guarantee the order in which elements are dropped.","span":{"file_name":"src/liballoc/vec.rs","byte_start":792515,"byte_end":792594,"line_start":276,"line_end":276,"column_start":1,"column_end":80}},{"value":"/ The order has changed in the past and may change again.","span":{"file_name":"src/liballoc/vec.rs","byte_start":792595,"byte_end":792654,"line_start":277,"line_end":277,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":792655,"byte_end":792658,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ [`vec!`]: ../../std/macro.vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":792659,"byte_end":792697,"line_start":279,"line_end":279,"column_start":1,"column_end":39}},{"value":"/ [`get`]: ../../std/vec/struct.Vec.html#method.get","span":{"file_name":"src/liballoc/vec.rs","byte_start":792698,"byte_end":792751,"line_start":280,"line_end":280,"column_start":1,"column_end":54}},{"value":"/ [`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut","span":{"file_name":"src/liballoc/vec.rs","byte_start":792752,"byte_end":792813,"line_start":281,"line_end":281,"column_start":1,"column_end":62}},{"value":"/ [`Index`]: ../../std/ops/trait.Index.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":792814,"byte_end":792859,"line_start":282,"line_end":282,"column_start":1,"column_end":46}},{"value":"/ [`String`]: ../../std/string/struct.String.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":792860,"byte_end":792911,"line_start":283,"line_end":283,"column_start":1,"column_end":52}},{"value":"/ [`&str`]: ../../std/primitive.str.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":792912,"byte_end":792954,"line_start":284,"line_end":284,"column_start":1,"column_end":43}},{"value":"/ [`Vec::with_capacity`]: ../../std/vec/struct.Vec.html#method.with_capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":792955,"byte_end":793033,"line_start":285,"line_end":285,"column_start":1,"column_end":79}},{"value":"/ [`Vec::new`]: ../../std/vec/struct.Vec.html#method.new","span":{"file_name":"src/liballoc/vec.rs","byte_start":793034,"byte_end":793092,"line_start":286,"line_end":286,"column_start":1,"column_end":59}},{"value":"/ [`shrink_to_fit`]: ../../std/vec/struct.Vec.html#method.shrink_to_fit","span":{"file_name":"src/liballoc/vec.rs","byte_start":793093,"byte_end":793166,"line_start":287,"line_end":287,"column_start":1,"column_end":74}},{"value":"/ [`capacity`]: ../../std/vec/struct.Vec.html#method.capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":793167,"byte_end":793230,"line_start":288,"line_end":288,"column_start":1,"column_end":64}},{"value":"/ [`mem::size_of::<T>`]: ../../std/mem/fn.size_of.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":793231,"byte_end":793287,"line_start":289,"line_end":289,"column_start":1,"column_end":57}},{"value":"/ [`len`]: ../../std/vec/struct.Vec.html#method.len","span":{"file_name":"src/liballoc/vec.rs","byte_start":793288,"byte_end":793341,"line_start":290,"line_end":290,"column_start":1,"column_end":54}},{"value":"/ [`push`]: ../../std/vec/struct.Vec.html#method.push","span":{"file_name":"src/liballoc/vec.rs","byte_start":793342,"byte_end":793397,"line_start":291,"line_end":291,"column_start":1,"column_end":56}},{"value":"/ [`insert`]: ../../std/vec/struct.Vec.html#method.insert","span":{"file_name":"src/liballoc/vec.rs","byte_start":793398,"byte_end":793457,"line_start":292,"line_end":292,"column_start":1,"column_end":60}},{"value":"/ [`reserve`]: ../../std/vec/struct.Vec.html#method.reserve","span":{"file_name":"src/liballoc/vec.rs","byte_start":793458,"byte_end":793519,"line_start":293,"line_end":293,"column_start":1,"column_end":62}},{"value":"/ [owned slice]: ../../std/boxed/struct.Box.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":793520,"byte_end":793570,"line_start":294,"line_end":294,"column_start":1,"column_end":51}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":793571,"byte_end":793616,"line_start":295,"line_end":295,"column_start":1,"column_end":46}},{"value":"rustc_diagnostic_item = \"vec_type\"","span":{"file_name":"src/liballoc/vec.rs","byte_start":793639,"byte_end":793673,"line_start":296,"line_end":296,"column_start":23,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3905},"span":{"file_name":"src/liballoc/vec.rs","byte_start":794344,"byte_end":794347,"line_start":320,"line_end":320,"column_start":18,"column_end":21},"name":"new","qualname":"<Vec<T>>::new","value":"fn () -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `Vec<T>`.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":793939,"byte_end":793976,"line_start":307,"line_end":307,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":793981,"byte_end":793984,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The vector will not allocate until elements are pushed onto it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":793989,"byte_end":794056,"line_start":309,"line_end":309,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":794061,"byte_end":794064,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":794069,"byte_end":794083,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":794088,"byte_end":794091,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":794096,"byte_end":794103,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ # #![allow(unused_mut)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":794108,"byte_end":794135,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/ let mut vec: Vec<i32> = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":794140,"byte_end":794179,"line_start":315,"line_end":315,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":794184,"byte_end":794191,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":794196,"byte_end":794205,"line_start":317,"line_end":317,"column_start":5,"column_end":14}},{"value":"rustc_const_stable(feature = \"const_vec_new\", since = \"1.32.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":794210,"byte_end":794276,"line_start":318,"line_end":318,"column_start":5,"column_end":71}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":794281,"byte_end":794326,"line_start":319,"line_end":319,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":"src/liballoc/vec.rs","byte_start":795481,"byte_end":795494,"line_start":354,"line_end":354,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Vec<T>>::with_capacity","value":"fn (capacity: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `Vec<T>` with the specified capacity.","sig":null,"attributes":[{"value":"/ Constructs a new, empty `Vec<T>` with the specified capacity.","span":{"file_name":"src/liballoc/vec.rs","byte_start":794414,"byte_end":794479,"line_start":324,"line_end":324,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":794484,"byte_end":794487,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ The vector will be able to hold exactly `capacity` elements without","span":{"file_name":"src/liballoc/vec.rs","byte_start":794492,"byte_end":794563,"line_start":326,"line_end":326,"column_start":5,"column_end":76}},{"value":"/ reallocating. If `capacity` is 0, the vector will not allocate.","span":{"file_name":"src/liballoc/vec.rs","byte_start":794568,"byte_end":794635,"line_start":327,"line_end":327,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":794640,"byte_end":794643,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ It is important to note that although the returned vector has the","span":{"file_name":"src/liballoc/vec.rs","byte_start":794648,"byte_end":794717,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/ *capacity* specified, the vector will have a zero *length*. For an","span":{"file_name":"src/liballoc/vec.rs","byte_start":794722,"byte_end":794792,"line_start":330,"line_end":330,"column_start":5,"column_end":75}},{"value":"/ explanation of the difference between length and capacity, see","span":{"file_name":"src/liballoc/vec.rs","byte_start":794797,"byte_end":794863,"line_start":331,"line_end":331,"column_start":5,"column_end":71}},{"value":"/ *[Capacity and reallocation]*.","span":{"file_name":"src/liballoc/vec.rs","byte_start":794868,"byte_end":794902,"line_start":332,"line_end":332,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":794907,"byte_end":794910,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ [Capacity and reallocation]: #capacity-and-reallocation","span":{"file_name":"src/liballoc/vec.rs","byte_start":794915,"byte_end":794974,"line_start":334,"line_end":334,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":794979,"byte_end":794982,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":794987,"byte_end":795001,"line_start":336,"line_end":336,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":795006,"byte_end":795009,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":795014,"byte_end":795021,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":795026,"byte_end":795067,"line_start":339,"line_end":339,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":795072,"byte_end":795075,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ // The vector contains no items, even though it has capacity for more","span":{"file_name":"src/liballoc/vec.rs","byte_start":795080,"byte_end":795153,"line_start":341,"line_end":341,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(vec.len(), 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":795158,"byte_end":795187,"line_start":342,"line_end":342,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":795192,"byte_end":795195,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ // These are all done without reallocating...","span":{"file_name":"src/liballoc/vec.rs","byte_start":795200,"byte_end":795249,"line_start":344,"line_end":344,"column_start":5,"column_end":54}},{"value":"/ for i in 0..10 {","span":{"file_name":"src/liballoc/vec.rs","byte_start":795254,"byte_end":795274,"line_start":345,"line_end":345,"column_start":5,"column_end":25}},{"value":"/     vec.push(i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":795279,"byte_end":795299,"line_start":346,"line_end":346,"column_start":5,"column_end":25}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":795304,"byte_end":795309,"line_start":347,"line_end":347,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":795314,"byte_end":795317,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ // ...but this may make the vector reallocate","span":{"file_name":"src/liballoc/vec.rs","byte_start":795322,"byte_end":795371,"line_start":349,"line_end":349,"column_start":5,"column_end":54}},{"value":"/ vec.push(11);","span":{"file_name":"src/liballoc/vec.rs","byte_start":795376,"byte_end":795393,"line_start":350,"line_end":350,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":795398,"byte_end":795405,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":795410,"byte_end":795419,"line_start":352,"line_end":352,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":795424,"byte_end":795469,"line_start":353,"line_end":353,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3907},"span":{"file_name":"src/liballoc/vec.rs","byte_start":796925,"byte_end":796939,"line_start":391,"line_end":391,"column_start":12,"column_end":26},"name":"into_raw_parts","qualname":"<Vec<T>>::into_raw_parts","value":"fn (self) -> (*mut T, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a `Vec<T>` into its raw components.","sig":null,"attributes":[{"value":"/ Decomposes a `Vec<T>` into its raw components.","span":{"file_name":"src/liballoc/vec.rs","byte_start":795596,"byte_end":795646,"line_start":358,"line_end":358,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":795651,"byte_end":795654,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Returns the raw pointer to the underlying data, the length of","span":{"file_name":"src/liballoc/vec.rs","byte_start":795659,"byte_end":795724,"line_start":360,"line_end":360,"column_start":5,"column_end":70}},{"value":"/ the vector (in elements), and the allocated capacity of the","span":{"file_name":"src/liballoc/vec.rs","byte_start":795729,"byte_end":795792,"line_start":361,"line_end":361,"column_start":5,"column_end":68}},{"value":"/ data (in elements). These are the same arguments in the same","span":{"file_name":"src/liballoc/vec.rs","byte_start":795797,"byte_end":795861,"line_start":362,"line_end":362,"column_start":5,"column_end":69}},{"value":"/ order as the arguments to [`from_raw_parts`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":795866,"byte_end":795915,"line_start":363,"line_end":363,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":795920,"byte_end":795923,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ After calling this function, the caller is responsible for the","span":{"file_name":"src/liballoc/vec.rs","byte_start":795928,"byte_end":795994,"line_start":365,"line_end":365,"column_start":5,"column_end":71}},{"value":"/ memory previously managed by the `Vec`. The only way to do","span":{"file_name":"src/liballoc/vec.rs","byte_start":795999,"byte_end":796061,"line_start":366,"line_end":366,"column_start":5,"column_end":67}},{"value":"/ this is to convert the raw pointer, length, and capacity back","span":{"file_name":"src/liballoc/vec.rs","byte_start":796066,"byte_end":796131,"line_start":367,"line_end":367,"column_start":5,"column_end":70}},{"value":"/ into a `Vec` with the [`from_raw_parts`] function, allowing","span":{"file_name":"src/liballoc/vec.rs","byte_start":796136,"byte_end":796199,"line_start":368,"line_end":368,"column_start":5,"column_end":68}},{"value":"/ the destructor to perform the cleanup.","span":{"file_name":"src/liballoc/vec.rs","byte_start":796204,"byte_end":796246,"line_start":369,"line_end":369,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":796251,"byte_end":796254,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ [`from_raw_parts`]: #method.from_raw_parts","span":{"file_name":"src/liballoc/vec.rs","byte_start":796259,"byte_end":796305,"line_start":371,"line_end":371,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":796310,"byte_end":796313,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":796318,"byte_end":796332,"line_start":373,"line_end":373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":796337,"byte_end":796340,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":796345,"byte_end":796352,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ #![feature(vec_into_raw_parts)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":796357,"byte_end":796392,"line_start":376,"line_end":376,"column_start":5,"column_end":40}},{"value":"/ let v: Vec<i32> = vec![-1, 0, 1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":796397,"byte_end":796434,"line_start":377,"line_end":377,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":796439,"byte_end":796442,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let (ptr, len, cap) = v.into_raw_parts();","span":{"file_name":"src/liballoc/vec.rs","byte_start":796447,"byte_end":796492,"line_start":379,"line_end":379,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":796497,"byte_end":796500,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ let rebuilt = unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":796505,"byte_end":796531,"line_start":381,"line_end":381,"column_start":5,"column_end":31}},{"value":"/     // We can now make changes to the components, such as","span":{"file_name":"src/liballoc/vec.rs","byte_start":796536,"byte_end":796597,"line_start":382,"line_end":382,"column_start":5,"column_end":66}},{"value":"/     // transmuting the raw pointer to a compatible type.","span":{"file_name":"src/liballoc/vec.rs","byte_start":796602,"byte_end":796662,"line_start":383,"line_end":383,"column_start":5,"column_end":65}},{"value":"/     let ptr = ptr as *mut u32;","span":{"file_name":"src/liballoc/vec.rs","byte_start":796667,"byte_end":796701,"line_start":384,"line_end":384,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":796706,"byte_end":796709,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/     Vec::from_raw_parts(ptr, len, cap)","span":{"file_name":"src/liballoc/vec.rs","byte_start":796714,"byte_end":796756,"line_start":386,"line_end":386,"column_start":5,"column_end":47}},{"value":"/ };","span":{"file_name":"src/liballoc/vec.rs","byte_start":796761,"byte_end":796767,"line_start":387,"line_end":387,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(rebuilt, [4294967295, 0, 1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":796772,"byte_end":796816,"line_start":388,"line_end":388,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":796821,"byte_end":796828,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n           \"65816\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":796833,"byte_end":796913,"line_start":390,"line_end":390,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3908},"span":{"file_name":"src/liballoc/vec.rs","byte_start":799552,"byte_end":799566,"line_start":455,"line_end":455,"column_start":19,"column_end":33},"name":"from_raw_parts","qualname":"<Vec<T>>::from_raw_parts","value":"fn (ptr: *mut T, length: usize, capacity: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Vec<T>` directly from the raw components of another vector.","sig":null,"attributes":[{"value":"/ Creates a `Vec<T>` directly from the raw components of another vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":797087,"byte_end":797161,"line_start":396,"line_end":396,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":797166,"byte_end":797169,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/vec.rs","byte_start":797174,"byte_end":797186,"line_start":398,"line_end":398,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":797191,"byte_end":797194,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This is highly unsafe, due to the number of invariants that aren't","span":{"file_name":"src/liballoc/vec.rs","byte_start":797199,"byte_end":797269,"line_start":400,"line_end":400,"column_start":5,"column_end":75}},{"value":"/ checked:","span":{"file_name":"src/liballoc/vec.rs","byte_start":797274,"byte_end":797286,"line_start":401,"line_end":401,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":797291,"byte_end":797294,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`","span":{"file_name":"src/liballoc/vec.rs","byte_start":797299,"byte_end":797374,"line_start":403,"line_end":403,"column_start":5,"column_end":80}},{"value":"/   (at least, it's highly likely to be incorrect if it wasn't).","span":{"file_name":"src/liballoc/vec.rs","byte_start":797379,"byte_end":797445,"line_start":404,"line_end":404,"column_start":5,"column_end":71}},{"value":"/ * `ptr`'s `T` needs to have the same size and alignment as it was allocated with.","span":{"file_name":"src/liballoc/vec.rs","byte_start":797450,"byte_end":797535,"line_start":405,"line_end":405,"column_start":5,"column_end":90}},{"value":"/ * `length` needs to be less than or equal to `capacity`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":797540,"byte_end":797600,"line_start":406,"line_end":406,"column_start":5,"column_end":65}},{"value":"/ * `capacity` needs to be the capacity that the pointer was allocated with.","span":{"file_name":"src/liballoc/vec.rs","byte_start":797605,"byte_end":797683,"line_start":407,"line_end":407,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":797688,"byte_end":797691,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Violating these may cause problems like corrupting the allocator's","span":{"file_name":"src/liballoc/vec.rs","byte_start":797696,"byte_end":797766,"line_start":409,"line_end":409,"column_start":5,"column_end":75}},{"value":"/ internal data structures. For example it is **not** safe","span":{"file_name":"src/liballoc/vec.rs","byte_start":797771,"byte_end":797831,"line_start":410,"line_end":410,"column_start":5,"column_end":65}},{"value":"/ to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":797836,"byte_end":797917,"line_start":411,"line_end":411,"column_start":5,"column_end":86}},{"value":"/ It's also not safe to build one from a `Vec<u16>` and its length, because","span":{"file_name":"src/liballoc/vec.rs","byte_start":797922,"byte_end":797999,"line_start":412,"line_end":412,"column_start":5,"column_end":82}},{"value":"/ the allocator cares about the alignment, and these two types have different","span":{"file_name":"src/liballoc/vec.rs","byte_start":798004,"byte_end":798083,"line_start":413,"line_end":413,"column_start":5,"column_end":84}},{"value":"/ alignments. The buffer was allocated with alignment 2 (for `u16`), but after","span":{"file_name":"src/liballoc/vec.rs","byte_start":798088,"byte_end":798168,"line_start":414,"line_end":414,"column_start":5,"column_end":85}},{"value":"/ turning it into a `Vec<u8>` it'll be deallocated with alignment 1.","span":{"file_name":"src/liballoc/vec.rs","byte_start":798173,"byte_end":798243,"line_start":415,"line_end":415,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":798248,"byte_end":798251,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ The ownership of `ptr` is effectively transferred to the","span":{"file_name":"src/liballoc/vec.rs","byte_start":798256,"byte_end":798316,"line_start":417,"line_end":417,"column_start":5,"column_end":65}},{"value":"/ `Vec<T>` which may then deallocate, reallocate or change the","span":{"file_name":"src/liballoc/vec.rs","byte_start":798321,"byte_end":798385,"line_start":418,"line_end":418,"column_start":5,"column_end":69}},{"value":"/ contents of memory pointed to by the pointer at will. Ensure","span":{"file_name":"src/liballoc/vec.rs","byte_start":798390,"byte_end":798454,"line_start":419,"line_end":419,"column_start":5,"column_end":69}},{"value":"/ that nothing else uses the pointer after calling this","span":{"file_name":"src/liballoc/vec.rs","byte_start":798459,"byte_end":798516,"line_start":420,"line_end":420,"column_start":5,"column_end":62}},{"value":"/ function.","span":{"file_name":"src/liballoc/vec.rs","byte_start":798521,"byte_end":798534,"line_start":421,"line_end":421,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":798539,"byte_end":798542,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ [`String`]: ../../std/string/struct.String.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":798547,"byte_end":798598,"line_start":423,"line_end":423,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":798603,"byte_end":798606,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":798611,"byte_end":798625,"line_start":425,"line_end":425,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":798630,"byte_end":798633,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":798638,"byte_end":798645,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"/ use std::ptr;","span":{"file_name":"src/liballoc/vec.rs","byte_start":798650,"byte_end":798667,"line_start":428,"line_end":428,"column_start":5,"column_end":22}},{"value":"/ use std::mem;","span":{"file_name":"src/liballoc/vec.rs","byte_start":798672,"byte_end":798689,"line_start":429,"line_end":429,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":798694,"byte_end":798697,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ let v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":798702,"byte_end":798728,"line_start":431,"line_end":431,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":798733,"byte_end":798736,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ // Prevent running `v`'s destructor so we are in complete control","span":{"file_name":"src/liballoc/vec.rs","byte_start":798804,"byte_end":798873,"line_start":434,"line_end":434,"column_start":5,"column_end":74}},{"value":"/ // of the allocation.","span":{"file_name":"src/liballoc/vec.rs","byte_start":798878,"byte_end":798903,"line_start":435,"line_end":435,"column_start":5,"column_end":30}},{"value":"/ let mut v = mem::ManuallyDrop::new(v);","span":{"file_name":"src/liballoc/vec.rs","byte_start":798908,"byte_end":798950,"line_start":436,"line_end":436,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":798955,"byte_end":798958,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ // Pull out the various important pieces of information about `v`","span":{"file_name":"src/liballoc/vec.rs","byte_start":798963,"byte_end":799032,"line_start":438,"line_end":438,"column_start":5,"column_end":74}},{"value":"/ let p = v.as_mut_ptr();","span":{"file_name":"src/liballoc/vec.rs","byte_start":799037,"byte_end":799064,"line_start":439,"line_end":439,"column_start":5,"column_end":32}},{"value":"/ let len = v.len();","span":{"file_name":"src/liballoc/vec.rs","byte_start":799069,"byte_end":799091,"line_start":440,"line_end":440,"column_start":5,"column_end":27}},{"value":"/ let cap = v.capacity();","span":{"file_name":"src/liballoc/vec.rs","byte_start":799096,"byte_end":799123,"line_start":441,"line_end":441,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":799128,"byte_end":799131,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":799136,"byte_end":799148,"line_start":443,"line_end":443,"column_start":5,"column_end":17}},{"value":"/     // Overwrite memory with 4, 5, 6","span":{"file_name":"src/liballoc/vec.rs","byte_start":799153,"byte_end":799193,"line_start":444,"line_end":444,"column_start":5,"column_end":45}},{"value":"/     for i in 0..len as isize {","span":{"file_name":"src/liballoc/vec.rs","byte_start":799198,"byte_end":799232,"line_start":445,"line_end":445,"column_start":5,"column_end":39}},{"value":"/         ptr::write(p.offset(i), 4 + i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":799237,"byte_end":799280,"line_start":446,"line_end":446,"column_start":5,"column_end":48}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":799285,"byte_end":799294,"line_start":447,"line_end":447,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":799299,"byte_end":799302,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/     // Put everything back together into a Vec","span":{"file_name":"src/liballoc/vec.rs","byte_start":799307,"byte_end":799357,"line_start":449,"line_end":449,"column_start":5,"column_end":55}},{"value":"/     let rebuilt = Vec::from_raw_parts(p, len, cap);","span":{"file_name":"src/liballoc/vec.rs","byte_start":799362,"byte_end":799417,"line_start":450,"line_end":450,"column_start":5,"column_end":60}},{"value":"/     assert_eq!(rebuilt, [4, 5, 6]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":799422,"byte_end":799461,"line_start":451,"line_end":451,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":799466,"byte_end":799471,"line_start":452,"line_end":452,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":799476,"byte_end":799483,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":799488,"byte_end":799533,"line_start":454,"line_end":454,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3909},"span":{"file_name":"src/liballoc/vec.rs","byte_start":800018,"byte_end":800026,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Vec<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the vector can hold without\n reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the vector can hold without","span":{"file_name":"src/liballoc/vec.rs","byte_start":799707,"byte_end":799769,"line_start":459,"line_end":459,"column_start":5,"column_end":67}},{"value":"/ reallocating.","span":{"file_name":"src/liballoc/vec.rs","byte_start":799774,"byte_end":799791,"line_start":460,"line_end":460,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":799796,"byte_end":799799,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":799804,"byte_end":799818,"line_start":462,"line_end":462,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":799823,"byte_end":799826,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":799831,"byte_end":799838,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"/ let vec: Vec<i32> = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":799843,"byte_end":799890,"line_start":465,"line_end":465,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":799895,"byte_end":799930,"line_start":466,"line_end":466,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":799935,"byte_end":799942,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":799947,"byte_end":799956,"line_start":468,"line_end":468,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":799961,"byte_end":800006,"line_start":469,"line_end":469,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3910},"span":{"file_name":"src/liballoc/vec.rs","byte_start":800731,"byte_end":800738,"line_start":492,"line_end":492,"column_start":12,"column_end":19},"name":"reserve","qualname":"<Vec<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the given `Vec<T>`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/vec.rs","byte_start":800084,"byte_end":800160,"line_start":474,"line_end":474,"column_start":5,"column_end":81}},{"value":"/ in the given `Vec<T>`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/vec.rs","byte_start":800165,"byte_end":800238,"line_start":475,"line_end":475,"column_start":5,"column_end":78}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/vec.rs","byte_start":800243,"byte_end":800312,"line_start":476,"line_end":476,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/vec.rs","byte_start":800317,"byte_end":800388,"line_start":477,"line_end":477,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":800393,"byte_end":800428,"line_start":478,"line_end":478,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":800433,"byte_end":800436,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":800441,"byte_end":800453,"line_start":480,"line_end":480,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":800458,"byte_end":800461,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":800466,"byte_end":800515,"line_start":482,"line_end":482,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":800520,"byte_end":800523,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":800528,"byte_end":800542,"line_start":484,"line_end":484,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":800547,"byte_end":800550,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800555,"byte_end":800562,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":800567,"byte_end":800593,"line_start":487,"line_end":487,"column_start":5,"column_end":31}},{"value":"/ vec.reserve(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":800598,"byte_end":800618,"line_start":488,"line_end":488,"column_start":5,"column_end":25}},{"value":"/ assert!(vec.capacity() >= 11);","span":{"file_name":"src/liballoc/vec.rs","byte_start":800623,"byte_end":800657,"line_start":489,"line_end":489,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":800662,"byte_end":800669,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":800674,"byte_end":800719,"line_start":491,"line_end":491,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3911},"span":{"file_name":"src/liballoc/vec.rs","byte_start":801654,"byte_end":801667,"line_start":517,"line_end":517,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<Vec<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/vec.rs","byte_start":800830,"byte_end":800905,"line_start":496,"line_end":496,"column_start":5,"column_end":80}},{"value":"/ be inserted in the given `Vec<T>`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/vec.rs","byte_start":800910,"byte_end":800979,"line_start":497,"line_end":497,"column_start":5,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":800984,"byte_end":801056,"line_start":498,"line_end":498,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":801061,"byte_end":801116,"line_start":499,"line_end":499,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801121,"byte_end":801124,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/vec.rs","byte_start":801129,"byte_end":801199,"line_start":501,"line_end":501,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/vec.rs","byte_start":801204,"byte_end":801276,"line_start":502,"line_end":502,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/vec.rs","byte_start":801281,"byte_end":801345,"line_start":503,"line_end":503,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801350,"byte_end":801353,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":801358,"byte_end":801370,"line_start":505,"line_end":505,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801375,"byte_end":801378,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Panics if the new capacity overflows `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":801383,"byte_end":801432,"line_start":507,"line_end":507,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801437,"byte_end":801440,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":801445,"byte_end":801459,"line_start":509,"line_end":509,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":801464,"byte_end":801467,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":801472,"byte_end":801479,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":801484,"byte_end":801510,"line_start":512,"line_end":512,"column_start":5,"column_end":31}},{"value":"/ vec.reserve_exact(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801515,"byte_end":801541,"line_start":513,"line_end":513,"column_start":5,"column_end":31}},{"value":"/ assert!(vec.capacity() >= 11);","span":{"file_name":"src/liballoc/vec.rs","byte_start":801546,"byte_end":801580,"line_start":514,"line_end":514,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":801585,"byte_end":801592,"line_start":515,"line_end":515,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":801597,"byte_end":801642,"line_start":516,"line_end":516,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3912},"span":{"file_name":"src/liballoc/vec.rs","byte_start":803054,"byte_end":803065,"line_start":554,"line_end":554,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<Vec<T>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `Vec<T>`. The collection may reserve more space to avoid\n frequent reallocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"src/liballoc/vec.rs","byte_start":801765,"byte_end":801849,"line_start":521,"line_end":521,"column_start":5,"column_end":89}},{"value":"/ in the given `Vec<T>`. The collection may reserve more space to avoid","span":{"file_name":"src/liballoc/vec.rs","byte_start":801854,"byte_end":801927,"line_start":522,"line_end":522,"column_start":5,"column_end":78}},{"value":"/ frequent reallocations. After calling `reserve`, capacity will be","span":{"file_name":"src/liballoc/vec.rs","byte_start":801932,"byte_end":802001,"line_start":523,"line_end":523,"column_start":5,"column_end":74}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"src/liballoc/vec.rs","byte_start":802006,"byte_end":802077,"line_start":524,"line_end":524,"column_start":5,"column_end":76}},{"value":"/ capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":802082,"byte_end":802117,"line_start":525,"line_end":525,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802122,"byte_end":802125,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/vec.rs","byte_start":802130,"byte_end":802142,"line_start":527,"line_end":527,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802147,"byte_end":802150,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/vec.rs","byte_start":802155,"byte_end":802235,"line_start":529,"line_end":529,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/vec.rs","byte_start":802240,"byte_end":802256,"line_start":530,"line_end":530,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802261,"byte_end":802264,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":802269,"byte_end":802283,"line_start":532,"line_end":532,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802288,"byte_end":802291,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802296,"byte_end":802303,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":802308,"byte_end":802336,"line_start":535,"line_end":535,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/vec.rs","byte_start":802341,"byte_end":802383,"line_start":536,"line_end":536,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802388,"byte_end":802391,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/vec.rs","byte_start":802396,"byte_end":802468,"line_start":538,"line_end":538,"column_start":5,"column_end":77}},{"value":"/     let mut output = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":802473,"byte_end":802509,"line_start":539,"line_end":539,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802514,"byte_end":802517,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/vec.rs","byte_start":802522,"byte_end":802576,"line_start":541,"line_end":541,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/vec.rs","byte_start":802581,"byte_end":802621,"line_start":542,"line_end":542,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802626,"byte_end":802629,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/vec.rs","byte_start":802634,"byte_end":802705,"line_start":544,"line_end":544,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/vec.rs","byte_start":802710,"byte_end":802756,"line_start":545,"line_end":545,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/vec.rs","byte_start":802761,"byte_end":802804,"line_start":546,"line_end":546,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/vec.rs","byte_start":802809,"byte_end":802821,"line_start":547,"line_end":547,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":802826,"byte_end":802829,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/vec.rs","byte_start":802834,"byte_end":802852,"line_start":549,"line_end":549,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":802857,"byte_end":802862,"line_start":550,"line_end":550,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":802867,"byte_end":802952,"line_start":551,"line_end":551,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":802957,"byte_end":802964,"line_start":552,"line_end":552,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":802969,"byte_end":803042,"line_start":553,"line_end":553,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3913},"span":{"file_name":"src/liballoc/vec.rs","byte_start":804652,"byte_end":804669,"line_start":594,"line_end":594,"column_start":12,"column_end":29},"name":"try_reserve_exact","qualname":"<Vec<T>>::try_reserve_exact","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserves the minimum capacity for exactly `additional` more elements to\n be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Tries to reserves the minimum capacity for exactly `additional` more elements to","span":{"file_name":"src/liballoc/vec.rs","byte_start":803191,"byte_end":803275,"line_start":558,"line_end":558,"column_start":5,"column_end":89}},{"value":"/ be inserted in the given `Vec<T>`. After calling `reserve_exact`,","span":{"file_name":"src/liballoc/vec.rs","byte_start":803280,"byte_end":803349,"line_start":559,"line_end":559,"column_start":5,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":803354,"byte_end":803426,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"src/liballoc/vec.rs","byte_start":803431,"byte_end":803486,"line_start":561,"line_end":561,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803491,"byte_end":803494,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"src/liballoc/vec.rs","byte_start":803499,"byte_end":803569,"line_start":563,"line_end":563,"column_start":5,"column_end":75}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"src/liballoc/vec.rs","byte_start":803574,"byte_end":803646,"line_start":564,"line_end":564,"column_start":5,"column_end":77}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"src/liballoc/vec.rs","byte_start":803651,"byte_end":803715,"line_start":565,"line_end":565,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803720,"byte_end":803723,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"src/liballoc/vec.rs","byte_start":803728,"byte_end":803740,"line_start":567,"line_end":567,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803745,"byte_end":803748,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"src/liballoc/vec.rs","byte_start":803753,"byte_end":803833,"line_start":569,"line_end":569,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"src/liballoc/vec.rs","byte_start":803838,"byte_end":803854,"line_start":570,"line_end":570,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803859,"byte_end":803862,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":803867,"byte_end":803881,"line_start":572,"line_end":572,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803886,"byte_end":803889,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":803894,"byte_end":803901,"line_start":574,"line_end":574,"column_start":5,"column_end":12}},{"value":"/ #![feature(try_reserve)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":803906,"byte_end":803934,"line_start":575,"line_end":575,"column_start":5,"column_end":33}},{"value":"/ use std::collections::TryReserveError;","span":{"file_name":"src/liballoc/vec.rs","byte_start":803939,"byte_end":803981,"line_start":576,"line_end":576,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":803986,"byte_end":803989,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {","span":{"file_name":"src/liballoc/vec.rs","byte_start":803994,"byte_end":804066,"line_start":578,"line_end":578,"column_start":5,"column_end":77}},{"value":"/     let mut output = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":804071,"byte_end":804107,"line_start":579,"line_end":579,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804112,"byte_end":804115,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/     // Pre-reserve the memory, exiting if we can't","span":{"file_name":"src/liballoc/vec.rs","byte_start":804120,"byte_end":804174,"line_start":581,"line_end":581,"column_start":5,"column_end":59}},{"value":"/     output.try_reserve(data.len())?;","span":{"file_name":"src/liballoc/vec.rs","byte_start":804179,"byte_end":804219,"line_start":582,"line_end":582,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804224,"byte_end":804227,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/     // Now we know this can't OOM in the middle of our complex work","span":{"file_name":"src/liballoc/vec.rs","byte_start":804232,"byte_end":804303,"line_start":584,"line_end":584,"column_start":5,"column_end":76}},{"value":"/     output.extend(data.iter().map(|&val| {","span":{"file_name":"src/liballoc/vec.rs","byte_start":804308,"byte_end":804354,"line_start":585,"line_end":585,"column_start":5,"column_end":51}},{"value":"/         val * 2 + 5 // very complicated","span":{"file_name":"src/liballoc/vec.rs","byte_start":804359,"byte_end":804402,"line_start":586,"line_end":586,"column_start":5,"column_end":48}},{"value":"/     }));","span":{"file_name":"src/liballoc/vec.rs","byte_start":804407,"byte_end":804419,"line_start":587,"line_end":587,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804424,"byte_end":804427,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/     Ok(output)","span":{"file_name":"src/liballoc/vec.rs","byte_start":804432,"byte_end":804450,"line_start":589,"line_end":589,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":804455,"byte_end":804460,"line_start":590,"line_end":590,"column_start":5,"column_end":10}},{"value":"/ # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":804465,"byte_end":804550,"line_start":591,"line_end":591,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":804555,"byte_end":804562,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":804567,"byte_end":804640,"line_start":593,"line_end":593,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":"src/liballoc/vec.rs","byte_start":805349,"byte_end":805362,"line_start":613,"line_end":613,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Vec<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the vector as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the vector as much as possible.","span":{"file_name":"src/liballoc/vec.rs","byte_start":804801,"byte_end":804860,"line_start":598,"line_end":598,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":804865,"byte_end":804868,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ It will drop down as close as possible to the length but the allocator","span":{"file_name":"src/liballoc/vec.rs","byte_start":804873,"byte_end":804947,"line_start":600,"line_end":600,"column_start":5,"column_end":79}},{"value":"/ may still inform the vector that there is space for a few more elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":804952,"byte_end":805028,"line_start":601,"line_end":601,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805033,"byte_end":805036,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":805041,"byte_end":805055,"line_start":603,"line_end":603,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805060,"byte_end":805063,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":805068,"byte_end":805075,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":805080,"byte_end":805121,"line_start":606,"line_end":606,"column_start":5,"column_end":46}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"src/liballoc/vec.rs","byte_start":805126,"byte_end":805168,"line_start":607,"line_end":607,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":805173,"byte_end":805208,"line_start":608,"line_end":608,"column_start":5,"column_end":40}},{"value":"/ vec.shrink_to_fit();","span":{"file_name":"src/liballoc/vec.rs","byte_start":805213,"byte_end":805237,"line_start":609,"line_end":609,"column_start":5,"column_end":29}},{"value":"/ assert!(vec.capacity() >= 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":805242,"byte_end":805275,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":805280,"byte_end":805287,"line_start":611,"line_end":611,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":805292,"byte_end":805337,"line_start":612,"line_end":612,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3915},"span":{"file_name":"src/liballoc/vec.rs","byte_start":806218,"byte_end":806227,"line_start":642,"line_end":642,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<Vec<T>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the vector with a lower bound.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the vector with a lower bound.","span":{"file_name":"src/liballoc/vec.rs","byte_start":805484,"byte_end":805542,"line_start":619,"line_end":619,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805547,"byte_end":805550,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ The capacity will remain at least as large as both the length","span":{"file_name":"src/liballoc/vec.rs","byte_start":805555,"byte_end":805620,"line_start":621,"line_end":621,"column_start":5,"column_end":70}},{"value":"/ and the supplied value.","span":{"file_name":"src/liballoc/vec.rs","byte_start":805625,"byte_end":805652,"line_start":622,"line_end":622,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805657,"byte_end":805660,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":805665,"byte_end":805677,"line_start":624,"line_end":624,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805682,"byte_end":805685,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"src/liballoc/vec.rs","byte_start":805690,"byte_end":805753,"line_start":626,"line_end":626,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"src/liballoc/vec.rs","byte_start":805758,"byte_end":805779,"line_start":627,"line_end":627,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805784,"byte_end":805787,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":805792,"byte_end":805806,"line_start":629,"line_end":629,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":805811,"byte_end":805814,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":805819,"byte_end":805826,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ #![feature(shrink_to)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":805831,"byte_end":805857,"line_start":632,"line_end":632,"column_start":5,"column_end":31}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":805862,"byte_end":805903,"line_start":633,"line_end":633,"column_start":5,"column_end":46}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"src/liballoc/vec.rs","byte_start":805908,"byte_end":805950,"line_start":634,"line_end":634,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":805955,"byte_end":805990,"line_start":635,"line_end":635,"column_start":5,"column_end":40}},{"value":"/ vec.shrink_to(4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":805995,"byte_end":806016,"line_start":636,"line_end":636,"column_start":5,"column_end":26}},{"value":"/ assert!(vec.capacity() >= 4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":806021,"byte_end":806054,"line_start":637,"line_end":637,"column_start":5,"column_end":38}},{"value":"/ vec.shrink_to(0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":806059,"byte_end":806080,"line_start":638,"line_end":638,"column_start":5,"column_end":26}},{"value":"/ assert!(vec.capacity() >= 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":806085,"byte_end":806118,"line_start":639,"line_end":639,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":806123,"byte_end":806130,"line_start":640,"line_end":640,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":806135,"byte_end":806206,"line_start":641,"line_end":641,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3916},"span":{"file_name":"src/liballoc/vec.rs","byte_start":807038,"byte_end":807054,"line_start":671,"line_end":671,"column_start":12,"column_end":28},"name":"into_boxed_slice","qualname":"<Vec<T>>::into_boxed_slice","value":"fn (mut self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the vector into [`Box<[T]>`][owned slice].","sig":null,"attributes":[{"value":"/ Converts the vector into [`Box<[T]>`][owned slice].","span":{"file_name":"src/liballoc/vec.rs","byte_start":806339,"byte_end":806394,"line_start":646,"line_end":646,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806399,"byte_end":806402,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"src/liballoc/vec.rs","byte_start":806407,"byte_end":806456,"line_start":648,"line_end":648,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806461,"byte_end":806464,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ [owned slice]: ../../std/boxed/struct.Box.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":806469,"byte_end":806519,"line_start":650,"line_end":650,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806524,"byte_end":806527,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":806532,"byte_end":806546,"line_start":652,"line_end":652,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806551,"byte_end":806554,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":806559,"byte_end":806566,"line_start":654,"line_end":654,"column_start":5,"column_end":12}},{"value":"/ let v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":806571,"byte_end":806597,"line_start":655,"line_end":655,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806602,"byte_end":806605,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ let slice = v.into_boxed_slice();","span":{"file_name":"src/liballoc/vec.rs","byte_start":806610,"byte_end":806647,"line_start":657,"line_end":657,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":806652,"byte_end":806659,"line_start":658,"line_end":658,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806664,"byte_end":806667,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Any excess capacity is removed:","span":{"file_name":"src/liballoc/vec.rs","byte_start":806672,"byte_end":806707,"line_start":660,"line_end":660,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806712,"byte_end":806715,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":806720,"byte_end":806727,"line_start":662,"line_end":662,"column_start":5,"column_end":12}},{"value":"/ let mut vec = Vec::with_capacity(10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":806732,"byte_end":806773,"line_start":663,"line_end":663,"column_start":5,"column_end":46}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"src/liballoc/vec.rs","byte_start":806778,"byte_end":806820,"line_start":664,"line_end":664,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":806825,"byte_end":806828,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec.capacity(), 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":806833,"byte_end":806868,"line_start":666,"line_end":666,"column_start":5,"column_end":40}},{"value":"/ let slice = vec.into_boxed_slice();","span":{"file_name":"src/liballoc/vec.rs","byte_start":806873,"byte_end":806912,"line_start":667,"line_end":667,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(slice.into_vec().capacity(), 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":806917,"byte_end":806964,"line_start":668,"line_end":668,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":806969,"byte_end":806976,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":806981,"byte_end":807026,"line_start":670,"line_end":670,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3917},"span":{"file_name":"src/liballoc/vec.rs","byte_start":808489,"byte_end":808497,"line_start":723,"line_end":723,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping\n the rest.","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` elements and dropping","span":{"file_name":"src/liballoc/vec.rs","byte_start":807253,"byte_end":807323,"line_start":680,"line_end":680,"column_start":5,"column_end":75}},{"value":"/ the rest.","span":{"file_name":"src/liballoc/vec.rs","byte_start":807328,"byte_end":807341,"line_start":681,"line_end":681,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807346,"byte_end":807349,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the vector's current length, this has no","span":{"file_name":"src/liballoc/vec.rs","byte_start":807354,"byte_end":807423,"line_start":683,"line_end":683,"column_start":5,"column_end":74}},{"value":"/ effect.","span":{"file_name":"src/liballoc/vec.rs","byte_start":807428,"byte_end":807439,"line_start":684,"line_end":684,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807444,"byte_end":807447,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ The [`drain`] method can emulate `truncate`, but causes the excess","span":{"file_name":"src/liballoc/vec.rs","byte_start":807452,"byte_end":807522,"line_start":686,"line_end":686,"column_start":5,"column_end":75}},{"value":"/ elements to be returned instead of dropped.","span":{"file_name":"src/liballoc/vec.rs","byte_start":807527,"byte_end":807574,"line_start":687,"line_end":687,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807579,"byte_end":807582,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":807587,"byte_end":807652,"line_start":689,"line_end":689,"column_start":5,"column_end":70}},{"value":"/ of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":807657,"byte_end":807675,"line_start":690,"line_end":690,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807680,"byte_end":807683,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":807688,"byte_end":807702,"line_start":692,"line_end":692,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807707,"byte_end":807710,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ Truncating a five element vector to two elements:","span":{"file_name":"src/liballoc/vec.rs","byte_start":807715,"byte_end":807768,"line_start":694,"line_end":694,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807773,"byte_end":807776,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":807781,"byte_end":807788,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3, 4, 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":807793,"byte_end":807831,"line_start":697,"line_end":697,"column_start":5,"column_end":43}},{"value":"/ vec.truncate(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":807836,"byte_end":807856,"line_start":698,"line_end":698,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":807861,"byte_end":807889,"line_start":699,"line_end":699,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":807894,"byte_end":807901,"line_start":700,"line_end":700,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":807906,"byte_end":807909,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ No truncation occurs when `len` is greater than the vector's current","span":{"file_name":"src/liballoc/vec.rs","byte_start":807914,"byte_end":807986,"line_start":702,"line_end":702,"column_start":5,"column_end":77}},{"value":"/ length:","span":{"file_name":"src/liballoc/vec.rs","byte_start":807991,"byte_end":808002,"line_start":703,"line_end":703,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":808007,"byte_end":808010,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":808015,"byte_end":808022,"line_start":705,"line_end":705,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":808027,"byte_end":808059,"line_start":706,"line_end":706,"column_start":5,"column_end":37}},{"value":"/ vec.truncate(8);","span":{"file_name":"src/liballoc/vec.rs","byte_start":808064,"byte_end":808084,"line_start":707,"line_end":707,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(vec, [1, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":808089,"byte_end":808120,"line_start":708,"line_end":708,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":808125,"byte_end":808132,"line_start":709,"line_end":709,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":808137,"byte_end":808140,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ Truncating when `len == 0` is equivalent to calling the [`clear`]","span":{"file_name":"src/liballoc/vec.rs","byte_start":808145,"byte_end":808214,"line_start":711,"line_end":711,"column_start":5,"column_end":74}},{"value":"/ method.","span":{"file_name":"src/liballoc/vec.rs","byte_start":808219,"byte_end":808230,"line_start":712,"line_end":712,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":808235,"byte_end":808238,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":808243,"byte_end":808250,"line_start":714,"line_end":714,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":808255,"byte_end":808287,"line_start":715,"line_end":715,"column_start":5,"column_end":37}},{"value":"/ vec.truncate(0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":808292,"byte_end":808312,"line_start":716,"line_end":716,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(vec, []);","span":{"file_name":"src/liballoc/vec.rs","byte_start":808317,"byte_end":808341,"line_start":717,"line_end":717,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":808346,"byte_end":808353,"line_start":718,"line_end":718,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":808358,"byte_end":808361,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"src/liballoc/vec.rs","byte_start":808366,"byte_end":808394,"line_start":720,"line_end":720,"column_start":5,"column_end":33}},{"value":"/ [`drain`]: #method.drain","span":{"file_name":"src/liballoc/vec.rs","byte_start":808399,"byte_end":808427,"line_start":721,"line_end":721,"column_start":5,"column_end":33}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":808432,"byte_end":808477,"line_start":722,"line_end":722,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3918},"span":{"file_name":"src/liballoc/vec.rs","byte_start":809530,"byte_end":809538,"line_start":754,"line_end":754,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Vec<T>>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a slice containing the entire vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":809166,"byte_end":809216,"line_start":741,"line_end":741,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809221,"byte_end":809224,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `&s[..]`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":809229,"byte_end":809256,"line_start":743,"line_end":743,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809261,"byte_end":809264,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":809269,"byte_end":809283,"line_start":745,"line_end":745,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809288,"byte_end":809291,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":809296,"byte_end":809303,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"src/liballoc/vec.rs","byte_start":809308,"byte_end":809339,"line_start":748,"line_end":748,"column_start":5,"column_end":36}},{"value":"/ let buffer = vec![1, 2, 3, 5, 8];","span":{"file_name":"src/liballoc/vec.rs","byte_start":809344,"byte_end":809381,"line_start":749,"line_end":749,"column_start":5,"column_end":42}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":809386,"byte_end":809435,"line_start":750,"line_end":750,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":809440,"byte_end":809447,"line_start":751,"line_end":751,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":809452,"byte_end":809461,"line_start":752,"line_end":752,"column_start":5,"column_end":14}},{"value":"stable(feature = \"vec_as_slice\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":809466,"byte_end":809518,"line_start":753,"line_end":753,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"src/liballoc/vec.rs","byte_start":809958,"byte_end":809970,"line_start":771,"line_end":771,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<Vec<T>>::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":809580,"byte_end":809630,"line_start":758,"line_end":758,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809635,"byte_end":809638,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `&mut s[..]`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":809643,"byte_end":809674,"line_start":760,"line_end":760,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809679,"byte_end":809682,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":809687,"byte_end":809701,"line_start":762,"line_end":762,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":809706,"byte_end":809709,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":809714,"byte_end":809721,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"src/liballoc/vec.rs","byte_start":809726,"byte_end":809756,"line_start":765,"line_end":765,"column_start":5,"column_end":35}},{"value":"/ let mut buffer = vec![0; 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":809761,"byte_end":809793,"line_start":766,"line_end":766,"column_start":5,"column_end":37}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":809798,"byte_end":809863,"line_start":767,"line_end":767,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":809868,"byte_end":809875,"line_start":768,"line_end":768,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":809880,"byte_end":809889,"line_start":769,"line_end":769,"column_start":5,"column_end":14}},{"value":"stable(feature = \"vec_as_slice\", since = \"1.7.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":809894,"byte_end":809946,"line_start":770,"line_end":770,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3920},"span":{"file_name":"src/liballoc/vec.rs","byte_start":811025,"byte_end":811031,"line_start":802,"line_end":802,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Vec<T>>::as_ptr","value":"fn (&self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the vector's buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the vector's buffer.","span":{"file_name":"src/liballoc/vec.rs","byte_start":810020,"byte_end":810069,"line_start":775,"line_end":775,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":810074,"byte_end":810077,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"src/liballoc/vec.rs","byte_start":810082,"byte_end":810150,"line_start":777,"line_end":777,"column_start":5,"column_end":73}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"src/liballoc/vec.rs","byte_start":810155,"byte_end":810220,"line_start":778,"line_end":778,"column_start":5,"column_end":70}},{"value":"/ Modifying the vector may cause its buffer to be reallocated,","span":{"file_name":"src/liballoc/vec.rs","byte_start":810225,"byte_end":810289,"line_start":779,"line_end":779,"column_start":5,"column_end":69}},{"value":"/ which would also make any pointers to it invalid.","span":{"file_name":"src/liballoc/vec.rs","byte_start":810294,"byte_end":810347,"line_start":780,"line_end":780,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":810352,"byte_end":810355,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ The caller must also ensure that the memory the pointer (non-transitively) points to","span":{"file_name":"src/liballoc/vec.rs","byte_start":810360,"byte_end":810448,"line_start":782,"line_end":782,"column_start":5,"column_end":93}},{"value":"/ is never written to (except inside an `UnsafeCell`) using this pointer or any pointer","span":{"file_name":"src/liballoc/vec.rs","byte_start":810453,"byte_end":810542,"line_start":783,"line_end":783,"column_start":5,"column_end":94}},{"value":"/ derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":810547,"byte_end":810636,"line_start":784,"line_end":784,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":810641,"byte_end":810644,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":810649,"byte_end":810663,"line_start":786,"line_end":786,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":810668,"byte_end":810671,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":810676,"byte_end":810683,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"/ let x = vec![1, 2, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":810688,"byte_end":810714,"line_start":789,"line_end":789,"column_start":5,"column_end":31}},{"value":"/ let x_ptr = x.as_ptr();","span":{"file_name":"src/liballoc/vec.rs","byte_start":810719,"byte_end":810746,"line_start":790,"line_end":790,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":810751,"byte_end":810754,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":810759,"byte_end":810771,"line_start":792,"line_end":792,"column_start":5,"column_end":17}},{"value":"/     for i in 0..x.len() {","span":{"file_name":"src/liballoc/vec.rs","byte_start":810776,"byte_end":810805,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(*x_ptr.add(i), 1 << i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":810810,"byte_end":810856,"line_start":794,"line_end":794,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":810861,"byte_end":810870,"line_start":795,"line_end":795,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":810875,"byte_end":810880,"line_start":796,"line_end":796,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":810885,"byte_end":810892,"line_start":797,"line_end":797,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":810897,"byte_end":810900,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ [`as_mut_ptr`]: #method.as_mut_ptr","span":{"file_name":"src/liballoc/vec.rs","byte_start":810905,"byte_end":810943,"line_start":799,"line_end":799,"column_start":5,"column_end":43}},{"value":"stable(feature = \"vec_as_ptr\", since = \"1.37.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":810948,"byte_end":810999,"line_start":800,"line_end":800,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":811004,"byte_end":811013,"line_start":801,"line_end":801,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3921},"span":{"file_name":"src/liballoc/vec.rs","byte_start":812220,"byte_end":812230,"line_start":838,"line_end":838,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Vec<T>>::as_mut_ptr","value":"fn (&mut self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the vector's buffer.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the vector's buffer.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811312,"byte_end":811373,"line_start":812,"line_end":812,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811378,"byte_end":811381,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the vector outlives the pointer this","span":{"file_name":"src/liballoc/vec.rs","byte_start":811386,"byte_end":811454,"line_start":814,"line_end":814,"column_start":5,"column_end":73}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811459,"byte_end":811524,"line_start":815,"line_end":815,"column_start":5,"column_end":70}},{"value":"/ Modifying the vector may cause its buffer to be reallocated,","span":{"file_name":"src/liballoc/vec.rs","byte_start":811529,"byte_end":811593,"line_start":816,"line_end":816,"column_start":5,"column_end":69}},{"value":"/ which would also make any pointers to it invalid.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811598,"byte_end":811651,"line_start":817,"line_end":817,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811656,"byte_end":811659,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":811664,"byte_end":811678,"line_start":819,"line_end":819,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811683,"byte_end":811686,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":811691,"byte_end":811698,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"/ // Allocate vector big enough for 4 elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811703,"byte_end":811752,"line_start":822,"line_end":822,"column_start":5,"column_end":54}},{"value":"/ let size = 4;","span":{"file_name":"src/liballoc/vec.rs","byte_start":811757,"byte_end":811774,"line_start":823,"line_end":823,"column_start":5,"column_end":22}},{"value":"/ let mut x: Vec<i32> = Vec::with_capacity(size);","span":{"file_name":"src/liballoc/vec.rs","byte_start":811779,"byte_end":811830,"line_start":824,"line_end":824,"column_start":5,"column_end":56}},{"value":"/ let x_ptr = x.as_mut_ptr();","span":{"file_name":"src/liballoc/vec.rs","byte_start":811835,"byte_end":811866,"line_start":825,"line_end":825,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":811871,"byte_end":811874,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ // Initialize elements via raw pointer writes, then set length.","span":{"file_name":"src/liballoc/vec.rs","byte_start":811879,"byte_end":811946,"line_start":827,"line_end":827,"column_start":5,"column_end":72}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":811951,"byte_end":811963,"line_start":828,"line_end":828,"column_start":5,"column_end":17}},{"value":"/     for i in 0..size {","span":{"file_name":"src/liballoc/vec.rs","byte_start":811968,"byte_end":811994,"line_start":829,"line_end":829,"column_start":5,"column_end":31}},{"value":"/         *x_ptr.add(i) = i as i32;","span":{"file_name":"src/liballoc/vec.rs","byte_start":811999,"byte_end":812036,"line_start":830,"line_end":830,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":812041,"byte_end":812050,"line_start":831,"line_end":831,"column_start":5,"column_end":14}},{"value":"/     x.set_len(size);","span":{"file_name":"src/liballoc/vec.rs","byte_start":812055,"byte_end":812079,"line_start":832,"line_end":832,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":812084,"byte_end":812089,"line_start":833,"line_end":833,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(&*x, &[0,1,2,3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":812094,"byte_end":812126,"line_start":834,"line_end":834,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":812131,"byte_end":812138,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_as_ptr\", since = \"1.37.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":812143,"byte_end":812194,"line_start":836,"line_end":836,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":812199,"byte_end":812208,"line_start":837,"line_end":837,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3922},"span":{"file_name":"src/liballoc/vec.rs","byte_start":815629,"byte_end":815636,"line_start":928,"line_end":928,"column_start":19,"column_end":26},"name":"set_len","qualname":"<Vec<T>>::set_len","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the vector to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":812517,"byte_end":812566,"line_start":848,"line_end":848,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812571,"byte_end":812574,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"src/liballoc/vec.rs","byte_start":812579,"byte_end":812646,"line_start":850,"line_end":850,"column_start":5,"column_end":72}},{"value":"/ invariants of the type. Normally changing the length of a vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":812651,"byte_end":812719,"line_start":851,"line_end":851,"column_start":5,"column_end":73}},{"value":"/ is done using one of the safe operations instead, such as","span":{"file_name":"src/liballoc/vec.rs","byte_start":812724,"byte_end":812785,"line_start":852,"line_end":852,"column_start":5,"column_end":66}},{"value":"/ [`truncate`], [`resize`], [`extend`], or [`clear`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":812790,"byte_end":812845,"line_start":853,"line_end":853,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":812850,"byte_end":812853,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ [`truncate`]: #method.truncate","span":{"file_name":"src/liballoc/vec.rs","byte_start":812858,"byte_end":812892,"line_start":855,"line_end":855,"column_start":5,"column_end":39}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"src/liballoc/vec.rs","byte_start":812897,"byte_end":812927,"line_start":856,"line_end":856,"column_start":5,"column_end":35}},{"value":"/ [`extend`]: ../../std/iter/trait.Extend.html#tymethod.extend","span":{"file_name":"src/liballoc/vec.rs","byte_start":812932,"byte_end":812996,"line_start":857,"line_end":857,"column_start":5,"column_end":69}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"src/liballoc/vec.rs","byte_start":813001,"byte_end":813029,"line_start":858,"line_end":858,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813034,"byte_end":813037,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"src/liballoc/vec.rs","byte_start":813042,"byte_end":813054,"line_start":860,"line_end":860,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813059,"byte_end":813062,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ - `new_len` must be less than or equal to [`capacity()`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":813067,"byte_end":813128,"line_start":862,"line_end":862,"column_start":5,"column_end":66}},{"value":"/ - The elements at `old_len..new_len` must be initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":813133,"byte_end":813194,"line_start":863,"line_end":863,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813199,"byte_end":813202,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ [`capacity()`]: #method.capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":813207,"byte_end":813243,"line_start":865,"line_end":865,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813248,"byte_end":813251,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":813256,"byte_end":813270,"line_start":867,"line_end":867,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813275,"byte_end":813278,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ This method can be useful for situations in which the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":813283,"byte_end":813347,"line_start":869,"line_end":869,"column_start":5,"column_end":69}},{"value":"/ is serving as a buffer for other code, particularly over FFI:","span":{"file_name":"src/liballoc/vec.rs","byte_start":813352,"byte_end":813417,"line_start":870,"line_end":870,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":813422,"byte_end":813425,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"src/liballoc/vec.rs","byte_start":813430,"byte_end":813443,"line_start":872,"line_end":872,"column_start":5,"column_end":18}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":813448,"byte_end":813474,"line_start":873,"line_end":873,"column_start":5,"column_end":31}},{"value":"/ # // This is just a minimal skeleton for the doc example;","span":{"file_name":"src/liballoc/vec.rs","byte_start":813479,"byte_end":813540,"line_start":874,"line_end":874,"column_start":5,"column_end":66}},{"value":"/ # // don't use this as a starting point for a real library.","span":{"file_name":"src/liballoc/vec.rs","byte_start":813545,"byte_end":813608,"line_start":875,"line_end":875,"column_start":5,"column_end":68}},{"value":"/ # pub struct StreamWrapper { strm: *mut std::ffi::c_void }","span":{"file_name":"src/liballoc/vec.rs","byte_start":813613,"byte_end":813675,"line_start":876,"line_end":876,"column_start":5,"column_end":67}},{"value":"/ # const Z_OK: i32 = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":813680,"byte_end":813706,"line_start":877,"line_end":877,"column_start":5,"column_end":31}},{"value":"/ # extern \"C\" {","span":{"file_name":"src/liballoc/vec.rs","byte_start":813711,"byte_end":813729,"line_start":878,"line_end":878,"column_start":5,"column_end":23}},{"value":"/ #     fn deflateGetDictionary(","span":{"file_name":"src/liballoc/vec.rs","byte_start":813734,"byte_end":813768,"line_start":879,"line_end":879,"column_start":5,"column_end":39}},{"value":"/ #         strm: *mut std::ffi::c_void,","span":{"file_name":"src/liballoc/vec.rs","byte_start":813773,"byte_end":813815,"line_start":880,"line_end":880,"column_start":5,"column_end":47}},{"value":"/ #         dictionary: *mut u8,","span":{"file_name":"src/liballoc/vec.rs","byte_start":813820,"byte_end":813854,"line_start":881,"line_end":881,"column_start":5,"column_end":39}},{"value":"/ #         dictLength: *mut usize,","span":{"file_name":"src/liballoc/vec.rs","byte_start":813859,"byte_end":813896,"line_start":882,"line_end":882,"column_start":5,"column_end":42}},{"value":"/ #     ) -> i32;","span":{"file_name":"src/liballoc/vec.rs","byte_start":813901,"byte_end":813920,"line_start":883,"line_end":883,"column_start":5,"column_end":24}},{"value":"/ # }","span":{"file_name":"src/liballoc/vec.rs","byte_start":813925,"byte_end":813932,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ # impl StreamWrapper {","span":{"file_name":"src/liballoc/vec.rs","byte_start":813937,"byte_end":813963,"line_start":885,"line_end":885,"column_start":5,"column_end":31}},{"value":"/ pub fn get_dictionary(&self) -> Option<Vec<u8>> {","span":{"file_name":"src/liballoc/vec.rs","byte_start":813968,"byte_end":814021,"line_start":886,"line_end":886,"column_start":5,"column_end":58}},{"value":"/     // Per the FFI method's docs, \"32768 bytes is always enough\".","span":{"file_name":"src/liballoc/vec.rs","byte_start":814026,"byte_end":814095,"line_start":887,"line_end":887,"column_start":5,"column_end":74}},{"value":"/     let mut dict = Vec::with_capacity(32_768);","span":{"file_name":"src/liballoc/vec.rs","byte_start":814100,"byte_end":814150,"line_start":888,"line_end":888,"column_start":5,"column_end":55}},{"value":"/     let mut dict_length = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":814155,"byte_end":814187,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:","span":{"file_name":"src/liballoc/vec.rs","byte_start":814192,"byte_end":814269,"line_start":890,"line_end":890,"column_start":5,"column_end":82}},{"value":"/     // 1. `dict_length` elements were initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":814274,"byte_end":814328,"line_start":891,"line_end":891,"column_start":5,"column_end":59}},{"value":"/     // 2. `dict_length` <= the capacity (32_768)","span":{"file_name":"src/liballoc/vec.rs","byte_start":814333,"byte_end":814385,"line_start":892,"line_end":892,"column_start":5,"column_end":57}},{"value":"/     // which makes `set_len` safe to call.","span":{"file_name":"src/liballoc/vec.rs","byte_start":814390,"byte_end":814436,"line_start":893,"line_end":893,"column_start":5,"column_end":51}},{"value":"/     unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":814441,"byte_end":814457,"line_start":894,"line_end":894,"column_start":5,"column_end":21}},{"value":"/         // Make the FFI call...","span":{"file_name":"src/liballoc/vec.rs","byte_start":814462,"byte_end":814497,"line_start":895,"line_end":895,"column_start":5,"column_end":40}},{"value":"/         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);","span":{"file_name":"src/liballoc/vec.rs","byte_start":814502,"byte_end":814591,"line_start":896,"line_end":896,"column_start":5,"column_end":94}},{"value":"/         if r == Z_OK {","span":{"file_name":"src/liballoc/vec.rs","byte_start":814596,"byte_end":814622,"line_start":897,"line_end":897,"column_start":5,"column_end":31}},{"value":"/             // ...and update the length to what was initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":814627,"byte_end":814695,"line_start":898,"line_end":898,"column_start":5,"column_end":73}},{"value":"/             dict.set_len(dict_length);","span":{"file_name":"src/liballoc/vec.rs","byte_start":814700,"byte_end":814742,"line_start":899,"line_end":899,"column_start":5,"column_end":47}},{"value":"/             Some(dict)","span":{"file_name":"src/liballoc/vec.rs","byte_start":814747,"byte_end":814773,"line_start":900,"line_end":900,"column_start":5,"column_end":31}},{"value":"/         } else {","span":{"file_name":"src/liballoc/vec.rs","byte_start":814778,"byte_end":814798,"line_start":901,"line_end":901,"column_start":5,"column_end":25}},{"value":"/             None","span":{"file_name":"src/liballoc/vec.rs","byte_start":814803,"byte_end":814823,"line_start":902,"line_end":902,"column_start":5,"column_end":25}},{"value":"/         }","span":{"file_name":"src/liballoc/vec.rs","byte_start":814828,"byte_end":814841,"line_start":903,"line_end":903,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":814846,"byte_end":814855,"line_start":904,"line_end":904,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":814860,"byte_end":814865,"line_start":905,"line_end":905,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"src/liballoc/vec.rs","byte_start":814870,"byte_end":814877,"line_start":906,"line_end":906,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":814882,"byte_end":814889,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":814894,"byte_end":814897,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ While the following example is sound, there is a memory leak since","span":{"file_name":"src/liballoc/vec.rs","byte_start":814902,"byte_end":814972,"line_start":909,"line_end":909,"column_start":5,"column_end":75}},{"value":"/ the inner vectors were not freed prior to the `set_len` call:","span":{"file_name":"src/liballoc/vec.rs","byte_start":814977,"byte_end":815042,"line_start":910,"line_end":910,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815047,"byte_end":815050,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":815055,"byte_end":815062,"line_start":912,"line_end":912,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![vec![1, 0, 0],","span":{"file_name":"src/liballoc/vec.rs","byte_start":815067,"byte_end":815104,"line_start":913,"line_end":913,"column_start":5,"column_end":42}},{"value":"/                    vec![0, 1, 0],","span":{"file_name":"src/liballoc/vec.rs","byte_start":815109,"byte_end":815146,"line_start":914,"line_end":914,"column_start":5,"column_end":42}},{"value":"/                    vec![0, 0, 1]];","span":{"file_name":"src/liballoc/vec.rs","byte_start":815151,"byte_end":815189,"line_start":915,"line_end":915,"column_start":5,"column_end":43}},{"value":"/ // SAFETY:","span":{"file_name":"src/liballoc/vec.rs","byte_start":815194,"byte_end":815208,"line_start":916,"line_end":916,"column_start":5,"column_end":19}},{"value":"/ // 1. `old_len..0` is empty so no elements need to be initialized.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815213,"byte_end":815283,"line_start":917,"line_end":917,"column_start":5,"column_end":75}},{"value":"/ // 2. `0 <= capacity` always holds whatever `capacity` is.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815288,"byte_end":815350,"line_start":918,"line_end":918,"column_start":5,"column_end":67}},{"value":"/ unsafe {","span":{"file_name":"src/liballoc/vec.rs","byte_start":815355,"byte_end":815367,"line_start":919,"line_end":919,"column_start":5,"column_end":17}},{"value":"/     vec.set_len(0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":815372,"byte_end":815395,"line_start":920,"line_end":920,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":815400,"byte_end":815405,"line_start":921,"line_end":921,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":815410,"byte_end":815417,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815422,"byte_end":815425,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ Normally, here, one would use [`clear`] instead to correctly drop","span":{"file_name":"src/liballoc/vec.rs","byte_start":815430,"byte_end":815499,"line_start":924,"line_end":924,"column_start":5,"column_end":74}},{"value":"/ the contents and thus not leak memory.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815504,"byte_end":815546,"line_start":925,"line_end":925,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":815551,"byte_end":815560,"line_start":926,"line_end":926,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":815565,"byte_end":815610,"line_start":927,"line_end":927,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3923},"span":{"file_name":"src/liballoc/vec.rs","byte_start":816413,"byte_end":816424,"line_start":957,"line_end":957,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T>>::swap_remove","value":"fn (&mut self, index: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes an element from the vector and returns it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815757,"byte_end":815811,"line_start":934,"line_end":934,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815816,"byte_end":815819,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ The removed element is replaced by the last element of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815824,"byte_end":815894,"line_start":936,"line_end":936,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815899,"byte_end":815902,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"src/liballoc/vec.rs","byte_start":815907,"byte_end":815956,"line_start":938,"line_end":938,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815961,"byte_end":815964,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":815969,"byte_end":815981,"line_start":940,"line_end":940,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":815986,"byte_end":815989,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"src/liballoc/vec.rs","byte_start":815994,"byte_end":816033,"line_start":942,"line_end":942,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816038,"byte_end":816041,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":816046,"byte_end":816060,"line_start":944,"line_end":944,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816065,"byte_end":816068,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":816073,"byte_end":816080,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];","span":{"file_name":"src/liballoc/vec.rs","byte_start":816085,"byte_end":816134,"line_start":947,"line_end":947,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816139,"byte_end":816142,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(1), \"bar\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":816147,"byte_end":816187,"line_start":949,"line_end":949,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v, [\"foo\", \"qux\", \"baz\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":816192,"byte_end":816233,"line_start":950,"line_end":950,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816238,"byte_end":816241,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(0), \"foo\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":816246,"byte_end":816286,"line_start":952,"line_end":952,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v, [\"baz\", \"qux\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":816291,"byte_end":816325,"line_start":953,"line_end":953,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":816330,"byte_end":816337,"line_start":954,"line_end":954,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":816342,"byte_end":816351,"line_start":955,"line_end":955,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":816356,"byte_end":816401,"line_start":956,"line_end":956,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3924},"span":{"file_name":"src/liballoc/vec.rs","byte_start":817349,"byte_end":817355,"line_start":986,"line_end":986,"column_start":12,"column_end":18},"name":"insert","qualname":"<Vec<T>>::insert","value":"fn (&mut self, index: usize, element: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts an element at position `index` within the vector, shifting all\n elements after it to the right.","sig":null,"attributes":[{"value":"/ Inserts an element at position `index` within the vector, shifting all","span":{"file_name":"src/liballoc/vec.rs","byte_start":816878,"byte_end":816952,"line_start":969,"line_end":969,"column_start":5,"column_end":79}},{"value":"/ elements after it to the right.","span":{"file_name":"src/liballoc/vec.rs","byte_start":816957,"byte_end":816992,"line_start":970,"line_end":970,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":816997,"byte_end":817000,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":817005,"byte_end":817017,"line_start":972,"line_end":972,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817022,"byte_end":817025,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ Panics if `index > len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":817030,"byte_end":817058,"line_start":974,"line_end":974,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817063,"byte_end":817066,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":817071,"byte_end":817085,"line_start":976,"line_end":976,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":817090,"byte_end":817093,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":817098,"byte_end":817105,"line_start":978,"line_end":978,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":817110,"byte_end":817142,"line_start":979,"line_end":979,"column_start":5,"column_end":37}},{"value":"/ vec.insert(1, 4);","span":{"file_name":"src/liballoc/vec.rs","byte_start":817147,"byte_end":817168,"line_start":980,"line_end":980,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(vec, [1, 4, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":817173,"byte_end":817207,"line_start":981,"line_end":981,"column_start":5,"column_end":39}},{"value":"/ vec.insert(4, 5);","span":{"file_name":"src/liballoc/vec.rs","byte_start":817212,"byte_end":817233,"line_start":982,"line_end":982,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(vec, [1, 4, 2, 3, 5]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":817238,"byte_end":817275,"line_start":983,"line_end":983,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":817280,"byte_end":817287,"line_start":984,"line_end":984,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":817292,"byte_end":817337,"line_start":985,"line_end":985,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3925},"span":{"file_name":"src/liballoc/vec.rs","byte_start":818566,"byte_end":818572,"line_start":1026,"line_end":1026,"column_start":12,"column_end":18},"name":"remove","qualname":"<Vec<T>>::remove","value":"fn (&mut self, index: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the element at position `index` within the vector,\n shifting all elements after it to the left.","sig":null,"attributes":[{"value":"/ Removes and returns the element at position `index` within the vector,","span":{"file_name":"src/liballoc/vec.rs","byte_start":818140,"byte_end":818214,"line_start":1011,"line_end":1011,"column_start":5,"column_end":79}},{"value":"/ shifting all elements after it to the left.","span":{"file_name":"src/liballoc/vec.rs","byte_start":818219,"byte_end":818266,"line_start":1012,"line_end":1012,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818271,"byte_end":818274,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":818279,"byte_end":818291,"line_start":1014,"line_end":1014,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818296,"byte_end":818299,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"src/liballoc/vec.rs","byte_start":818304,"byte_end":818343,"line_start":1016,"line_end":1016,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818348,"byte_end":818351,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":818356,"byte_end":818370,"line_start":1018,"line_end":1018,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":818375,"byte_end":818378,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":818383,"byte_end":818390,"line_start":1020,"line_end":1020,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":818395,"byte_end":818425,"line_start":1021,"line_end":1021,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(v.remove(1), 2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":818430,"byte_end":818461,"line_start":1022,"line_end":1022,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v, [1, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":818466,"byte_end":818492,"line_start":1023,"line_end":1023,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":818497,"byte_end":818504,"line_start":1024,"line_end":1024,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":818509,"byte_end":818554,"line_start":1025,"line_end":1025,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"src/liballoc/vec.rs","byte_start":820092,"byte_end":820098,"line_start":1071,"line_end":1071,"column_start":12,"column_end":18},"name":"retain","qualname":"<Vec<T>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"src/liballoc/vec.rs","byte_start":819236,"byte_end":819293,"line_start":1047,"line_end":1047,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819298,"byte_end":819301,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":819306,"byte_end":819384,"line_start":1049,"line_end":1049,"column_start":5,"column_end":83}},{"value":"/ This method operates in place, visiting each element exactly once in the","span":{"file_name":"src/liballoc/vec.rs","byte_start":819389,"byte_end":819465,"line_start":1050,"line_end":1050,"column_start":5,"column_end":81}},{"value":"/ original order, and preserves the order of the retained elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":819470,"byte_end":819539,"line_start":1051,"line_end":1051,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819544,"byte_end":819547,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":819552,"byte_end":819566,"line_start":1053,"line_end":1053,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819571,"byte_end":819574,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":819579,"byte_end":819586,"line_start":1055,"line_end":1055,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":819591,"byte_end":819626,"line_start":1056,"line_end":1056,"column_start":5,"column_end":40}},{"value":"/ vec.retain(|&x| x % 2 == 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":819631,"byte_end":819663,"line_start":1057,"line_end":1057,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(vec, [2, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":819668,"byte_end":819696,"line_start":1058,"line_end":1058,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":819701,"byte_end":819708,"line_start":1059,"line_end":1059,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819713,"byte_end":819716,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ The exact order may be useful for tracking external state, like an index.","span":{"file_name":"src/liballoc/vec.rs","byte_start":819721,"byte_end":819798,"line_start":1061,"line_end":1061,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":819803,"byte_end":819806,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":819811,"byte_end":819818,"line_start":1063,"line_end":1063,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3, 4, 5];","span":{"file_name":"src/liballoc/vec.rs","byte_start":819823,"byte_end":819861,"line_start":1064,"line_end":1064,"column_start":5,"column_end":43}},{"value":"/ let keep = [false, true, true, false, true];","span":{"file_name":"src/liballoc/vec.rs","byte_start":819866,"byte_end":819914,"line_start":1065,"line_end":1065,"column_start":5,"column_end":53}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":819919,"byte_end":819937,"line_start":1066,"line_end":1066,"column_start":5,"column_end":23}},{"value":"/ vec.retain(|_| (keep[i], i += 1).0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":819942,"byte_end":819982,"line_start":1067,"line_end":1067,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vec, [2, 3, 5]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":819987,"byte_end":820018,"line_start":1068,"line_end":1068,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":820023,"byte_end":820030,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":820035,"byte_end":820080,"line_start":1070,"line_end":1070,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3928},"span":{"file_name":"src/liballoc/vec.rs","byte_start":821017,"byte_end":821029,"line_start":1109,"line_end":1109,"column_start":12,"column_end":24},"name":"dedup_by_key","qualname":"<Vec<T>>::dedup_by_key","value":"fn <F, K> (&mut self, mut key: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all but the first of consecutive elements in the vector that resolve to the same\n key.","sig":null,"attributes":[{"value":"/ Removes all but the first of consecutive elements in the vector that resolve to the same","span":{"file_name":"src/liballoc/vec.rs","byte_start":820557,"byte_end":820649,"line_start":1093,"line_end":1093,"column_start":5,"column_end":97}},{"value":"/ key.","span":{"file_name":"src/liballoc/vec.rs","byte_start":820654,"byte_end":820662,"line_start":1094,"line_end":1094,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820667,"byte_end":820670,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ If the vector is sorted, this removes all duplicates.","span":{"file_name":"src/liballoc/vec.rs","byte_start":820675,"byte_end":820732,"line_start":1096,"line_end":1096,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820737,"byte_end":820740,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":820745,"byte_end":820759,"line_start":1098,"line_end":1098,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820764,"byte_end":820767,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":820772,"byte_end":820779,"line_start":1100,"line_end":1100,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![10, 20, 21, 30, 20];","span":{"file_name":"src/liballoc/vec.rs","byte_start":820784,"byte_end":820827,"line_start":1101,"line_end":1101,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820832,"byte_end":820835,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ vec.dedup_by_key(|i| *i / 10);","span":{"file_name":"src/liballoc/vec.rs","byte_start":820840,"byte_end":820874,"line_start":1103,"line_end":1103,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":820879,"byte_end":820882,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [10, 20, 30, 20]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":820887,"byte_end":820925,"line_start":1105,"line_end":1105,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":820930,"byte_end":820937,"line_start":1106,"line_end":1106,"column_start":5,"column_end":12}},{"value":"stable(feature = \"dedup_by\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":820942,"byte_end":820991,"line_start":1107,"line_end":1107,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":820996,"byte_end":821005,"line_start":1108,"line_end":1108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3932},"span":{"file_name":"src/liballoc/vec.rs","byte_start":821977,"byte_end":821985,"line_start":1136,"line_end":1136,"column_start":12,"column_end":20},"name":"dedup_by","qualname":"<Vec<T>>::dedup_by","value":"fn <F> (&mut self, same_bucket: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all but the first of consecutive elements in the vector satisfying a given equality\n relation.","sig":null,"attributes":[{"value":"/ Removes all but the first of consecutive elements in the vector satisfying a given equality","span":{"file_name":"src/liballoc/vec.rs","byte_start":821186,"byte_end":821281,"line_start":1117,"line_end":1117,"column_start":5,"column_end":100}},{"value":"/ relation.","span":{"file_name":"src/liballoc/vec.rs","byte_start":821286,"byte_end":821299,"line_start":1118,"line_end":1118,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821304,"byte_end":821307,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The `same_bucket` function is passed references to two elements from the vector and","span":{"file_name":"src/liballoc/vec.rs","byte_start":821312,"byte_end":821399,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ must determine if the elements compare equal. The elements are passed in opposite order","span":{"file_name":"src/liballoc/vec.rs","byte_start":821404,"byte_end":821495,"line_start":1121,"line_end":1121,"column_start":5,"column_end":96}},{"value":"/ from their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is removed.","span":{"file_name":"src/liballoc/vec.rs","byte_start":821500,"byte_end":821592,"line_start":1122,"line_end":1122,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821597,"byte_end":821600,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ If the vector is sorted, this removes all duplicates.","span":{"file_name":"src/liballoc/vec.rs","byte_start":821605,"byte_end":821662,"line_start":1124,"line_end":1124,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821667,"byte_end":821670,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":821675,"byte_end":821689,"line_start":1126,"line_end":1126,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821694,"byte_end":821697,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":821702,"byte_end":821709,"line_start":1128,"line_end":1128,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];","span":{"file_name":"src/liballoc/vec.rs","byte_start":821714,"byte_end":821772,"line_start":1129,"line_end":1129,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821777,"byte_end":821780,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));","span":{"file_name":"src/liballoc/vec.rs","byte_start":821785,"byte_end":821836,"line_start":1131,"line_end":1131,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":821841,"byte_end":821844,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":821849,"byte_end":821899,"line_start":1133,"line_end":1133,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":821904,"byte_end":821911,"line_start":1134,"line_end":1134,"column_start":5,"column_end":12}},{"value":"stable(feature = \"dedup_by\", since = \"1.16.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":821916,"byte_end":821965,"line_start":1135,"line_end":1135,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3934},"span":{"file_name":"src/liballoc/vec.rs","byte_start":822636,"byte_end":822640,"line_start":1162,"line_end":1162,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T>>::push","value":"fn (&mut self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of a collection.","sig":null,"attributes":[{"value":"/ Appends an element to the back of a collection.","span":{"file_name":"src/liballoc/vec.rs","byte_start":822250,"byte_end":822301,"line_start":1147,"line_end":1147,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822306,"byte_end":822309,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":822314,"byte_end":822326,"line_start":1149,"line_end":1149,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822331,"byte_end":822334,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ Panics if the number of elements in the vector overflows a `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":822339,"byte_end":822410,"line_start":1151,"line_end":1151,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822415,"byte_end":822418,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":822423,"byte_end":822437,"line_start":1153,"line_end":1153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":822442,"byte_end":822445,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":822450,"byte_end":822457,"line_start":1155,"line_end":1155,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":822462,"byte_end":822491,"line_start":1156,"line_end":1156,"column_start":5,"column_end":34}},{"value":"/ vec.push(3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":822496,"byte_end":822512,"line_start":1157,"line_end":1157,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(vec, [1, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":822517,"byte_end":822548,"line_start":1158,"line_end":1158,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":822553,"byte_end":822560,"line_start":1159,"line_end":1159,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":822565,"byte_end":822574,"line_start":1160,"line_end":1160,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":822579,"byte_end":822624,"line_start":1161,"line_end":1161,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3935},"span":{"file_name":"src/liballoc/vec.rs","byte_start":823467,"byte_end":823470,"line_start":1189,"line_end":1189,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and returns it, or [`None`] if it\n is empty.","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and returns it, or [`None`] if it","span":{"file_name":"src/liballoc/vec.rs","byte_start":823055,"byte_end":823131,"line_start":1175,"line_end":1175,"column_start":5,"column_end":81}},{"value":"/ is empty.","span":{"file_name":"src/liballoc/vec.rs","byte_start":823136,"byte_end":823149,"line_start":1176,"line_end":1176,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823154,"byte_end":823157,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"src/liballoc/vec.rs","byte_start":823162,"byte_end":823222,"line_start":1178,"line_end":1178,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823227,"byte_end":823230,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":823235,"byte_end":823249,"line_start":1180,"line_end":1180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823254,"byte_end":823257,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":823262,"byte_end":823269,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":823274,"byte_end":823306,"line_start":1183,"line_end":1183,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(vec.pop(), Some(3));","span":{"file_name":"src/liballoc/vec.rs","byte_start":823311,"byte_end":823346,"line_start":1184,"line_end":1184,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":823351,"byte_end":823379,"line_start":1185,"line_end":1185,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":823384,"byte_end":823391,"line_start":1186,"line_end":1186,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":823396,"byte_end":823405,"line_start":1187,"line_end":1187,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":823410,"byte_end":823455,"line_start":1188,"line_end":1188,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3936},"span":{"file_name":"src/liballoc/vec.rs","byte_start":824208,"byte_end":824214,"line_start":1217,"line_end":1217,"column_start":12,"column_end":18},"name":"append","qualname":"<Vec<T>>::append","value":"fn (&mut self, other: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of `other` into `Self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the elements of `other` into `Self`, leaving `other` empty.","span":{"file_name":"src/liballoc/vec.rs","byte_start":823709,"byte_end":823782,"line_start":1200,"line_end":1200,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823787,"byte_end":823790,"line_start":1201,"line_end":1201,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":823795,"byte_end":823807,"line_start":1202,"line_end":1202,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823812,"byte_end":823815,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ Panics if the number of elements in the vector overflows a `usize`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":823820,"byte_end":823891,"line_start":1204,"line_end":1204,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823896,"byte_end":823899,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":823904,"byte_end":823918,"line_start":1206,"line_end":1206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":823923,"byte_end":823926,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":823931,"byte_end":823938,"line_start":1208,"line_end":1208,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":823943,"byte_end":823975,"line_start":1209,"line_end":1209,"column_start":5,"column_end":37}},{"value":"/ let mut vec2 = vec![4, 5, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":823980,"byte_end":824013,"line_start":1210,"line_end":1210,"column_start":5,"column_end":38}},{"value":"/ vec.append(&mut vec2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":824018,"byte_end":824044,"line_start":1211,"line_end":1211,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4, 5, 6]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":824049,"byte_end":824089,"line_start":1212,"line_end":1212,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vec2, []);","span":{"file_name":"src/liballoc/vec.rs","byte_start":824094,"byte_end":824119,"line_start":1213,"line_end":1213,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":824124,"byte_end":824131,"line_start":1214,"line_end":1214,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":824136,"byte_end":824145,"line_start":1215,"line_end":1215,"column_start":5,"column_end":14}},{"value":"stable(feature = \"append\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":824150,"byte_end":824196,"line_start":1216,"line_end":1216,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3938},"span":{"file_name":"src/liballoc/vec.rs","byte_start":825629,"byte_end":825634,"line_start":1261,"line_end":1261,"column_start":12,"column_end":17},"name":"drain","qualname":"<Vec<T>>::drain","value":"fn <R> (&mut self, range: R) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the vector\n and yields the removed items.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":824718,"byte_end":824796,"line_start":1234,"line_end":1234,"column_start":5,"column_end":83}},{"value":"/ and yields the removed items.","span":{"file_name":"src/liballoc/vec.rs","byte_start":824801,"byte_end":824834,"line_start":1235,"line_end":1235,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824839,"byte_end":824842,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ Note 1: The element range is removed even if the iterator is only","span":{"file_name":"src/liballoc/vec.rs","byte_start":824847,"byte_end":824916,"line_start":1237,"line_end":1237,"column_start":5,"column_end":74}},{"value":"/ partially consumed or not consumed at all.","span":{"file_name":"src/liballoc/vec.rs","byte_start":824921,"byte_end":824967,"line_start":1238,"line_end":1238,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":824972,"byte_end":824975,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ Note 2: It is unspecified how many elements are removed from the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":824980,"byte_end":825055,"line_start":1240,"line_end":1240,"column_start":5,"column_end":80}},{"value":"/ if the `Drain` value is leaked.","span":{"file_name":"src/liballoc/vec.rs","byte_start":825060,"byte_end":825095,"line_start":1241,"line_end":1241,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825100,"byte_end":825103,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":825108,"byte_end":825120,"line_start":1243,"line_end":1243,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825125,"byte_end":825128,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point is greater than the end point or if","span":{"file_name":"src/liballoc/vec.rs","byte_start":825133,"byte_end":825201,"line_start":1245,"line_end":1245,"column_start":5,"column_end":73}},{"value":"/ the end point is greater than the length of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":825206,"byte_end":825265,"line_start":1246,"line_end":1246,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825270,"byte_end":825273,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":825278,"byte_end":825292,"line_start":1248,"line_end":1248,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825297,"byte_end":825300,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825305,"byte_end":825312,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":825317,"byte_end":825347,"line_start":1251,"line_end":1251,"column_start":5,"column_end":35}},{"value":"/ let u: Vec<_> = v.drain(1..).collect();","span":{"file_name":"src/liballoc/vec.rs","byte_start":825352,"byte_end":825395,"line_start":1252,"line_end":1252,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(v, &[1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825400,"byte_end":825424,"line_start":1253,"line_end":1253,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(u, &[2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825429,"byte_end":825456,"line_start":1254,"line_end":1254,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":825461,"byte_end":825464,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ // A full range clears the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":825469,"byte_end":825506,"line_start":1256,"line_end":1256,"column_start":5,"column_end":42}},{"value":"/ v.drain(..);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825511,"byte_end":825527,"line_start":1257,"line_end":1257,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v, &[]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":825532,"byte_end":825555,"line_start":1258,"line_end":1258,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":825560,"byte_end":825567,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":825572,"byte_end":825617,"line_start":1260,"line_end":1260,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3940},"span":{"file_name":"src/liballoc/vec.rs","byte_start":827568,"byte_end":827573,"line_start":1320,"line_end":1320,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827188,"byte_end":827231,"line_start":1304,"line_end":1304,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827236,"byte_end":827239,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"src/liballoc/vec.rs","byte_start":827244,"byte_end":827309,"line_start":1306,"line_end":1306,"column_start":5,"column_end":70}},{"value":"/ of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827314,"byte_end":827332,"line_start":1307,"line_end":1307,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827337,"byte_end":827340,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":827345,"byte_end":827359,"line_start":1309,"line_end":1309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827364,"byte_end":827367,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":827372,"byte_end":827379,"line_start":1311,"line_end":1311,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":827384,"byte_end":827414,"line_start":1312,"line_end":1312,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827419,"byte_end":827422,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ v.clear();","span":{"file_name":"src/liballoc/vec.rs","byte_start":827427,"byte_end":827441,"line_start":1314,"line_end":1314,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827446,"byte_end":827449,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/vec.rs","byte_start":827454,"byte_end":827480,"line_start":1316,"line_end":1316,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":827485,"byte_end":827492,"line_start":1317,"line_end":1317,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":827497,"byte_end":827506,"line_start":1318,"line_end":1318,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":827511,"byte_end":827556,"line_start":1319,"line_end":1319,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3941},"span":{"file_name":"src/liballoc/vec.rs","byte_start":827912,"byte_end":827915,"line_start":1335,"line_end":1335,"column_start":12,"column_end":15},"name":"len","qualname":"<Vec<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the vector, also referred to\n as its 'length'.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the vector, also referred to","span":{"file_name":"src/liballoc/vec.rs","byte_start":827623,"byte_end":827689,"line_start":1324,"line_end":1324,"column_start":5,"column_end":71}},{"value":"/ as its 'length'.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827694,"byte_end":827714,"line_start":1325,"line_end":1325,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827719,"byte_end":827722,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":827727,"byte_end":827741,"line_start":1327,"line_end":1327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":827746,"byte_end":827749,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":827754,"byte_end":827761,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}},{"value":"/ let a = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":827766,"byte_end":827792,"line_start":1330,"line_end":1330,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"src/liballoc/vec.rs","byte_start":827797,"byte_end":827824,"line_start":1331,"line_end":1331,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":827829,"byte_end":827836,"line_start":1332,"line_end":1332,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":827841,"byte_end":827850,"line_start":1333,"line_end":1333,"column_start":5,"column_end":14}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":827855,"byte_end":827900,"line_start":1334,"line_end":1334,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3942},"span":{"file_name":"src/liballoc/vec.rs","byte_start":828259,"byte_end":828267,"line_start":1351,"line_end":1351,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Vec<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the vector contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the vector contains no elements.","span":{"file_name":"src/liballoc/vec.rs","byte_start":827962,"byte_end":828016,"line_start":1339,"line_end":1339,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828021,"byte_end":828024,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":828029,"byte_end":828043,"line_start":1341,"line_end":1341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828048,"byte_end":828051,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":828056,"byte_end":828063,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"src/liballoc/vec.rs","byte_start":828068,"byte_end":828095,"line_start":1344,"line_end":1344,"column_start":5,"column_end":32}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"src/liballoc/vec.rs","byte_start":828100,"byte_end":828126,"line_start":1345,"line_end":1345,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828131,"byte_end":828134,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ v.push(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":828139,"byte_end":828153,"line_start":1347,"line_end":1347,"column_start":5,"column_end":19}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"src/liballoc/vec.rs","byte_start":828158,"byte_end":828185,"line_start":1348,"line_end":1348,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":828190,"byte_end":828197,"line_start":1349,"line_end":1349,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":828202,"byte_end":828247,"line_start":1350,"line_end":1350,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3943},"span":{"file_name":"src/liballoc/vec.rs","byte_start":828948,"byte_end":828957,"line_start":1375,"line_end":1375,"column_start":12,"column_end":21},"name":"split_off","qualname":"<Vec<T>>::split_off","value":"fn (&mut self, at: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"src/liballoc/vec.rs","byte_start":828320,"byte_end":828374,"line_start":1355,"line_end":1355,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828379,"byte_end":828382,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated vector containing the elements in the range","span":{"file_name":"src/liballoc/vec.rs","byte_start":828387,"byte_end":828460,"line_start":1357,"line_end":1357,"column_start":5,"column_end":78}},{"value":"/ `[at, len)`. After the call, the original vector will be left containing","span":{"file_name":"src/liballoc/vec.rs","byte_start":828465,"byte_end":828541,"line_start":1358,"line_end":1358,"column_start":5,"column_end":81}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"src/liballoc/vec.rs","byte_start":828546,"byte_end":828610,"line_start":1359,"line_end":1359,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828615,"byte_end":828618,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":828623,"byte_end":828635,"line_start":1361,"line_end":1361,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828640,"byte_end":828643,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":828648,"byte_end":828673,"line_start":1363,"line_end":1363,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828678,"byte_end":828681,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":828686,"byte_end":828700,"line_start":1365,"line_end":1365,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":828705,"byte_end":828708,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":828713,"byte_end":828720,"line_start":1367,"line_end":1367,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1,2,3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":828725,"byte_end":828755,"line_start":1368,"line_end":1368,"column_start":5,"column_end":35}},{"value":"/ let vec2 = vec.split_off(1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":828760,"byte_end":828792,"line_start":1369,"line_end":1369,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(vec, [1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":828797,"byte_end":828822,"line_start":1370,"line_end":1370,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(vec2, [2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":828827,"byte_end":828856,"line_start":1371,"line_end":1371,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":828861,"byte_end":828868,"line_start":1372,"line_end":1372,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":828873,"byte_end":828882,"line_start":1373,"line_end":1373,"column_start":5,"column_end":14}},{"value":"stable(feature = \"split_off\", since = \"1.4.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":828887,"byte_end":828936,"line_start":1374,"line_end":1374,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3944},"span":{"file_name":"src/liballoc/vec.rs","byte_start":830627,"byte_end":830638,"line_start":1421,"line_end":1421,"column_start":12,"column_end":23},"name":"resize_with","qualname":"<Vec<T>>::resize_with","value":"fn <F> (&mut self, new_len: usize, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":829415,"byte_end":829482,"line_start":1391,"line_end":1391,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":829487,"byte_end":829490,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"src/liballoc/vec.rs","byte_start":829495,"byte_end":829563,"line_start":1393,"line_end":1393,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with the result of","span":{"file_name":"src/liballoc/vec.rs","byte_start":829568,"byte_end":829635,"line_start":1394,"line_end":1394,"column_start":5,"column_end":72}},{"value":"/ calling the closure `f`. The return values from `f` will end up","span":{"file_name":"src/liballoc/vec.rs","byte_start":829640,"byte_end":829707,"line_start":1395,"line_end":1395,"column_start":5,"column_end":72}},{"value":"/ in the `Vec` in the order they have been generated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":829712,"byte_end":829767,"line_start":1396,"line_end":1396,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":829772,"byte_end":829775,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":829780,"byte_end":829847,"line_start":1398,"line_end":1398,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":829852,"byte_end":829855,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ This method uses a closure to create new values on every push. If","span":{"file_name":"src/liballoc/vec.rs","byte_start":829860,"byte_end":829929,"line_start":1400,"line_end":1400,"column_start":5,"column_end":74}},{"value":"/ you'd rather [`Clone`] a given value, use [`resize`]. If you want","span":{"file_name":"src/liballoc/vec.rs","byte_start":829934,"byte_end":830003,"line_start":1401,"line_end":1401,"column_start":5,"column_end":74}},{"value":"/ to use the [`Default`] trait to generate values, you can pass","span":{"file_name":"src/liballoc/vec.rs","byte_start":830008,"byte_end":830073,"line_start":1402,"line_end":1402,"column_start":5,"column_end":70}},{"value":"/ [`Default::default()`] as the second argument.","span":{"file_name":"src/liballoc/vec.rs","byte_start":830078,"byte_end":830128,"line_start":1403,"line_end":1403,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830133,"byte_end":830136,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":830141,"byte_end":830155,"line_start":1405,"line_end":1405,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830160,"byte_end":830163,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":830168,"byte_end":830175,"line_start":1407,"line_end":1407,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":830180,"byte_end":830212,"line_start":1408,"line_end":1408,"column_start":5,"column_end":37}},{"value":"/ vec.resize_with(5, Default::default);","span":{"file_name":"src/liballoc/vec.rs","byte_start":830217,"byte_end":830258,"line_start":1409,"line_end":1409,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec, [1, 2, 3, 0, 0]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":830263,"byte_end":830300,"line_start":1410,"line_end":1410,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830305,"byte_end":830308,"line_start":1411,"line_end":1411,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"src/liballoc/vec.rs","byte_start":830313,"byte_end":830338,"line_start":1412,"line_end":1412,"column_start":5,"column_end":30}},{"value":"/ let mut p = 1;","span":{"file_name":"src/liballoc/vec.rs","byte_start":830343,"byte_end":830361,"line_start":1413,"line_end":1413,"column_start":5,"column_end":23}},{"value":"/ vec.resize_with(4, || { p *= 2; p });","span":{"file_name":"src/liballoc/vec.rs","byte_start":830366,"byte_end":830407,"line_start":1414,"line_end":1414,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec, [2, 4, 8, 16]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":830412,"byte_end":830447,"line_start":1415,"line_end":1415,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":830452,"byte_end":830459,"line_start":1416,"line_end":1416,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":830464,"byte_end":830467,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"src/liballoc/vec.rs","byte_start":830472,"byte_end":830502,"line_start":1418,"line_end":1418,"column_start":5,"column_end":35}},{"value":"/ [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":830507,"byte_end":830554,"line_start":1419,"line_end":1419,"column_start":5,"column_end":52}},{"value":"stable(feature = \"vec_resize_with\", since = \"1.33.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":830559,"byte_end":830615,"line_start":1420,"line_end":1420,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3946},"span":{"file_name":"src/liballoc/vec.rs","byte_start":831813,"byte_end":831817,"line_start":1458,"line_end":1458,"column_start":12,"column_end":16},"name":"leak","qualname":"<Vec<T>>::leak","value":"fn <'a> (vec: Vec<T>) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n `'a`. If the type has only static references, or none at all, then this\n may be chosen to be `'static`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `Vec`, returning a mutable reference to the contents,","span":{"file_name":"src/liballoc/vec.rs","byte_start":830907,"byte_end":830987,"line_start":1433,"line_end":1433,"column_start":5,"column_end":85}},{"value":"/ `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime","span":{"file_name":"src/liballoc/vec.rs","byte_start":830992,"byte_end":831066,"line_start":1434,"line_end":1434,"column_start":5,"column_end":79}},{"value":"/ `'a`. If the type has only static references, or none at all, then this","span":{"file_name":"src/liballoc/vec.rs","byte_start":831071,"byte_end":831146,"line_start":1435,"line_end":1435,"column_start":5,"column_end":80}},{"value":"/ may be chosen to be `'static`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":831151,"byte_end":831185,"line_start":1436,"line_end":1436,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":831190,"byte_end":831193,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ This function is similar to the `leak` function on `Box`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":831198,"byte_end":831259,"line_start":1438,"line_end":1438,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":831264,"byte_end":831267,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ This function is mainly useful for data that lives for the remainder of","span":{"file_name":"src/liballoc/vec.rs","byte_start":831272,"byte_end":831347,"line_start":1440,"line_end":1440,"column_start":5,"column_end":80}},{"value":"/ the program's life. Dropping the returned reference will cause a memory","span":{"file_name":"src/liballoc/vec.rs","byte_start":831352,"byte_end":831427,"line_start":1441,"line_end":1441,"column_start":5,"column_end":80}},{"value":"/ leak.","span":{"file_name":"src/liballoc/vec.rs","byte_start":831432,"byte_end":831441,"line_start":1442,"line_end":1442,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":831446,"byte_end":831449,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":831454,"byte_end":831468,"line_start":1444,"line_end":1444,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":831473,"byte_end":831476,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ Simple usage:","span":{"file_name":"src/liballoc/vec.rs","byte_start":831481,"byte_end":831498,"line_start":1446,"line_end":1446,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":831503,"byte_end":831506,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":831511,"byte_end":831518,"line_start":1448,"line_end":1448,"column_start":5,"column_end":12}},{"value":"/ #![feature(vec_leak)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":831523,"byte_end":831548,"line_start":1449,"line_end":1449,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":831553,"byte_end":831556,"line_start":1450,"line_end":1450,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":831561,"byte_end":831587,"line_start":1451,"line_end":1451,"column_start":5,"column_end":31}},{"value":"/ let static_ref: &'static mut [usize] = Vec::leak(x);","span":{"file_name":"src/liballoc/vec.rs","byte_start":831592,"byte_end":831648,"line_start":1452,"line_end":1452,"column_start":5,"column_end":61}},{"value":"/ static_ref[0] += 1;","span":{"file_name":"src/liballoc/vec.rs","byte_start":831653,"byte_end":831676,"line_start":1453,"line_end":1453,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(static_ref, &[2, 2, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":831681,"byte_end":831720,"line_start":1454,"line_end":1454,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":831725,"byte_end":831732,"line_start":1455,"line_end":1455,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_leak\", issue = \"62195\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":831737,"byte_end":831787,"line_start":1456,"line_end":1456,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":831792,"byte_end":831801,"line_start":1457,"line_end":1457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3950},"span":{"file_name":"src/liballoc/vec.rs","byte_start":833021,"byte_end":833027,"line_start":1493,"line_end":1493,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T>>::resize","value":"fn (&mut self, new_len: usize, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":832012,"byte_end":832079,"line_start":1467,"line_end":1467,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832084,"byte_end":832087,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"src/liballoc/vec.rs","byte_start":832092,"byte_end":832160,"line_start":1469,"line_end":1469,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with `value`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":832165,"byte_end":832227,"line_start":1470,"line_end":1470,"column_start":5,"column_end":67}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":832232,"byte_end":832299,"line_start":1471,"line_end":1471,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832304,"byte_end":832307,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ This method requires [`Clone`] to be able clone the passed value. If","span":{"file_name":"src/liballoc/vec.rs","byte_start":832312,"byte_end":832384,"line_start":1473,"line_end":1473,"column_start":5,"column_end":77}},{"value":"/ you need more flexibility (or want to rely on [`Default`] instead of","span":{"file_name":"src/liballoc/vec.rs","byte_start":832389,"byte_end":832461,"line_start":1474,"line_end":1474,"column_start":5,"column_end":77}},{"value":"/ [`Clone`]), use [`resize_with`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":832466,"byte_end":832502,"line_start":1475,"line_end":1475,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832507,"byte_end":832510,"line_start":1476,"line_end":1476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":832515,"byte_end":832529,"line_start":1477,"line_end":1477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832534,"byte_end":832537,"line_start":1478,"line_end":1478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":832542,"byte_end":832549,"line_start":1479,"line_end":1479,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![\"hello\"];","span":{"file_name":"src/liballoc/vec.rs","byte_start":832554,"byte_end":832586,"line_start":1480,"line_end":1480,"column_start":5,"column_end":37}},{"value":"/ vec.resize(3, \"world\");","span":{"file_name":"src/liballoc/vec.rs","byte_start":832591,"byte_end":832618,"line_start":1481,"line_end":1481,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec, [\"hello\", \"world\", \"world\"]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":832623,"byte_end":832672,"line_start":1482,"line_end":1482,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832677,"byte_end":832680,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":832685,"byte_end":832720,"line_start":1484,"line_end":1484,"column_start":5,"column_end":40}},{"value":"/ vec.resize(2, 0);","span":{"file_name":"src/liballoc/vec.rs","byte_start":832725,"byte_end":832746,"line_start":1485,"line_end":1485,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":832751,"byte_end":832779,"line_start":1486,"line_end":1486,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":832784,"byte_end":832791,"line_start":1487,"line_end":1487,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":832796,"byte_end":832799,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":832804,"byte_end":832851,"line_start":1489,"line_end":1489,"column_start":5,"column_end":52}},{"value":"/ [`Default`]: ../../std/default/trait.Default.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":832856,"byte_end":832909,"line_start":1490,"line_end":1490,"column_start":5,"column_end":58}},{"value":"/ [`resize_with`]: #method.resize_with","span":{"file_name":"src/liballoc/vec.rs","byte_start":832914,"byte_end":832954,"line_start":1491,"line_end":1491,"column_start":5,"column_end":45}},{"value":"stable(feature = \"vec_resize\", since = \"1.5.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":832959,"byte_end":833009,"line_start":1492,"line_end":1492,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3951},"span":{"file_name":"src/liballoc/vec.rs","byte_start":834018,"byte_end":834035,"line_start":1523,"line_end":1523,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T>>::extend_from_slice","value":"fn (&mut self, other: &[T]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[{"value":"/ Clones and appends all elements in a slice to the `Vec`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":833265,"byte_end":833325,"line_start":1503,"line_end":1503,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833330,"byte_end":833333,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ Iterates over the slice `other`, clones each element, and then appends","span":{"file_name":"src/liballoc/vec.rs","byte_start":833338,"byte_end":833412,"line_start":1505,"line_end":1505,"column_start":5,"column_end":79}},{"value":"/ it to this `Vec`. The `other` vector is traversed in-order.","span":{"file_name":"src/liballoc/vec.rs","byte_start":833417,"byte_end":833480,"line_start":1506,"line_end":1506,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833485,"byte_end":833488,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ Note that this function is same as [`extend`] except that it is","span":{"file_name":"src/liballoc/vec.rs","byte_start":833493,"byte_end":833560,"line_start":1508,"line_end":1508,"column_start":5,"column_end":72}},{"value":"/ specialized to work with slices instead. If and when Rust gets","span":{"file_name":"src/liballoc/vec.rs","byte_start":833565,"byte_end":833631,"line_start":1509,"line_end":1509,"column_start":5,"column_end":71}},{"value":"/ specialization this function will likely be deprecated (but still","span":{"file_name":"src/liballoc/vec.rs","byte_start":833636,"byte_end":833705,"line_start":1510,"line_end":1510,"column_start":5,"column_end":74}},{"value":"/ available).","span":{"file_name":"src/liballoc/vec.rs","byte_start":833710,"byte_end":833725,"line_start":1511,"line_end":1511,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833730,"byte_end":833733,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":833738,"byte_end":833752,"line_start":1513,"line_end":1513,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833757,"byte_end":833760,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":833765,"byte_end":833772,"line_start":1515,"line_end":1515,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":833777,"byte_end":833803,"line_start":1516,"line_end":1516,"column_start":5,"column_end":31}},{"value":"/ vec.extend_from_slice(&[2, 3, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":833808,"byte_end":833846,"line_start":1517,"line_end":1517,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(vec, [1, 2, 3, 4]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":833851,"byte_end":833885,"line_start":1518,"line_end":1518,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":833890,"byte_end":833897,"line_start":1519,"line_end":1519,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":833902,"byte_end":833905,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ [`extend`]: #method.extend","span":{"file_name":"src/liballoc/vec.rs","byte_start":833910,"byte_end":833940,"line_start":1521,"line_end":1521,"column_start":5,"column_end":35}},{"value":"stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":833945,"byte_end":834006,"line_start":1522,"line_end":1522,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3954},"span":{"file_name":"src/liballoc/vec.rs","byte_start":835500,"byte_end":835514,"line_start":1564,"line_end":1564,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T>>::resize_default","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":834140,"byte_end":834207,"line_start":1529,"line_end":1529,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834212,"byte_end":834215,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"src/liballoc/vec.rs","byte_start":834220,"byte_end":834288,"line_start":1531,"line_end":1531,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with [`Default::default()`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":834293,"byte_end":834370,"line_start":1532,"line_end":1532,"column_start":5,"column_end":82}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"src/liballoc/vec.rs","byte_start":834375,"byte_end":834442,"line_start":1533,"line_end":1533,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834447,"byte_end":834450,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Default`] to create new values on every push. If","span":{"file_name":"src/liballoc/vec.rs","byte_start":834455,"byte_end":834526,"line_start":1535,"line_end":1535,"column_start":5,"column_end":76}},{"value":"/ you'd rather [`Clone`] a given value, use [`resize`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":834531,"byte_end":834588,"line_start":1536,"line_end":1536,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834593,"byte_end":834596,"line_start":1537,"line_end":1537,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":834601,"byte_end":834615,"line_start":1538,"line_end":1538,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834620,"byte_end":834623,"line_start":1539,"line_end":1539,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":834628,"byte_end":834635,"line_start":1540,"line_end":1540,"column_start":5,"column_end":12}},{"value":"/ # #![allow(deprecated)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":834640,"byte_end":834667,"line_start":1541,"line_end":1541,"column_start":5,"column_end":32}},{"value":"/ #![feature(vec_resize_default)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":834672,"byte_end":834707,"line_start":1542,"line_end":1542,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834712,"byte_end":834715,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":834720,"byte_end":834752,"line_start":1544,"line_end":1544,"column_start":5,"column_end":37}},{"value":"/ vec.resize_default(5);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834757,"byte_end":834783,"line_start":1545,"line_end":1545,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(vec, [1, 2, 3, 0, 0]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834788,"byte_end":834825,"line_start":1546,"line_end":1546,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834830,"byte_end":834833,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![1, 2, 3, 4];","span":{"file_name":"src/liballoc/vec.rs","byte_start":834838,"byte_end":834873,"line_start":1548,"line_end":1548,"column_start":5,"column_end":40}},{"value":"/ vec.resize_default(2);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834878,"byte_end":834904,"line_start":1549,"line_end":1549,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(vec, [1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":834909,"byte_end":834937,"line_start":1550,"line_end":1550,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":834942,"byte_end":834949,"line_start":1551,"line_end":1551,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":834954,"byte_end":834957,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"src/liballoc/vec.rs","byte_start":834962,"byte_end":834992,"line_start":1553,"line_end":1553,"column_start":5,"column_end":35}},{"value":"/ [`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default","span":{"file_name":"src/liballoc/vec.rs","byte_start":834997,"byte_end":835078,"line_start":1554,"line_end":1554,"column_start":5,"column_end":86}},{"value":"/ [`Default`]: ../../std/default/trait.Default.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":835083,"byte_end":835136,"line_start":1555,"line_end":1555,"column_start":5,"column_end":58}},{"value":"/ [`Clone`]: ../../std/clone/trait.Clone.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":835141,"byte_end":835188,"line_start":1556,"line_end":1556,"column_start":5,"column_end":52}},{"value":"unstable(feature = \"vec_resize_default\", issue = \"41758\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":835193,"byte_end":835253,"line_start":1557,"line_end":1557,"column_start":5,"column_end":65}},{"value":"rustc_deprecated(reason =\n                   \"This is moving towards being removed in favor \\\n        of `.resize_with(Default::default)`.  If you disagree, please comment \\\n        in the tracking issue.\",\n                   since = \"1.33.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":835258,"byte_end":835488,"line_start":1558,"line_end":1563,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":3957},"span":{"file_name":"src/liballoc/vec.rs","byte_start":835821,"byte_end":835825,"line_start":1577,"line_end":1577,"column_start":8,"column_end":12},"name":"next","qualname":"::vec::ExtendWith::next","value":"fn (&mut self) -> T","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3958},"span":{"file_name":"src/liballoc/vec.rs","byte_start":835850,"byte_end":835854,"line_start":1578,"line_end":1578,"column_start":8,"column_end":12},"name":"last","qualname":"::vec::ExtendWith::last","value":"fn (self) -> T","parent":{"krate":0,"index":3955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3998},"span":{"file_name":"src/liballoc/vec.rs","byte_start":838742,"byte_end":838747,"line_start":1688,"line_end":1688,"column_start":12,"column_end":17},"name":"dedup","qualname":"<Vec<T>>::dedup","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes consecutive repeated elements in the vector according to the\n [`PartialEq`] trait implementation.","sig":null,"attributes":[{"value":"/ Removes consecutive repeated elements in the vector according to the","span":{"file_name":"src/liballoc/vec.rs","byte_start":838302,"byte_end":838374,"line_start":1672,"line_end":1672,"column_start":5,"column_end":77}},{"value":"/ [`PartialEq`] trait implementation.","span":{"file_name":"src/liballoc/vec.rs","byte_start":838379,"byte_end":838418,"line_start":1673,"line_end":1673,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838423,"byte_end":838426,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ If the vector is sorted, this removes all duplicates.","span":{"file_name":"src/liballoc/vec.rs","byte_start":838431,"byte_end":838488,"line_start":1675,"line_end":1675,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838493,"byte_end":838496,"line_start":1676,"line_end":1676,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":838501,"byte_end":838515,"line_start":1677,"line_end":1677,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838520,"byte_end":838523,"line_start":1678,"line_end":1678,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":838528,"byte_end":838535,"line_start":1679,"line_end":1679,"column_start":5,"column_end":12}},{"value":"/ let mut vec = vec![1, 2, 2, 3, 2];","span":{"file_name":"src/liballoc/vec.rs","byte_start":838540,"byte_end":838578,"line_start":1680,"line_end":1680,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838583,"byte_end":838586,"line_start":1681,"line_end":1681,"column_start":5,"column_end":8}},{"value":"/ vec.dedup();","span":{"file_name":"src/liballoc/vec.rs","byte_start":838591,"byte_end":838607,"line_start":1682,"line_end":1682,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838612,"byte_end":838615,"line_start":1683,"line_end":1683,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [1, 2, 3, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":838620,"byte_end":838654,"line_start":1684,"line_end":1684,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":838659,"byte_end":838666,"line_start":1685,"line_end":1685,"column_start":5,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":838671,"byte_end":838716,"line_start":1686,"line_end":1686,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":838721,"byte_end":838730,"line_start":1687,"line_end":1687,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4002},"span":{"file_name":"src/liballoc/vec.rs","byte_start":839228,"byte_end":839239,"line_start":1707,"line_end":1707,"column_start":12,"column_end":23},"name":"remove_item","qualname":"<Vec<T>>::remove_item","value":"fn <V> (&mut self, item: &V) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first instance of `item` from the vector if the item exists.","sig":null,"attributes":[{"value":"/ Removes the first instance of `item` from the vector if the item exists.","span":{"file_name":"src/liballoc/vec.rs","byte_start":838828,"byte_end":838904,"line_start":1694,"line_end":1694,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838909,"byte_end":838912,"line_start":1695,"line_end":1695,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":838917,"byte_end":838931,"line_start":1696,"line_end":1696,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":838936,"byte_end":838939,"line_start":1697,"line_end":1697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":838944,"byte_end":838951,"line_start":1698,"line_end":1698,"column_start":5,"column_end":12}},{"value":"/ # #![feature(vec_remove_item)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":838956,"byte_end":838990,"line_start":1699,"line_end":1699,"column_start":5,"column_end":39}},{"value":"/ let mut vec = vec![1, 2, 3, 1];","span":{"file_name":"src/liballoc/vec.rs","byte_start":838995,"byte_end":839030,"line_start":1700,"line_end":1700,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839035,"byte_end":839038,"line_start":1701,"line_end":1701,"column_start":5,"column_end":8}},{"value":"/ vec.remove_item(&1);","span":{"file_name":"src/liballoc/vec.rs","byte_start":839043,"byte_end":839067,"line_start":1702,"line_end":1702,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":839072,"byte_end":839075,"line_start":1703,"line_end":1703,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, vec![2, 3, 1]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":839080,"byte_end":839115,"line_start":1704,"line_end":1704,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":839120,"byte_end":839127,"line_start":1705,"line_end":1705,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_remove_item\", reason = \"recently added\", issue =\n           \"40062\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":839132,"byte_end":839216,"line_start":1706,"line_end":1706,"column_start":5,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":4005},"span":{"file_name":"src/liballoc/vec.rs","byte_start":839681,"byte_end":839690,"line_start":1722,"line_end":1722,"column_start":8,"column_end":17},"name":"from_elem","qualname":"::vec::from_elem","value":"fn <T> (elem: T, n: usize) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":839628,"byte_end":839673,"line_start":1721,"line_end":1721,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4008},"span":{"file_name":"src/liballoc/vec.rs","byte_start":839862,"byte_end":839871,"line_start":1728,"line_end":1728,"column_start":8,"column_end":17},"name":"from_elem","qualname":"::vec::SpecFromElem::from_elem","value":"fn (elem: Self, n: usize) -> Vec<Self>","parent":{"krate":0,"index":4007},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4018},"span":{"file_name":"src/liballoc/vec.rs","byte_start":840884,"byte_end":840891,"line_start":1768,"line_end":1768,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::vec::IsZero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":4017},"children":[],"decl_id":null,"docs":" Whether this value is zero\n","sig":null,"attributes":[{"value":"/ Whether this value is zero","span":{"file_name":"src/liballoc/vec.rs","byte_start":840846,"byte_end":840876,"line_start":1767,"line_end":1767,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4087},"span":{"file_name":"src/liballoc/vec.rs","byte_start":847073,"byte_end":847082,"line_start":1993,"line_end":1993,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::vec::SpecExtend::from_iter","value":"fn (iter: I) -> Self","parent":{"krate":0,"index":4084},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4088},"span":{"file_name":"src/liballoc/vec.rs","byte_start":847108,"byte_end":847119,"line_start":1994,"line_end":1994,"column_start":8,"column_end":19},"name":"spec_extend","qualname":"::vec::SpecExtend::spec_extend","value":"fn (&mut self, iter: I) -> ()","parent":{"krate":0,"index":4084},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4118},"span":{"file_name":"src/liballoc/vec.rs","byte_start":853310,"byte_end":853316,"line_start":2180,"line_end":2180,"column_start":12,"column_end":18},"name":"splice","qualname":"<Vec<T>>::splice","value":"fn <R, I> (&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Creates a splicing iterator that replaces the specified range in the vector\n with the given `replace_with` iterator and yields the removed items.\n `replace_with` does not need to be the same length as `range`.","sig":null,"attributes":[{"value":"/ Creates a splicing iterator that replaces the specified range in the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":851919,"byte_end":851998,"line_start":2145,"line_end":2145,"column_start":5,"column_end":84}},{"value":"/ with the given `replace_with` iterator and yields the removed items.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852003,"byte_end":852075,"line_start":2146,"line_end":2146,"column_start":5,"column_end":77}},{"value":"/ `replace_with` does not need to be the same length as `range`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852080,"byte_end":852146,"line_start":2147,"line_end":2147,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852151,"byte_end":852154,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ The element range is removed even if the iterator is not consumed until the end.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852159,"byte_end":852243,"line_start":2149,"line_end":2149,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852248,"byte_end":852251,"line_start":2150,"line_end":2150,"column_start":5,"column_end":8}},{"value":"/ It is unspecified how many elements are removed from the vector","span":{"file_name":"src/liballoc/vec.rs","byte_start":852256,"byte_end":852323,"line_start":2151,"line_end":2151,"column_start":5,"column_end":72}},{"value":"/ if the `Splice` value is leaked.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852328,"byte_end":852364,"line_start":2152,"line_end":2152,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852369,"byte_end":852372,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ The input iterator `replace_with` is only consumed when the `Splice` value is dropped.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852377,"byte_end":852467,"line_start":2154,"line_end":2154,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852472,"byte_end":852475,"line_start":2155,"line_end":2155,"column_start":5,"column_end":8}},{"value":"/ This is optimal if:","span":{"file_name":"src/liballoc/vec.rs","byte_start":852480,"byte_end":852503,"line_start":2156,"line_end":2156,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852508,"byte_end":852511,"line_start":2157,"line_end":2157,"column_start":5,"column_end":8}},{"value":"/ * The tail (elements in the vector after `range`) is empty,","span":{"file_name":"src/liballoc/vec.rs","byte_start":852516,"byte_end":852579,"line_start":2158,"line_end":2158,"column_start":5,"column_end":68}},{"value":"/ * or `replace_with` yields fewer elements than `range`’s length","span":{"file_name":"src/liballoc/vec.rs","byte_start":852584,"byte_end":852653,"line_start":2159,"line_end":2159,"column_start":5,"column_end":72}},{"value":"/ * or the lower bound of its `size_hint()` is exact.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852658,"byte_end":852713,"line_start":2160,"line_end":2160,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852718,"byte_end":852721,"line_start":2161,"line_end":2161,"column_start":5,"column_end":8}},{"value":"/ Otherwise, a temporary vector is allocated and the tail is moved twice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852726,"byte_end":852801,"line_start":2162,"line_end":2162,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852806,"byte_end":852809,"line_start":2163,"line_end":2163,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"src/liballoc/vec.rs","byte_start":852814,"byte_end":852826,"line_start":2164,"line_end":2164,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852831,"byte_end":852834,"line_start":2165,"line_end":2165,"column_start":5,"column_end":8}},{"value":"/ Panics if the starting point is greater than the end point or if","span":{"file_name":"src/liballoc/vec.rs","byte_start":852839,"byte_end":852907,"line_start":2166,"line_end":2166,"column_start":5,"column_end":73}},{"value":"/ the end point is greater than the length of the vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":852912,"byte_end":852971,"line_start":2167,"line_end":2167,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":852976,"byte_end":852979,"line_start":2168,"line_end":2168,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":852984,"byte_end":852998,"line_start":2169,"line_end":2169,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":853003,"byte_end":853006,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":853011,"byte_end":853018,"line_start":2171,"line_end":2171,"column_start":5,"column_end":12}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"src/liballoc/vec.rs","byte_start":853023,"byte_end":853053,"line_start":2172,"line_end":2172,"column_start":5,"column_end":35}},{"value":"/ let new = [7, 8];","span":{"file_name":"src/liballoc/vec.rs","byte_start":853058,"byte_end":853079,"line_start":2173,"line_end":2173,"column_start":5,"column_end":26}},{"value":"/ let u: Vec<_> = v.splice(..2, new.iter().cloned()).collect();","span":{"file_name":"src/liballoc/vec.rs","byte_start":853084,"byte_end":853149,"line_start":2174,"line_end":2174,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(v, &[7, 8, 3]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":853154,"byte_end":853184,"line_start":2175,"line_end":2175,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(u, &[1, 2]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":853189,"byte_end":853216,"line_start":2176,"line_end":2176,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":853221,"byte_end":853228,"line_start":2177,"line_end":2177,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"src/liballoc/vec.rs","byte_start":853233,"byte_end":853242,"line_start":2178,"line_end":2178,"column_start":5,"column_end":14}},{"value":"stable(feature = \"vec_splice\", since = \"1.21.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":853247,"byte_end":853298,"line_start":2179,"line_end":2179,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":4121},"span":{"file_name":"src/liballoc/vec.rs","byte_start":855300,"byte_end":855312,"line_start":2234,"line_end":2234,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<Vec<T>>::drain_filter","value":"fn <F> (&mut self, filter: F) -> DrainFilter<'_, T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator which uses a closure to determine if an element should be removed.","sig":null,"attributes":[{"value":"/ Creates an iterator which uses a closure to determine if an element should be removed.","span":{"file_name":"src/liballoc/vec.rs","byte_start":853565,"byte_end":853655,"line_start":2188,"line_end":2188,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":853660,"byte_end":853663,"line_start":2189,"line_end":2189,"column_start":5,"column_end":8}},{"value":"/ If the closure returns true, then the element is removed and yielded.","span":{"file_name":"src/liballoc/vec.rs","byte_start":853668,"byte_end":853741,"line_start":2190,"line_end":2190,"column_start":5,"column_end":78}},{"value":"/ If the closure returns false, the element will remain in the vector and will not be yielded","span":{"file_name":"src/liballoc/vec.rs","byte_start":853746,"byte_end":853841,"line_start":2191,"line_end":2191,"column_start":5,"column_end":100}},{"value":"/ by the iterator.","span":{"file_name":"src/liballoc/vec.rs","byte_start":853846,"byte_end":853866,"line_start":2192,"line_end":2192,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":853871,"byte_end":853874,"line_start":2193,"line_end":2193,"column_start":5,"column_end":8}},{"value":"/ Using this method is equivalent to the following code:","span":{"file_name":"src/liballoc/vec.rs","byte_start":853879,"byte_end":853937,"line_start":2194,"line_end":2194,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":853942,"byte_end":853945,"line_start":2195,"line_end":2195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":853950,"byte_end":853957,"line_start":2196,"line_end":2196,"column_start":5,"column_end":12}},{"value":"/ # let some_predicate = |x: &mut i32| { *x == 2 || *x == 3 || *x == 6 };","span":{"file_name":"src/liballoc/vec.rs","byte_start":853962,"byte_end":854037,"line_start":2197,"line_end":2197,"column_start":5,"column_end":80}},{"value":"/ # let mut vec = vec![1, 2, 3, 4, 5, 6];","span":{"file_name":"src/liballoc/vec.rs","byte_start":854042,"byte_end":854085,"line_start":2198,"line_end":2198,"column_start":5,"column_end":48}},{"value":"/ let mut i = 0;","span":{"file_name":"src/liballoc/vec.rs","byte_start":854090,"byte_end":854108,"line_start":2199,"line_end":2199,"column_start":5,"column_end":23}},{"value":"/ while i != vec.len() {","span":{"file_name":"src/liballoc/vec.rs","byte_start":854113,"byte_end":854139,"line_start":2200,"line_end":2200,"column_start":5,"column_end":31}},{"value":"/     if some_predicate(&mut vec[i]) {","span":{"file_name":"src/liballoc/vec.rs","byte_start":854144,"byte_end":854184,"line_start":2201,"line_end":2201,"column_start":5,"column_end":45}},{"value":"/         let val = vec.remove(i);","span":{"file_name":"src/liballoc/vec.rs","byte_start":854189,"byte_end":854225,"line_start":2202,"line_end":2202,"column_start":5,"column_end":41}},{"value":"/         // your code here","span":{"file_name":"src/liballoc/vec.rs","byte_start":854230,"byte_end":854259,"line_start":2203,"line_end":2203,"column_start":5,"column_end":34}},{"value":"/     } else {","span":{"file_name":"src/liballoc/vec.rs","byte_start":854264,"byte_end":854280,"line_start":2204,"line_end":2204,"column_start":5,"column_end":21}},{"value":"/         i += 1;","span":{"file_name":"src/liballoc/vec.rs","byte_start":854285,"byte_end":854304,"line_start":2205,"line_end":2205,"column_start":5,"column_end":24}},{"value":"/     }","span":{"file_name":"src/liballoc/vec.rs","byte_start":854309,"byte_end":854318,"line_start":2206,"line_end":2206,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"src/liballoc/vec.rs","byte_start":854323,"byte_end":854328,"line_start":2207,"line_end":2207,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854333,"byte_end":854336,"line_start":2208,"line_end":2208,"column_start":5,"column_end":8}},{"value":"/ # assert_eq!(vec, vec![1, 4, 5]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":854341,"byte_end":854378,"line_start":2209,"line_end":2209,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":854383,"byte_end":854390,"line_start":2210,"line_end":2210,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854395,"byte_end":854398,"line_start":2211,"line_end":2211,"column_start":5,"column_end":8}},{"value":"/ But `drain_filter` is easier to use. `drain_filter` is also more efficient,","span":{"file_name":"src/liballoc/vec.rs","byte_start":854403,"byte_end":854482,"line_start":2212,"line_end":2212,"column_start":5,"column_end":84}},{"value":"/ because it can backshift the elements of the array in bulk.","span":{"file_name":"src/liballoc/vec.rs","byte_start":854487,"byte_end":854550,"line_start":2213,"line_end":2213,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854555,"byte_end":854558,"line_start":2214,"line_end":2214,"column_start":5,"column_end":8}},{"value":"/ Note that `drain_filter` also lets you mutate every element in the filter closure,","span":{"file_name":"src/liballoc/vec.rs","byte_start":854563,"byte_end":854649,"line_start":2215,"line_end":2215,"column_start":5,"column_end":91}},{"value":"/ regardless of whether you choose to keep or remove it.","span":{"file_name":"src/liballoc/vec.rs","byte_start":854654,"byte_end":854712,"line_start":2216,"line_end":2216,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854717,"byte_end":854720,"line_start":2217,"line_end":2217,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854725,"byte_end":854728,"line_start":2218,"line_end":2218,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":854733,"byte_end":854747,"line_start":2219,"line_end":2219,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854752,"byte_end":854755,"line_start":2220,"line_end":2220,"column_start":5,"column_end":8}},{"value":"/ Splitting an array into evens and odds, reusing the original allocation:","span":{"file_name":"src/liballoc/vec.rs","byte_start":854760,"byte_end":854836,"line_start":2221,"line_end":2221,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854841,"byte_end":854844,"line_start":2222,"line_end":2222,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":854849,"byte_end":854856,"line_start":2223,"line_end":2223,"column_start":5,"column_end":12}},{"value":"/ #![feature(drain_filter)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":854861,"byte_end":854890,"line_start":2224,"line_end":2224,"column_start":5,"column_end":34}},{"value":"/ let mut numbers = vec![1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15];","span":{"file_name":"src/liballoc/vec.rs","byte_start":854895,"byte_end":854962,"line_start":2225,"line_end":2225,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":854967,"byte_end":854970,"line_start":2226,"line_end":2226,"column_start":5,"column_end":8}},{"value":"/ let evens = numbers.drain_filter(|x| *x % 2 == 0).collect::<Vec<_>>();","span":{"file_name":"src/liballoc/vec.rs","byte_start":854975,"byte_end":855049,"line_start":2227,"line_end":2227,"column_start":5,"column_end":79}},{"value":"/ let odds = numbers;","span":{"file_name":"src/liballoc/vec.rs","byte_start":855054,"byte_end":855077,"line_start":2228,"line_end":2228,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":855082,"byte_end":855085,"line_start":2229,"line_end":2229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![2, 4, 6, 8, 14]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":855090,"byte_end":855134,"line_start":2230,"line_end":2230,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);","span":{"file_name":"src/liballoc/vec.rs","byte_start":855139,"byte_end":855190,"line_start":2231,"line_end":2231,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":855195,"byte_end":855202,"line_start":2232,"line_end":2232,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":855207,"byte_end":855288,"line_start":2233,"line_end":2233,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":4193},"span":{"file_name":"src/liballoc/vec.rs","byte_start":862245,"byte_end":862253,"line_start":2475,"line_end":2475,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4195},{"krate":0,"index":4196},{"krate":0,"index":4197},{"krate":0,"index":4198},{"krate":0,"index":4199}],"decl_id":null,"docs":" An iterator that moves out of a vector.","sig":null,"attributes":[{"value":"/ An iterator that moves out of a vector.","span":{"file_name":"src/liballoc/vec.rs","byte_start":861934,"byte_end":861977,"line_start":2467,"line_end":2467,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":861978,"byte_end":861981,"line_start":2468,"line_end":2468,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the `into_iter` method on [`Vec`] (provided","span":{"file_name":"src/liballoc/vec.rs","byte_start":861982,"byte_end":862057,"line_start":2469,"line_end":2469,"column_start":1,"column_end":76}},{"value":"/ by the [`IntoIterator`] trait).","span":{"file_name":"src/liballoc/vec.rs","byte_start":862058,"byte_end":862093,"line_start":2470,"line_end":2470,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":862094,"byte_end":862097,"line_start":2471,"line_end":2471,"column_start":1,"column_end":4}},{"value":"/ [`Vec`]: struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":862098,"byte_end":862126,"line_start":2472,"line_end":2472,"column_start":1,"column_end":29}},{"value":"/ [`IntoIterator`]: ../../std/iter/trait.IntoIterator.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":862127,"byte_end":862187,"line_start":2473,"line_end":2473,"column_start":1,"column_end":61}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":862188,"byte_end":862233,"line_start":2474,"line_end":2474,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4205},"span":{"file_name":"src/liballoc/vec.rs","byte_start":863081,"byte_end":863089,"line_start":2503,"line_end":2503,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<IntoIter<T>>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a slice.","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a slice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":862640,"byte_end":862700,"line_start":2491,"line_end":2491,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":862705,"byte_end":862708,"line_start":2492,"line_end":2492,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":862713,"byte_end":862727,"line_start":2493,"line_end":2493,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":862732,"byte_end":862735,"line_start":2494,"line_end":2494,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":862740,"byte_end":862747,"line_start":2495,"line_end":2495,"column_start":5,"column_end":12}},{"value":"/ let vec = vec!['a', 'b', 'c'];","span":{"file_name":"src/liballoc/vec.rs","byte_start":862752,"byte_end":862786,"line_start":2496,"line_end":2496,"column_start":5,"column_end":39}},{"value":"/ let mut into_iter = vec.into_iter();","span":{"file_name":"src/liballoc/vec.rs","byte_start":862791,"byte_end":862831,"line_start":2497,"line_end":2497,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":862836,"byte_end":862891,"line_start":2498,"line_end":2498,"column_start":5,"column_end":60}},{"value":"/ let _ = into_iter.next().unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":862896,"byte_end":862934,"line_start":2499,"line_end":2499,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(into_iter.as_slice(), &['b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":862939,"byte_end":862989,"line_start":2500,"line_end":2500,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":862994,"byte_end":863001,"line_start":2501,"line_end":2501,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":863006,"byte_end":863069,"line_start":2502,"line_end":2502,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":4206},"span":{"file_name":"src/liballoc/vec.rs","byte_start":863731,"byte_end":863743,"line_start":2521,"line_end":2521,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<IntoIter<T>>::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a mutable slice.","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a mutable slice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":863181,"byte_end":863249,"line_start":2507,"line_end":2507,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":863254,"byte_end":863257,"line_start":2508,"line_end":2508,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":863262,"byte_end":863276,"line_start":2509,"line_end":2509,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":863281,"byte_end":863284,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":863289,"byte_end":863296,"line_start":2511,"line_end":2511,"column_start":5,"column_end":12}},{"value":"/ let vec = vec!['a', 'b', 'c'];","span":{"file_name":"src/liballoc/vec.rs","byte_start":863301,"byte_end":863335,"line_start":2512,"line_end":2512,"column_start":5,"column_end":39}},{"value":"/ let mut into_iter = vec.into_iter();","span":{"file_name":"src/liballoc/vec.rs","byte_start":863340,"byte_end":863380,"line_start":2513,"line_end":2513,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":863385,"byte_end":863440,"line_start":2514,"line_end":2514,"column_start":5,"column_end":60}},{"value":"/ into_iter.as_mut_slice()[2] = 'z';","span":{"file_name":"src/liballoc/vec.rs","byte_start":863445,"byte_end":863483,"line_start":2515,"line_end":2515,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(into_iter.next().unwrap(), 'a');","span":{"file_name":"src/liballoc/vec.rs","byte_start":863488,"byte_end":863535,"line_start":2516,"line_end":2516,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(into_iter.next().unwrap(), 'b');","span":{"file_name":"src/liballoc/vec.rs","byte_start":863540,"byte_end":863587,"line_start":2517,"line_end":2517,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(into_iter.next().unwrap(), 'z');","span":{"file_name":"src/liballoc/vec.rs","byte_start":863592,"byte_end":863639,"line_start":2518,"line_end":2518,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":863644,"byte_end":863651,"line_start":2519,"line_end":2519,"column_start":5,"column_end":12}},{"value":"stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":863656,"byte_end":863719,"line_start":2520,"line_end":2520,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4233},"span":{"file_name":"src/liballoc/vec.rs","byte_start":867107,"byte_end":867112,"line_start":2637,"line_end":2637,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239}],"decl_id":null,"docs":" A draining iterator for `Vec<T>`.","sig":null,"attributes":[{"value":"/ A draining iterator for `Vec<T>`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":866866,"byte_end":866903,"line_start":2630,"line_end":2630,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":866904,"byte_end":866907,"line_start":2631,"line_end":2631,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`Vec`].","span":{"file_name":"src/liballoc/vec.rs","byte_start":866908,"byte_end":866972,"line_start":2632,"line_end":2632,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":866973,"byte_end":866976,"line_start":2633,"line_end":2633,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.Vec.html#method.drain","span":{"file_name":"src/liballoc/vec.rs","byte_start":866977,"byte_end":867020,"line_start":2634,"line_end":2634,"column_start":1,"column_end":44}},{"value":"/ [`Vec`]: struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":867021,"byte_end":867049,"line_start":2635,"line_end":2635,"column_start":1,"column_end":29}},{"value":"stable(feature = \"drain\", since = \"1.6.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":867050,"byte_end":867095,"line_start":2636,"line_end":2636,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4246},"span":{"file_name":"src/liballoc/vec.rs","byte_start":868101,"byte_end":868109,"line_start":2668,"line_end":2668,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Drain>::as_slice","value":"fn (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining items of this iterator as a slice.","sig":null,"attributes":[{"value":"/ Returns the remaining items of this iterator as a slice.","span":{"file_name":"src/liballoc/vec.rs","byte_start":867608,"byte_end":867668,"line_start":2655,"line_end":2655,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":867673,"byte_end":867676,"line_start":2656,"line_end":2656,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"src/liballoc/vec.rs","byte_start":867681,"byte_end":867695,"line_start":2657,"line_end":2657,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":867700,"byte_end":867703,"line_start":2658,"line_end":2658,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":867708,"byte_end":867715,"line_start":2659,"line_end":2659,"column_start":5,"column_end":12}},{"value":"/ # #![feature(vec_drain_as_slice)]","span":{"file_name":"src/liballoc/vec.rs","byte_start":867720,"byte_end":867757,"line_start":2660,"line_end":2660,"column_start":5,"column_end":42}},{"value":"/ let mut vec = vec!['a', 'b', 'c'];","span":{"file_name":"src/liballoc/vec.rs","byte_start":867762,"byte_end":867800,"line_start":2661,"line_end":2661,"column_start":5,"column_end":43}},{"value":"/ let mut drain = vec.drain(..);","span":{"file_name":"src/liballoc/vec.rs","byte_start":867805,"byte_end":867839,"line_start":2662,"line_end":2662,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(drain.as_slice(), &['a', 'b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":867844,"byte_end":867895,"line_start":2663,"line_end":2663,"column_start":5,"column_end":56}},{"value":"/ let _ = drain.next().unwrap();","span":{"file_name":"src/liballoc/vec.rs","byte_start":867900,"byte_end":867934,"line_start":2664,"line_end":2664,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(drain.as_slice(), &['b', 'c']);","span":{"file_name":"src/liballoc/vec.rs","byte_start":867939,"byte_end":867985,"line_start":2665,"line_end":2665,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"src/liballoc/vec.rs","byte_start":867990,"byte_end":867997,"line_start":2666,"line_end":2666,"column_start":5,"column_end":12}},{"value":"unstable(feature = \"vec_drain_as_slice\", reason = \"recently added\", issue =\n           \"58957\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":868002,"byte_end":868089,"line_start":2667,"line_end":2667,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":4721},"span":{"file_name":"src/liballoc/vec.rs","byte_start":870323,"byte_end":870329,"line_start":2745,"line_end":2745,"column_start":12,"column_end":18},"name":"Splice","qualname":"::vec::Splice","value":"Splice {  }","parent":null,"children":[{"krate":0,"index":4724},{"krate":0,"index":4725}],"decl_id":null,"docs":" A splicing iterator for `Vec`.","sig":null,"attributes":[{"value":"/ A splicing iterator for `Vec`.","span":{"file_name":"src/liballoc/vec.rs","byte_start":870021,"byte_end":870055,"line_start":2736,"line_end":2736,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":870056,"byte_end":870059,"line_start":2737,"line_end":2737,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`splice()`] method on [`Vec`]. See its","span":{"file_name":"src/liballoc/vec.rs","byte_start":870060,"byte_end":870133,"line_start":2738,"line_end":2738,"column_start":1,"column_end":74}},{"value":"/ documentation for more.","span":{"file_name":"src/liballoc/vec.rs","byte_start":870134,"byte_end":870161,"line_start":2739,"line_end":2739,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"src/liballoc/vec.rs","byte_start":870162,"byte_end":870165,"line_start":2740,"line_end":2740,"column_start":1,"column_end":4}},{"value":"/ [`splice()`]: struct.Vec.html#method.splice","span":{"file_name":"src/liballoc/vec.rs","byte_start":870166,"byte_end":870213,"line_start":2741,"line_end":2741,"column_start":1,"column_end":48}},{"value":"/ [`Vec`]: struct.Vec.html","span":{"file_name":"src/liballoc/vec.rs","byte_start":870214,"byte_end":870242,"line_start":2742,"line_end":2742,"column_start":1,"column_end":29}},{"value":"stable(feature = \"vec_splice\", since = \"1.21.0\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":870260,"byte_end":870311,"line_start":2744,"line_end":2744,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":4730},"span":{"file_name":"src/liballoc/vec.rs","byte_start":874274,"byte_end":874285,"line_start":2855,"line_end":2855,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::vec::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":4734},{"krate":0,"index":4735},{"krate":0,"index":4736},{"krate":0,"index":4737},{"krate":0,"index":4738},{"krate":0,"index":4739}],"decl_id":null,"docs":" An iterator produced by calling `drain_filter` on Vec.\n","sig":null,"attributes":[{"value":"/ An iterator produced by calling `drain_filter` on Vec.","span":{"file_name":"src/liballoc/vec.rs","byte_start":874105,"byte_end":874163,"line_start":2852,"line_end":2852,"column_start":1,"column_end":59}},{"value":"unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n           \"43244\")","span":{"file_name":"src/liballoc/vec.rs","byte_start":874164,"byte_end":874245,"line_start":2853,"line_end":2853,"column_start":1,"column_end":82}}]},{"kind":"Mod","id":{"krate":0,"index":4313},"span":{"file_name":"src/liballoc/lib.rs","byte_start":5527,"byte_end":5535,"line_start":173,"line_end":173,"column_start":9,"column_end":17},"name":"__export","qualname":"::__export","value":"src/liballoc/lib.rs","parent":null,"children":[{"krate":0,"index":4314}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"liballoc_internals\", issue = \"none\", reason =\n           \"implementation detail\")","span":{"file_name":"src/liballoc/lib.rs","byte_start":5425,"byte_end":5518,"line_start":172,"line_end":172,"column_start":1,"column_end":94}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"src/liballoc/alloc.rs","byte_start":14474,"byte_end":14480,"line_start":166,"line_end":166,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":22654,"byte_end":22657,"line_start":161,"line_end":161,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":24956,"byte_end":24959,"line_start":242,"line_end":242,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":26075,"byte_end":26078,"line_start":278,"line_end":278,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":27067,"byte_end":27070,"line_start":314,"line_end":314,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":28203,"byte_end":28206,"line_start":352,"line_end":352,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":35880,"byte_end":35883,"line_start":551,"line_end":551,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36069,"byte_end":36072,"line_start":558,"line_end":558,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36273,"byte_end":36276,"line_start":566,"line_end":566,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36431,"byte_end":36434,"line_start":573,"line_end":573,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":36618,"byte_end":36621,"line_start":580,"line_end":580,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4324},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":37686,"byte_end":37689,"line_start":625,"line_end":625,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":37968,"byte_end":37971,"line_start":634,"line_end":634,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":38277,"byte_end":38280,"line_start":645,"line_end":645,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":38919,"byte_end":38922,"line_start":668,"line_end":668,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":39108,"byte_end":39111,"line_start":675,"line_end":675,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":39197,"byte_end":39200,"line_start":678,"line_end":678,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":39390,"byte_end":39393,"line_start":685,"line_end":685,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":40514,"byte_end":40517,"line_start":731,"line_end":731,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":40965,"byte_end":40968,"line_start":750,"line_end":750,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":41272,"byte_end":41275,"line_start":760,"line_end":760,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":42025,"byte_end":42028,"line_start":785,"line_end":785,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":42514,"byte_end":42517,"line_start":803,"line_end":803,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43344,"byte_end":43347,"line_start":827,"line_end":827,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":43680,"byte_end":43683,"line_start":842,"line_end":842,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"src/liballoc/boxed.rs","byte_start":44560,"byte_end":44563,"line_start":874,"line_end":874,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45507,"byte_end":45510,"line_start":903,"line_end":903,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45716,"byte_end":45719,"line_start":910,"line_end":910,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":45912,"byte_end":45915,"line_start":917,"line_end":917,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46282,"byte_end":46285,"line_start":927,"line_end":927,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46441,"byte_end":46444,"line_start":936,"line_end":936,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46604,"byte_end":46607,"line_start":943,"line_end":943,"column_start":30,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":46701,"byte_end":46704,"line_start":946,"line_end":946,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47169,"byte_end":47172,"line_start":967,"line_end":967,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47572,"byte_end":47575,"line_start":982,"line_end":982,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":47760,"byte_end":47763,"line_start":989,"line_end":989,"column_start":63,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48052,"byte_end":48055,"line_start":998,"line_end":998,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48286,"byte_end":48289,"line_start":1008,"line_end":1008,"column_start":51,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48403,"byte_end":48406,"line_start":1011,"line_end":1011,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48688,"byte_end":48691,"line_start":1020,"line_end":1020,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":48923,"byte_end":48926,"line_start":1027,"line_end":1027,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49167,"byte_end":49170,"line_start":1034,"line_end":1034,"column_start":66,"column_end":69},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49304,"byte_end":49307,"line_start":1037,"line_end":1037,"column_start":68,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49406,"byte_end":49409,"line_start":1040,"line_end":1040,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49634,"byte_end":49637,"line_start":1047,"line_end":1047,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49814,"byte_end":49817,"line_start":1054,"line_end":1054,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":49969,"byte_end":49972,"line_start":1061,"line_end":1061,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":50134,"byte_end":50137,"line_start":1068,"line_end":1068,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":50283,"byte_end":50286,"line_start":1075,"line_end":1075,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51519,"byte_end":51522,"line_start":1104,"line_end":1104,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51638,"byte_end":51641,"line_start":1107,"line_end":1107,"column_start":51,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":51940,"byte_end":51943,"line_start":1117,"line_end":1117,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"src/liballoc/boxed.rs","byte_start":52240,"byte_end":52243,"line_start":1127,"line_end":1127,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":52833,"byte_end":52836,"line_start":18,"line_end":18,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":54652,"byte_end":54653,"line_start":80,"line_end":80,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":57804,"byte_end":57807,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"src/liballoc/borrow.rs","byte_start":58292,"byte_end":58295,"line_start":204,"line_end":204,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61434,"byte_end":61437,"line_start":321,"line_end":321,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61699,"byte_end":61702,"line_start":333,"line_end":333,"column_start":24,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":61806,"byte_end":61809,"line_start":336,"line_end":336,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62059,"byte_end":62062,"line_start":347,"line_end":347,"column_start":62,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62317,"byte_end":62320,"line_start":359,"line_end":359,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62584,"byte_end":62587,"line_start":370,"line_end":370,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":62939,"byte_end":62942,"line_start":383,"line_end":383,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63300,"byte_end":63303,"line_start":396,"line_end":396,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63596,"byte_end":63599,"line_start":407,"line_end":407,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63828,"byte_end":63831,"line_start":418,"line_end":418,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":63967,"byte_end":63970,"line_start":425,"line_end":425,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":64205,"byte_end":64208,"line_start":436,"line_end":436,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":64449,"byte_end":64452,"line_start":447,"line_end":447,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"src/liballoc/borrow.rs","byte_start":64967,"byte_end":64970,"line_start":463,"line_end":463,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76958,"byte_end":76965,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77199,"byte_end":77206,"line_start":275,"line_end":275,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77404,"byte_end":77411,"line_start":284,"line_end":284,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77730,"byte_end":77737,"line_start":294,"line_end":294,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77980,"byte_end":77987,"line_start":302,"line_end":302,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78345,"byte_end":78355,"line_start":313,"line_end":313,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78615,"byte_end":78625,"line_start":324,"line_end":324,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78850,"byte_end":78860,"line_start":333,"line_end":333,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79004,"byte_end":79014,"line_start":339,"line_end":339,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89466,"byte_end":89476,"line_start":672,"line_end":672,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97553,"byte_end":97557,"line_start":972,"line_end":972,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98999,"byte_end":99003,"line_start":1019,"line_end":1019,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99699,"byte_end":99703,"line_start":1043,"line_end":1043,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99972,"byte_end":99976,"line_start":1051,"line_end":1051,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100137,"byte_end":100141,"line_start":1058,"line_end":1058,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100533,"byte_end":100537,"line_start":1078,"line_end":1078,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100723,"byte_end":100727,"line_start":1086,"line_end":1086,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100881,"byte_end":100885,"line_start":1093,"line_end":1093,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101430,"byte_end":101438,"line_start":1109,"line_end":1109,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101655,"byte_end":101663,"line_start":1116,"line_end":1116,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101956,"byte_end":101964,"line_start":1131,"line_end":1131,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102142,"byte_end":102150,"line_start":1139,"line_end":1139,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102300,"byte_end":102308,"line_start":1146,"line_end":1146,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102568,"byte_end":102582,"line_start":1155,"line_end":1155,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102940,"byte_end":102954,"line_start":1171,"line_end":1171,"column_start":36,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103064,"byte_end":103078,"line_start":1174,"line_end":1174,"column_start":32,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103175,"byte_end":103189,"line_start":1177,"line_end":1177,"column_start":36,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103660,"byte_end":103665,"line_start":1193,"line_end":1193,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103962,"byte_end":103967,"line_start":1208,"line_end":1208,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104149,"byte_end":104154,"line_start":1216,"line_end":1216,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104308,"byte_end":104313,"line_start":1223,"line_end":1223,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104868,"byte_end":104879,"line_start":1239,"line_end":1239,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105109,"byte_end":105120,"line_start":1247,"line_end":1247,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105478,"byte_end":105489,"line_start":1263,"line_end":1263,"column_start":36,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105599,"byte_end":105610,"line_start":1266,"line_end":1266,"column_start":32,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105711,"byte_end":105722,"line_start":1269,"line_end":1269,"column_start":36,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105826,"byte_end":105836,"line_start":1272,"line_end":1272,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106209,"byte_end":106212,"line_start":1284,"line_end":1284,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106369,"byte_end":106379,"line_start":1291,"line_end":1291,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106600,"byte_end":106610,"line_start":1298,"line_end":1298,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107601,"byte_end":107611,"line_start":1336,"line_end":1336,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107819,"byte_end":107829,"line_start":1343,"line_end":1343,"column_start":59,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107985,"byte_end":107995,"line_start":1349,"line_end":1349,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108113,"byte_end":108123,"line_start":1355,"line_end":1355,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108484,"byte_end":108494,"line_start":1367,"line_end":1367,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114598,"byte_end":114606,"line_start":129,"line_end":129,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114804,"byte_end":114812,"line_start":138,"line_end":138,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117626,"byte_end":117634,"line_start":212,"line_end":212,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119219,"byte_end":119223,"line_start":264,"line_end":264,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120452,"byte_end":120460,"line_start":299,"line_end":299,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121130,"byte_end":121134,"line_start":319,"line_end":319,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121737,"byte_end":121743,"line_start":338,"line_end":338,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122927,"byte_end":122932,"line_start":371,"line_end":371,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123792,"byte_end":123800,"line_start":394,"line_end":394,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124771,"byte_end":124776,"line_start":419,"line_end":419,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125538,"byte_end":125549,"line_start":443,"line_end":443,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126208,"byte_end":126221,"line_start":464,"line_end":464,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126583,"byte_end":126591,"line_start":476,"line_end":476,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":799},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":817},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151049,"byte_end":151053,"line_start":1262,"line_end":1262,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151578,"byte_end":151582,"line_start":1284,"line_end":1284,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151690,"byte_end":151694,"line_start":1287,"line_end":1287,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":152017,"byte_end":152021,"line_start":1299,"line_end":1299,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":152159,"byte_end":152163,"line_start":1306,"line_end":1306,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":152627,"byte_end":152634,"line_start":1323,"line_end":1323,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153188,"byte_end":153195,"line_start":1345,"line_end":1345,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153522,"byte_end":153529,"line_start":1357,"line_end":1357,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153676,"byte_end":153683,"line_start":1364,"line_end":1364,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153772,"byte_end":153780,"line_start":1367,"line_end":1367,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":154255,"byte_end":154263,"line_start":1382,"line_end":1382,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":154874,"byte_end":154882,"line_start":1402,"line_end":1402,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":156346,"byte_end":156354,"line_start":1447,"line_end":1447,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157688,"byte_end":157696,"line_start":1486,"line_end":1486,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157839,"byte_end":157847,"line_start":1493,"line_end":1493,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157932,"byte_end":157936,"line_start":1496,"line_end":1496,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158314,"byte_end":158318,"line_start":1513,"line_end":1513,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158513,"byte_end":158517,"line_start":1520,"line_end":1520,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158669,"byte_end":158673,"line_start":1527,"line_end":1527,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158755,"byte_end":158759,"line_start":1530,"line_end":1530,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158928,"byte_end":158934,"line_start":1537,"line_end":1537,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159312,"byte_end":159318,"line_start":1554,"line_end":1554,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159513,"byte_end":159519,"line_start":1561,"line_end":1561,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159671,"byte_end":159677,"line_start":1568,"line_end":1568,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159759,"byte_end":159765,"line_start":1571,"line_end":1571,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159943,"byte_end":159948,"line_start":1578,"line_end":1578,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160312,"byte_end":160321,"line_start":1591,"line_end":1591,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160721,"byte_end":160730,"line_start":1608,"line_end":1608,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160939,"byte_end":160948,"line_start":1615,"line_end":1615,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":161100,"byte_end":161109,"line_start":1622,"line_end":1622,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":161139,"byte_end":161144,"line_start":1624,"line_end":1624,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162203,"byte_end":162208,"line_start":1657,"line_end":1657,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162398,"byte_end":162403,"line_start":1663,"line_end":1663,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163443,"byte_end":163448,"line_start":1696,"line_end":1696,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163537,"byte_end":163542,"line_start":1699,"line_end":1699,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163728,"byte_end":163736,"line_start":1706,"line_end":1706,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164043,"byte_end":164051,"line_start":1718,"line_end":1718,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165522,"byte_end":165530,"line_start":1755,"line_end":1755,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165785,"byte_end":165793,"line_start":1762,"line_end":1762,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165823,"byte_end":165831,"line_start":1764,"line_end":1764,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167294,"byte_end":167302,"line_start":1801,"line_end":1801,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167556,"byte_end":167564,"line_start":1810,"line_end":1810,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167868,"byte_end":167876,"line_start":1820,"line_end":1820,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168122,"byte_end":168130,"line_start":1827,"line_end":1827,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168334,"byte_end":168342,"line_start":1836,"line_end":1836,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168557,"byte_end":168565,"line_start":1844,"line_end":1844,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168787,"byte_end":168795,"line_start":1851,"line_end":1851,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168902,"byte_end":168910,"line_start":1854,"line_end":1854,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169135,"byte_end":169143,"line_start":1862,"line_end":1862,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169350,"byte_end":169358,"line_start":1870,"line_end":1870,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169578,"byte_end":169586,"line_start":1877,"line_end":1877,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174120,"byte_end":174128,"line_start":2030,"line_end":2030,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178736,"byte_end":178741,"line_start":2205,"line_end":2205,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181635,"byte_end":181640,"line_start":2303,"line_end":2303,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182352,"byte_end":182363,"line_start":2326,"line_end":2326,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185129,"byte_end":185142,"line_start":2420,"line_end":2420,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":192748,"byte_end":192757,"line_start":2667,"line_end":2667,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":197497,"byte_end":197505,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1216}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":198140,"byte_end":198150,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":198362,"byte_end":198372,"line_start":120,"line_end":120,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":199457,"byte_end":199469,"line_start":142,"line_end":142,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":200413,"byte_end":200422,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201173,"byte_end":201177,"line_start":190,"line_end":190,"column_start":40,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201226,"byte_end":201230,"line_start":191,"line_end":191,"column_start":40,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201252,"byte_end":201256,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206215,"byte_end":206222,"line_start":319,"line_end":319,"column_start":39,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206296,"byte_end":206303,"line_start":320,"line_end":320,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206447,"byte_end":206454,"line_start":326,"line_end":326,"column_start":58,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206542,"byte_end":206549,"line_start":328,"line_end":328,"column_start":60,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206643,"byte_end":206650,"line_start":329,"line_end":329,"column_start":60,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206728,"byte_end":206735,"line_start":330,"line_end":330,"column_start":46,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206790,"byte_end":206797,"line_start":332,"line_end":332,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206980,"byte_end":206987,"line_start":338,"line_end":338,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207205,"byte_end":207212,"line_start":344,"line_end":344,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211152,"byte_end":211159,"line_start":449,"line_end":449,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211789,"byte_end":211796,"line_start":464,"line_end":464,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212397,"byte_end":212404,"line_start":478,"line_end":478,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":214695,"byte_end":214702,"line_start":522,"line_end":522,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215648,"byte_end":215655,"line_start":544,"line_end":544,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217695,"byte_end":217702,"line_start":594,"line_end":594,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218721,"byte_end":218728,"line_start":626,"line_end":626,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220870,"byte_end":220877,"line_start":686,"line_end":686,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223725,"byte_end":223732,"line_start":759,"line_end":759,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225225,"byte_end":225231,"line_start":799,"line_end":799,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225446,"byte_end":225452,"line_start":802,"line_end":802,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225537,"byte_end":225543,"line_start":808,"line_end":808,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225746,"byte_end":225752,"line_start":815,"line_end":815,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226503,"byte_end":226509,"line_start":834,"line_end":834,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226727,"byte_end":226733,"line_start":842,"line_end":842,"column_start":5,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227177,"byte_end":227183,"line_start":851,"line_end":851,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":228285,"byte_end":228291,"line_start":870,"line_end":870,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229126,"byte_end":229132,"line_start":889,"line_end":889,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1457},{"krate":0,"index":1458}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":231110,"byte_end":231116,"line_start":937,"line_end":937,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234530,"byte_end":234536,"line_start":1021,"line_end":1021,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235177,"byte_end":235183,"line_start":1038,"line_end":1038,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235461,"byte_end":235467,"line_start":1045,"line_end":1045,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235759,"byte_end":235765,"line_start":1052,"line_end":1052,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236080,"byte_end":236086,"line_start":1061,"line_end":1061,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1495},{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238159,"byte_end":238165,"line_start":1112,"line_end":1112,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":250777,"byte_end":250783,"line_start":1416,"line_end":1416,"column_start":5,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1519}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251498,"byte_end":251504,"line_start":1436,"line_end":1436,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259059,"byte_end":259063,"line_start":78,"line_end":78,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":260470,"byte_end":260484,"line_start":130,"line_end":130,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":261738,"byte_end":261752,"line_start":171,"line_end":171,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262901,"byte_end":262911,"line_start":208,"line_end":208,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263599,"byte_end":263618,"line_start":225,"line_end":225,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264699,"byte_end":264711,"line_start":258,"line_end":258,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1669}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265327,"byte_end":265332,"line_start":275,"line_end":275,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265906,"byte_end":265914,"line_start":289,"line_end":289,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1687},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286222,"byte_end":286230,"line_start":938,"line_end":938,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288192,"byte_end":288200,"line_start":1007,"line_end":1007,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1726}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288433,"byte_end":288441,"line_start":1016,"line_end":1016,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289234,"byte_end":289242,"line_start":1048,"line_end":1048,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289529,"byte_end":289537,"line_start":1058,"line_end":1058,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289738,"byte_end":289746,"line_start":1065,"line_end":1065,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292801,"byte_end":292809,"line_start":1165,"line_end":1165,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1770}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293003,"byte_end":293007,"line_start":1172,"line_end":1172,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1773}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293167,"byte_end":293171,"line_start":1178,"line_end":1178,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293522,"byte_end":293526,"line_start":1192,"line_end":1192,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293697,"byte_end":293701,"line_start":1198,"line_end":1198,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1787}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293846,"byte_end":293850,"line_start":1205,"line_end":1205,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293929,"byte_end":293937,"line_start":1208,"line_end":1208,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1795}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294216,"byte_end":294224,"line_start":1219,"line_end":1219,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294403,"byte_end":294411,"line_start":1225,"line_end":1225,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294552,"byte_end":294560,"line_start":1232,"line_end":1232,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294639,"byte_end":294644,"line_start":1235,"line_end":1235,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1807}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294813,"byte_end":294818,"line_start":1242,"line_end":1242,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1814}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295106,"byte_end":295111,"line_start":1255,"line_end":1255,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295296,"byte_end":295301,"line_start":1262,"line_end":1262,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295377,"byte_end":295387,"line_start":1265,"line_end":1265,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1824}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296078,"byte_end":296088,"line_start":1282,"line_end":1282,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297718,"byte_end":297728,"line_start":1325,"line_end":1325,"column_start":32,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297804,"byte_end":297823,"line_start":1328,"line_end":1328,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1836}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297991,"byte_end":298010,"line_start":1334,"line_end":1334,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298704,"byte_end":298723,"line_start":1356,"line_end":1356,"column_start":32,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298799,"byte_end":298811,"line_start":1359,"line_end":1359,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299445,"byte_end":299457,"line_start":1375,"line_end":1375,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300804,"byte_end":300816,"line_start":1412,"line_end":1412,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300892,"byte_end":300897,"line_start":1415,"line_end":1415,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301051,"byte_end":301056,"line_start":1421,"line_end":1421,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301508,"byte_end":301513,"line_start":1437,"line_end":1437,"column_start":32,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303455,"byte_end":303459,"line_start":67,"line_end":67,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1907}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303716,"byte_end":303720,"line_start":75,"line_end":75,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1910}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304622,"byte_end":304629,"line_start":100,"line_end":100,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1920}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305318,"byte_end":305326,"line_start":120,"line_end":120,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1923}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305473,"byte_end":305477,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1926},{"krate":0,"index":1927}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305673,"byte_end":305683,"line_start":137,"line_end":137,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1940},{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313394,"byte_end":313404,"line_start":363,"line_end":363,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313530,"byte_end":313540,"line_start":371,"line_end":371,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330012,"byte_end":330022,"line_start":921,"line_end":921,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330139,"byte_end":330148,"line_start":925,"line_end":925,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1987}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330681,"byte_end":330685,"line_start":942,"line_end":942,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1994},{"krate":0,"index":1995}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331387,"byte_end":331391,"line_start":972,"line_end":972,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1999}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331873,"byte_end":331877,"line_start":990,"line_end":990,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331962,"byte_end":331966,"line_start":993,"line_end":993,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332049,"byte_end":332056,"line_start":996,"line_end":996,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2011},{"krate":0,"index":2012}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332778,"byte_end":332785,"line_start":1026,"line_end":1026,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2016}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333279,"byte_end":333286,"line_start":1044,"line_end":1044,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333371,"byte_end":333378,"line_start":1047,"line_end":1047,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333398,"byte_end":333405,"line_start":1049,"line_end":1049,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2024},{"krate":0,"index":2025}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336962,"byte_end":336968,"line_start":1155,"line_end":1155,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2035}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338021,"byte_end":338030,"line_start":1179,"line_end":1179,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338207,"byte_end":338213,"line_start":1185,"line_end":1185,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342189,"byte_end":342198,"line_start":1282,"line_end":1282,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2063},{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2069},{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346734,"byte_end":346743,"line_start":1391,"line_end":1391,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2082}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352724,"byte_end":352735,"line_start":1534,"line_end":1534,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353517,"byte_end":353528,"line_start":1563,"line_end":1563,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353760,"byte_end":353771,"line_start":1573,"line_end":1573,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2105}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354023,"byte_end":354031,"line_start":1583,"line_end":1583,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354344,"byte_end":354352,"line_start":1598,"line_end":1598,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354529,"byte_end":354537,"line_start":1606,"line_end":1606,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354618,"byte_end":354626,"line_start":1609,"line_end":1609,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354708,"byte_end":354718,"line_start":1612,"line_end":1612,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354943,"byte_end":354953,"line_start":1621,"line_end":1621,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355706,"byte_end":355716,"line_start":1653,"line_end":1653,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355892,"byte_end":355902,"line_start":1659,"line_end":1659,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356077,"byte_end":356087,"line_start":1665,"line_end":1665,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356284,"byte_end":356294,"line_start":1672,"line_end":1672,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2153}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356503,"byte_end":356513,"line_start":1679,"line_end":1679,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2157},{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356800,"byte_end":356810,"line_start":1690,"line_end":1690,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356899,"byte_end":356909,"line_start":1693,"line_end":1693,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2163}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357092,"byte_end":357102,"line_start":1700,"line_end":1700,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357279,"byte_end":357289,"line_start":1708,"line_end":1708,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357854,"byte_end":357864,"line_start":1728,"line_end":1728,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2173}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358057,"byte_end":358067,"line_start":1735,"line_end":1735,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2176}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358691,"byte_end":358701,"line_start":1759,"line_end":1759,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358785,"byte_end":358795,"line_start":1762,"line_end":1762,"column_start":31,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358879,"byte_end":358883,"line_start":1765,"line_end":1765,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358971,"byte_end":358975,"line_start":1768,"line_end":1768,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359063,"byte_end":359070,"line_start":1771,"line_end":1771,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359158,"byte_end":359165,"line_start":1774,"line_end":1774,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":361903,"byte_end":361913,"line_start":81,"line_end":81,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":362338,"byte_end":362348,"line_start":97,"line_end":97,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2259},{"krate":0,"index":2260}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":363124,"byte_end":363132,"line_start":122,"line_end":122,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2263},{"krate":0,"index":2264}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":363714,"byte_end":363722,"line_start":144,"line_end":144,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2267}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":363951,"byte_end":363958,"line_start":150,"line_end":150,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2276}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":364426,"byte_end":364434,"line_start":169,"line_end":169,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2279}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":364569,"byte_end":364577,"line_start":177,"line_end":177,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2296}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":373970,"byte_end":373978,"line_start":453,"line_end":453,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Inherent","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429905,"byte_end":429913,"line_start":2135,"line_end":2135,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432634,"byte_end":432638,"line_start":2229,"line_end":2229,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2374}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432991,"byte_end":432995,"line_start":2238,"line_end":2238,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2377}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":433182,"byte_end":433186,"line_start":2245,"line_end":2245,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2387},{"krate":0,"index":2391},{"krate":0,"index":2392}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":435404,"byte_end":435408,"line_start":2315,"line_end":2315,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2400}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436957,"byte_end":436961,"line_start":2360,"line_end":2360,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2406}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437117,"byte_end":437121,"line_start":2367,"line_end":2367,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437633,"byte_end":437640,"line_start":2384,"line_end":2384,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2417}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437950,"byte_end":437957,"line_start":2392,"line_end":2392,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2427},{"krate":0,"index":2428}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439320,"byte_end":439327,"line_start":2441,"line_end":2441,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2432},{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440077,"byte_end":440084,"line_start":2466,"line_end":2466,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2438}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440240,"byte_end":440247,"line_start":2473,"line_end":2473,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440778,"byte_end":440786,"line_start":2489,"line_end":2489,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2443}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440993,"byte_end":441001,"line_start":2496,"line_end":2496,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441331,"byte_end":441339,"line_start":2512,"line_end":2512,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2451}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441517,"byte_end":441525,"line_start":2520,"line_end":2520,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441676,"byte_end":441684,"line_start":2527,"line_end":2527,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442227,"byte_end":442232,"line_start":2545,"line_end":2545,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2466}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442548,"byte_end":442553,"line_start":2556,"line_end":2556,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442640,"byte_end":442645,"line_start":2558,"line_end":2558,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442720,"byte_end":442725,"line_start":2561,"line_end":2561,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2473}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444299,"byte_end":444304,"line_start":2608,"line_end":2608,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2479}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444638,"byte_end":444643,"line_start":2623,"line_end":2623,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2482}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444862,"byte_end":444867,"line_start":2631,"line_end":2631,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444952,"byte_end":444957,"line_start":2634,"line_end":2634,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445048,"byte_end":445056,"line_start":2637,"line_end":2637,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2490}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446551,"byte_end":446559,"line_start":2676,"line_end":2676,"column_start":20,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":447679,"byte_end":447687,"line_start":2706,"line_end":2706,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2496}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":447884,"byte_end":447892,"line_start":2713,"line_end":2713,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2499}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448081,"byte_end":448089,"line_start":2721,"line_end":2721,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2502}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448365,"byte_end":448373,"line_start":2731,"line_end":2731,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2506},{"krate":0,"index":2507}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448595,"byte_end":448603,"line_start":2741,"line_end":2741,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448819,"byte_end":448827,"line_start":2749,"line_end":2749,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2513}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":449167,"byte_end":449175,"line_start":2760,"line_end":2760,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":449938,"byte_end":449946,"line_start":2792,"line_end":2792,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":450733,"byte_end":450741,"line_start":2816,"line_end":2816,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2539}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":450952,"byte_end":450960,"line_start":2823,"line_end":2823,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2543}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":451175,"byte_end":451183,"line_start":2830,"line_end":2830,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2546}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452466,"byte_end":452469,"line_start":2862,"line_end":2862,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2549}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67378,"byte_end":67393,"line_start":73,"line_end":73,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2563}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483454,"byte_end":483460,"line_start":51,"line_end":51,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485276,"byte_end":485282,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487351,"byte_end":487357,"line_start":150,"line_end":150,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2651}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487936,"byte_end":487942,"line_start":163,"line_end":163,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2654},{"krate":0,"index":2655}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488766,"byte_end":488772,"line_start":185,"line_end":185,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506313,"byte_end":506319,"line_start":625,"line_end":625,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2692}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508444,"byte_end":508450,"line_start":683,"line_end":683,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2696}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Inherent","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":509249,"byte_end":509255,"line_start":703,"line_end":703,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2700}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":509680,"byte_end":509686,"line_start":715,"line_end":715,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2704}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":521812,"byte_end":521814,"line_start":287,"line_end":287,"column_start":35,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":521901,"byte_end":521903,"line_start":289,"line_end":289,"column_start":35,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":522032,"byte_end":522034,"line_start":292,"line_end":292,"column_start":65,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":522167,"byte_end":522169,"line_start":295,"line_end":295,"column_start":67,"column_end":69},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":522193,"byte_end":522195,"line_start":297,"line_end":297,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2776},{"krate":0,"index":2777}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":522427,"byte_end":522429,"line_start":307,"line_end":307,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":526453,"byte_end":526455,"line_start":439,"line_end":439,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2788}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":527373,"byte_end":527375,"line_start":469,"line_end":469,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":528478,"byte_end":528480,"line_start":508,"line_end":508,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":529778,"byte_end":529780,"line_start":549,"line_end":549,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2804},{"krate":0,"index":2805},{"krate":0,"index":2806}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":537490,"byte_end":537492,"line_start":800,"line_end":800,"column_start":16,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2809}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":540410,"byte_end":540412,"line_start":877,"line_end":877,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":2811}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":541308,"byte_end":541310,"line_start":909,"line_end":909,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2815},{"krate":0,"index":2818},{"krate":0,"index":2820}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":543469,"byte_end":543471,"line_start":969,"line_end":969,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2823}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":544151,"byte_end":544153,"line_start":987,"line_end":987,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2830},{"krate":0,"index":2831}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":545146,"byte_end":545151,"line_start":1013,"line_end":1013,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2841}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":546192,"byte_end":546194,"line_start":1051,"line_end":1051,"column_start":35,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2847}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":546372,"byte_end":546374,"line_start":1058,"line_end":1058,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2850}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":546556,"byte_end":546558,"line_start":1066,"line_end":1066,"column_start":27,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2853},{"krate":0,"index":2854}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":546758,"byte_end":546760,"line_start":1076,"line_end":1076,"column_start":30,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":546860,"byte_end":546862,"line_start":1079,"line_end":1079,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2859}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":548192,"byte_end":548194,"line_start":1127,"line_end":1127,"column_start":27,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2862}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":548715,"byte_end":548717,"line_start":1150,"line_end":1150,"column_start":30,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2865}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":549302,"byte_end":549304,"line_start":1174,"line_end":1174,"column_start":46,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2872},{"krate":0,"index":2873}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":550109,"byte_end":550111,"line_start":1194,"line_end":1194,"column_start":39,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2876},{"krate":0,"index":2877}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":550440,"byte_end":550442,"line_start":1207,"line_end":1207,"column_start":43,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2880},{"krate":0,"index":2881}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":551638,"byte_end":551640,"line_start":1255,"line_end":1255,"column_start":29,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":551738,"byte_end":551740,"line_start":1258,"line_end":1258,"column_start":45,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":553888,"byte_end":553890,"line_start":1352,"line_end":1352,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2893}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":554410,"byte_end":554412,"line_start":1374,"line_end":1374,"column_start":33,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2896}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":554598,"byte_end":554600,"line_start":1381,"line_end":1381,"column_start":49,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2900}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":554806,"byte_end":554808,"line_start":1388,"line_end":1388,"column_start":45,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2903}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":555001,"byte_end":555003,"line_start":1395,"line_end":1395,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2906}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":555208,"byte_end":555210,"line_start":1402,"line_end":1402,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2909}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":555361,"byte_end":555363,"line_start":1409,"line_end":1409,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2912}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":555555,"byte_end":555557,"line_start":1417,"line_end":1417,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2914}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":555816,"byte_end":555818,"line_start":1426,"line_end":1426,"column_start":23,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2916}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":556002,"byte_end":556004,"line_start":1434,"line_end":1434,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2919}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":556175,"byte_end":556177,"line_start":1442,"line_end":1442,"column_start":26,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":556549,"byte_end":556551,"line_start":1457,"line_end":1457,"column_start":46,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2928},{"krate":0,"index":2929}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":556967,"byte_end":556969,"line_start":1473,"line_end":1473,"column_start":35,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2933}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":558742,"byte_end":558744,"line_start":1522,"line_end":1522,"column_start":53,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2942}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":558905,"byte_end":558907,"line_start":1528,"line_end":1528,"column_start":61,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2946}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":559657,"byte_end":559659,"line_start":1551,"line_end":1551,"column_start":67,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2950}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":562141,"byte_end":562145,"line_start":1600,"line_end":1600,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":562234,"byte_end":562238,"line_start":1602,"line_end":1602,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":562369,"byte_end":562373,"line_start":1605,"line_end":1605,"column_start":67,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":562508,"byte_end":562512,"line_start":1608,"line_end":1608,"column_start":69,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":562528,"byte_end":562532,"line_start":1610,"line_end":1610,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Inherent","span":{"file_name":"src/liballoc/rc.rs","byte_start":568480,"byte_end":568484,"line_start":1775,"line_end":1775,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2976},{"krate":0,"index":2978},{"krate":0,"index":2979}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":572129,"byte_end":572133,"line_start":1895,"line_end":1895,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2982}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":573232,"byte_end":573236,"line_start":1935,"line_end":1935,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2985}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":573785,"byte_end":573789,"line_start":1957,"line_end":1957,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":573972,"byte_end":573976,"line_start":1964,"line_end":1964,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2991}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":576505,"byte_end":576507,"line_start":2050,"line_end":2050,"column_start":33,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3003}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":576648,"byte_end":576653,"line_start":2057,"line_end":2057,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3006}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":576822,"byte_end":576824,"line_start":2065,"line_end":2065,"column_start":39,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3009}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":576970,"byte_end":576972,"line_start":2072,"line_end":2072,"column_start":30,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3012}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"src/liballoc/rc.rs","byte_start":577103,"byte_end":577105,"line_start":2079,"line_end":2079,"column_start":27,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":602586,"byte_end":602589,"line_start":709,"line_end":709,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3133}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":602726,"byte_end":602729,"line_start":716,"line_end":716,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3136}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":606460,"byte_end":606473,"line_start":811,"line_end":811,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3151}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"src/liballoc/slice.rs","byte_start":610370,"byte_end":610379,"line_start":917,"line_end":917,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3166}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"src/liballoc/str.rs","byte_start":623029,"byte_end":623035,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3250}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"src/liballoc/str.rs","byte_start":623193,"byte_end":623199,"line_start":193,"line_end":193,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3252}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Inherent","span":{"file_name":"src/liballoc/string.rs","byte_start":646583,"byte_end":646589,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3324},{"krate":0,"index":3325},{"krate":0,"index":3326},{"krate":0,"index":3327},{"krate":0,"index":3328},{"krate":0,"index":3329},{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3332},{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3335},{"krate":0,"index":3336},{"krate":0,"index":3337},{"krate":0,"index":3338},{"krate":0,"index":3340},{"krate":0,"index":3341},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3344},{"krate":0,"index":3346},{"krate":0,"index":3348},{"krate":0,"index":3349},{"krate":0,"index":3350},{"krate":0,"index":3351},{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3354},{"krate":0,"index":3355},{"krate":0,"index":3357},{"krate":0,"index":3359}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Inherent","span":{"file_name":"src/liballoc/string.rs","byte_start":686130,"byte_end":686143,"line_start":1628,"line_end":1628,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3361},{"krate":0,"index":3362},{"krate":0,"index":3363}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":688426,"byte_end":688439,"line_start":1703,"line_end":1703,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3365}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":688624,"byte_end":688638,"line_start":1710,"line_end":1710,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3367}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":688843,"byte_end":688849,"line_start":1717,"line_end":1717,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3369},{"krate":0,"index":3370}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":689101,"byte_end":689107,"line_start":1728,"line_end":1728,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3372}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":689363,"byte_end":689369,"line_start":1737,"line_end":1737,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3376}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":689609,"byte_end":689615,"line_start":1746,"line_end":1746,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3380}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":689857,"byte_end":689863,"line_start":1755,"line_end":1755,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3383}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":690466,"byte_end":690472,"line_start":1773,"line_end":1773,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3387}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":691089,"byte_end":691095,"line_start":1792,"line_end":1792,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3390}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":691433,"byte_end":691439,"line_start":1802,"line_end":1802,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3395}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":691644,"byte_end":691650,"line_start":1809,"line_end":1809,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3399}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":691871,"byte_end":691877,"line_start":1816,"line_end":1816,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3403}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":692105,"byte_end":692111,"line_start":1823,"line_end":1823,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3408}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":692988,"byte_end":692994,"line_start":1854,"line_end":1854,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3419},{"krate":0,"index":3420}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":694343,"byte_end":694349,"line_start":1902,"line_end":1902,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3423}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":694529,"byte_end":694535,"line_start":1911,"line_end":1911,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3425}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":694728,"byte_end":694734,"line_start":1919,"line_end":1919,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3427}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":694925,"byte_end":694931,"line_start":1927,"line_end":1927,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3429}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":696309,"byte_end":696315,"line_start":1972,"line_end":1972,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3432},{"krate":0,"index":3433}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":696682,"byte_end":696688,"line_start":1986,"line_end":1986,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3435}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":696873,"byte_end":696879,"line_start":1994,"line_end":1994,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3437},{"krate":0,"index":3438}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":697096,"byte_end":697102,"line_start":2003,"line_end":2003,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3440},{"krate":0,"index":3441}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":697323,"byte_end":697329,"line_start":2012,"line_end":2012,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3443},{"krate":0,"index":3444}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":697545,"byte_end":697551,"line_start":2021,"line_end":2021,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3446},{"krate":0,"index":3447}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":697814,"byte_end":697820,"line_start":2030,"line_end":2030,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3449},{"krate":0,"index":3450}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":698078,"byte_end":698084,"line_start":2039,"line_end":2039,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3452},{"krate":0,"index":3453}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":698340,"byte_end":698346,"line_start":2049,"line_end":2049,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3455}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":698572,"byte_end":698578,"line_start":2056,"line_end":2056,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3457}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":698808,"byte_end":698814,"line_start":2063,"line_end":2063,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3459}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":699039,"byte_end":699045,"line_start":2070,"line_end":2070,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3461}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":699308,"byte_end":699314,"line_start":2077,"line_end":2077,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3463}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":699574,"byte_end":699580,"line_start":2084,"line_end":2084,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3465}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":699799,"byte_end":699805,"line_start":2092,"line_end":2092,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3467},{"krate":0,"index":3468}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":700023,"byte_end":700029,"line_start":2102,"line_end":2102,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3470}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":700984,"byte_end":700990,"line_start":2125,"line_end":2125,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3473},{"krate":0,"index":3474}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":702283,"byte_end":702284,"line_start":2167,"line_end":2167,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3479}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":702855,"byte_end":702858,"line_start":2188,"line_end":2188,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3484}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":703048,"byte_end":703054,"line_start":2196,"line_end":2196,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3486}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":703206,"byte_end":703212,"line_start":2204,"line_end":2204,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3488}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":703349,"byte_end":703355,"line_start":2212,"line_end":2212,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3490}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":703503,"byte_end":703509,"line_start":2220,"line_end":2220,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3492}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":703669,"byte_end":703675,"line_start":2228,"line_end":2228,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3494}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":703910,"byte_end":703916,"line_start":2238,"line_end":2238,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3496}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":704457,"byte_end":704460,"line_start":2259,"line_end":2259,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3498}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":704981,"byte_end":704987,"line_start":2279,"line_end":2279,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3501}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":705136,"byte_end":705139,"line_start":2286,"line_end":2286,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3504}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":705313,"byte_end":705316,"line_start":2294,"line_end":2294,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3507}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":705505,"byte_end":705508,"line_start":2302,"line_end":2302,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3510}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":705713,"byte_end":705716,"line_start":2310,"line_end":2310,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3513}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":705955,"byte_end":705958,"line_start":2317,"line_end":2317,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3518}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":706195,"byte_end":706198,"line_start":2324,"line_end":2324,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3522}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":706427,"byte_end":706430,"line_start":2331,"line_end":2331,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3525}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":706904,"byte_end":706910,"line_start":2352,"line_end":2352,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3527},{"krate":0,"index":3528}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":707765,"byte_end":707770,"line_start":2386,"line_end":2386,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3536}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":707946,"byte_end":707951,"line_start":2393,"line_end":2393,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":708026,"byte_end":708031,"line_start":2395,"line_end":2395,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":708100,"byte_end":708105,"line_start":2398,"line_end":2398,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3540}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":708548,"byte_end":708553,"line_start":2412,"line_end":2412,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3542},{"krate":0,"index":3543},{"krate":0,"index":3544},{"krate":0,"index":3545}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":708922,"byte_end":708927,"line_start":2431,"line_end":2431,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3547}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"src/liballoc/string.rs","byte_start":709103,"byte_end":709108,"line_start":2439,"line_end":2439,"column_start":24,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":716713,"byte_end":716716,"line_start":202,"line_end":202,"column_start":47,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":716815,"byte_end":716818,"line_start":204,"line_end":204,"column_start":47,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":716948,"byte_end":716951,"line_start":207,"line_end":207,"column_start":66,"column_end":69},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":717085,"byte_end":717088,"line_start":210,"line_end":210,"column_start":68,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":717112,"byte_end":717115,"line_start":212,"line_end":212,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3620},{"krate":0,"index":3621}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":719315,"byte_end":719319,"line_start":257,"line_end":257,"column_start":47,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":719421,"byte_end":719425,"line_start":259,"line_end":259,"column_start":47,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":719556,"byte_end":719560,"line_start":262,"line_end":262,"column_start":67,"column_end":71},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":719694,"byte_end":719698,"line_start":264,"line_end":264,"column_start":69,"column_end":73},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":719799,"byte_end":719803,"line_start":267,"line_end":267,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3637}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":720273,"byte_end":720281,"line_start":284,"line_end":284,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":720334,"byte_end":720342,"line_start":285,"line_end":285,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":720358,"byte_end":720361,"line_start":287,"line_end":287,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3649},{"krate":0,"index":3650},{"krate":0,"index":3652},{"krate":0,"index":3653},{"krate":0,"index":3654}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":724254,"byte_end":724257,"line_start":419,"line_end":419,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3657}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":725185,"byte_end":725188,"line_start":449,"line_end":449,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3660}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":726299,"byte_end":726302,"line_start":488,"line_end":488,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3663}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":727610,"byte_end":727613,"line_start":529,"line_end":529,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3666},{"krate":0,"index":3667},{"krate":0,"index":3668},{"krate":0,"index":3669},{"krate":0,"index":3670},{"krate":0,"index":3671},{"krate":0,"index":3672},{"krate":0,"index":3673},{"krate":0,"index":3674}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":735919,"byte_end":735922,"line_start":771,"line_end":771,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3677},{"krate":0,"index":3680},{"krate":0,"index":3682}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":738118,"byte_end":738121,"line_start":830,"line_end":830,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3685}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":738810,"byte_end":738813,"line_start":848,"line_end":848,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3692},{"krate":0,"index":3693}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":739813,"byte_end":739818,"line_start":874,"line_end":874,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3703}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":740875,"byte_end":740878,"line_start":912,"line_end":912,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3709}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":741057,"byte_end":741060,"line_start":919,"line_end":919,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3712}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":741243,"byte_end":741246,"line_start":927,"line_end":927,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3715}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":743114,"byte_end":743117,"line_start":977,"line_end":977,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3718},{"krate":0,"index":3719}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":743308,"byte_end":743311,"line_start":987,"line_end":987,"column_start":30,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":743334,"byte_end":743337,"line_start":989,"line_end":989,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3724}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":747319,"byte_end":747322,"line_start":1076,"line_end":1076,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3727},{"krate":0,"index":3728},{"krate":0,"index":3729}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":751328,"byte_end":751331,"line_start":1181,"line_end":1181,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3732}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":754202,"byte_end":754205,"line_start":1254,"line_end":1254,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":3734}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":755194,"byte_end":755198,"line_start":1289,"line_end":1289,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3738},{"krate":0,"index":3739},{"krate":0,"index":3740},{"krate":0,"index":3741}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Inherent","span":{"file_name":"src/liballoc/sync.rs","byte_start":761072,"byte_end":761076,"line_start":1450,"line_end":1450,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3744},{"krate":0,"index":3745},{"krate":0,"index":3746},{"krate":0,"index":3748},{"krate":0,"index":3749}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":766470,"byte_end":766474,"line_start":1608,"line_end":1608,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3752}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":767599,"byte_end":767603,"line_start":1645,"line_end":1645,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3755}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":768216,"byte_end":768220,"line_start":1667,"line_end":1667,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3758}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":769899,"byte_end":769902,"line_start":1717,"line_end":1717,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3765},{"krate":0,"index":3766}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":770711,"byte_end":770714,"line_start":1736,"line_end":1736,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3769},{"krate":0,"index":3770}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":771047,"byte_end":771050,"line_start":1749,"line_end":1749,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3773},{"krate":0,"index":3774}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":772261,"byte_end":772264,"line_start":1795,"line_end":1795,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3777},{"krate":0,"index":3778},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3781}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":774352,"byte_end":774355,"line_start":1883,"line_end":1883,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3784}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":774863,"byte_end":774866,"line_start":1903,"line_end":1903,"column_start":29,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":774968,"byte_end":774971,"line_start":1906,"line_end":1906,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3789}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":775177,"byte_end":775180,"line_start":1913,"line_end":1913,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3792}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":775373,"byte_end":775376,"line_start":1920,"line_end":1920,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3795}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":775582,"byte_end":775585,"line_start":1927,"line_end":1927,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3798}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":775978,"byte_end":775981,"line_start":1944,"line_end":1944,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3801}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":776146,"byte_end":776149,"line_start":1951,"line_end":1951,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3805}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":776301,"byte_end":776304,"line_start":1958,"line_end":1958,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3808}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":776498,"byte_end":776501,"line_start":1966,"line_end":1966,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3810}],"docs":"","sig":null,"attributes":[]},{"id":570,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":776766,"byte_end":776769,"line_start":1975,"line_end":1975,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3812}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":776955,"byte_end":776958,"line_start":1983,"line_end":1983,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3815}],"docs":"","sig":null,"attributes":[]},{"id":572,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":777131,"byte_end":777134,"line_start":1991,"line_end":1991,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3818}],"docs":"","sig":null,"attributes":[]},{"id":573,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":777511,"byte_end":777514,"line_start":2006,"line_end":2006,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3824},{"krate":0,"index":3825}],"docs":"","sig":null,"attributes":[]},{"id":574,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":777934,"byte_end":777937,"line_start":2022,"line_end":2022,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3829}],"docs":"","sig":null,"attributes":[]},{"id":575,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":779731,"byte_end":779734,"line_start":2071,"line_end":2071,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3838}],"docs":"","sig":null,"attributes":[]},{"id":576,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":779896,"byte_end":779899,"line_start":2077,"line_end":2077,"column_start":62,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3842}],"docs":"","sig":null,"attributes":[]},{"id":577,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":780651,"byte_end":780654,"line_start":2100,"line_end":2100,"column_start":68,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3846}],"docs":"","sig":null,"attributes":[]},{"id":578,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":781279,"byte_end":781282,"line_start":2115,"line_end":2115,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3849}],"docs":"","sig":null,"attributes":[]},{"id":579,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":781428,"byte_end":781431,"line_start":2122,"line_end":2122,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3852}],"docs":"","sig":null,"attributes":[]},{"id":580,"kind":"Direct","span":{"file_name":"src/liballoc/sync.rs","byte_start":781562,"byte_end":781565,"line_start":2129,"line_end":2129,"column_start":27,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":581,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":793926,"byte_end":793929,"line_start":306,"line_end":306,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3905},{"krate":0,"index":3906},{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":3914},{"krate":0,"index":3915},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3925},{"krate":0,"index":3926},{"krate":0,"index":3928},{"krate":0,"index":3932},{"krate":0,"index":3934},{"krate":0,"index":3935},{"krate":0,"index":3936},{"krate":0,"index":3937},{"krate":0,"index":3938},{"krate":0,"index":3940},{"krate":0,"index":3941},{"krate":0,"index":3942},{"krate":0,"index":3943},{"krate":0,"index":3944},{"krate":0,"index":3946}],"docs":"","sig":null,"attributes":[]},{"id":582,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":831999,"byte_end":832002,"line_start":1466,"line_end":1466,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3950},{"krate":0,"index":3951}],"docs":"","sig":null,"attributes":[]},{"id":583,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":834127,"byte_end":834130,"line_start":1528,"line_end":1528,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3954}],"docs":"","sig":null,"attributes":[]},{"id":584,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":835931,"byte_end":835944,"line_start":1582,"line_end":1582,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3965},{"krate":0,"index":3966}],"docs":"","sig":null,"attributes":[]},{"id":585,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":836115,"byte_end":836128,"line_start":1592,"line_end":1592,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3971},{"krate":0,"index":3972}],"docs":"","sig":null,"attributes":[]},{"id":586,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":836323,"byte_end":836333,"line_start":1602,"line_end":1602,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3980},{"krate":0,"index":3981}],"docs":"","sig":null,"attributes":[]},{"id":587,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":836459,"byte_end":836462,"line_start":1611,"line_end":1611,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3984}],"docs":"","sig":null,"attributes":[]},{"id":588,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":837909,"byte_end":837921,"line_start":1652,"line_end":1652,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3992},{"krate":0,"index":3993}],"docs":"","sig":null,"attributes":[]},{"id":589,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":838167,"byte_end":838179,"line_start":1664,"line_end":1664,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3995}],"docs":"","sig":null,"attributes":[]},{"id":590,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":838289,"byte_end":838292,"line_start":1671,"line_end":1671,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3998}],"docs":"","sig":null,"attributes":[]},{"id":591,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":838815,"byte_end":838818,"line_start":1693,"line_end":1693,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4002}],"docs":"","sig":null,"attributes":[]},{"id":592,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":839943,"byte_end":839944,"line_start":1731,"line_end":1731,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4011}],"docs":"","sig":null,"attributes":[]},{"id":594,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":840534,"byte_end":840535,"line_start":1754,"line_end":1754,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4016}],"docs":"","sig":null,"attributes":[]},{"id":610,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":842213,"byte_end":842219,"line_start":1819,"line_end":1819,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4028}],"docs":"","sig":null,"attributes":[]},{"id":611,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":842338,"byte_end":842344,"line_start":1826,"line_end":1826,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4031}],"docs":"","sig":null,"attributes":[]},{"id":612,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":842467,"byte_end":842473,"line_start":1833,"line_end":1833,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4034}],"docs":"","sig":null,"attributes":[]},{"id":613,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":842836,"byte_end":842839,"line_start":1845,"line_end":1845,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4037},{"krate":0,"index":4038}],"docs":"","sig":null,"attributes":[]},{"id":614,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":843500,"byte_end":843503,"line_start":1866,"line_end":1866,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4041}],"docs":"","sig":null,"attributes":[]},{"id":615,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":843879,"byte_end":843882,"line_start":1878,"line_end":1878,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4046},{"krate":0,"index":4047}],"docs":"","sig":null,"attributes":[]},{"id":616,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":844289,"byte_end":844292,"line_start":1892,"line_end":1892,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4051}],"docs":"","sig":null,"attributes":[]},{"id":617,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":844499,"byte_end":844502,"line_start":1900,"line_end":1900,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4054},{"krate":0,"index":4055}],"docs":"","sig":null,"attributes":[]},{"id":618,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":844709,"byte_end":844712,"line_start":1909,"line_end":1909,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4058}],"docs":"","sig":null,"attributes":[]},{"id":619,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":844917,"byte_end":844920,"line_start":1916,"line_end":1916,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4061}],"docs":"","sig":null,"attributes":[]},{"id":620,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":845159,"byte_end":845162,"line_start":1924,"line_end":1924,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4065},{"krate":0,"index":4066},{"krate":0,"index":4067}],"docs":"","sig":null,"attributes":[]},{"id":621,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":846800,"byte_end":846803,"line_start":1984,"line_end":1984,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4082}],"docs":"","sig":null,"attributes":[]},{"id":622,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":847176,"byte_end":847179,"line_start":1997,"line_end":1997,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4092},{"krate":0,"index":4093}],"docs":"","sig":null,"attributes":[]},{"id":623,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":848281,"byte_end":848284,"line_start":2028,"line_end":2028,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4097},{"krate":0,"index":4098}],"docs":"","sig":null,"attributes":[]},{"id":624,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":849535,"byte_end":849538,"line_start":2067,"line_end":2067,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4102},{"krate":0,"index":4103}],"docs":"","sig":null,"attributes":[]},{"id":625,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":850423,"byte_end":850426,"line_start":2093,"line_end":2093,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4108},{"krate":0,"index":4109}],"docs":"","sig":null,"attributes":[]},{"id":626,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":850751,"byte_end":850754,"line_start":2107,"line_end":2107,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4113}],"docs":"","sig":null,"attributes":[]},{"id":627,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":851106,"byte_end":851109,"line_start":2122,"line_end":2122,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4116},{"krate":0,"index":4118},{"krate":0,"index":4121}],"docs":"","sig":null,"attributes":[]},{"id":628,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":856082,"byte_end":856085,"line_start":2256,"line_end":2256,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4126}],"docs":"","sig":null,"attributes":[]},{"id":637,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":857747,"byte_end":857750,"line_start":2296,"line_end":2296,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4131}],"docs":"","sig":null,"attributes":[]},{"id":638,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":857959,"byte_end":857962,"line_start":2304,"line_end":2304,"column_start":20,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":639,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":858092,"byte_end":858095,"line_start":2308,"line_end":2308,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4136}],"docs":"","sig":null,"attributes":[]},{"id":640,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":858292,"byte_end":858295,"line_start":2316,"line_end":2316,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4139}],"docs":"","sig":null,"attributes":[]},{"id":641,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":858546,"byte_end":858549,"line_start":2327,"line_end":2327,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4142}],"docs":"","sig":null,"attributes":[]},{"id":642,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":858728,"byte_end":858731,"line_start":2335,"line_end":2335,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4145}],"docs":"","sig":null,"attributes":[]},{"id":643,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":858917,"byte_end":858920,"line_start":2342,"line_end":2342,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4148}],"docs":"","sig":null,"attributes":[]},{"id":644,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859059,"byte_end":859062,"line_start":2349,"line_end":2349,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4151}],"docs":"","sig":null,"attributes":[]},{"id":645,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859201,"byte_end":859204,"line_start":2356,"line_end":2356,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4154}],"docs":"","sig":null,"attributes":[]},{"id":646,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859337,"byte_end":859340,"line_start":2363,"line_end":2363,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4157}],"docs":"","sig":null,"attributes":[]},{"id":647,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859483,"byte_end":859486,"line_start":2370,"line_end":2370,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4160}],"docs":"","sig":null,"attributes":[]},{"id":648,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":859751,"byte_end":859754,"line_start":2382,"line_end":2382,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4163}],"docs":"","sig":null,"attributes":[]},{"id":649,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":860034,"byte_end":860037,"line_start":2394,"line_end":2394,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4167}],"docs":"","sig":null,"attributes":[]},{"id":650,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":860311,"byte_end":860314,"line_start":2406,"line_end":2406,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4170}],"docs":"","sig":null,"attributes":[]},{"id":651,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":860540,"byte_end":860543,"line_start":2415,"line_end":2415,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4173}],"docs":"","sig":null,"attributes":[]},{"id":652,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":860692,"byte_end":860695,"line_start":2422,"line_end":2422,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4175}],"docs":"","sig":null,"attributes":[]},{"id":653,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":861049,"byte_end":861052,"line_start":2433,"line_end":2433,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4179}],"docs":"","sig":null,"attributes":[]},{"id":654,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":861229,"byte_end":861232,"line_start":2440,"line_end":2440,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4183}],"docs":"","sig":null,"attributes":[]},{"id":655,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":861414,"byte_end":861417,"line_start":2447,"line_end":2447,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4187}],"docs":"","sig":null,"attributes":[]},{"id":656,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":861597,"byte_end":861600,"line_start":2454,"line_end":2454,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4191}],"docs":"","sig":null,"attributes":[]},{"id":657,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":862461,"byte_end":862469,"line_start":2484,"line_end":2484,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4202}],"docs":"","sig":null,"attributes":[]},{"id":658,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":862622,"byte_end":862630,"line_start":2490,"line_end":2490,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4205},{"krate":0,"index":4206}],"docs":"","sig":null,"attributes":[]},{"id":659,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":863931,"byte_end":863939,"line_start":2527,"line_end":2527,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":660,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":864022,"byte_end":864030,"line_start":2529,"line_end":2529,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":661,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":864105,"byte_end":864113,"line_start":2532,"line_end":2532,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4213},{"krate":0,"index":4214},{"krate":0,"index":4215},{"krate":0,"index":4216}],"docs":"","sig":null,"attributes":[]},{"id":662,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":865366,"byte_end":865374,"line_start":2576,"line_end":2576,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4219}],"docs":"","sig":null,"attributes":[]},{"id":663,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":866071,"byte_end":866079,"line_start":2600,"line_end":2600,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4222}],"docs":"","sig":null,"attributes":[]},{"id":664,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":866229,"byte_end":866237,"line_start":2607,"line_end":2607,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":665,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":866329,"byte_end":866337,"line_start":2610,"line_end":2610,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":666,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":866430,"byte_end":866438,"line_start":2613,"line_end":2613,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4229}],"docs":"","sig":null,"attributes":[]},{"id":667,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":866621,"byte_end":866629,"line_start":2620,"line_end":2620,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4232}],"docs":"","sig":null,"attributes":[]},{"id":668,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":867421,"byte_end":867426,"line_start":2648,"line_end":2648,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4242}],"docs":"","sig":null,"attributes":[]},{"id":669,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":867589,"byte_end":867594,"line_start":2654,"line_end":2654,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4246}],"docs":"","sig":null,"attributes":[]},{"id":670,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":868241,"byte_end":868246,"line_start":2674,"line_end":2674,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":671,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":868333,"byte_end":868338,"line_start":2676,"line_end":2676,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":672,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":868417,"byte_end":868422,"line_start":2679,"line_end":2679,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4253},{"krate":0,"index":4254},{"krate":0,"index":4256}],"docs":"","sig":null,"attributes":[]},{"id":673,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":868754,"byte_end":868759,"line_start":2693,"line_end":2693,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4259}],"docs":"","sig":null,"attributes":[]},{"id":674,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":868977,"byte_end":868982,"line_start":2701,"line_end":2701,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4263}],"docs":"","sig":null,"attributes":[]},{"id":675,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":869744,"byte_end":869749,"line_start":2724,"line_end":2724,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4266}],"docs":"","sig":null,"attributes":[]},{"id":676,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":869914,"byte_end":869919,"line_start":2731,"line_end":2731,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":677,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":870004,"byte_end":870009,"line_start":2734,"line_end":2734,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":678,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":870492,"byte_end":870498,"line_start":2751,"line_end":2751,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4273},{"krate":0,"index":4274},{"krate":0,"index":4275}],"docs":"","sig":null,"attributes":[]},{"id":679,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":870800,"byte_end":870806,"line_start":2764,"line_end":2764,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4278}],"docs":"","sig":null,"attributes":[]},{"id":680,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":871000,"byte_end":871006,"line_start":2771,"line_end":2771,"column_start":41,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":681,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":871097,"byte_end":871103,"line_start":2774,"line_end":2774,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4283}],"docs":"","sig":null,"attributes":[]},{"id":682,"kind":"Inherent","span":{"file_name":"src/liballoc/vec.rs","byte_start":872648,"byte_end":872653,"line_start":2815,"line_end":2815,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4286},{"krate":0,"index":4288}],"docs":"","sig":null,"attributes":[]},{"id":683,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":875150,"byte_end":875161,"line_start":2877,"line_end":2877,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4292},{"krate":0,"index":4293},{"krate":0,"index":4294}],"docs":"","sig":null,"attributes":[]},{"id":684,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876452,"byte_end":876463,"line_start":2915,"line_end":2915,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4298}],"docs":"","sig":null,"attributes":[]},{"id":685,"kind":"Direct","span":{"file_name":"src/liballoc/vec.rs","byte_start":876741,"byte_end":876756,"line_start":2927,"line_end":2927,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4310}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":4785,"byte_end":4790,"line_start":138,"line_end":138,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5054,"byte_end":5059,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5125,"byte_end":5131,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":293}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5141,"byte_end":5152,"line_start":152,"line_end":152,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":389}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65469,"byte_end":65480,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":390}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":108632,"byte_end":108635,"line_start":1,"line_end":1,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":618}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/btree/mod.rs","byte_start":108667,"byte_end":108670,"line_start":4,"line_end":4,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1606}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65501,"byte_end":65512,"line_start":7,"line_end":7,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1873}},{"kind":"Mod","span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":65522,"byte_end":65531,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2198}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5162,"byte_end":5165,"line_start":153,"line_end":153,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2567}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5175,"byte_end":5182,"line_start":154,"line_end":154,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2600}},{"kind":"Mod","span":{"file_name":"src/liballoc/prelude/mod.rs","byte_start":480717,"byte_end":480719,"line_start":15,"line_end":15,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":2601}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5192,"byte_end":5199,"line_start":155,"line_end":155,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2608}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5209,"byte_end":5211,"line_start":156,"line_end":156,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":2707}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5221,"byte_end":5226,"line_start":157,"line_end":157,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3020}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5236,"byte_end":5239,"line_start":158,"line_end":158,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3173}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5249,"byte_end":5255,"line_start":159,"line_end":159,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3279}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5299,"byte_end":5303,"line_start":161,"line_end":161,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3549}},{"kind":"Mod","span":{"file_name":"src/liballoc/lib.rs","byte_start":5337,"byte_end":5340,"line_start":164,"line_end":164,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3860}}],"macro_refs":[],"relations":[{"span":{"file_name":"src/liballoc/alloc.rs","byte_start":14474,"byte_end":14480,"line_start":166,"line_end":166,"column_start":23,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":4315},"to":{"krate":1,"index":8061}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":22654,"byte_end":22657,"line_start":161,"line_end":161,"column_start":9,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":24956,"byte_end":24959,"line_start":242,"line_end":242,"column_start":9,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":26075,"byte_end":26078,"line_start":278,"line_end":278,"column_start":9,"column_end":12},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":27067,"byte_end":27070,"line_start":314,"line_end":314,"column_start":9,"column_end":12},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":28203,"byte_end":28206,"line_start":352,"line_end":352,"column_start":17,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":35880,"byte_end":35883,"line_start":551,"line_end":551,"column_start":47,"column_end":50},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":36069,"byte_end":36072,"line_start":558,"line_end":558,"column_start":30,"column_end":33},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":36273,"byte_end":36276,"line_start":566,"line_end":566,"column_start":21,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":36431,"byte_end":36434,"line_start":573,"line_end":573,"column_start":18,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":36618,"byte_end":36621,"line_start":580,"line_end":580,"column_start":26,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":37686,"byte_end":37689,"line_start":625,"line_end":625,"column_start":16,"column_end":19},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":37968,"byte_end":37971,"line_start":634,"line_end":634,"column_start":43,"column_end":46},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":38277,"byte_end":38280,"line_start":645,"line_end":645,"column_start":45,"column_end":48},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":38919,"byte_end":38922,"line_start":668,"line_end":668,"column_start":31,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":39108,"byte_end":39111,"line_start":675,"line_end":675,"column_start":29,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":39197,"byte_end":39200,"line_start":678,"line_end":678,"column_start":33,"column_end":36},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":39390,"byte_end":39393,"line_start":685,"line_end":685,"column_start":37,"column_end":40},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":6115}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":40514,"byte_end":40517,"line_start":731,"line_end":731,"column_start":21,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":40965,"byte_end":40968,"line_start":750,"line_end":750,"column_start":34,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":29206},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":41272,"byte_end":41275,"line_start":760,"line_end":760,"column_start":30,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":42025,"byte_end":42028,"line_start":785,"line_end":785,"column_start":21,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":42514,"byte_end":42517,"line_start":803,"line_end":803,"column_start":25,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":43344,"byte_end":43347,"line_start":827,"line_end":827,"column_start":47,"column_end":50},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1783}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":43680,"byte_end":43683,"line_start":842,"line_end":842,"column_start":6,"column_end":9},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":44560,"byte_end":44563,"line_start":874,"line_end":874,"column_start":6,"column_end":9},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":45507,"byte_end":45510,"line_start":903,"line_end":903,"column_start":49,"column_end":52},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":5921}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":45716,"byte_end":45719,"line_start":910,"line_end":910,"column_start":45,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":45912,"byte_end":45915,"line_start":917,"line_end":917,"column_start":34,"column_end":37},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":5931}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":46282,"byte_end":46285,"line_start":927,"line_end":927,"column_start":27,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2023}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":46441,"byte_end":46444,"line_start":936,"line_end":936,"column_start":30,"column_end":33},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2034}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":46604,"byte_end":46607,"line_start":943,"line_end":943,"column_start":30,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2039}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":46701,"byte_end":46704,"line_start":946,"line_end":946,"column_start":41,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47169,"byte_end":47172,"line_start":967,"line_end":967,"column_start":40,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":81},"to":{"krate":0,"index":217}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47572,"byte_end":47575,"line_start":982,"line_end":982,"column_start":31,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":81},"to":{"krate":0,"index":217}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":47760,"byte_end":47763,"line_start":989,"line_end":989,"column_start":63,"column_end":66},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48052,"byte_end":48055,"line_start":998,"line_end":998,"column_start":59,"column_end":62},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48286,"byte_end":48289,"line_start":1008,"line_end":1008,"column_start":51,"column_end":54},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48403,"byte_end":48406,"line_start":1011,"line_end":1011,"column_start":46,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2054}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48688,"byte_end":48691,"line_start":1020,"line_end":1020,"column_start":44,"column_end":47},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2051}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":48923,"byte_end":48926,"line_start":1027,"line_end":1027,"column_start":38,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2048}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49167,"byte_end":49170,"line_start":1034,"line_end":1034,"column_start":66,"column_end":69},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2250}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49304,"byte_end":49307,"line_start":1037,"line_end":1037,"column_start":68,"column_end":71},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2287}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49406,"byte_end":49409,"line_start":1040,"line_end":1040,"column_start":29,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49634,"byte_end":49637,"line_start":1047,"line_end":1047,"column_start":26,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49814,"byte_end":49817,"line_start":1054,"line_end":1054,"column_start":39,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1540}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":49969,"byte_end":49972,"line_start":1061,"line_end":1061,"column_start":42,"column_end":45},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1543}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":50134,"byte_end":50137,"line_start":1068,"line_end":1068,"column_start":30,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":50283,"byte_end":50286,"line_start":1075,"line_end":1075,"column_start":30,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1770}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51519,"byte_end":51522,"line_start":1104,"line_end":1104,"column_start":27,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1891}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51638,"byte_end":51641,"line_start":1107,"line_end":1107,"column_start":51,"column_end":54},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2084}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":51940,"byte_end":51943,"line_start":1117,"line_end":1117,"column_start":43,"column_end":46},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":29206},"to":{"krate":1,"index":2084}},{"span":{"file_name":"src/liballoc/boxed.rs","byte_start":52240,"byte_end":52243,"line_start":1127,"line_end":1127,"column_start":45,"column_end":48},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":7916}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":52833,"byte_end":52836,"line_start":18,"line_end":18,"column_start":35,"column_end":38},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1540}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":54652,"byte_end":54653,"line_start":80,"line_end":80,"column_start":21,"column_end":22},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":317},"to":{"krate":0,"index":312}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":57804,"byte_end":57807,"line_start":185,"line_end":185,"column_start":37,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":58292,"byte_end":58295,"line_start":204,"line_end":204,"column_start":27,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":61434,"byte_end":61437,"line_start":321,"line_end":321,"column_start":37,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":2023}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":61699,"byte_end":61702,"line_start":333,"line_end":333,"column_start":24,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":61806,"byte_end":61809,"line_start":336,"line_end":336,"column_start":25,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":62059,"byte_end":62062,"line_start":347,"line_end":347,"column_start":62,"column_end":65},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":62317,"byte_end":62320,"line_start":359,"line_end":359,"column_start":36,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":62584,"byte_end":62587,"line_start":370,"line_end":370,"column_start":32,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":62939,"byte_end":62942,"line_start":383,"line_end":383,"column_start":34,"column_end":37},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":5921}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63300,"byte_end":63303,"line_start":396,"line_end":396,"column_start":29,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63596,"byte_end":63599,"line_start":407,"line_end":407,"column_start":26,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63828,"byte_end":63831,"line_start":418,"line_end":418,"column_start":40,"column_end":43},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":63967,"byte_end":63970,"line_start":425,"line_end":425,"column_start":27,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1915}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":64205,"byte_end":64208,"line_start":436,"line_end":436,"column_start":32,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1915}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":64449,"byte_end":64452,"line_start":447,"line_end":447,"column_start":33,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1948}},{"span":{"file_name":"src/liballoc/borrow.rs","byte_start":64967,"byte_end":64970,"line_start":463,"line_end":463,"column_start":38,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1948}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":76958,"byte_end":76965,"line_start":268,"line_end":268,"column_start":42,"column_end":49},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":412},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77199,"byte_end":77206,"line_start":275,"line_end":275,"column_start":23,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":412},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77404,"byte_end":77411,"line_start":284,"line_end":284,"column_start":24,"column_end":31},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":412},"to":{"krate":1,"index":2023}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77730,"byte_end":77737,"line_start":294,"line_end":294,"column_start":27,"column_end":34},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":412},"to":{"krate":1,"index":2034}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":77980,"byte_end":77987,"line_start":302,"line_end":302,"column_start":18,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78345,"byte_end":78355,"line_start":313,"line_end":313,"column_start":26,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78615,"byte_end":78625,"line_start":324,"line_end":324,"column_start":26,"column_end":36},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":78850,"byte_end":78860,"line_start":333,"line_end":333,"column_start":36,"column_end":46},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":79004,"byte_end":79014,"line_start":339,"line_end":339,"column_start":14,"column_end":24},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":89466,"byte_end":89476,"line_start":672,"line_end":672,"column_start":9,"column_end":19},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":97553,"byte_end":97557,"line_start":972,"line_end":972,"column_start":13,"column_end":17},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":98999,"byte_end":99003,"line_start":1019,"line_end":1019,"column_start":18,"column_end":22},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99699,"byte_end":99703,"line_start":1043,"line_end":1043,"column_start":36,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":99972,"byte_end":99976,"line_start":1051,"line_end":1051,"column_start":19,"column_end":23},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100137,"byte_end":100141,"line_start":1058,"line_end":1058,"column_start":26,"column_end":30},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100533,"byte_end":100537,"line_start":1078,"line_end":1078,"column_start":37,"column_end":41},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100723,"byte_end":100727,"line_start":1086,"line_end":1086,"column_start":31,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":100881,"byte_end":100885,"line_start":1093,"line_end":1093,"column_start":27,"column_end":31},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101430,"byte_end":101438,"line_start":1109,"line_end":1109,"column_start":36,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4325},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101655,"byte_end":101663,"line_start":1116,"line_end":1116,"column_start":22,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4325},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":101956,"byte_end":101964,"line_start":1131,"line_end":1131,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4325},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102142,"byte_end":102150,"line_start":1139,"line_end":1139,"column_start":31,"column_end":39},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4325},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102300,"byte_end":102308,"line_start":1146,"line_end":1146,"column_start":27,"column_end":35},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4325},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102568,"byte_end":102582,"line_start":1155,"line_end":1155,"column_start":27,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4331},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":102940,"byte_end":102954,"line_start":1171,"line_end":1171,"column_start":36,"column_end":50},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4331},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103064,"byte_end":103078,"line_start":1174,"line_end":1174,"column_start":32,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4331},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103175,"byte_end":103189,"line_start":1177,"line_end":1177,"column_start":36,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4331},"to":{"krate":1,"index":4979}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103660,"byte_end":103665,"line_start":1193,"line_end":1193,"column_start":22,"column_end":27},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":4340},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":103962,"byte_end":103967,"line_start":1208,"line_end":1208,"column_start":33,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4340},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104149,"byte_end":104154,"line_start":1216,"line_end":1216,"column_start":31,"column_end":36},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":4340},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104308,"byte_end":104313,"line_start":1223,"line_end":1223,"column_start":27,"column_end":32},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4340},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":104868,"byte_end":104879,"line_start":1239,"line_end":1239,"column_start":27,"column_end":38},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4348},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105109,"byte_end":105120,"line_start":1247,"line_end":1247,"column_start":27,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4348},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105478,"byte_end":105489,"line_start":1263,"line_end":1263,"column_start":36,"column_end":47},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4348},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105599,"byte_end":105610,"line_start":1266,"line_end":1266,"column_start":32,"column_end":43},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4348},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105711,"byte_end":105722,"line_start":1269,"line_end":1269,"column_start":36,"column_end":47},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4348},"to":{"krate":1,"index":4979}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":105826,"byte_end":105836,"line_start":1272,"line_end":1272,"column_start":31,"column_end":41},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106209,"byte_end":106212,"line_start":1284,"line_end":1284,"column_start":33,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106369,"byte_end":106379,"line_start":1291,"line_end":1291,"column_start":34,"column_end":44},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":106600,"byte_end":106610,"line_start":1298,"line_end":1298,"column_start":26,"column_end":36},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":4624}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107601,"byte_end":107611,"line_start":1336,"line_end":1336,"column_start":28,"column_end":38},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107819,"byte_end":107829,"line_start":1343,"line_end":1343,"column_start":59,"column_end":69},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":409},"to":{"krate":0,"index":2564}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":107985,"byte_end":107995,"line_start":1349,"line_end":1349,"column_start":44,"column_end":54},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":409},"to":{"krate":0,"index":2564}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108113,"byte_end":108123,"line_start":1355,"line_end":1355,"column_start":14,"column_end":24},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/binary_heap.rs","byte_start":108484,"byte_end":108494,"line_start":1367,"line_end":1367,"column_start":48,"column_end":58},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":409},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114598,"byte_end":114606,"line_start":129,"line_end":129,"column_start":56,"column_end":64},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":114804,"byte_end":114812,"line_start":138,"line_end":138,"column_start":36,"column_end":44},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":117626,"byte_end":117634,"line_start":212,"line_end":212,"column_start":42,"column_end":50},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":654},"to":{"krate":0,"index":1867}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":119219,"byte_end":119223,"line_start":264,"line_end":264,"column_start":51,"column_end":55},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":120452,"byte_end":120460,"line_start":299,"line_end":299,"column_start":51,"column_end":59},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121130,"byte_end":121134,"line_start":319,"line_end":319,"column_start":39,"column_end":43},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":698},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":121737,"byte_end":121743,"line_start":338,"line_end":338,"column_start":39,"column_end":45},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":122927,"byte_end":122932,"line_start":371,"line_end":371,"column_start":51,"column_end":56},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":716},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":123792,"byte_end":123800,"line_start":394,"line_end":394,"column_start":51,"column_end":59},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":726},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":124771,"byte_end":124776,"line_start":419,"line_end":419,"column_start":42,"column_end":47},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":737},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":125538,"byte_end":125549,"line_start":443,"line_end":443,"column_start":35,"column_end":46},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":751},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126208,"byte_end":126221,"line_start":464,"line_end":464,"column_start":42,"column_end":55},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":763},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":126583,"byte_end":126591,"line_start":476,"line_end":476,"column_start":17,"column_end":25},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151049,"byte_end":151053,"line_start":1262,"line_end":1262,"column_start":37,"column_end":41},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151578,"byte_end":151582,"line_start":1284,"line_end":1284,"column_start":30,"column_end":34},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":151690,"byte_end":151694,"line_start":1287,"line_end":1287,"column_start":48,"column_end":52},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":152017,"byte_end":152021,"line_start":1299,"line_end":1299,"column_start":34,"column_end":38},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":152159,"byte_end":152163,"line_start":1306,"line_end":1306,"column_start":22,"column_end":26},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":678},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":152627,"byte_end":152634,"line_start":1323,"line_end":1323,"column_start":37,"column_end":44},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4356},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153188,"byte_end":153195,"line_start":1345,"line_end":1345,"column_start":48,"column_end":55},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":4356},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153522,"byte_end":153529,"line_start":1357,"line_end":1357,"column_start":34,"column_end":41},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":4356},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153676,"byte_end":153683,"line_start":1364,"line_end":1364,"column_start":30,"column_end":37},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4356},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":153772,"byte_end":153780,"line_start":1367,"line_end":1367,"column_start":29,"column_end":37},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":4624}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":154255,"byte_end":154263,"line_start":1382,"line_end":1382,"column_start":21,"column_end":29},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":154874,"byte_end":154882,"line_start":1402,"line_end":1402,"column_start":25,"column_end":33},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":156346,"byte_end":156354,"line_start":1447,"line_end":1447,"column_start":36,"column_end":44},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157688,"byte_end":157696,"line_start":1486,"line_end":1486,"column_start":34,"column_end":42},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157839,"byte_end":157847,"line_start":1493,"line_end":1493,"column_start":30,"column_end":38},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":157932,"byte_end":157936,"line_start":1496,"line_end":1496,"column_start":29,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":698},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158314,"byte_end":158318,"line_start":1513,"line_end":1513,"column_start":40,"column_end":44},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":698},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158513,"byte_end":158517,"line_start":1520,"line_end":1520,"column_start":34,"column_end":38},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":698},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158669,"byte_end":158673,"line_start":1527,"line_end":1527,"column_start":30,"column_end":34},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":698},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158755,"byte_end":158759,"line_start":1530,"line_end":1530,"column_start":22,"column_end":26},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":698},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":158928,"byte_end":158934,"line_start":1537,"line_end":1537,"column_start":29,"column_end":35},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159312,"byte_end":159318,"line_start":1554,"line_end":1554,"column_start":40,"column_end":46},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159513,"byte_end":159519,"line_start":1561,"line_end":1561,"column_start":34,"column_end":40},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159671,"byte_end":159677,"line_start":1568,"line_end":1568,"column_start":30,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159759,"byte_end":159765,"line_start":1571,"line_end":1571,"column_start":22,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":707},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":159943,"byte_end":159948,"line_start":1578,"line_end":1578,"column_start":29,"column_end":34},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":716},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160312,"byte_end":160321,"line_start":1591,"line_end":1591,"column_start":29,"column_end":38},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":4367},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160721,"byte_end":160730,"line_start":1608,"line_end":1608,"column_start":40,"column_end":49},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":4367},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":160939,"byte_end":160948,"line_start":1615,"line_end":1615,"column_start":34,"column_end":43},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":4367},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":161100,"byte_end":161109,"line_start":1622,"line_end":1622,"column_start":30,"column_end":39},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4367},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":161139,"byte_end":161144,"line_start":1624,"line_end":1624,"column_start":16,"column_end":21},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162203,"byte_end":162208,"line_start":1657,"line_end":1657,"column_start":40,"column_end":45},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":716},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":162398,"byte_end":162403,"line_start":1663,"line_end":1663,"column_start":16,"column_end":21},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163443,"byte_end":163448,"line_start":1696,"line_end":1696,"column_start":30,"column_end":35},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":716},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163537,"byte_end":163542,"line_start":1699,"line_end":1699,"column_start":22,"column_end":27},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":716},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":163728,"byte_end":163736,"line_start":1706,"line_end":1706,"column_start":29,"column_end":37},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":726},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":164043,"byte_end":164051,"line_start":1718,"line_end":1718,"column_start":16,"column_end":24},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165522,"byte_end":165530,"line_start":1755,"line_end":1755,"column_start":40,"column_end":48},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":726},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165785,"byte_end":165793,"line_start":1762,"line_end":1762,"column_start":30,"column_end":38},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":726},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":165823,"byte_end":165831,"line_start":1764,"line_end":1764,"column_start":16,"column_end":24},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167294,"byte_end":167302,"line_start":1801,"line_end":1801,"column_start":42,"column_end":50},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167556,"byte_end":167564,"line_start":1810,"line_end":1810,"column_start":36,"column_end":44},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":167868,"byte_end":167876,"line_start":1820,"line_end":1820,"column_start":61,"column_end":69},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168122,"byte_end":168130,"line_start":1827,"line_end":1827,"column_start":33,"column_end":41},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168334,"byte_end":168342,"line_start":1836,"line_end":1836,"column_start":29,"column_end":37},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168557,"byte_end":168565,"line_start":1844,"line_end":1844,"column_start":48,"column_end":56},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168787,"byte_end":168795,"line_start":1851,"line_end":1851,"column_start":27,"column_end":35},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":168902,"byte_end":168910,"line_start":1854,"line_end":1854,"column_start":51,"column_end":59},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169135,"byte_end":169143,"line_start":1862,"line_end":1862,"column_start":30,"column_end":38},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169350,"byte_end":169358,"line_start":1870,"line_end":1870,"column_start":36,"column_end":44},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":169578,"byte_end":169586,"line_start":1877,"line_end":1877,"column_start":42,"column_end":50},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":654},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":174120,"byte_end":174128,"line_start":2030,"line_end":2030,"column_start":12,"column_end":20},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":178736,"byte_end":178741,"line_start":2205,"line_end":2205,"column_start":21,"column_end":26},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":181635,"byte_end":181640,"line_start":2303,"line_end":2303,"column_start":30,"column_end":35},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":737},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":182352,"byte_end":182363,"line_start":2326,"line_end":2326,"column_start":21,"column_end":32},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":751},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":185129,"byte_end":185142,"line_start":2420,"line_end":2420,"column_start":21,"column_end":34},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/map.rs","byte_start":192748,"byte_end":192757,"line_start":2667,"line_end":2667,"column_start":58,"column_end":67},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":774},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":197497,"byte_end":197505,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":198140,"byte_end":198150,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":198362,"byte_end":198372,"line_start":120,"line_end":120,"column_start":22,"column_end":32},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1197},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":199457,"byte_end":199469,"line_start":142,"line_end":142,"column_start":12,"column_end":24},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":200413,"byte_end":200422,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201173,"byte_end":201177,"line_start":190,"line_end":190,"column_start":40,"column_end":44},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1247},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201226,"byte_end":201230,"line_start":191,"line_end":191,"column_start":40,"column_end":44},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1247},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":201252,"byte_end":201256,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206215,"byte_end":206222,"line_start":319,"line_end":319,"column_start":39,"column_end":46},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":1862}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206296,"byte_end":206303,"line_start":320,"line_end":320,"column_start":40,"column_end":47},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206447,"byte_end":206454,"line_start":326,"line_end":326,"column_start":58,"column_end":65},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206542,"byte_end":206549,"line_start":328,"line_end":328,"column_start":60,"column_end":67},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206643,"byte_end":206650,"line_start":329,"line_end":329,"column_start":60,"column_end":67},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206728,"byte_end":206735,"line_start":330,"line_end":330,"column_start":46,"column_end":53},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206790,"byte_end":206797,"line_start":332,"line_end":332,"column_start":24,"column_end":31},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":206980,"byte_end":206987,"line_start":338,"line_end":338,"column_start":16,"column_end":23},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":207205,"byte_end":207212,"line_start":344,"line_end":344,"column_start":30,"column_end":37},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211152,"byte_end":211159,"line_start":449,"line_end":449,"column_start":12,"column_end":19},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":211789,"byte_end":211796,"line_start":464,"line_end":464,"column_start":12,"column_end":19},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":212397,"byte_end":212404,"line_start":478,"line_end":478,"column_start":22,"column_end":29},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":214695,"byte_end":214702,"line_start":522,"line_end":522,"column_start":30,"column_end":37},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":215648,"byte_end":215655,"line_start":544,"line_end":544,"column_start":30,"column_end":37},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":217695,"byte_end":217702,"line_start":594,"line_end":594,"column_start":16,"column_end":23},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":218721,"byte_end":218728,"line_start":626,"line_end":626,"column_start":16,"column_end":23},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":220870,"byte_end":220877,"line_start":686,"line_end":686,"column_start":16,"column_end":23},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":223725,"byte_end":223732,"line_start":759,"line_end":759,"column_start":24,"column_end":31},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225225,"byte_end":225231,"line_start":799,"line_end":799,"column_start":33,"column_end":39},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1399},"to":{"krate":1,"index":1862}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225446,"byte_end":225452,"line_start":802,"line_end":802,"column_start":34,"column_end":40},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1399},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225537,"byte_end":225543,"line_start":808,"line_end":808,"column_start":18,"column_end":24},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":225746,"byte_end":225752,"line_start":815,"line_end":815,"column_start":34,"column_end":40},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226503,"byte_end":226509,"line_start":834,"line_end":834,"column_start":9,"column_end":15},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1399},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":226727,"byte_end":226733,"line_start":842,"line_end":842,"column_start":5,"column_end":11},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":227177,"byte_end":227183,"line_start":851,"line_end":851,"column_start":38,"column_end":44},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":228285,"byte_end":228291,"line_start":870,"line_end":870,"column_start":34,"column_end":40},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":229126,"byte_end":229132,"line_start":889,"line_end":889,"column_start":16,"column_end":22},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":231110,"byte_end":231116,"line_start":937,"line_end":937,"column_start":16,"column_end":22},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":234530,"byte_end":234536,"line_start":1021,"line_end":1021,"column_start":24,"column_end":30},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235177,"byte_end":235183,"line_start":1038,"line_end":1038,"column_start":34,"column_end":40},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235461,"byte_end":235467,"line_start":1045,"line_end":1045,"column_start":34,"column_end":40},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":235759,"byte_end":235765,"line_start":1052,"line_end":1052,"column_start":26,"column_end":32},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":236080,"byte_end":236086,"line_start":1061,"line_end":1061,"column_start":16,"column_end":22},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":238159,"byte_end":238165,"line_start":1112,"line_end":1112,"column_start":16,"column_end":22},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":250777,"byte_end":250783,"line_start":1416,"line_end":1416,"column_start":5,"column_end":11},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/node.rs","byte_start":251498,"byte_end":251504,"line_start":1436,"line_end":1436,"column_start":16,"column_end":22},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":259059,"byte_end":259063,"line_start":78,"line_end":78,"column_start":36,"column_end":40},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1633},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":260470,"byte_end":260484,"line_start":130,"line_end":130,"column_start":9,"column_end":23},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":4422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":261738,"byte_end":261752,"line_start":171,"line_end":171,"column_start":19,"column_end":33},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":4422},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":262901,"byte_end":262911,"line_start":208,"line_end":208,"column_start":36,"column_end":46},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1648},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":263599,"byte_end":263618,"line_start":225,"line_end":225,"column_start":36,"column_end":55},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1655},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":264699,"byte_end":264711,"line_start":258,"line_end":258,"column_start":36,"column_end":48},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1663},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265327,"byte_end":265332,"line_start":275,"line_end":275,"column_start":36,"column_end":41},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":1670},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":265906,"byte_end":265914,"line_start":289,"line_end":289,"column_start":14,"column_end":22},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":4377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":286222,"byte_end":286230,"line_start":938,"line_end":938,"column_start":9,"column_end":17},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":4377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288192,"byte_end":288200,"line_start":1007,"line_end":1007,"column_start":34,"column_end":42},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":4377},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":288433,"byte_end":288441,"line_start":1016,"line_end":1016,"column_start":26,"column_end":34},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":4377},"to":{"krate":1,"index":4624}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289234,"byte_end":289242,"line_start":1048,"line_end":1048,"column_start":28,"column_end":36},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":4377},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289529,"byte_end":289537,"line_start":1058,"line_end":1058,"column_start":48,"column_end":56},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":4377},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":289738,"byte_end":289746,"line_start":1065,"line_end":1065,"column_start":26,"column_end":34},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":4377},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":292801,"byte_end":292809,"line_start":1165,"line_end":1165,"column_start":26,"column_end":34},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":4377},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293003,"byte_end":293007,"line_start":1172,"line_end":1172,"column_start":19,"column_end":23},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":1633},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293167,"byte_end":293171,"line_start":1178,"line_end":1178,"column_start":26,"column_end":30},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":1633},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293522,"byte_end":293526,"line_start":1192,"line_end":1192,"column_start":37,"column_end":41},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":1633},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293697,"byte_end":293701,"line_start":1198,"line_end":1198,"column_start":31,"column_end":35},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1633},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293846,"byte_end":293850,"line_start":1205,"line_end":1205,"column_start":27,"column_end":31},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1633},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":293929,"byte_end":293937,"line_start":1208,"line_end":1208,"column_start":22,"column_end":30},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":4408},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294216,"byte_end":294224,"line_start":1219,"line_end":1219,"column_start":33,"column_end":41},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":4408},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294403,"byte_end":294411,"line_start":1225,"line_end":1225,"column_start":31,"column_end":39},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":4408},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294552,"byte_end":294560,"line_start":1232,"line_end":1232,"column_start":27,"column_end":35},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":4408},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294639,"byte_end":294644,"line_start":1235,"line_end":1235,"column_start":19,"column_end":24},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":4414},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":294813,"byte_end":294818,"line_start":1242,"line_end":1242,"column_start":26,"column_end":31},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":4414},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295106,"byte_end":295111,"line_start":1255,"line_end":1255,"column_start":37,"column_end":42},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":4414},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295296,"byte_end":295301,"line_start":1262,"line_end":1262,"column_start":27,"column_end":32},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":4414},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":295377,"byte_end":295387,"line_start":1265,"line_end":1265,"column_start":19,"column_end":29},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":1648},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":296078,"byte_end":296088,"line_start":1282,"line_end":1282,"column_start":31,"column_end":41},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1648},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297718,"byte_end":297728,"line_start":1325,"line_end":1325,"column_start":32,"column_end":42},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":1648},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297804,"byte_end":297823,"line_start":1328,"line_end":1328,"column_start":19,"column_end":38},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":1655},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":297991,"byte_end":298010,"line_start":1334,"line_end":1334,"column_start":31,"column_end":50},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":1655},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298704,"byte_end":298723,"line_start":1356,"line_end":1356,"column_start":32,"column_end":51},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":1655},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":298799,"byte_end":298811,"line_start":1359,"line_end":1359,"column_start":19,"column_end":31},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":1663},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":299445,"byte_end":299457,"line_start":1375,"line_end":1375,"column_start":31,"column_end":43},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":1663},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300804,"byte_end":300816,"line_start":1412,"line_end":1412,"column_start":32,"column_end":44},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":1663},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":300892,"byte_end":300897,"line_start":1415,"line_end":1415,"column_start":19,"column_end":24},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":1670},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301051,"byte_end":301056,"line_start":1421,"line_end":1421,"column_start":31,"column_end":36},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":1670},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/btree/set.rs","byte_start":301508,"byte_end":301513,"line_start":1437,"line_end":1437,"column_start":32,"column_end":37},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":1670},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303455,"byte_end":303459,"line_start":67,"line_end":67,"column_start":36,"column_end":40},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":303716,"byte_end":303720,"line_start":75,"line_end":75,"column_start":19,"column_end":23},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":304622,"byte_end":304629,"line_start":100,"line_end":100,"column_start":36,"column_end":43},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305318,"byte_end":305326,"line_start":120,"line_end":120,"column_start":36,"column_end":44},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":4478},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305473,"byte_end":305477,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":1893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":305673,"byte_end":305683,"line_start":137,"line_end":137,"column_start":9,"column_end":19},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":1887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313394,"byte_end":313404,"line_start":363,"line_end":363,"column_start":21,"column_end":31},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":313530,"byte_end":313540,"line_start":371,"line_end":371,"column_start":9,"column_end":19},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":1887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330012,"byte_end":330022,"line_start":921,"line_end":921,"column_start":39,"column_end":49},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330139,"byte_end":330148,"line_start":925,"line_end":925,"column_start":30,"column_end":39},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":1979},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":330681,"byte_end":330685,"line_start":942,"line_end":942,"column_start":26,"column_end":30},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331387,"byte_end":331391,"line_start":972,"line_end":972,"column_start":37,"column_end":41},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331873,"byte_end":331877,"line_start":990,"line_end":990,"column_start":31,"column_end":35},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":331962,"byte_end":331966,"line_start":993,"line_end":993,"column_start":27,"column_end":31},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332049,"byte_end":332056,"line_start":996,"line_end":996,"column_start":26,"column_end":33},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":332778,"byte_end":332785,"line_start":1026,"line_end":1026,"column_start":37,"column_end":44},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333279,"byte_end":333286,"line_start":1044,"line_end":1044,"column_start":31,"column_end":38},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333371,"byte_end":333378,"line_start":1047,"line_end":1047,"column_start":27,"column_end":34},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":333398,"byte_end":333405,"line_start":1049,"line_end":1049,"column_start":9,"column_end":16},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":1911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":336962,"byte_end":336968,"line_start":1155,"line_end":1155,"column_start":36,"column_end":42},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":2027},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338021,"byte_end":338030,"line_start":1179,"line_end":1179,"column_start":36,"column_end":45},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2036},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":338207,"byte_end":338213,"line_start":1185,"line_end":1185,"column_start":13,"column_end":19},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":2027},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":342189,"byte_end":342198,"line_start":1282,"line_end":1282,"column_start":13,"column_end":22},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":346734,"byte_end":346743,"line_start":1391,"line_end":1391,"column_start":13,"column_end":22},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":352724,"byte_end":352735,"line_start":1534,"line_end":1534,"column_start":25,"column_end":36},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":2083},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353517,"byte_end":353528,"line_start":1563,"line_end":1563,"column_start":21,"column_end":32},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":2083},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":353760,"byte_end":353771,"line_start":1573,"line_end":1573,"column_start":39,"column_end":50},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2083},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354023,"byte_end":354031,"line_start":1583,"line_end":1583,"column_start":22,"column_end":30},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":4478},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354344,"byte_end":354352,"line_start":1598,"line_end":1598,"column_start":33,"column_end":41},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":4478},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354529,"byte_end":354537,"line_start":1606,"line_end":1606,"column_start":31,"column_end":39},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":4478},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354618,"byte_end":354626,"line_start":1609,"line_end":1609,"column_start":27,"column_end":35},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":4478},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354708,"byte_end":354718,"line_start":1612,"line_end":1612,"column_start":29,"column_end":39},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":354943,"byte_end":354953,"line_start":1621,"line_end":1621,"column_start":26,"column_end":36},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":4624}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355706,"byte_end":355716,"line_start":1653,"line_end":1653,"column_start":23,"column_end":33},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":355892,"byte_end":355902,"line_start":1659,"line_end":1659,"column_start":41,"column_end":51},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1887},"to":{"krate":0,"index":2564}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356077,"byte_end":356087,"line_start":1665,"line_end":1665,"column_start":39,"column_end":49},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":1887},"to":{"krate":0,"index":2564}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356284,"byte_end":356294,"line_start":1672,"line_end":1672,"column_start":42,"column_end":52},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356503,"byte_end":356513,"line_start":1679,"line_end":1679,"column_start":34,"column_end":44},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356800,"byte_end":356810,"line_start":1690,"line_end":1690,"column_start":20,"column_end":30},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":356899,"byte_end":356909,"line_start":1693,"line_end":1693,"column_start":36,"column_end":46},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357092,"byte_end":357102,"line_start":1700,"line_end":1700,"column_start":22,"column_end":32},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357279,"byte_end":357289,"line_start":1708,"line_end":1708,"column_start":26,"column_end":36},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":357854,"byte_end":357864,"line_start":1728,"line_end":1728,"column_start":36,"column_end":46},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358057,"byte_end":358067,"line_start":1735,"line_end":1735,"column_start":24,"column_end":34},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358691,"byte_end":358701,"line_start":1759,"line_end":1759,"column_start":31,"column_end":41},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358785,"byte_end":358795,"line_start":1762,"line_end":1762,"column_start":31,"column_end":41},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358879,"byte_end":358883,"line_start":1765,"line_end":1765,"column_start":31,"column_end":35},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":358971,"byte_end":358975,"line_start":1768,"line_end":1768,"column_start":31,"column_end":35},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":1898},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359063,"byte_end":359070,"line_start":1771,"line_end":1771,"column_start":31,"column_end":38},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/linked_list.rs","byte_start":359158,"byte_end":359165,"line_start":1774,"line_end":1774,"column_start":31,"column_end":38},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":1911},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":361903,"byte_end":361913,"line_start":81,"line_end":81,"column_start":17,"column_end":27},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":362338,"byte_end":362348,"line_start":97,"line_end":97,"column_start":30,"column_end":40},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":2239},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":363124,"byte_end":363132,"line_start":122,"line_end":122,"column_start":26,"column_end":34},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":363714,"byte_end":363722,"line_start":144,"line_end":144,"column_start":39,"column_end":47},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":363951,"byte_end":363958,"line_start":150,"line_end":150,"column_start":30,"column_end":37},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":2268},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":364426,"byte_end":364434,"line_start":169,"line_end":169,"column_start":21,"column_end":29},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":364569,"byte_end":364577,"line_start":177,"line_end":177,"column_start":9,"column_end":17},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":2234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":373970,"byte_end":373978,"line_start":453,"line_end":453,"column_start":9,"column_end":17},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":2234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":429905,"byte_end":429913,"line_start":2135,"line_end":2135,"column_start":16,"column_end":24},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":2234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":431032,"byte_end":431037,"line_start":2172,"line_end":2172,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1857},"to":{"krate":0,"index":2353}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432634,"byte_end":432638,"line_start":2229,"line_end":2229,"column_start":36,"column_end":40},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":2366},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":432991,"byte_end":432995,"line_start":2238,"line_end":2238,"column_start":19,"column_end":23},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":2366},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":433182,"byte_end":433186,"line_start":2245,"line_end":2245,"column_start":26,"column_end":30},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":2366},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":435404,"byte_end":435408,"line_start":2315,"line_end":2315,"column_start":37,"column_end":41},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":2366},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":436957,"byte_end":436961,"line_start":2360,"line_end":2360,"column_start":31,"column_end":35},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":2366},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437117,"byte_end":437121,"line_start":2367,"line_end":2367,"column_start":27,"column_end":31},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":2366},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437633,"byte_end":437640,"line_start":2384,"line_end":2384,"column_start":36,"column_end":43},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":2409},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":437950,"byte_end":437957,"line_start":2392,"line_end":2392,"column_start":26,"column_end":33},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":2409},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":439320,"byte_end":439327,"line_start":2441,"line_end":2441,"column_start":37,"column_end":44},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":2409},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440077,"byte_end":440084,"line_start":2466,"line_end":2466,"column_start":31,"column_end":38},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":2409},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440240,"byte_end":440247,"line_start":2473,"line_end":2473,"column_start":27,"column_end":34},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":2409},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440778,"byte_end":440786,"line_start":2489,"line_end":2489,"column_start":36,"column_end":44},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4484},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":440993,"byte_end":441001,"line_start":2496,"line_end":2496,"column_start":22,"column_end":30},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":4484},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441331,"byte_end":441339,"line_start":2512,"line_end":2512,"column_start":33,"column_end":41},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":4484},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441517,"byte_end":441525,"line_start":2520,"line_end":2520,"column_start":31,"column_end":39},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":4484},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":441676,"byte_end":441684,"line_start":2527,"line_end":2527,"column_start":27,"column_end":35},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":4484},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442227,"byte_end":442232,"line_start":2545,"line_end":2545,"column_start":36,"column_end":41},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442548,"byte_end":442553,"line_start":2556,"line_end":2556,"column_start":31,"column_end":36},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442640,"byte_end":442645,"line_start":2558,"line_end":2558,"column_start":31,"column_end":36},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":442720,"byte_end":442725,"line_start":2561,"line_end":2561,"column_start":18,"column_end":23},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444299,"byte_end":444304,"line_start":2608,"line_end":2608,"column_start":22,"column_end":27},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444638,"byte_end":444643,"line_start":2623,"line_end":2623,"column_start":33,"column_end":38},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444862,"byte_end":444867,"line_start":2631,"line_end":2631,"column_start":31,"column_end":36},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":444952,"byte_end":444957,"line_start":2634,"line_end":2634,"column_start":27,"column_end":32},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":2457},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":445048,"byte_end":445056,"line_start":2637,"line_end":2637,"column_start":34,"column_end":42},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":446551,"byte_end":446559,"line_start":2676,"line_end":2676,"column_start":20,"column_end":28},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":447679,"byte_end":447687,"line_start":2706,"line_end":2706,"column_start":36,"column_end":44},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":447884,"byte_end":447892,"line_start":2713,"line_end":2713,"column_start":22,"column_end":30},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448081,"byte_end":448089,"line_start":2721,"line_end":2721,"column_start":24,"column_end":32},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448365,"byte_end":448373,"line_start":2731,"line_end":2731,"column_start":26,"column_end":34},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448595,"byte_end":448603,"line_start":2741,"line_end":2741,"column_start":29,"column_end":37},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":448819,"byte_end":448827,"line_start":2749,"line_end":2749,"column_start":29,"column_end":37},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":449167,"byte_end":449175,"line_start":2760,"line_end":2760,"column_start":26,"column_end":34},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":4624}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":449938,"byte_end":449946,"line_start":2792,"line_end":2792,"column_start":23,"column_end":31},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":450733,"byte_end":450741,"line_start":2816,"line_end":2816,"column_start":42,"column_end":50},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":450952,"byte_end":450960,"line_start":2823,"line_end":2823,"column_start":36,"column_end":44},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":451175,"byte_end":451183,"line_start":2830,"line_end":2830,"column_start":26,"column_end":34},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2234},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/collections/vec_deque.rs","byte_start":452466,"byte_end":452469,"line_start":2862,"line_end":2862,"column_start":31,"column_end":34},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/collections/mod.rs","byte_start":67378,"byte_end":67393,"line_start":73,"line_end":73,"column_start":26,"column_end":41},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":4526},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":483454,"byte_end":483460,"line_start":51,"line_end":51,"column_start":19,"column_end":25},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":485276,"byte_end":485282,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487351,"byte_end":487357,"line_start":150,"line_end":150,"column_start":19,"column_end":25},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":487936,"byte_end":487942,"line_start":163,"line_end":163,"column_start":9,"column_end":15},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":488766,"byte_end":488772,"line_start":185,"line_end":185,"column_start":19,"column_end":25},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":506313,"byte_end":506319,"line_start":625,"line_end":625,"column_start":19,"column_end":25},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":508444,"byte_end":508450,"line_start":683,"line_end":683,"column_start":9,"column_end":15},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":509249,"byte_end":509255,"line_start":703,"line_end":703,"column_start":19,"column_end":25},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/raw_vec.rs","byte_start":509680,"byte_end":509686,"line_start":715,"line_end":715,"column_start":49,"column_end":55},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":2627},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":521812,"byte_end":521814,"line_start":287,"line_end":287,"column_start":35,"column_end":37},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":521901,"byte_end":521903,"line_start":289,"line_end":289,"column_start":35,"column_end":37},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":522032,"byte_end":522034,"line_start":292,"line_end":292,"column_start":65,"column_end":67},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":2250}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":522167,"byte_end":522169,"line_start":295,"line_end":295,"column_start":67,"column_end":69},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":2287}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":522193,"byte_end":522195,"line_start":297,"line_end":297,"column_start":17,"column_end":19},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":522427,"byte_end":522429,"line_start":307,"line_end":307,"column_start":9,"column_end":11},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":526453,"byte_end":526455,"line_start":439,"line_end":439,"column_start":9,"column_end":11},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":527373,"byte_end":527375,"line_start":469,"line_end":469,"column_start":9,"column_end":11},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":528478,"byte_end":528480,"line_start":508,"line_end":508,"column_start":9,"column_end":11},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":529778,"byte_end":529780,"line_start":549,"line_end":549,"column_start":17,"column_end":19},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":537490,"byte_end":537492,"line_start":800,"line_end":800,"column_start":16,"column_end":18},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":540410,"byte_end":540412,"line_start":877,"line_end":877,"column_start":6,"column_end":8},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":541308,"byte_end":541310,"line_start":909,"line_end":909,"column_start":17,"column_end":19},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":543469,"byte_end":543471,"line_start":969,"line_end":969,"column_start":9,"column_end":11},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":544151,"byte_end":544153,"line_start":987,"line_end":987,"column_start":9,"column_end":11},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":545146,"byte_end":545151,"line_start":1013,"line_end":1013,"column_start":26,"column_end":31},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2833},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":546192,"byte_end":546194,"line_start":1051,"line_end":1051,"column_start":35,"column_end":37},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2842}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":546372,"byte_end":546374,"line_start":1058,"line_end":1058,"column_start":34,"column_end":36},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2842}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":546556,"byte_end":546558,"line_start":1066,"line_end":1066,"column_start":27,"column_end":29},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":2023}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":546758,"byte_end":546760,"line_start":1076,"line_end":1076,"column_start":30,"column_end":32},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":2039}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":546860,"byte_end":546862,"line_start":1079,"line_end":1079,"column_start":47,"column_end":49},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":548192,"byte_end":548194,"line_start":1127,"line_end":1127,"column_start":27,"column_end":29},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":548715,"byte_end":548717,"line_start":1150,"line_end":1150,"column_start":30,"column_end":32},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":549302,"byte_end":549304,"line_start":1174,"line_end":1174,"column_start":46,"column_end":48},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2866}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":550109,"byte_end":550111,"line_start":1194,"line_end":1194,"column_start":39,"column_end":41},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2866}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":550440,"byte_end":550442,"line_start":1207,"line_end":1207,"column_start":43,"column_end":45},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":551638,"byte_end":551640,"line_start":1255,"line_end":1255,"column_start":29,"column_end":31},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":551738,"byte_end":551740,"line_start":1258,"line_end":1258,"column_start":45,"column_end":47},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":553888,"byte_end":553890,"line_start":1352,"line_end":1352,"column_start":31,"column_end":33},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":554410,"byte_end":554412,"line_start":1374,"line_end":1374,"column_start":33,"column_end":35},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":554598,"byte_end":554600,"line_start":1381,"line_end":1381,"column_start":49,"column_end":51},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":5921}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":554806,"byte_end":554808,"line_start":1388,"line_end":1388,"column_start":45,"column_end":47},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":555001,"byte_end":555003,"line_start":1395,"line_end":1395,"column_start":34,"column_end":36},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":5931}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":555208,"byte_end":555210,"line_start":1402,"line_end":1402,"column_start":21,"column_end":23},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":555361,"byte_end":555363,"line_start":1409,"line_end":1409,"column_start":31,"column_end":33},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":555555,"byte_end":555557,"line_start":1417,"line_end":1417,"column_start":21,"column_end":23},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":555816,"byte_end":555818,"line_start":1426,"line_end":1426,"column_start":23,"column_end":25},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":556002,"byte_end":556004,"line_start":1434,"line_end":1434,"column_start":34,"column_end":36},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":556175,"byte_end":556177,"line_start":1442,"line_end":1442,"column_start":26,"column_end":28},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":556549,"byte_end":556551,"line_start":1457,"line_end":1457,"column_start":46,"column_end":48},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1783}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":556967,"byte_end":556969,"line_start":1473,"line_end":1473,"column_start":35,"column_end":37},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":558742,"byte_end":558744,"line_start":1522,"line_end":1522,"column_start":53,"column_end":55},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2935}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":558905,"byte_end":558907,"line_start":1528,"line_end":1528,"column_start":61,"column_end":63},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2935}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":559657,"byte_end":559659,"line_start":1551,"line_end":1551,"column_start":67,"column_end":69},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2935}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":562141,"byte_end":562145,"line_start":1600,"line_end":1600,"column_start":35,"column_end":39},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":562234,"byte_end":562238,"line_start":1602,"line_end":1602,"column_start":35,"column_end":39},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":562369,"byte_end":562373,"line_start":1605,"line_end":1605,"column_start":67,"column_end":71},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":2250}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":562508,"byte_end":562512,"line_start":1608,"line_end":1608,"column_start":69,"column_end":73},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":2287}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":562528,"byte_end":562532,"line_start":1610,"line_end":1610,"column_start":9,"column_end":13},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":2951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":568480,"byte_end":568484,"line_start":1775,"line_end":1775,"column_start":17,"column_end":21},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":2951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":572129,"byte_end":572133,"line_start":1895,"line_end":1895,"column_start":26,"column_end":30},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":573232,"byte_end":573236,"line_start":1935,"line_end":1935,"column_start":27,"column_end":31},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":573785,"byte_end":573789,"line_start":1957,"line_end":1957,"column_start":45,"column_end":49},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":573972,"byte_end":573976,"line_start":1964,"line_end":1964,"column_start":21,"column_end":25},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":2951},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":576505,"byte_end":576507,"line_start":2050,"line_end":2050,"column_start":33,"column_end":35},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":2760},"to":{"krate":0,"index":2992}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":576648,"byte_end":576653,"line_start":2057,"line_end":2057,"column_start":33,"column_end":38},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":2755},"to":{"krate":0,"index":2992}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":576822,"byte_end":576824,"line_start":2065,"line_end":2065,"column_start":39,"column_end":41},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1540}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":576970,"byte_end":576972,"line_start":2072,"line_end":2072,"column_start":30,"column_end":32},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/rc.rs","byte_start":577103,"byte_end":577105,"line_start":2079,"line_end":2079,"column_start":27,"column_end":29},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":2760},"to":{"krate":1,"index":1891}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":602586,"byte_end":602589,"line_start":709,"line_end":709,"column_start":25,"column_end":28},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1540}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":602726,"byte_end":602729,"line_start":716,"line_end":716,"column_start":28,"column_end":31},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1543}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":606460,"byte_end":606473,"line_start":811,"line_end":811,"column_start":22,"column_end":35},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":3145},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/slice.rs","byte_start":610370,"byte_end":610379,"line_start":917,"line_end":917,"column_start":22,"column_end":31},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":3159},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/str.rs","byte_start":623029,"byte_end":623035,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1540}},{"span":{"file_name":"src/liballoc/str.rs","byte_start":623193,"byte_end":623199,"line_start":193,"line_end":193,"column_start":25,"column_end":31},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1543}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":646583,"byte_end":646589,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":4553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":686130,"byte_end":686143,"line_start":1628,"line_end":1628,"column_start":6,"column_end":19},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":4566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":688426,"byte_end":688439,"line_start":1703,"line_end":1703,"column_start":23,"column_end":36},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":4566},"to":{"krate":1,"index":5921}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":688624,"byte_end":688638,"line_start":1710,"line_end":1710,"column_start":23,"column_end":37},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":4571},"to":{"krate":1,"index":5921}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":688843,"byte_end":688849,"line_start":1717,"line_end":1717,"column_start":16,"column_end":22},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":689101,"byte_end":689107,"line_start":1728,"line_end":1728,"column_start":29,"column_end":35},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":689363,"byte_end":689369,"line_start":1737,"line_end":1737,"column_start":37,"column_end":43},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":689609,"byte_end":689615,"line_start":1746,"line_end":1746,"column_start":36,"column_end":42},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":689857,"byte_end":689863,"line_start":1755,"line_end":1755,"column_start":31,"column_end":37},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":690466,"byte_end":690472,"line_start":1773,"line_end":1773,"column_start":41,"column_end":47},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":691089,"byte_end":691095,"line_start":1792,"line_end":1792,"column_start":23,"column_end":29},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":691433,"byte_end":691439,"line_start":1802,"line_end":1802,"column_start":31,"column_end":37},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":691644,"byte_end":691650,"line_start":1809,"line_end":1809,"column_start":30,"column_end":36},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":691871,"byte_end":691877,"line_start":1816,"line_end":1816,"column_start":25,"column_end":31},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":692105,"byte_end":692111,"line_start":1823,"line_end":1823,"column_start":35,"column_end":41},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":692988,"byte_end":692994,"line_start":1854,"line_end":1854,"column_start":20,"column_end":26},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":694343,"byte_end":694349,"line_start":1902,"line_end":1902,"column_start":18,"column_end":24},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":694529,"byte_end":694535,"line_start":1911,"line_end":1911,"column_start":23,"column_end":29},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":5921}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":694728,"byte_end":694734,"line_start":1919,"line_end":1919,"column_start":21,"column_end":27},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":694925,"byte_end":694931,"line_start":1927,"line_end":1927,"column_start":21,"column_end":27},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":696309,"byte_end":696315,"line_start":1972,"line_end":1972,"column_start":20,"column_end":26},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1915}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":696682,"byte_end":696688,"line_start":1986,"line_end":1986,"column_start":26,"column_end":32},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1948}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":696873,"byte_end":696879,"line_start":1994,"line_end":1994,"column_start":40,"column_end":46},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":697096,"byte_end":697102,"line_start":2003,"line_end":2003,"column_start":42,"column_end":48},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":697323,"byte_end":697329,"line_start":2012,"line_end":2012,"column_start":44,"column_end":50},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":697545,"byte_end":697551,"line_start":2021,"line_end":2021,"column_start":37,"column_end":43},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":697814,"byte_end":697820,"line_start":2030,"line_end":2030,"column_start":49,"column_end":55},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":698078,"byte_end":698084,"line_start":2039,"line_end":2039,"column_start":51,"column_end":57},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":698340,"byte_end":698346,"line_start":2049,"line_end":2049,"column_start":43,"column_end":49},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":698572,"byte_end":698578,"line_start":2056,"line_end":2056,"column_start":45,"column_end":51},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":698808,"byte_end":698814,"line_start":2063,"line_end":2063,"column_start":47,"column_end":53},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":699039,"byte_end":699045,"line_start":2070,"line_end":2070,"column_start":40,"column_end":46},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":699308,"byte_end":699314,"line_start":2077,"line_end":2077,"column_start":52,"column_end":58},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":699574,"byte_end":699580,"line_start":2084,"line_end":2084,"column_start":54,"column_end":60},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":699799,"byte_end":699805,"line_start":2092,"line_end":2092,"column_start":21,"column_end":27},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2023}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":700023,"byte_end":700029,"line_start":2102,"line_end":2102,"column_start":24,"column_end":30},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":2034}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":700984,"byte_end":700990,"line_start":2125,"line_end":2125,"column_start":18,"column_end":24},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":7368}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":702283,"byte_end":702284,"line_start":2167,"line_end":2167,"column_start":45,"column_end":46},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":3478},"to":{"krate":0,"index":3475}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":702855,"byte_end":702858,"line_start":2188,"line_end":2188,"column_start":19,"column_end":22},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":321},"to":{"krate":0,"index":3475}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":703048,"byte_end":703054,"line_start":2196,"line_end":2196,"column_start":19,"column_end":25},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":4553},"to":{"krate":0,"index":3475}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":703206,"byte_end":703212,"line_start":2204,"line_end":2204,"column_start":21,"column_end":27},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":703349,"byte_end":703355,"line_start":2212,"line_end":2212,"column_start":22,"column_end":28},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":703503,"byte_end":703509,"line_start":2220,"line_end":2220,"column_start":21,"column_end":27},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":703669,"byte_end":703675,"line_start":2228,"line_end":2228,"column_start":24,"column_end":30},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":703910,"byte_end":703916,"line_start":2238,"line_end":2238,"column_start":25,"column_end":31},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":704457,"byte_end":704460,"line_start":2259,"line_end":2259,"column_start":23,"column_end":26},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":704981,"byte_end":704987,"line_start":2279,"line_end":2279,"column_start":33,"column_end":39},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":705136,"byte_end":705139,"line_start":2286,"line_end":2286,"column_start":28,"column_end":31},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":705313,"byte_end":705316,"line_start":2294,"line_end":2294,"column_start":27,"column_end":30},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":705505,"byte_end":705508,"line_start":2302,"line_end":2302,"column_start":31,"column_end":34},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":705713,"byte_end":705716,"line_start":2310,"line_end":2310,"column_start":33,"column_end":36},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":705955,"byte_end":705958,"line_start":2317,"line_end":2317,"column_start":40,"column_end":43},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":706195,"byte_end":706198,"line_start":2324,"line_end":2324,"column_start":35,"column_end":38},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":706427,"byte_end":706430,"line_start":2331,"line_end":2331,"column_start":23,"column_end":26},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":706904,"byte_end":706910,"line_start":2352,"line_end":2352,"column_start":21,"column_end":27},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":4553},"to":{"krate":1,"index":5877}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":707765,"byte_end":707770,"line_start":2386,"line_end":2386,"column_start":21,"column_end":26},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":3529},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":707946,"byte_end":707951,"line_start":2393,"line_end":2393,"column_start":22,"column_end":27},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":3529},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":708026,"byte_end":708031,"line_start":2395,"line_end":2395,"column_start":22,"column_end":27},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":3529},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":708100,"byte_end":708105,"line_start":2398,"line_end":2398,"column_start":15,"column_end":20},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":3529},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":708548,"byte_end":708553,"line_start":2412,"line_end":2412,"column_start":19,"column_end":24},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":3529},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":708922,"byte_end":708927,"line_start":2431,"line_end":2431,"column_start":30,"column_end":35},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":3529},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/string.rs","byte_start":709103,"byte_end":709108,"line_start":2439,"line_end":2439,"column_start":24,"column_end":29},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":3529},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":716713,"byte_end":716716,"line_start":202,"line_end":202,"column_start":47,"column_end":50},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":716815,"byte_end":716818,"line_start":204,"line_end":204,"column_start":47,"column_end":50},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":716948,"byte_end":716951,"line_start":207,"line_end":207,"column_start":66,"column_end":69},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":2250}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":717085,"byte_end":717088,"line_start":210,"line_end":210,"column_start":68,"column_end":71},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":2287}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":717112,"byte_end":717115,"line_start":212,"line_end":212,"column_start":17,"column_end":20},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":719315,"byte_end":719319,"line_start":257,"line_end":257,"column_start":47,"column_end":51},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":719421,"byte_end":719425,"line_start":259,"line_end":259,"column_start":47,"column_end":51},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":719556,"byte_end":719560,"line_start":262,"line_end":262,"column_start":67,"column_end":71},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":2250}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":719694,"byte_end":719698,"line_start":264,"line_end":264,"column_start":69,"column_end":73},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":2287}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":719799,"byte_end":719803,"line_start":267,"line_end":267,"column_start":45,"column_end":49},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":720273,"byte_end":720281,"line_start":284,"line_end":284,"column_start":47,"column_end":55},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":3638},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":720334,"byte_end":720342,"line_start":285,"line_end":285,"column_start":47,"column_end":55},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":3638},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":720358,"byte_end":720361,"line_start":287,"line_end":287,"column_start":9,"column_end":12},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":724254,"byte_end":724257,"line_start":419,"line_end":419,"column_start":9,"column_end":12},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":725185,"byte_end":725188,"line_start":449,"line_end":449,"column_start":9,"column_end":12},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":726299,"byte_end":726302,"line_start":488,"line_end":488,"column_start":9,"column_end":12},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":727610,"byte_end":727613,"line_start":529,"line_end":529,"column_start":17,"column_end":20},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":735919,"byte_end":735922,"line_start":771,"line_end":771,"column_start":17,"column_end":20},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":738118,"byte_end":738121,"line_start":830,"line_end":830,"column_start":9,"column_end":12},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":738810,"byte_end":738813,"line_start":848,"line_end":848,"column_start":9,"column_end":12},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":739813,"byte_end":739818,"line_start":874,"line_end":874,"column_start":26,"column_end":31},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":3695},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":740875,"byte_end":740878,"line_start":912,"line_end":912,"column_start":36,"column_end":39},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":3604},"to":{"krate":0,"index":3704}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":741057,"byte_end":741060,"line_start":919,"line_end":919,"column_start":35,"column_end":38},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":3604},"to":{"krate":0,"index":3704}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":741243,"byte_end":741246,"line_start":927,"line_end":927,"column_start":27,"column_end":30},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":743114,"byte_end":743117,"line_start":977,"line_end":977,"column_start":27,"column_end":30},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":2023}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":743308,"byte_end":743311,"line_start":987,"line_end":987,"column_start":30,"column_end":33},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":2039}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":743334,"byte_end":743337,"line_start":989,"line_end":989,"column_start":16,"column_end":19},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":747319,"byte_end":747322,"line_start":1076,"line_end":1076,"column_start":17,"column_end":20},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":751328,"byte_end":751331,"line_start":1181,"line_end":1181,"column_start":47,"column_end":50},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":754202,"byte_end":754205,"line_start":1254,"line_end":1254,"column_start":6,"column_end":9},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":3604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":755194,"byte_end":755198,"line_start":1289,"line_end":1289,"column_start":9,"column_end":13},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":3622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":761072,"byte_end":761076,"line_start":1450,"line_end":1450,"column_start":17,"column_end":21},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":3622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":766470,"byte_end":766474,"line_start":1608,"line_end":1608,"column_start":27,"column_end":31},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":767599,"byte_end":767603,"line_start":1645,"line_end":1645,"column_start":21,"column_end":25},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":768216,"byte_end":768220,"line_start":1667,"line_end":1667,"column_start":26,"column_end":30},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":3622},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":769899,"byte_end":769902,"line_start":1717,"line_end":1717,"column_start":47,"column_end":50},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":3604},"to":{"krate":0,"index":3759}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":770711,"byte_end":770714,"line_start":1736,"line_end":1736,"column_start":40,"column_end":43},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":3604},"to":{"krate":0,"index":3759}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":771047,"byte_end":771050,"line_start":1749,"line_end":1749,"column_start":43,"column_end":46},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1588}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":772261,"byte_end":772264,"line_start":1795,"line_end":1795,"column_start":45,"column_end":48},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":774352,"byte_end":774355,"line_start":1883,"line_end":1883,"column_start":31,"column_end":34},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":774863,"byte_end":774866,"line_start":1903,"line_end":1903,"column_start":29,"column_end":32},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":774968,"byte_end":774971,"line_start":1906,"line_end":1906,"column_start":49,"column_end":52},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":5921}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":775177,"byte_end":775180,"line_start":1913,"line_end":1913,"column_start":45,"column_end":48},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":775373,"byte_end":775376,"line_start":1920,"line_end":1920,"column_start":34,"column_end":37},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":5931}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":775582,"byte_end":775585,"line_start":1927,"line_end":1927,"column_start":30,"column_end":33},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":775978,"byte_end":775981,"line_start":1944,"line_end":1944,"column_start":33,"column_end":36},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":776146,"byte_end":776149,"line_start":1951,"line_end":1951,"column_start":21,"column_end":24},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":776301,"byte_end":776304,"line_start":1958,"line_end":1958,"column_start":31,"column_end":34},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":776498,"byte_end":776501,"line_start":1966,"line_end":1966,"column_start":21,"column_end":24},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":776766,"byte_end":776769,"line_start":1975,"line_end":1975,"column_start":23,"column_end":26},"kind":{"Impl":{"id":570}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":776955,"byte_end":776958,"line_start":1983,"line_end":1983,"column_start":34,"column_end":37},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":777131,"byte_end":777134,"line_start":1991,"line_end":1991,"column_start":26,"column_end":29},"kind":{"Impl":{"id":572}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":777511,"byte_end":777514,"line_start":2006,"line_end":2006,"column_start":47,"column_end":50},"kind":{"Impl":{"id":573}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1783}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":777934,"byte_end":777937,"line_start":2022,"line_end":2022,"column_start":35,"column_end":38},"kind":{"Impl":{"id":574}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":779731,"byte_end":779734,"line_start":2071,"line_end":2071,"column_start":54,"column_end":57},"kind":{"Impl":{"id":575}},"from":{"krate":0,"index":3604},"to":{"krate":0,"index":3831}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":779896,"byte_end":779899,"line_start":2077,"line_end":2077,"column_start":62,"column_end":65},"kind":{"Impl":{"id":576}},"from":{"krate":0,"index":3604},"to":{"krate":0,"index":3831}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":780651,"byte_end":780654,"line_start":2100,"line_end":2100,"column_start":68,"column_end":71},"kind":{"Impl":{"id":577}},"from":{"krate":0,"index":3604},"to":{"krate":0,"index":3831}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":781279,"byte_end":781282,"line_start":2115,"line_end":2115,"column_start":39,"column_end":42},"kind":{"Impl":{"id":578}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1540}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":781428,"byte_end":781431,"line_start":2122,"line_end":2122,"column_start":30,"column_end":33},"kind":{"Impl":{"id":579}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/sync.rs","byte_start":781562,"byte_end":781565,"line_start":2129,"line_end":2129,"column_start":27,"column_end":30},"kind":{"Impl":{"id":580}},"from":{"krate":0,"index":3604},"to":{"krate":1,"index":1891}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":793926,"byte_end":793929,"line_start":306,"line_end":306,"column_start":9,"column_end":12},"kind":{"Impl":{"id":581}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":831999,"byte_end":832002,"line_start":1466,"line_end":1466,"column_start":16,"column_end":19},"kind":{"Impl":{"id":582}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":834127,"byte_end":834130,"line_start":1528,"line_end":1528,"column_start":18,"column_end":21},"kind":{"Impl":{"id":583}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":835931,"byte_end":835944,"line_start":1582,"line_end":1582,"column_start":34,"column_end":47},"kind":{"Impl":{"id":584}},"from":{"krate":0,"index":3959},"to":{"krate":0,"index":3955}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":836115,"byte_end":836128,"line_start":1592,"line_end":1592,"column_start":36,"column_end":49},"kind":{"Impl":{"id":585}},"from":{"krate":0,"index":3967},"to":{"krate":0,"index":3955}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":836323,"byte_end":836333,"line_start":1602,"line_end":1602,"column_start":44,"column_end":54},"kind":{"Impl":{"id":586}},"from":{"krate":0,"index":3973},"to":{"krate":0,"index":3955}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":836459,"byte_end":836462,"line_start":1611,"line_end":1611,"column_start":9,"column_end":12},"kind":{"Impl":{"id":587}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":837909,"byte_end":837921,"line_start":1652,"line_end":1652,"column_start":10,"column_end":22},"kind":{"Impl":{"id":588}},"from":{"krate":0,"index":3986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":838167,"byte_end":838179,"line_start":1664,"line_end":1664,"column_start":15,"column_end":27},"kind":{"Impl":{"id":589}},"from":{"krate":0,"index":3986},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":838289,"byte_end":838292,"line_start":1671,"line_end":1671,"column_start":20,"column_end":23},"kind":{"Impl":{"id":590}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":838815,"byte_end":838818,"line_start":1693,"line_end":1693,"column_start":9,"column_end":12},"kind":{"Impl":{"id":591}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":839847,"byte_end":839852,"line_start":1727,"line_end":1727,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":1857},"to":{"krate":0,"index":4007}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":839943,"byte_end":839944,"line_start":1731,"line_end":1731,"column_start":33,"column_end":34},"kind":{"Impl":{"id":592}},"from":{"krate":0,"index":4010},"to":{"krate":0,"index":4007}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":840534,"byte_end":840535,"line_start":1754,"line_end":1754,"column_start":42,"column_end":43},"kind":{"Impl":{"id":594}},"from":{"krate":0,"index":4015},"to":{"krate":0,"index":4007}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":842213,"byte_end":842219,"line_start":1819,"line_end":1819,"column_start":35,"column_end":41},"kind":{"Impl":{"id":610}},"from":{"krate":1,"index":29099},"to":{"krate":0,"index":4017}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":842338,"byte_end":842344,"line_start":1826,"line_end":1826,"column_start":35,"column_end":41},"kind":{"Impl":{"id":611}},"from":{"krate":1,"index":29099},"to":{"krate":0,"index":4017}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":842467,"byte_end":842473,"line_start":1833,"line_end":1833,"column_start":35,"column_end":41},"kind":{"Impl":{"id":612}},"from":{"krate":1,"index":29099},"to":{"krate":0,"index":4017}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":842836,"byte_end":842839,"line_start":1845,"line_end":1845,"column_start":26,"column_end":29},"kind":{"Impl":{"id":613}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":843500,"byte_end":843503,"line_start":1866,"line_end":1866,"column_start":24,"column_end":27},"kind":{"Impl":{"id":614}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":6107}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":843879,"byte_end":843882,"line_start":1878,"line_end":1878,"column_start":42,"column_end":45},"kind":{"Impl":{"id":615}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":2099}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":844289,"byte_end":844292,"line_start":1892,"line_end":1892,"column_start":45,"column_end":48},"kind":{"Impl":{"id":616}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":2103}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":844499,"byte_end":844502,"line_start":1900,"line_end":1900,"column_start":24,"column_end":27},"kind":{"Impl":{"id":617}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":2023}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":844709,"byte_end":844712,"line_start":1909,"line_end":1909,"column_start":27,"column_end":30},"kind":{"Impl":{"id":618}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":2034}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":844917,"byte_end":844920,"line_start":1916,"line_end":1916,"column_start":29,"column_end":32},"kind":{"Impl":{"id":619}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":845159,"byte_end":845162,"line_start":1924,"line_end":1924,"column_start":26,"column_end":29},"kind":{"Impl":{"id":620}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":4624}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":846800,"byte_end":846803,"line_start":1984,"line_end":1984,"column_start":23,"column_end":26},"kind":{"Impl":{"id":621}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":847176,"byte_end":847179,"line_start":1997,"line_end":1997,"column_start":33,"column_end":36},"kind":{"Impl":{"id":622}},"from":{"krate":0,"index":3899},"to":{"krate":0,"index":4084}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":848281,"byte_end":848284,"line_start":2028,"line_end":2028,"column_start":33,"column_end":36},"kind":{"Impl":{"id":623}},"from":{"krate":0,"index":3899},"to":{"krate":0,"index":4084}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":849535,"byte_end":849538,"line_start":2067,"line_end":2067,"column_start":40,"column_end":43},"kind":{"Impl":{"id":624}},"from":{"krate":0,"index":3899},"to":{"krate":0,"index":4084}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":850423,"byte_end":850426,"line_start":2093,"line_end":2093,"column_start":45,"column_end":48},"kind":{"Impl":{"id":625}},"from":{"krate":0,"index":3899},"to":{"krate":0,"index":4084}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":850751,"byte_end":850754,"line_start":2107,"line_end":2107,"column_start":59,"column_end":62},"kind":{"Impl":{"id":626}},"from":{"krate":0,"index":3899},"to":{"krate":0,"index":4084}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":851106,"byte_end":851109,"line_start":2122,"line_end":2122,"column_start":9,"column_end":12},"kind":{"Impl":{"id":627}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":856082,"byte_end":856085,"line_start":2256,"line_end":2256,"column_start":42,"column_end":45},"kind":{"Impl":{"id":628}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":4633}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":857747,"byte_end":857750,"line_start":2296,"line_end":2296,"column_start":36,"column_end":39},"kind":{"Impl":{"id":637}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1625}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":857959,"byte_end":857962,"line_start":2304,"line_end":2304,"column_start":20,"column_end":23},"kind":{"Impl":{"id":638}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1593}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":858092,"byte_end":858095,"line_start":2308,"line_end":2308,"column_start":22,"column_end":25},"kind":{"Impl":{"id":639}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1614}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":858292,"byte_end":858295,"line_start":2316,"line_end":2316,"column_start":39,"column_end":42},"kind":{"Impl":{"id":640}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":858546,"byte_end":858549,"line_start":2327,"line_end":2327,"column_start":21,"column_end":24},"kind":{"Impl":{"id":641}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1843}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":858728,"byte_end":858731,"line_start":2335,"line_end":2335,"column_start":36,"column_end":39},"kind":{"Impl":{"id":642}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":858917,"byte_end":858920,"line_start":2342,"line_end":2342,"column_start":27,"column_end":30},"kind":{"Impl":{"id":643}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859059,"byte_end":859062,"line_start":2349,"line_end":2349,"column_start":27,"column_end":30},"kind":{"Impl":{"id":644}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1770}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859201,"byte_end":859204,"line_start":2356,"line_end":2356,"column_start":24,"column_end":27},"kind":{"Impl":{"id":645}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1767}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859337,"byte_end":859340,"line_start":2363,"line_end":2363,"column_start":24,"column_end":27},"kind":{"Impl":{"id":646}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1770}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859483,"byte_end":859486,"line_start":2370,"line_end":2370,"column_start":31,"column_end":34},"kind":{"Impl":{"id":647}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":859751,"byte_end":859754,"line_start":2382,"line_end":2382,"column_start":35,"column_end":38},"kind":{"Impl":{"id":648}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":860034,"byte_end":860037,"line_start":2394,"line_end":2394,"column_start":36,"column_end":39},"kind":{"Impl":{"id":649}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":860311,"byte_end":860314,"line_start":2406,"line_end":2406,"column_start":28,"column_end":31},"kind":{"Impl":{"id":650}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":860540,"byte_end":860543,"line_start":2415,"line_end":2415,"column_start":26,"column_end":29},"kind":{"Impl":{"id":651}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":860692,"byte_end":860695,"line_start":2422,"line_end":2422,"column_start":21,"column_end":24},"kind":{"Impl":{"id":652}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":861049,"byte_end":861052,"line_start":2433,"line_end":2433,"column_start":38,"column_end":41},"kind":{"Impl":{"id":653}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":861229,"byte_end":861232,"line_start":2440,"line_end":2440,"column_start":37,"column_end":40},"kind":{"Impl":{"id":654}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":861414,"byte_end":861417,"line_start":2447,"line_end":2447,"column_start":41,"column_end":44},"kind":{"Impl":{"id":655}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":1776}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":861597,"byte_end":861600,"line_start":2454,"line_end":2454,"column_start":33,"column_end":36},"kind":{"Impl":{"id":656}},"from":{"krate":0,"index":321},"to":{"krate":1,"index":4620}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":862461,"byte_end":862469,"line_start":2484,"line_end":2484,"column_start":36,"column_end":44},"kind":{"Impl":{"id":657}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":862622,"byte_end":862630,"line_start":2490,"line_end":2490,"column_start":9,"column_end":17},"kind":{"Impl":{"id":658}},"from":{"krate":0,"index":4193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":863931,"byte_end":863939,"line_start":2527,"line_end":2527,"column_start":31,"column_end":39},"kind":{"Impl":{"id":659}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":864022,"byte_end":864030,"line_start":2529,"line_end":2529,"column_start":31,"column_end":39},"kind":{"Impl":{"id":660}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":864105,"byte_end":864113,"line_start":2532,"line_end":2532,"column_start":22,"column_end":30},"kind":{"Impl":{"id":661}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":865366,"byte_end":865374,"line_start":2576,"line_end":2576,"column_start":33,"column_end":41},"kind":{"Impl":{"id":662}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":866071,"byte_end":866079,"line_start":2600,"line_end":2600,"column_start":31,"column_end":39},"kind":{"Impl":{"id":663}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":866229,"byte_end":866237,"line_start":2607,"line_end":2607,"column_start":27,"column_end":35},"kind":{"Impl":{"id":664}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":866329,"byte_end":866337,"line_start":2610,"line_end":2610,"column_start":31,"column_end":39},"kind":{"Impl":{"id":665}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":4979}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":866430,"byte_end":866438,"line_start":2613,"line_end":2613,"column_start":26,"column_end":34},"kind":{"Impl":{"id":666}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":1562}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":866621,"byte_end":866629,"line_start":2620,"line_end":2620,"column_start":39,"column_end":47},"kind":{"Impl":{"id":667}},"from":{"krate":0,"index":4193},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":867421,"byte_end":867426,"line_start":2648,"line_end":2648,"column_start":36,"column_end":41},"kind":{"Impl":{"id":668}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":5916}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":867589,"byte_end":867594,"line_start":2654,"line_end":2654,"column_start":13,"column_end":18},"kind":{"Impl":{"id":669}},"from":{"krate":0,"index":4233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":868241,"byte_end":868246,"line_start":2674,"line_end":2674,"column_start":31,"column_end":36},"kind":{"Impl":{"id":670}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":1864}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":868333,"byte_end":868338,"line_start":2676,"line_end":2676,"column_start":31,"column_end":36},"kind":{"Impl":{"id":671}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":1852}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":868417,"byte_end":868422,"line_start":2679,"line_end":2679,"column_start":22,"column_end":27},"kind":{"Impl":{"id":672}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":868754,"byte_end":868759,"line_start":2693,"line_end":2693,"column_start":33,"column_end":38},"kind":{"Impl":{"id":673}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":868977,"byte_end":868982,"line_start":2701,"line_end":2701,"column_start":18,"column_end":23},"kind":{"Impl":{"id":674}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":869744,"byte_end":869749,"line_start":2724,"line_end":2724,"column_start":31,"column_end":36},"kind":{"Impl":{"id":675}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":869914,"byte_end":869919,"line_start":2731,"line_end":2731,"column_start":31,"column_end":36},"kind":{"Impl":{"id":676}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":4979}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":870004,"byte_end":870009,"line_start":2734,"line_end":2734,"column_start":27,"column_end":32},"kind":{"Impl":{"id":677}},"from":{"krate":0,"index":4233},"to":{"krate":1,"index":4976}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":870492,"byte_end":870498,"line_start":2751,"line_end":2751,"column_start":32,"column_end":38},"kind":{"Impl":{"id":678}},"from":{"krate":0,"index":4721},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":870800,"byte_end":870806,"line_start":2764,"line_end":2764,"column_start":43,"column_end":49},"kind":{"Impl":{"id":679}},"from":{"krate":0,"index":4721},"to":{"krate":1,"index":4643}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":871000,"byte_end":871006,"line_start":2771,"line_end":2771,"column_start":41,"column_end":47},"kind":{"Impl":{"id":680}},"from":{"krate":0,"index":4721},"to":{"krate":1,"index":4672}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":871097,"byte_end":871103,"line_start":2774,"line_end":2774,"column_start":28,"column_end":34},"kind":{"Impl":{"id":681}},"from":{"krate":0,"index":4721},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":872648,"byte_end":872653,"line_start":2815,"line_end":2815,"column_start":9,"column_end":14},"kind":{"Impl":{"id":682}},"from":{"krate":0,"index":4233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":875150,"byte_end":875161,"line_start":2877,"line_end":2877,"column_start":25,"column_end":36},"kind":{"Impl":{"id":683}},"from":{"krate":0,"index":4730},"to":{"krate":1,"index":4716}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876452,"byte_end":876463,"line_start":2915,"line_end":2915,"column_start":21,"column_end":32},"kind":{"Impl":{"id":684}},"from":{"krate":0,"index":4730},"to":{"krate":1,"index":2045}},{"span":{"file_name":"src/liballoc/vec.rs","byte_start":876741,"byte_end":876756,"line_start":2927,"line_end":2927,"column_start":37,"column_end":52},"kind":{"Impl":{"id":685}},"from":{"krate":0,"index":4299},"to":{"krate":1,"index":2045}}]}