{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":false,"distro_crate":true,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2","program":"/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc","arguments":["--edition=2018","--crate-name","hashbrown","/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","--error-format=json","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata,link","-C","opt-level=2","-C","debuginfo=0","--cfg","feature=\"alloc\"","--cfg","feature=\"compiler_builtins\"","--cfg","feature=\"core\"","--cfg","feature=\"nightly\"","--cfg","feature=\"rustc-dep-of-std\"","--cfg","feature=\"rustc-internal-api\"","-C","metadata=fc04ac9cc00db323","-C","extra-filename=-fc04ac9cc00db323","--out-dir","/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps","--target","x86_64-unknown-linux-gnu","-L","dependency=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps","-L","dependency=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/release/deps","--extern","compiler_builtins=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libcompiler_builtins-abf09aede8f45a34.rmeta","--extern","alloc=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/librustc_std_workspace_alloc-157abda7fb6d2aa7.rmeta","--extern","core=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/librustc_std_workspace_core-ba7d9f16203251e0.rmeta","--cap-lints","allow","-Zexternal-macro-backtrace","-Clink-args=-Wl,-rpath,$ORIGIN/../lib","-Wrust_2018_idioms","-Wunused_lifetimes","-Dwarnings","-Zsave-analysis","-Cprefer-dynamic","-Zbinary-dep-depinfo","--cfg","has_extern_crate_alloc","-L","native=/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/build/compiler_builtins-24f467101ff50fdb/out","--sysroot","/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1","-C","debug-assertions=n","-Z","force-unstable-if-unmarked"],"output":"/home/parallels/Repos/rust/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libhashbrown-fc04ac9cc00db323.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[8682897892229156887,8286894810744069291]},"crate_root":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src","external_crates":[{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","num":1,"id":{"name":"rustc_std_workspace_core","disambiguator":[3116599134721608169,2545038524027594738]}},{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2287588329603175230,1743550078670421849]}},{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16198930258126787141,2971708547737336037]}},{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[3628186424607178785,4863834672057698992]}},{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[243425455527795567,14247343443062235522]}}],"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":0,"byte_end":3311,"line_start":1,"line_end":117,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":1517,"byte_end":1518,"line_start":54,"line_end":54,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1340}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":1517,"byte_end":1518,"line_start":54,"line_end":54,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1340}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":1517,"byte_end":1518,"line_start":54,"line_end":54,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1343}},{"kind":"Use","ref_id":{"krate":0,"index":1393},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":2847,"byte_end":2854,"line_start":103,"line_end":103,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":2876,"byte_end":2883,"line_start":104,"line_end":104,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":0,"byte_end":3311,"line_start":1,"line_end":117,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":885},{"krate":0,"index":1001},{"krate":0,"index":1026},{"krate":0,"index":1340},{"krate":0,"index":1343},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1412},{"krate":0,"index":1426},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1417}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"! This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"! map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"! and `HashSet` types.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"! [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"! [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"feature(alloc_layout_extra, allocator_api, ptr_offset_from, test,\n          core_intrinsics, dropck_eyepatch, cfg_doctest,)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":608,"byte_end":783,"line_start":15,"line_end":23,"column_start":5,"column_end":6}},{"value":"warn(missing_docs)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":787,"byte_end":809,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"allow(clippy :: module_name_repetitions, clippy :: doc_markdown)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":810,"byte_end":874,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":875,"byte_end":901,"line_start":27,"line_end":27,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":1352},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5530739,"byte_end":5530750,"line_start":10,"line_end":10,"column_start":10,"column_end":21},"name":"BitMaskWord","qualname":"::raw::sse2::BitMaskWord","value":"u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1353},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5530768,"byte_end":5530782,"line_start":11,"line_end":11,"column_start":11,"column_end":25},"name":"BITMASK_STRIDE","qualname":"::raw::sse2::BITMASK_STRIDE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1354},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5530805,"byte_end":5530817,"line_start":12,"line_end":12,"column_start":11,"column_end":23},"name":"BITMASK_MASK","qualname":"::raw::sse2::BITMASK_MASK","value":"BitMaskWord","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1373},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531014,"byte_end":5531019,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"Group","qualname":"::raw::sse2::Group","value":"","parent":null,"children":[],"decl_id":null,"docs":" Abstraction over a group of control bytes which can be scanned in\n parallel.","sig":null,"attributes":[{"value":"/ Abstraction over a group of control bytes which can be scanned in","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5530842,"byte_end":5530911,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ parallel.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5530912,"byte_end":5530925,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5530926,"byte_end":5530929,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This implementation uses a 128-bit SSE value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5530930,"byte_end":5530979,"line_start":17,"line_end":17,"column_start":1,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":1356},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531191,"byte_end":5531196,"line_start":25,"line_end":25,"column_start":15,"column_end":20},"name":"WIDTH","qualname":"::raw::sse2::Group::WIDTH","value":"usize","parent":{"krate":0,"index":1355},"children":[],"decl_id":null,"docs":" Number of bytes in the group.\n","sig":null,"attributes":[{"value":"/ Number of bytes in the group.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531143,"byte_end":5531176,"line_start":24,"line_end":24,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531540,"byte_end":5531552,"line_start":32,"line_end":32,"column_start":12,"column_end":24},"name":"static_empty","qualname":"<Group>::static_empty","value":"fn () -> &'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a full group of empty bytes, suitable for use as the initial\n value for an empty hash table. This value is explicitly declared as\n a static variable to ensure the address is consistent across dylibs.","sig":null,"attributes":[{"value":"/ Returns a full group of empty bytes, suitable for use as the initial","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531235,"byte_end":5531307,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/ value for an empty hash table. This value is explicitly declared as","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531312,"byte_end":5531383,"line_start":28,"line_end":28,"column_start":5,"column_end":76}},{"value":"/ a static variable to ensure the address is consistent across dylibs.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531388,"byte_end":5531460,"line_start":29,"line_end":29,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531465,"byte_end":5531468,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be aligned to the group size.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531473,"byte_end":5531528,"line_start":31,"line_end":31,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531993,"byte_end":5531997,"line_start":46,"line_end":46,"column_start":19,"column_end":23},"name":"load","qualname":"<Group>::load","value":"fn (ptr: *const u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Loads a group of bytes starting at the given address.\n","sig":null,"attributes":[{"value":"/ Loads a group of bytes starting at the given address.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531844,"byte_end":5531901,"line_start":43,"line_end":43,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531906,"byte_end":5531915,"line_start":44,"line_end":44,"column_start":5,"column_end":14}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531920,"byte_end":5531956,"line_start":45,"line_end":45,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532280,"byte_end":5532292,"line_start":54,"line_end":54,"column_start":19,"column_end":31},"name":"load_aligned","qualname":"<Group>::load_aligned","value":"fn (ptr: *const u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Loads a group of bytes starting at the given address, which must be\n aligned to `mem::align_of::<Group>()`.\n","sig":null,"attributes":[{"value":"/ Loads a group of bytes starting at the given address, which must be","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532088,"byte_end":5532159,"line_start":50,"line_end":50,"column_start":5,"column_end":76}},{"value":"/ aligned to `mem::align_of::<Group>()`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532164,"byte_end":5532206,"line_start":51,"line_end":51,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532211,"byte_end":5532220,"line_start":52,"line_end":52,"column_start":5,"column_end":14}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532225,"byte_end":5532261,"line_start":53,"line_end":53,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532697,"byte_end":5532710,"line_start":64,"line_end":64,"column_start":19,"column_end":32},"name":"store_aligned","qualname":"<Group>::store_aligned","value":"fn (self, ptr: *mut u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the group of bytes to the given address, which must be\n aligned to `mem::align_of::<Group>()`.\n","sig":null,"attributes":[{"value":"/ Stores the group of bytes to the given address, which must be","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532511,"byte_end":5532576,"line_start":60,"line_end":60,"column_start":5,"column_end":70}},{"value":"/ aligned to `mem::align_of::<Group>()`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532581,"byte_end":5532623,"line_start":61,"line_end":61,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532628,"byte_end":5532637,"line_start":62,"line_end":62,"column_start":5,"column_end":14}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532642,"byte_end":5532678,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533045,"byte_end":5533055,"line_start":73,"line_end":73,"column_start":12,"column_end":22},"name":"match_byte","qualname":"<Group>::match_byte","value":"fn (self, byte: u8) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which have\n the given value.\n","sig":null,"attributes":[{"value":"/ Returns a `BitMask` indicating all bytes in the group which have","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532926,"byte_end":5532994,"line_start":70,"line_end":70,"column_start":5,"column_end":73}},{"value":"/ the given value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5532999,"byte_end":5533019,"line_start":71,"line_end":71,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533024,"byte_end":5533033,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533702,"byte_end":5533713,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"match_empty","qualname":"<Group>::match_empty","value":"fn (self) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which are\n `EMPTY`.\n","sig":null,"attributes":[{"value":"/ Returns a `BitMask` indicating all bytes in the group which are","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533592,"byte_end":5533659,"line_start":88,"line_end":88,"column_start":5,"column_end":72}},{"value":"/ `EMPTY`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533664,"byte_end":5533676,"line_start":89,"line_end":89,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533681,"byte_end":5533690,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533898,"byte_end":5533920,"line_start":98,"line_end":98,"column_start":12,"column_end":34},"name":"match_empty_or_deleted","qualname":"<Group>::match_empty_or_deleted","value":"fn (self) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which are\n `EMPTY` or `DELETED`.\n","sig":null,"attributes":[{"value":"/ Returns a `BitMask` indicating all bytes in the group which are","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533775,"byte_end":5533842,"line_start":95,"line_end":95,"column_start":5,"column_end":72}},{"value":"/ `EMPTY` or `DELETED`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533847,"byte_end":5533872,"line_start":96,"line_end":96,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5533877,"byte_end":5533886,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534474,"byte_end":5534484,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"match_full","qualname":"<Group>::match_full","value":"fn (&self) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which are full.\n","sig":null,"attributes":[{"value":"/ Returns a `BitMask` indicating all bytes in the group which are full.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534375,"byte_end":5534448,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534453,"byte_end":5534462,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534741,"byte_end":5534785,"line_start":123,"line_end":123,"column_start":12,"column_end":56},"name":"convert_special_to_empty_and_full_to_deleted","qualname":"<Group>::convert_special_to_empty_and_full_to_deleted","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Performs the following transformation on all bytes in the group:\n - `EMPTY => EMPTY`\n - `DELETED => EMPTY`\n - `FULL => DELETED`\n","sig":null,"attributes":[{"value":"/ Performs the following transformation on all bytes in the group:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534563,"byte_end":5534631,"line_start":118,"line_end":118,"column_start":5,"column_end":73}},{"value":"/ - `EMPTY => EMPTY`","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534636,"byte_end":5534658,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/ - `DELETED => EMPTY`","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534663,"byte_end":5534687,"line_start":120,"line_end":120,"column_start":5,"column_end":29}},{"value":"/ - `FULL => DELETED`","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534692,"byte_end":5534715,"line_start":121,"line_end":121,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5534720,"byte_end":5534729,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1379},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56635,"byte_end":56642,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::raw::bitmask::BitMask","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bit mask which contains the result of a `Match` operation on a `Group` and\n allows iterating through them.","sig":null,"attributes":[{"value":"/ A bit mask which contains the result of a `Match` operation on a `Group` and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56000,"byte_end":56080,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/ allows iterating through them.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56081,"byte_end":56115,"line_start":6,"line_end":6,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56116,"byte_end":56119,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The bit mask is arranged so that low-order bits represent lower memory","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56120,"byte_end":56194,"line_start":8,"line_end":8,"column_start":1,"column_end":75}},{"value":"/ addresses for group match results.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56195,"byte_end":56233,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56234,"byte_end":56237,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ For implementation reasons, the bits in the set may be sparsely packed, so","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56238,"byte_end":56316,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ that there is only one bit-per-byte used (the high bit, 7). If this is the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56317,"byte_end":56395,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ case, `BITMASK_STRIDE` will be 8 to indicate a divide-by-8 should be","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56396,"byte_end":56468,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ performed on counts/indices to normalize this difference. `BITMASK_MASK` is","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56469,"byte_end":56548,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ similarly a mask of all the actually-used bits.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56549,"byte_end":56600,"line_start":15,"line_end":15,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56801,"byte_end":56807,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"invert","qualname":"<BitMask>::invert","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `BitMask` with all bits inverted.\n","sig":null,"attributes":[{"value":"/ Returns a new `BitMask` with all bits inverted.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56708,"byte_end":56759,"line_start":21,"line_end":21,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56764,"byte_end":56773,"line_start":22,"line_end":22,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56778,"byte_end":56789,"line_start":23,"line_end":23,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56972,"byte_end":56989,"line_start":31,"line_end":31,"column_start":12,"column_end":29},"name":"remove_lowest_bit","qualname":"<BitMask>::remove_lowest_bit","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `BitMask` with the lowest bit removed.\n","sig":null,"attributes":[{"value":"/ Returns a new `BitMask` with the lowest bit removed.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56874,"byte_end":56930,"line_start":28,"line_end":28,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56935,"byte_end":56944,"line_start":29,"line_end":29,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56949,"byte_end":56960,"line_start":30,"line_end":30,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57140,"byte_end":57151,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"any_bit_set","qualname":"<BitMask>::any_bit_set","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `BitMask` has at least one set bit.\n","sig":null,"attributes":[{"value":"/ Returns whether the `BitMask` has at least one set bit.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57055,"byte_end":57114,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57119,"byte_end":57128,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57289,"byte_end":57303,"line_start":42,"line_end":42,"column_start":12,"column_end":26},"name":"lowest_set_bit","qualname":"<BitMask>::lowest_set_bit","value":"fn (self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first set bit in the `BitMask`, if there is one.\n","sig":null,"attributes":[{"value":"/ Returns the first set bit in the `BitMask`, if there is one.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57199,"byte_end":57263,"line_start":40,"line_end":40,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57268,"byte_end":57277,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57636,"byte_end":57658,"line_start":54,"line_end":54,"column_start":19,"column_end":41},"name":"lowest_set_bit_nonzero","qualname":"<BitMask>::lowest_set_bit_nonzero","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the first set bit in the `BitMask`, if there is one. The\n bitmask must not be empty.\n","sig":null,"attributes":[{"value":"/ Returns the first set bit in the `BitMask`, if there is one. The","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57468,"byte_end":57536,"line_start":50,"line_end":50,"column_start":5,"column_end":73}},{"value":"/ bitmask must not be empty.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57541,"byte_end":57571,"line_start":51,"line_end":51,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57576,"byte_end":57585,"line_start":52,"line_end":52,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"nightly\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57590,"byte_end":57617,"line_start":53,"line_end":53,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57984,"byte_end":57998,"line_start":65,"line_end":65,"column_start":12,"column_end":26},"name":"trailing_zeros","qualname":"<BitMask>::trailing_zeros","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trailing zeroes in the `BitMask`.\n","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeroes in the `BitMask`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57899,"byte_end":57958,"line_start":63,"line_end":63,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":57963,"byte_end":57972,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":58695,"byte_end":58708,"line_start":80,"line_end":80,"column_start":12,"column_end":25},"name":"leading_zeros","qualname":"<BitMask>::leading_zeros","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading zeroes in the `BitMask`.\n","sig":null,"attributes":[{"value":"/ Returns the number of leading zeroes in the `BitMask`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":58611,"byte_end":58669,"line_start":78,"line_end":78,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":58674,"byte_end":58683,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":39},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":59068,"byte_end":59079,"line_start":97,"line_end":97,"column_start":12,"column_end":23},"name":"BitMaskIter","qualname":"::raw::bitmask::BitMaskIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Iterator over the contents of a `BitMask`, returning the indicies of set\n bits.\n","sig":null,"attributes":[{"value":"/ Iterator over the contents of a `BitMask`, returning the indicies of set","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":58970,"byte_end":59046,"line_start":95,"line_end":95,"column_start":1,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":59047,"byte_end":59056,"line_start":96,"line_end":96,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":75},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":13946,"byte_end":13952,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::raw::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":77}],"decl_id":null,"docs":" A reference to a hash table bucket containing a `T`.","sig":null,"attributes":[{"value":"/ A reference to a hash table bucket containing a `T`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":13683,"byte_end":13739,"line_start":256,"line_end":256,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":13740,"byte_end":13743,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ This is usually just a pointer to the element itself. However if the element","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":13744,"byte_end":13824,"line_start":258,"line_end":258,"column_start":1,"column_end":81}},{"value":"/ is a ZST, then we instead track the index of the element in the table so","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":13825,"byte_end":13901,"line_start":259,"line_end":259,"column_start":1,"column_end":77}},{"value":"/ that `erase` works properly.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":13902,"byte_end":13934,"line_start":260,"line_end":260,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":14677,"byte_end":14683,"line_start":288,"line_end":288,"column_start":19,"column_end":25},"name":"as_ptr","qualname":"<Bucket<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":15281,"byte_end":15285,"line_start":306,"line_end":306,"column_start":19,"column_end":23},"name":"drop","qualname":"<Bucket<T>>::drop","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":15407,"byte_end":15411,"line_start":310,"line_end":310,"column_start":19,"column_end":23},"name":"read","qualname":"<Bucket<T>>::read","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":15528,"byte_end":15533,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"name":"write","qualname":"<Bucket<T>>::write","value":"fn (&self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":15658,"byte_end":15664,"line_start":318,"line_end":318,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Bucket<T>>::as_ref","value":"fn <'a> (&self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":15784,"byte_end":15790,"line_start":322,"line_end":322,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Bucket<T>>::as_mut","value":"fn <'a> (&self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":15918,"byte_end":15942,"line_start":326,"line_end":326,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<Bucket<T>>::copy_from_nonoverlapping","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16094,"byte_end":16102,"line_start":332,"line_end":332,"column_start":12,"column_end":20},"name":"RawTable","qualname":"::raw::RawTable","value":"RawTable {  }","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"decl_id":null,"docs":" A raw hash table with an unsafe API.\n","sig":null,"attributes":[{"value":"/ A raw hash table with an unsafe API.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16042,"byte_end":16082,"line_start":331,"line_end":331,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":17045,"byte_end":17048,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"new","qualname":"<RawTable<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16675,"byte_end":16740,"line_start":354,"line_end":354,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16745,"byte_end":16748,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16753,"byte_end":16825,"line_start":356,"line_end":356,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16830,"byte_end":16903,"line_start":357,"line_end":357,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16908,"byte_end":16984,"line_start":358,"line_end":358,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":19165,"byte_end":19178,"line_start":417,"line_end":417,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawTable<T>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table with at least enough capacity for inserting\n the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table with at least enough capacity for inserting","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":19020,"byte_end":19094,"line_start":415,"line_end":415,"column_start":5,"column_end":79}},{"value":"/ the given number of elements without reallocating.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":19099,"byte_end":19153,"line_start":416,"line_end":416,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":20377,"byte_end":20383,"line_start":449,"line_end":449,"column_start":19,"column_end":25},"name":"bucket","qualname":"<RawTable<T>>::bucket","value":"fn (&self, index: usize) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to an element in the table.\n","sig":null,"attributes":[{"value":"/ Returns a pointer to an element in the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":20260,"byte_end":20309,"line_start":447,"line_end":447,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":20709,"byte_end":20722,"line_start":457,"line_end":457,"column_start":19,"column_end":32},"name":"erase_no_drop","qualname":"<RawTable<T>>::erase_no_drop","value":"fn (&mut self, item: &Bucket<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table without dropping it.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table without dropping it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":20584,"byte_end":20641,"line_start":455,"line_end":455,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":25646,"byte_end":25659,"line_start":564,"line_end":564,"column_start":12,"column_end":25},"name":"clear_no_drop","qualname":"<RawTable<T>>::clear_no_drop","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Marks all table buckets as empty without dropping their contents.\n","sig":null,"attributes":[{"value":"/ Marks all table buckets as empty without dropping their contents.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":25516,"byte_end":25585,"line_start":562,"line_end":562,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":26071,"byte_end":26076,"line_start":576,"line_end":576,"column_start":12,"column_end":17},"name":"clear","qualname":"<RawTable<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the table without freeing the backing memory.\n","sig":null,"attributes":[{"value":"/ Removes all elements from the table without freeing the backing memory.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":25935,"byte_end":26010,"line_start":574,"line_end":574,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":26541,"byte_end":26550,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<RawTable<T>>::shrink_to","value":"fn (&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the table to fit `max(self.len(), min_size)` elements.\n","sig":null,"attributes":[{"value":"/ Shrinks the table to fit `max(self.len(), min_size)` elements.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":26414,"byte_end":26480,"line_start":589,"line_end":589,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":27864,"byte_end":27871,"line_start":624,"line_end":624,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawTable<T>>::reserve","value":"fn (&mut self, additional: usize, hasher: impl Fn(&T) -> u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that at least `additional` items can be inserted into the table\n without reallocation.\n","sig":null,"attributes":[{"value":"/ Ensures that at least `additional` items can be inserted into the table","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":27698,"byte_end":27773,"line_start":621,"line_end":621,"column_start":5,"column_end":80}},{"value":"/ without reallocation.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":27778,"byte_end":27803,"line_start":622,"line_end":622,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":28326,"byte_end":28337,"line_start":634,"line_end":634,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawTable<T>>::try_reserve","value":"fn (&mut self, additional: usize, hasher: impl Fn(&T) -> u64) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to ensure that at least `additional` items can be inserted into\n the table without reallocation.\n","sig":null,"attributes":[{"value":"/ Tries to ensure that at least `additional` items can be inserted into","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":28152,"byte_end":28225,"line_start":631,"line_end":631,"column_start":5,"column_end":78}},{"value":"/ the table without reallocation.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":28230,"byte_end":28265,"line_start":632,"line_end":632,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":36665,"byte_end":36671,"line_start":832,"line_end":832,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawTable<T>>::insert","value":"fn (&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":36477,"byte_end":36518,"line_start":828,"line_end":828,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":36523,"byte_end":36526,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":36531,"byte_end":36604,"line_start":830,"line_end":830,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":37876,"byte_end":37890,"line_start":861,"line_end":861,"column_start":12,"column_end":26},"name":"insert_no_grow","qualname":"<RawTable<T>>::insert_no_grow","value":"fn (&mut self, hash: u64, value: T) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, without growing the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, without growing the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":37535,"byte_end":37603,"line_start":854,"line_end":854,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":37608,"byte_end":37611,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ There must be enough space in the table to insert the new element.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":37616,"byte_end":37686,"line_start":856,"line_end":856,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":37691,"byte_end":37694,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":37699,"byte_end":37772,"line_start":858,"line_end":858,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"rustc-internal-api\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":37826,"byte_end":37864,"line_start":860,"line_end":860,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":38496,"byte_end":38500,"line_start":880,"line_end":880,"column_start":12,"column_end":16},"name":"find","qualname":"<RawTable<T>>::find","value":"fn (&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>>","parent":null,"children":[],"decl_id":null,"docs":" Searches for an element in the table.\n","sig":null,"attributes":[{"value":"/ Searches for an element in the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":38429,"byte_end":38470,"line_start":878,"line_end":878,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":38475,"byte_end":38484,"line_start":879,"line_end":879,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39498,"byte_end":39506,"line_start":906,"line_end":906,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawTable<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39215,"byte_end":39288,"line_start":901,"line_end":901,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39293,"byte_end":39296,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the table might be able to hold","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39301,"byte_end":39366,"line_start":903,"line_end":903,"column_start":5,"column_end":70}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39371,"byte_end":39437,"line_start":904,"line_end":904,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39683,"byte_end":39686,"line_start":912,"line_end":912,"column_start":12,"column_end":15},"name":"len","qualname":"<RawTable<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39574,"byte_end":39622,"line_start":910,"line_end":910,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39843,"byte_end":39850,"line_start":918,"line_end":918,"column_start":12,"column_end":19},"name":"buckets","qualname":"<RawTable<T>>::buckets","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets in the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":39735,"byte_end":39782,"line_start":916,"line_end":916,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":40671,"byte_end":40675,"line_start":940,"line_end":940,"column_start":19,"column_end":23},"name":"iter","qualname":"<RawTable<T>>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over every element in the table. It is up to\n the caller to ensure that the `RawTable` outlives the `RawIter`.\n Because we cannot make the `next` method unsafe on the `RawIter`\n struct, we have to make the `iter` method unsafe.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over every element in the table. It is up to","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":40331,"byte_end":40399,"line_start":935,"line_end":935,"column_start":5,"column_end":73}},{"value":"/ the caller to ensure that the `RawTable` outlives the `RawIter`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":40404,"byte_end":40472,"line_start":936,"line_end":936,"column_start":5,"column_end":73}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIter`","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":40477,"byte_end":40545,"line_start":937,"line_end":937,"column_start":5,"column_end":73}},{"value":"/ struct, we have to make the `iter` method unsafe.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":40550,"byte_end":40603,"line_start":938,"line_end":938,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":41288,"byte_end":41293,"line_start":953,"line_end":953,"column_start":19,"column_end":24},"name":"drain","qualname":"<RawTable<T>>::drain","value":"fn (&mut self) -> RawDrain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory. It is up to the caller to ensure that the `RawTable`\n outlives the `RawDrain`. Because we cannot make the `next` method unsafe\n on the `RawDrain`, we have to make the `drain` method unsafe.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":40915,"byte_end":40988,"line_start":948,"line_end":948,"column_start":5,"column_end":78}},{"value":"/ freeing the memory. It is up to the caller to ensure that the `RawTable`","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":40993,"byte_end":41069,"line_start":949,"line_end":949,"column_start":5,"column_end":81}},{"value":"/ outlives the `RawDrain`. Because we cannot make the `next` method unsafe","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":41074,"byte_end":41150,"line_start":950,"line_end":950,"column_start":5,"column_end":81}},{"value":"/ on the `RawDrain`, we have to make the `drain` method unsafe.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":41155,"byte_end":41220,"line_start":951,"line_end":951,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":198},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":50903,"byte_end":50910,"line_start":1224,"line_end":1224,"column_start":12,"column_end":19},"name":"RawIter","qualname":"::raw::RawIter","value":"RawIter {  }","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" Iterator which returns a raw pointer to every full bucket in the table.\n","sig":null,"attributes":[{"value":"/ Iterator which returns a raw pointer to every full bucket in the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":50816,"byte_end":50891,"line_start":1223,"line_end":1223,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":214},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52024,"byte_end":52035,"line_start":1266,"line_end":1266,"column_start":12,"column_end":23},"name":"RawIntoIter","qualname":"::raw::RawIntoIter","value":"RawIntoIter {  }","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"decl_id":null,"docs":" Iterator which consumes a table and returns elements.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes a table and returns elements.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":51955,"byte_end":52012,"line_start":1265,"line_end":1265,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52221,"byte_end":52225,"line_start":1274,"line_end":1274,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawIntoIter<T>>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":238},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53988,"byte_end":53996,"line_start":1339,"line_end":1339,"column_start":12,"column_end":20},"name":"RawDrain","qualname":"::raw::RawDrain","value":"RawDrain {  }","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"decl_id":null,"docs":" Iterator which consumes elements without freeing the table storage.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes elements without freeing the table storage.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53905,"byte_end":53976,"line_start":1338,"line_end":1338,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54515,"byte_end":54519,"line_start":1355,"line_end":1355,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawDrain>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":287},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":59913,"byte_end":59931,"line_start":17,"line_end":17,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"DefaultHashBuilder::{}","parent":null,"children":[],"decl_id":null,"docs":" Dummy default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Dummy default hasher for `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":59833,"byte_end":59872,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"cfg(not (feature = \"ahash\"))","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":59873,"byte_end":59903,"line_start":16,"line_end":16,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1393},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66276,"byte_end":66283,"line_start":194,"line_end":194,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":59936,"byte_end":60002,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60003,"byte_end":60006,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60007,"byte_end":60079,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60080,"byte_end":60156,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60157,"byte_end":60236,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60237,"byte_end":60273,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60274,"byte_end":60277,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60278,"byte_end":60354,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60355,"byte_end":60435,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60436,"byte_end":60517,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60518,"byte_end":60521,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60522,"byte_end":60605,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60606,"byte_end":60684,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60685,"byte_end":60756,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60757,"byte_end":60776,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60777,"byte_end":60780,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60781,"byte_end":60792,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60793,"byte_end":60829,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60830,"byte_end":60837,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60838,"byte_end":60841,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60842,"byte_end":60912,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60913,"byte_end":60916,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60917,"byte_end":60994,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":60995,"byte_end":61075,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61076,"byte_end":61151,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61152,"byte_end":61230,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61231,"byte_end":61234,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61235,"byte_end":61314,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61315,"byte_end":61393,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61394,"byte_end":61474,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61475,"byte_end":61520,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61521,"byte_end":61524,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61525,"byte_end":61539,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61540,"byte_end":61543,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61544,"byte_end":61551,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61552,"byte_end":61579,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61580,"byte_end":61583,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61584,"byte_end":61652,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61653,"byte_end":61712,"line_start":57,"line_end":57,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61713,"byte_end":61755,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61756,"byte_end":61759,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61760,"byte_end":61785,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61786,"byte_end":61810,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61811,"byte_end":61864,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61865,"byte_end":61905,"line_start":63,"line_end":63,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61906,"byte_end":61912,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61913,"byte_end":61937,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61938,"byte_end":61980,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":61981,"byte_end":62016,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62017,"byte_end":62023,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62024,"byte_end":62048,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62049,"byte_end":62091,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62092,"byte_end":62130,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62131,"byte_end":62137,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62138,"byte_end":62162,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62163,"byte_end":62219,"line_start":74,"line_end":74,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62220,"byte_end":62261,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62262,"byte_end":62268,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62269,"byte_end":62272,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62273,"byte_end":62305,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62306,"byte_end":62376,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62377,"byte_end":62416,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62417,"byte_end":62471,"line_start":81,"line_end":81,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62472,"byte_end":62544,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62545,"byte_end":62582,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62583,"byte_end":62588,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62589,"byte_end":62592,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62593,"byte_end":62666,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62667,"byte_end":62728,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62729,"byte_end":62732,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62733,"byte_end":62785,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62786,"byte_end":62863,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62864,"byte_end":62891,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62892,"byte_end":62930,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62931,"byte_end":62992,"line_start":93,"line_end":93,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":62993,"byte_end":63048,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63049,"byte_end":63058,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63059,"byte_end":63064,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63065,"byte_end":63068,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63069,"byte_end":63141,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63142,"byte_end":63215,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63216,"byte_end":63219,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63220,"byte_end":63251,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63252,"byte_end":63293,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63294,"byte_end":63339,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63340,"byte_end":63345,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63346,"byte_end":63353,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63354,"byte_end":63357,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63358,"byte_end":63433,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63434,"byte_end":63514,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63515,"byte_end":63532,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63533,"byte_end":63536,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63537,"byte_end":63544,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63545,"byte_end":63572,"line_start":112,"line_end":112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63573,"byte_end":63576,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63577,"byte_end":63645,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63646,"byte_end":63699,"line_start":115,"line_end":115,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63700,"byte_end":63742,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63743,"byte_end":63746,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63747,"byte_end":63780,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63781,"byte_end":63856,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63857,"byte_end":63892,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63893,"byte_end":63903,"line_start":121,"line_end":121,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63904,"byte_end":63909,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63910,"byte_end":63913,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63914,"byte_end":63966,"line_start":124,"line_end":124,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":63967,"byte_end":64015,"line_start":125,"line_end":125,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64016,"byte_end":64019,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64020,"byte_end":64093,"line_start":127,"line_end":127,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64094,"byte_end":64122,"line_start":128,"line_end":128,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64123,"byte_end":64190,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64191,"byte_end":64194,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64195,"byte_end":64263,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64264,"byte_end":64323,"line_start":132,"line_end":132,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64324,"byte_end":64356,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64357,"byte_end":64364,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64365,"byte_end":64368,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64369,"byte_end":64462,"line_start":136,"line_end":136,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64463,"byte_end":64501,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64502,"byte_end":64505,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64506,"byte_end":64565,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64566,"byte_end":64630,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64631,"byte_end":64704,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64705,"byte_end":64776,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64777,"byte_end":64842,"line_start":143,"line_end":143,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64843,"byte_end":64875,"line_start":144,"line_end":144,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64876,"byte_end":64916,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64917,"byte_end":64983,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":64984,"byte_end":65025,"line_start":147,"line_end":147,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65026,"byte_end":65071,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65072,"byte_end":65075,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65076,"byte_end":65083,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65084,"byte_end":65111,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65112,"byte_end":65115,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65116,"byte_end":65157,"line_start":153,"line_end":153,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65158,"byte_end":65177,"line_start":154,"line_end":154,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65178,"byte_end":65199,"line_start":155,"line_end":155,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65200,"byte_end":65224,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65225,"byte_end":65230,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65231,"byte_end":65234,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65235,"byte_end":65252,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65253,"byte_end":65286,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65287,"byte_end":65340,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65341,"byte_end":65416,"line_start":162,"line_end":162,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65417,"byte_end":65426,"line_start":163,"line_end":163,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65427,"byte_end":65432,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65433,"byte_end":65436,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65437,"byte_end":65494,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65495,"byte_end":65532,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65533,"byte_end":65536,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65537,"byte_end":65592,"line_start":169,"line_end":169,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65593,"byte_end":65648,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65649,"byte_end":65706,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65707,"byte_end":65710,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65711,"byte_end":65780,"line_start":173,"line_end":173,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65781,"byte_end":65819,"line_start":174,"line_end":174,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65820,"byte_end":65871,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65872,"byte_end":65877,"line_start":176,"line_end":176,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65878,"byte_end":65885,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65886,"byte_end":65889,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65890,"byte_end":65967,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65968,"byte_end":65971,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65972,"byte_end":65979,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":65980,"byte_end":66007,"line_start":182,"line_end":182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66008,"byte_end":66011,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66012,"byte_end":66027,"line_start":184,"line_end":184,"column_start":1,"column_end":16}},{"value":"/     let timber_resources: HashMap<&str, i32> =","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66028,"byte_end":66078,"line_start":185,"line_end":185,"column_start":1,"column_end":51}},{"value":"/     [(\"Norway\", 100),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66079,"byte_end":66104,"line_start":186,"line_end":186,"column_start":1,"column_end":26}},{"value":"/      (\"Denmark\", 50),","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66105,"byte_end":66130,"line_start":187,"line_end":187,"column_start":1,"column_end":26}},{"value":"/      (\"Iceland\", 10)]","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66131,"byte_end":66156,"line_start":188,"line_end":188,"column_start":1,"column_end":26}},{"value":"/      .iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66157,"byte_end":66193,"line_start":189,"line_end":189,"column_start":1,"column_end":37}},{"value":"/     // use the values stored in map","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66194,"byte_end":66233,"line_start":190,"line_end":190,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66234,"byte_end":66239,"line_start":191,"line_end":191,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":66240,"byte_end":66247,"line_start":192,"line_end":192,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68513,"byte_end":68524,"line_start":263,"line_end":263,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67741,"byte_end":67817,"line_start":242,"line_end":242,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67822,"byte_end":67831,"line_start":243,"line_end":243,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67836,"byte_end":67839,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67844,"byte_end":67897,"line_start":245,"line_end":245,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67902,"byte_end":67905,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67910,"byte_end":67973,"line_start":247,"line_end":247,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67978,"byte_end":68043,"line_start":248,"line_end":248,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68048,"byte_end":68111,"line_start":249,"line_end":249,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68116,"byte_end":68180,"line_start":250,"line_end":250,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68185,"byte_end":68188,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68193,"byte_end":68207,"line_start":252,"line_end":252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68212,"byte_end":68215,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68220,"byte_end":68227,"line_start":254,"line_end":254,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68232,"byte_end":68259,"line_start":255,"line_end":255,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68264,"byte_end":68312,"line_start":256,"line_end":256,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68317,"byte_end":68320,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68325,"byte_end":68367,"line_start":258,"line_end":258,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68372,"byte_end":68414,"line_start":259,"line_end":259,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68419,"byte_end":68440,"line_start":260,"line_end":260,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68445,"byte_end":68452,"line_start":261,"line_end":261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69550,"byte_end":69574,"line_start":292,"line_end":292,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68650,"byte_end":68730,"line_start":270,"line_end":270,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68735,"byte_end":68756,"line_start":271,"line_end":271,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68761,"byte_end":68764,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68769,"byte_end":68843,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68848,"byte_end":68917,"line_start":274,"line_end":274,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68922,"byte_end":68925,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68930,"byte_end":68993,"line_start":276,"line_end":276,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":68998,"byte_end":69063,"line_start":277,"line_end":277,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69068,"byte_end":69131,"line_start":278,"line_end":278,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69136,"byte_end":69200,"line_start":279,"line_end":279,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69205,"byte_end":69208,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69213,"byte_end":69227,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69232,"byte_end":69235,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69240,"byte_end":69247,"line_start":283,"line_end":283,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69252,"byte_end":69279,"line_start":284,"line_end":284,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69284,"byte_end":69332,"line_start":285,"line_end":285,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69337,"byte_end":69340,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69345,"byte_end":69387,"line_start":287,"line_end":287,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69392,"byte_end":69451,"line_start":288,"line_end":288,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69456,"byte_end":69477,"line_start":289,"line_end":289,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69482,"byte_end":69489,"line_start":290,"line_end":290,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70267,"byte_end":70273,"line_start":314,"line_end":314,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69735,"byte_end":69788,"line_start":299,"line_end":299,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69793,"byte_end":69796,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69801,"byte_end":69879,"line_start":301,"line_end":301,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69884,"byte_end":69887,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69892,"byte_end":69906,"line_start":303,"line_end":303,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69911,"byte_end":69914,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69919,"byte_end":69926,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69931,"byte_end":69958,"line_start":306,"line_end":306,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":69963,"byte_end":70011,"line_start":307,"line_end":307,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70016,"byte_end":70019,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70024,"byte_end":70071,"line_start":309,"line_end":309,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70076,"byte_end":70138,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70143,"byte_end":70194,"line_start":311,"line_end":311,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70199,"byte_end":70206,"line_start":312,"line_end":312,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70817,"byte_end":70825,"line_start":331,"line_end":331,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70327,"byte_end":70400,"line_start":318,"line_end":318,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70405,"byte_end":70408,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70413,"byte_end":70488,"line_start":320,"line_end":320,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70493,"byte_end":70559,"line_start":321,"line_end":321,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70564,"byte_end":70567,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70572,"byte_end":70586,"line_start":323,"line_end":323,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70591,"byte_end":70594,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70599,"byte_end":70606,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70611,"byte_end":70638,"line_start":326,"line_end":326,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70643,"byte_end":70704,"line_start":327,"line_end":327,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70709,"byte_end":70744,"line_start":328,"line_end":328,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70749,"byte_end":70756,"line_start":329,"line_end":329,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71349,"byte_end":71353,"line_start":353,"line_end":353,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"fn (&self) -> Keys<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70885,"byte_end":70938,"line_start":335,"line_end":335,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70943,"byte_end":70984,"line_start":336,"line_end":336,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70989,"byte_end":70992,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":70997,"byte_end":71011,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71016,"byte_end":71019,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71024,"byte_end":71031,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71036,"byte_end":71063,"line_start":341,"line_end":341,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71068,"byte_end":71071,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71076,"byte_end":71109,"line_start":343,"line_end":343,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71114,"byte_end":71137,"line_start":344,"line_end":344,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71142,"byte_end":71165,"line_start":345,"line_end":345,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71170,"byte_end":71193,"line_start":346,"line_end":346,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71198,"byte_end":71201,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71206,"byte_end":71233,"line_start":348,"line_end":348,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71238,"byte_end":71266,"line_start":349,"line_end":349,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71271,"byte_end":71276,"line_start":350,"line_end":350,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71281,"byte_end":71288,"line_start":351,"line_end":351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71896,"byte_end":71902,"line_start":375,"line_end":375,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"fn (&self) -> Values<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71428,"byte_end":71483,"line_start":357,"line_end":357,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71488,"byte_end":71529,"line_start":358,"line_end":358,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71534,"byte_end":71537,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71542,"byte_end":71556,"line_start":360,"line_end":360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71561,"byte_end":71564,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71569,"byte_end":71576,"line_start":362,"line_end":362,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71581,"byte_end":71608,"line_start":363,"line_end":363,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71613,"byte_end":71616,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71621,"byte_end":71654,"line_start":365,"line_end":365,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71659,"byte_end":71682,"line_start":366,"line_end":366,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71687,"byte_end":71710,"line_start":367,"line_end":367,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71715,"byte_end":71738,"line_start":368,"line_end":368,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71743,"byte_end":71746,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71751,"byte_end":71780,"line_start":370,"line_end":370,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71785,"byte_end":71813,"line_start":371,"line_end":371,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71818,"byte_end":71823,"line_start":372,"line_end":372,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71828,"byte_end":71835,"line_start":373,"line_end":373,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72555,"byte_end":72565,"line_start":402,"line_end":402,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S>>::values_mut","value":"fn (&mut self) -> ValuesMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":71981,"byte_end":72044,"line_start":379,"line_end":379,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72049,"byte_end":72094,"line_start":380,"line_end":380,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72099,"byte_end":72102,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72107,"byte_end":72121,"line_start":382,"line_end":382,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72126,"byte_end":72129,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72134,"byte_end":72141,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72146,"byte_end":72173,"line_start":385,"line_end":385,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72178,"byte_end":72181,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72186,"byte_end":72219,"line_start":387,"line_end":387,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72224,"byte_end":72227,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72232,"byte_end":72255,"line_start":389,"line_end":389,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72260,"byte_end":72283,"line_start":390,"line_end":390,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72288,"byte_end":72311,"line_start":391,"line_end":391,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72316,"byte_end":72319,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72324,"byte_end":72357,"line_start":393,"line_end":393,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72362,"byte_end":72387,"line_start":394,"line_end":394,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72392,"byte_end":72397,"line_start":395,"line_end":395,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72402,"byte_end":72405,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72410,"byte_end":72439,"line_start":397,"line_end":397,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72444,"byte_end":72472,"line_start":398,"line_end":398,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72477,"byte_end":72482,"line_start":399,"line_end":399,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72487,"byte_end":72494,"line_start":400,"line_end":400,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73188,"byte_end":73192,"line_start":426,"line_end":426,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72679,"byte_end":72743,"line_start":408,"line_end":408,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72748,"byte_end":72798,"line_start":409,"line_end":409,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72803,"byte_end":72806,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72811,"byte_end":72825,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72830,"byte_end":72833,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72838,"byte_end":72845,"line_start":413,"line_end":413,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72850,"byte_end":72877,"line_start":414,"line_end":414,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72882,"byte_end":72885,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72890,"byte_end":72923,"line_start":416,"line_end":416,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72928,"byte_end":72951,"line_start":417,"line_end":417,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72956,"byte_end":72979,"line_start":418,"line_end":418,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":72984,"byte_end":73007,"line_start":419,"line_end":419,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73012,"byte_end":73015,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73020,"byte_end":73054,"line_start":421,"line_end":421,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73059,"byte_end":73105,"line_start":422,"line_end":422,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73110,"byte_end":73115,"line_start":423,"line_end":423,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73120,"byte_end":73127,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74092,"byte_end":74100,"line_start":460,"line_end":460,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73427,"byte_end":73491,"line_start":436,"line_end":436,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73496,"byte_end":73538,"line_start":437,"line_end":437,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73543,"byte_end":73597,"line_start":438,"line_end":438,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73602,"byte_end":73605,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73610,"byte_end":73624,"line_start":440,"line_end":440,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73629,"byte_end":73632,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73637,"byte_end":73644,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73649,"byte_end":73676,"line_start":443,"line_end":443,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73681,"byte_end":73684,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73689,"byte_end":73722,"line_start":445,"line_end":445,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73727,"byte_end":73750,"line_start":446,"line_end":446,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73755,"byte_end":73778,"line_start":447,"line_end":447,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73783,"byte_end":73806,"line_start":448,"line_end":448,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73811,"byte_end":73814,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73819,"byte_end":73843,"line_start":450,"line_end":450,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73848,"byte_end":73884,"line_start":451,"line_end":451,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73889,"byte_end":73907,"line_start":452,"line_end":452,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73912,"byte_end":73917,"line_start":453,"line_end":453,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73922,"byte_end":73925,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73930,"byte_end":73958,"line_start":455,"line_end":455,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":73963,"byte_end":74009,"line_start":456,"line_end":456,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74014,"byte_end":74019,"line_start":457,"line_end":457,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74024,"byte_end":74031,"line_start":458,"line_end":458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74817,"byte_end":74820,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74485,"byte_end":74531,"line_start":476,"line_end":476,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74536,"byte_end":74539,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74544,"byte_end":74558,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74563,"byte_end":74566,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74571,"byte_end":74578,"line_start":480,"line_end":480,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74583,"byte_end":74610,"line_start":481,"line_end":481,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74615,"byte_end":74618,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74623,"byte_end":74654,"line_start":483,"line_end":483,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74659,"byte_end":74686,"line_start":484,"line_end":484,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74691,"byte_end":74712,"line_start":485,"line_end":485,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74717,"byte_end":74744,"line_start":486,"line_end":486,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74749,"byte_end":74756,"line_start":487,"line_end":487,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75211,"byte_end":75219,"line_start":506,"line_end":506,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74875,"byte_end":74926,"line_start":493,"line_end":493,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74931,"byte_end":74934,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74939,"byte_end":74953,"line_start":495,"line_end":495,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74958,"byte_end":74961,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74966,"byte_end":74973,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":74978,"byte_end":75005,"line_start":498,"line_end":498,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75010,"byte_end":75013,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75018,"byte_end":75049,"line_start":500,"line_end":500,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75054,"byte_end":75080,"line_start":501,"line_end":501,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75085,"byte_end":75106,"line_start":502,"line_end":502,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75111,"byte_end":75138,"line_start":503,"line_end":503,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75143,"byte_end":75150,"line_start":504,"line_end":504,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75812,"byte_end":75817,"line_start":530,"line_end":530,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S>>::drain","value":"fn (&mut self) -> Drain<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75272,"byte_end":75347,"line_start":510,"line_end":510,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75352,"byte_end":75383,"line_start":511,"line_end":511,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75388,"byte_end":75391,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75396,"byte_end":75410,"line_start":513,"line_end":513,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75415,"byte_end":75418,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75423,"byte_end":75430,"line_start":515,"line_end":515,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75435,"byte_end":75462,"line_start":516,"line_end":516,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75467,"byte_end":75470,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75475,"byte_end":75506,"line_start":518,"line_end":518,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75511,"byte_end":75532,"line_start":519,"line_end":519,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75537,"byte_end":75558,"line_start":520,"line_end":520,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75563,"byte_end":75566,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75571,"byte_end":75608,"line_start":522,"line_end":522,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75613,"byte_end":75647,"line_start":523,"line_end":523,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75652,"byte_end":75690,"line_start":524,"line_end":524,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75695,"byte_end":75700,"line_start":525,"line_end":525,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75705,"byte_end":75708,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75713,"byte_end":75739,"line_start":527,"line_end":527,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":75744,"byte_end":75751,"line_start":528,"line_end":528,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76389,"byte_end":76394,"line_start":553,"line_end":553,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76022,"byte_end":76098,"line_start":539,"line_end":539,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76103,"byte_end":76117,"line_start":540,"line_end":540,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76122,"byte_end":76125,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76130,"byte_end":76144,"line_start":542,"line_end":542,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76149,"byte_end":76152,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76157,"byte_end":76164,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76169,"byte_end":76196,"line_start":545,"line_end":545,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76201,"byte_end":76204,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76209,"byte_end":76240,"line_start":547,"line_end":547,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76245,"byte_end":76266,"line_start":548,"line_end":548,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76271,"byte_end":76285,"line_start":549,"line_end":549,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76290,"byte_end":76316,"line_start":550,"line_end":550,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76321,"byte_end":76328,"line_start":551,"line_end":551,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77116,"byte_end":77123,"line_start":581,"line_end":581,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76526,"byte_end":76602,"line_start":563,"line_end":563,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76607,"byte_end":76675,"line_start":564,"line_end":564,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76680,"byte_end":76707,"line_start":565,"line_end":565,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76712,"byte_end":76715,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76720,"byte_end":76732,"line_start":567,"line_end":567,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76737,"byte_end":76740,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76745,"byte_end":76803,"line_start":569,"line_end":569,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76808,"byte_end":76811,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76816,"byte_end":76881,"line_start":571,"line_end":571,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76886,"byte_end":76889,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76894,"byte_end":76908,"line_start":573,"line_end":573,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76913,"byte_end":76916,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76921,"byte_end":76928,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76933,"byte_end":76960,"line_start":576,"line_end":576,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76965,"byte_end":77018,"line_start":577,"line_end":577,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77023,"byte_end":77043,"line_start":578,"line_end":578,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77048,"byte_end":77055,"line_start":579,"line_end":579,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77936,"byte_end":77947,"line_start":604,"line_end":604,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77302,"byte_end":77386,"line_start":587,"line_end":587,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77391,"byte_end":77470,"line_start":588,"line_end":588,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77475,"byte_end":77502,"line_start":589,"line_end":589,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77507,"byte_end":77510,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77515,"byte_end":77527,"line_start":591,"line_end":591,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77532,"byte_end":77535,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77540,"byte_end":77620,"line_start":593,"line_end":593,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77625,"byte_end":77641,"line_start":594,"line_end":594,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77646,"byte_end":77649,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77654,"byte_end":77668,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77673,"byte_end":77676,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77681,"byte_end":77688,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77693,"byte_end":77720,"line_start":599,"line_end":599,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77725,"byte_end":77780,"line_start":600,"line_end":600,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77785,"byte_end":77863,"line_start":601,"line_end":601,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":77868,"byte_end":77875,"line_start":602,"line_end":602,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78769,"byte_end":78782,"line_start":627,"line_end":627,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78163,"byte_end":78232,"line_start":610,"line_end":610,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78237,"byte_end":78302,"line_start":611,"line_end":611,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78307,"byte_end":78380,"line_start":612,"line_end":612,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78385,"byte_end":78388,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78393,"byte_end":78407,"line_start":614,"line_end":614,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78412,"byte_end":78415,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78420,"byte_end":78427,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78432,"byte_end":78459,"line_start":617,"line_end":617,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78464,"byte_end":78467,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78472,"byte_end":78537,"line_start":619,"line_end":619,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78542,"byte_end":78563,"line_start":620,"line_end":620,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78568,"byte_end":78589,"line_start":621,"line_end":621,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78594,"byte_end":78629,"line_start":622,"line_end":622,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78634,"byte_end":78658,"line_start":623,"line_end":623,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78663,"byte_end":78696,"line_start":624,"line_end":624,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78701,"byte_end":78708,"line_start":625,"line_end":625,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79790,"byte_end":79799,"line_start":656,"line_end":656,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78922,"byte_end":78990,"line_start":632,"line_end":632,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":78995,"byte_end":79073,"line_start":633,"line_end":633,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79078,"byte_end":79151,"line_start":634,"line_end":634,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79156,"byte_end":79159,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79164,"byte_end":79238,"line_start":636,"line_end":636,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79243,"byte_end":79273,"line_start":637,"line_end":637,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79278,"byte_end":79281,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79286,"byte_end":79300,"line_start":639,"line_end":639,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79305,"byte_end":79308,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79313,"byte_end":79320,"line_start":641,"line_end":641,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79325,"byte_end":79352,"line_start":642,"line_end":642,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79357,"byte_end":79360,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79365,"byte_end":79430,"line_start":644,"line_end":644,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79435,"byte_end":79456,"line_start":645,"line_end":645,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79461,"byte_end":79482,"line_start":646,"line_end":646,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79487,"byte_end":79522,"line_start":647,"line_end":647,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79527,"byte_end":79549,"line_start":648,"line_end":648,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79554,"byte_end":79588,"line_start":649,"line_end":649,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79593,"byte_end":79614,"line_start":650,"line_end":650,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79619,"byte_end":79652,"line_start":651,"line_end":651,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79657,"byte_end":79679,"line_start":652,"line_end":652,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79684,"byte_end":79717,"line_start":653,"line_end":653,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79722,"byte_end":79729,"line_start":654,"line_end":654,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80594,"byte_end":80599,"line_start":682,"line_end":682,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"fn (&mut self, key: K) -> Entry<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":79984,"byte_end":80066,"line_start":662,"line_end":662,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80071,"byte_end":80074,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80079,"byte_end":80093,"line_start":664,"line_end":664,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80098,"byte_end":80101,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80106,"byte_end":80113,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80118,"byte_end":80145,"line_start":667,"line_end":667,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80150,"byte_end":80153,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80158,"byte_end":80195,"line_start":669,"line_end":669,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80200,"byte_end":80203,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80208,"byte_end":80259,"line_start":671,"line_end":671,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80264,"byte_end":80317,"line_start":672,"line_end":672,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80322,"byte_end":80344,"line_start":673,"line_end":673,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80349,"byte_end":80354,"line_start":674,"line_end":674,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80359,"byte_end":80362,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80367,"byte_end":80400,"line_start":676,"line_end":676,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80405,"byte_end":80438,"line_start":677,"line_end":677,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80443,"byte_end":80476,"line_start":678,"line_end":678,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80481,"byte_end":80521,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":80526,"byte_end":80533,"line_start":680,"line_end":680,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81724,"byte_end":81727,"line_start":719,"line_end":719,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"fn <Q> (&self, k: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81076,"byte_end":81138,"line_start":699,"line_end":699,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81143,"byte_end":81146,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81151,"byte_end":81214,"line_start":701,"line_end":701,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81219,"byte_end":81286,"line_start":702,"line_end":702,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81291,"byte_end":81308,"line_start":703,"line_end":703,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81313,"byte_end":81316,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81321,"byte_end":81380,"line_start":705,"line_end":705,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81385,"byte_end":81449,"line_start":706,"line_end":706,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81454,"byte_end":81457,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81462,"byte_end":81476,"line_start":708,"line_end":708,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81481,"byte_end":81484,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81489,"byte_end":81496,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81501,"byte_end":81528,"line_start":711,"line_end":711,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81533,"byte_end":81536,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81541,"byte_end":81574,"line_start":713,"line_end":713,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81579,"byte_end":81602,"line_start":714,"line_end":714,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81607,"byte_end":81647,"line_start":715,"line_end":715,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81652,"byte_end":81686,"line_start":716,"line_end":716,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81691,"byte_end":81698,"line_start":717,"line_end":717,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81703,"byte_end":81712,"line_start":718,"line_end":718,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82570,"byte_end":82583,"line_start":747,"line_end":747,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"fn <Q> (&self, k: &Q) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81884,"byte_end":81949,"line_start":727,"line_end":727,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81954,"byte_end":81957,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":81962,"byte_end":82034,"line_start":729,"line_end":729,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82039,"byte_end":82106,"line_start":730,"line_end":730,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82111,"byte_end":82128,"line_start":731,"line_end":731,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82133,"byte_end":82136,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82141,"byte_end":82200,"line_start":733,"line_end":733,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82205,"byte_end":82269,"line_start":734,"line_end":734,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82274,"byte_end":82277,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82282,"byte_end":82296,"line_start":736,"line_end":736,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82301,"byte_end":82304,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82309,"byte_end":82316,"line_start":738,"line_end":738,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82321,"byte_end":82348,"line_start":739,"line_end":739,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82353,"byte_end":82356,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82361,"byte_end":82394,"line_start":741,"line_end":741,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82399,"byte_end":82422,"line_start":742,"line_end":742,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82427,"byte_end":82483,"line_start":743,"line_end":743,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82488,"byte_end":82532,"line_start":744,"line_end":744,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82537,"byte_end":82544,"line_start":745,"line_end":745,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82549,"byte_end":82558,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83659,"byte_end":83671,"line_start":781,"line_end":781,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"fn <Q> (&self, k: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":82956,"byte_end":83025,"line_start":761,"line_end":761,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83030,"byte_end":83033,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83038,"byte_end":83101,"line_start":763,"line_end":763,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83106,"byte_end":83173,"line_start":764,"line_end":764,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83178,"byte_end":83195,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83200,"byte_end":83203,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83208,"byte_end":83267,"line_start":767,"line_end":767,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83272,"byte_end":83336,"line_start":768,"line_end":768,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83341,"byte_end":83344,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83349,"byte_end":83363,"line_start":770,"line_end":770,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83368,"byte_end":83371,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83376,"byte_end":83383,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83388,"byte_end":83415,"line_start":773,"line_end":773,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83420,"byte_end":83423,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83428,"byte_end":83461,"line_start":775,"line_end":775,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83466,"byte_end":83489,"line_start":776,"line_end":776,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83494,"byte_end":83537,"line_start":777,"line_end":777,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83542,"byte_end":83586,"line_start":778,"line_end":778,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83591,"byte_end":83598,"line_start":779,"line_end":779,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84522,"byte_end":84529,"line_start":811,"line_end":811,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83806,"byte_end":83876,"line_start":789,"line_end":789,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83881,"byte_end":83884,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83889,"byte_end":83952,"line_start":791,"line_end":791,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":83957,"byte_end":84024,"line_start":792,"line_end":792,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84029,"byte_end":84046,"line_start":793,"line_end":793,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84051,"byte_end":84054,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84059,"byte_end":84118,"line_start":795,"line_end":795,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84123,"byte_end":84187,"line_start":796,"line_end":796,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84192,"byte_end":84195,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84200,"byte_end":84214,"line_start":798,"line_end":798,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84219,"byte_end":84222,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84227,"byte_end":84234,"line_start":800,"line_end":800,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84239,"byte_end":84266,"line_start":801,"line_end":801,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84271,"byte_end":84274,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84279,"byte_end":84312,"line_start":803,"line_end":803,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84317,"byte_end":84340,"line_start":804,"line_end":804,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84345,"byte_end":84383,"line_start":805,"line_end":805,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84388,"byte_end":84405,"line_start":806,"line_end":806,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84410,"byte_end":84415,"line_start":807,"line_end":807,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84420,"byte_end":84449,"line_start":808,"line_end":808,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84454,"byte_end":84461,"line_start":809,"line_end":809,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85800,"byte_end":85806,"line_start":848,"line_end":848,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"fn (&mut self, k: K, v: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84825,"byte_end":84867,"line_start":822,"line_end":822,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84872,"byte_end":84875,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84880,"byte_end":84947,"line_start":824,"line_end":824,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84952,"byte_end":84955,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":84960,"byte_end":85035,"line_start":826,"line_end":826,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85040,"byte_end":85111,"line_start":827,"line_end":827,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85116,"byte_end":85189,"line_start":828,"line_end":828,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85194,"byte_end":85222,"line_start":829,"line_end":829,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85227,"byte_end":85230,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85235,"byte_end":85315,"line_start":831,"line_end":831,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85320,"byte_end":85388,"line_start":832,"line_end":832,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85393,"byte_end":85396,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85401,"byte_end":85415,"line_start":834,"line_end":834,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85420,"byte_end":85423,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85428,"byte_end":85435,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85440,"byte_end":85467,"line_start":837,"line_end":837,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85472,"byte_end":85475,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85480,"byte_end":85513,"line_start":839,"line_end":839,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85518,"byte_end":85560,"line_start":840,"line_end":840,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85565,"byte_end":85603,"line_start":841,"line_end":841,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85608,"byte_end":85611,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85616,"byte_end":85640,"line_start":843,"line_end":843,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85645,"byte_end":85692,"line_start":844,"line_end":844,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85697,"byte_end":85727,"line_start":845,"line_end":845,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":85732,"byte_end":85739,"line_start":846,"line_end":846,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87023,"byte_end":87029,"line_start":883,"line_end":883,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"fn <Q> (&mut self, k: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86289,"byte_end":86362,"line_start":862,"line_end":862,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86367,"byte_end":86397,"line_start":863,"line_end":863,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86402,"byte_end":86405,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86410,"byte_end":86473,"line_start":865,"line_end":865,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86478,"byte_end":86545,"line_start":866,"line_end":866,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86550,"byte_end":86567,"line_start":867,"line_end":867,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86572,"byte_end":86575,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86580,"byte_end":86639,"line_start":869,"line_end":869,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86644,"byte_end":86708,"line_start":870,"line_end":870,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86713,"byte_end":86716,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86721,"byte_end":86735,"line_start":872,"line_end":872,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86740,"byte_end":86743,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86748,"byte_end":86755,"line_start":874,"line_end":874,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86760,"byte_end":86787,"line_start":875,"line_end":875,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86792,"byte_end":86795,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86800,"byte_end":86833,"line_start":877,"line_end":877,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86838,"byte_end":86861,"line_start":878,"line_end":878,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86866,"byte_end":86908,"line_start":879,"line_end":879,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86913,"byte_end":86950,"line_start":880,"line_end":880,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":86955,"byte_end":86962,"line_start":881,"line_end":881,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87971,"byte_end":87983,"line_start":914,"line_end":914,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S>>::remove_entry","value":"fn <Q> (&mut self, k: &Q) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87188,"byte_end":87261,"line_start":891,"line_end":891,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87266,"byte_end":87300,"line_start":892,"line_end":892,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87305,"byte_end":87308,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87313,"byte_end":87376,"line_start":894,"line_end":894,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87381,"byte_end":87448,"line_start":895,"line_end":895,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87453,"byte_end":87470,"line_start":896,"line_end":896,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87475,"byte_end":87478,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87483,"byte_end":87542,"line_start":898,"line_end":898,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87547,"byte_end":87611,"line_start":899,"line_end":899,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87616,"byte_end":87619,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87624,"byte_end":87638,"line_start":901,"line_end":901,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87643,"byte_end":87646,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87651,"byte_end":87658,"line_start":903,"line_end":903,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87663,"byte_end":87690,"line_start":904,"line_end":904,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87695,"byte_end":87698,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87703,"byte_end":87720,"line_start":906,"line_end":906,"column_start":5,"column_end":22}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87725,"byte_end":87758,"line_start":907,"line_end":907,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87763,"byte_end":87786,"line_start":908,"line_end":908,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87791,"byte_end":87844,"line_start":909,"line_end":909,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87849,"byte_end":87886,"line_start":910,"line_end":910,"column_start":5,"column_end":42}},{"value":"/ # }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87891,"byte_end":87898,"line_start":911,"line_end":911,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":87903,"byte_end":87910,"line_start":912,"line_end":912,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88825,"byte_end":88831,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88406,"byte_end":88463,"line_start":930,"line_end":930,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88468,"byte_end":88471,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88476,"byte_end":88563,"line_start":932,"line_end":932,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88568,"byte_end":88571,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88576,"byte_end":88590,"line_start":934,"line_end":934,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88595,"byte_end":88598,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88603,"byte_end":88610,"line_start":936,"line_end":936,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88615,"byte_end":88642,"line_start":937,"line_end":937,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88647,"byte_end":88650,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88655,"byte_end":88727,"line_start":939,"line_end":939,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88732,"byte_end":88767,"line_start":940,"line_end":940,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88772,"byte_end":88801,"line_start":941,"line_end":941,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":88806,"byte_end":88813,"line_start":942,"line_end":942,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91377,"byte_end":91390,"line_start":997,"line_end":997,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S>>::raw_entry_mut","value":"fn (&mut self) -> RawEntryBuilderMut<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89437,"byte_end":89485,"line_start":965,"line_end":965,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89490,"byte_end":89493,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89498,"byte_end":89567,"line_start":967,"line_end":967,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89572,"byte_end":89645,"line_start":968,"line_end":968,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89650,"byte_end":89720,"line_start":969,"line_end":969,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89725,"byte_end":89771,"line_start":970,"line_end":970,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89776,"byte_end":89779,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89784,"byte_end":89841,"line_start":972,"line_end":972,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89846,"byte_end":89849,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89854,"byte_end":89876,"line_start":974,"line_end":974,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89881,"byte_end":89958,"line_start":975,"line_end":975,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89963,"byte_end":90027,"line_start":976,"line_end":976,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90032,"byte_end":90092,"line_start":977,"line_end":977,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90097,"byte_end":90100,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90105,"byte_end":90182,"line_start":979,"line_end":979,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90187,"byte_end":90262,"line_start":980,"line_end":980,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90267,"byte_end":90343,"line_start":981,"line_end":981,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90348,"byte_end":90419,"line_start":982,"line_end":982,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90424,"byte_end":90427,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90432,"byte_end":90507,"line_start":984,"line_end":984,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90512,"byte_end":90591,"line_start":985,"line_end":985,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90596,"byte_end":90671,"line_start":986,"line_end":986,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90676,"byte_end":90738,"line_start":987,"line_end":987,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90743,"byte_end":90746,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90751,"byte_end":90821,"line_start":989,"line_end":989,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90826,"byte_end":90906,"line_start":990,"line_end":990,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90911,"byte_end":90983,"line_start":991,"line_end":991,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":90988,"byte_end":91064,"line_start":992,"line_end":992,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91069,"byte_end":91144,"line_start":993,"line_end":993,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91149,"byte_end":91231,"line_start":994,"line_end":994,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91236,"byte_end":91316,"line_start":995,"line_end":995,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92228,"byte_end":92237,"line_start":1017,"line_end":1017,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S>>::raw_entry","value":"fn (&self) -> RawEntryBuilder<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91491,"byte_end":91549,"line_start":1001,"line_end":1001,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91554,"byte_end":91557,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91562,"byte_end":91631,"line_start":1003,"line_end":1003,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91636,"byte_end":91709,"line_start":1004,"line_end":1004,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91714,"byte_end":91741,"line_start":1005,"line_end":1005,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91746,"byte_end":91749,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91754,"byte_end":91776,"line_start":1007,"line_end":1007,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91781,"byte_end":91803,"line_start":1008,"line_end":1008,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91808,"byte_end":91872,"line_start":1009,"line_end":1009,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91877,"byte_end":91937,"line_start":1010,"line_end":1010,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91942,"byte_end":91945,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":91950,"byte_end":92031,"line_start":1012,"line_end":1012,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92036,"byte_end":92066,"line_start":1013,"line_end":1013,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92071,"byte_end":92074,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92079,"byte_end":92167,"line_start":1015,"line_end":1015,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94005,"byte_end":94009,"line_start":1094,"line_end":1094,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93750,"byte_end":93798,"line_start":1087,"line_end":1087,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93799,"byte_end":93802,"line_start":1088,"line_end":1088,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93803,"byte_end":93878,"line_start":1089,"line_end":1089,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93879,"byte_end":93906,"line_start":1090,"line_end":1090,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93907,"byte_end":93910,"line_start":1091,"line_end":1091,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93911,"byte_end":93956,"line_start":1092,"line_end":1092,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93957,"byte_end":93993,"line_start":1093,"line_end":1093,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94829,"byte_end":94836,"line_start":1123,"line_end":1123,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94555,"byte_end":94610,"line_start":1116,"line_end":1116,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94611,"byte_end":94614,"line_start":1117,"line_end":1117,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94615,"byte_end":94694,"line_start":1118,"line_end":1118,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94695,"byte_end":94722,"line_start":1119,"line_end":1119,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94723,"byte_end":94726,"line_start":1120,"line_end":1120,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94727,"byte_end":94780,"line_start":1121,"line_end":1121,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94781,"byte_end":94817,"line_start":1122,"line_end":1122,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":407},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95846,"byte_end":95854,"line_start":1152,"line_end":1152,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":410}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95519,"byte_end":95574,"line_start":1145,"line_end":1145,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95575,"byte_end":95578,"line_start":1146,"line_end":1146,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`][`HashMap`]","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95579,"byte_end":95661,"line_start":1147,"line_end":1147,"column_start":1,"column_end":83}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95662,"byte_end":95737,"line_start":1148,"line_end":1148,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95738,"byte_end":95741,"line_start":1149,"line_end":1149,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95742,"byte_end":95797,"line_start":1150,"line_end":1150,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95798,"byte_end":95834,"line_start":1151,"line_end":1151,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96449,"byte_end":96453,"line_start":1174,"line_end":1174,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":419}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96197,"byte_end":96242,"line_start":1167,"line_end":1167,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96243,"byte_end":96246,"line_start":1168,"line_end":1168,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96247,"byte_end":96322,"line_start":1169,"line_end":1169,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96323,"byte_end":96350,"line_start":1170,"line_end":1170,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96351,"byte_end":96354,"line_start":1171,"line_end":1171,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96355,"byte_end":96400,"line_start":1172,"line_end":1172,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96401,"byte_end":96437,"line_start":1173,"line_end":1173,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":428},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97177,"byte_end":97183,"line_start":1201,"line_end":1201,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":432}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96917,"byte_end":96964,"line_start":1194,"line_end":1194,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96965,"byte_end":96968,"line_start":1195,"line_end":1195,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96969,"byte_end":97046,"line_start":1196,"line_end":1196,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97047,"byte_end":97074,"line_start":1197,"line_end":1197,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97075,"byte_end":97078,"line_start":1198,"line_end":1198,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97079,"byte_end":97128,"line_start":1199,"line_end":1199,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97129,"byte_end":97165,"line_start":1200,"line_end":1200,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97919,"byte_end":97924,"line_start":1228,"line_end":1228,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":445}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97653,"byte_end":97709,"line_start":1221,"line_end":1221,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97710,"byte_end":97713,"line_start":1222,"line_end":1222,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97714,"byte_end":97790,"line_start":1223,"line_end":1223,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97791,"byte_end":97818,"line_start":1224,"line_end":1224,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97819,"byte_end":97822,"line_start":1225,"line_end":1225,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97823,"byte_end":97870,"line_start":1226,"line_end":1226,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97871,"byte_end":97907,"line_start":1227,"line_end":1227,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98552,"byte_end":98561,"line_start":1250,"line_end":1250,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":454}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98273,"byte_end":98327,"line_start":1243,"line_end":1243,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98328,"byte_end":98331,"line_start":1244,"line_end":1244,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98332,"byte_end":98413,"line_start":1245,"line_end":1245,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98414,"byte_end":98441,"line_start":1246,"line_end":1246,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98442,"byte_end":98445,"line_start":1247,"line_end":1247,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98446,"byte_end":98503,"line_start":1248,"line_end":1248,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98504,"byte_end":98540,"line_start":1249,"line_end":1249,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":455},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98848,"byte_end":98866,"line_start":1259,"line_end":1259,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":460}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98607,"byte_end":98691,"line_start":1254,"line_end":1254,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98692,"byte_end":98695,"line_start":1255,"line_end":1255,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98696,"byte_end":98759,"line_start":1256,"line_end":1256,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98760,"byte_end":98763,"line_start":1257,"line_end":1257,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98764,"byte_end":98836,"line_start":1258,"line_end":1258,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99471,"byte_end":99479,"line_start":1276,"line_end":1276,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut<'a, K, V>)","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99444,"byte_end":99466,"line_start":1275,"line_end":1275,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":469},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99540,"byte_end":99546,"line_start":1278,"line_end":1278,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut<'a, K, V, S>)","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99516,"byte_end":99535,"line_start":1277,"line_end":1277,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":461},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99413,"byte_end":99424,"line_start":1274,"line_end":1274,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"RawEntryMut::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":469}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":98920,"byte_end":99000,"line_start":1263,"line_end":1263,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99001,"byte_end":99004,"line_start":1264,"line_end":1264,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99005,"byte_end":99052,"line_start":1265,"line_end":1265,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99053,"byte_end":99056,"line_start":1266,"line_end":1266,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99057,"byte_end":99140,"line_start":1267,"line_end":1267,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99141,"byte_end":99208,"line_start":1268,"line_end":1268,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99209,"byte_end":99212,"line_start":1269,"line_end":1269,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99213,"byte_end":99249,"line_start":1270,"line_end":1270,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99250,"byte_end":99280,"line_start":1271,"line_end":1271,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99281,"byte_end":99344,"line_start":1272,"line_end":1272,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99345,"byte_end":99403,"line_start":1273,"line_end":1273,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":472},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99735,"byte_end":99754,"line_start":1285,"line_end":1285,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99583,"byte_end":99632,"line_start":1281,"line_end":1281,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99633,"byte_end":99676,"line_start":1282,"line_end":1282,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99677,"byte_end":99680,"line_start":1283,"line_end":1283,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99681,"byte_end":99723,"line_start":1284,"line_end":1284,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":484},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100169,"byte_end":100186,"line_start":1307,"line_end":1307,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100020,"byte_end":100066,"line_start":1303,"line_end":1303,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100067,"byte_end":100110,"line_start":1304,"line_end":1304,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100111,"byte_end":100114,"line_start":1305,"line_end":1305,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100115,"byte_end":100157,"line_start":1306,"line_end":1306,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100496,"byte_end":100511,"line_start":1317,"line_end":1317,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":496}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100267,"byte_end":100351,"line_start":1312,"line_end":1312,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100352,"byte_end":100355,"line_start":1313,"line_end":1313,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100356,"byte_end":100415,"line_start":1314,"line_end":1314,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100416,"byte_end":100419,"line_start":1315,"line_end":1315,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100420,"byte_end":100484,"line_start":1316,"line_end":1316,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100795,"byte_end":100803,"line_start":1328,"line_end":1328,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"fn <Q> (self, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100643,"byte_end":100690,"line_start":1325,"line_end":1325,"column_start":5,"column_end":52}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100744,"byte_end":100783,"line_start":1327,"line_end":1327,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101206,"byte_end":101229,"line_start":1341,"line_end":1341,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101076,"byte_end":101136,"line_start":1338,"line_end":1338,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101141,"byte_end":101150,"line_start":1339,"line_end":1339,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101155,"byte_end":101194,"line_start":1340,"line_end":1340,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101641,"byte_end":101650,"line_start":1357,"line_end":1357,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101488,"byte_end":101536,"line_start":1354,"line_end":1354,"column_start":5,"column_end":53}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101590,"byte_end":101629,"line_start":1356,"line_end":1356,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":102617,"byte_end":102625,"line_start":1389,"line_end":1389,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"fn <Q> (self, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":102485,"byte_end":102512,"line_start":1386,"line_end":1386,"column_start":5,"column_end":32}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":102566,"byte_end":102605,"line_start":1388,"line_end":1388,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":103043,"byte_end":103066,"line_start":1402,"line_end":1402,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":102896,"byte_end":102938,"line_start":1399,"line_end":1399,"column_start":5,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":102992,"byte_end":103031,"line_start":1401,"line_end":1401,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":103780,"byte_end":103789,"line_start":1427,"line_end":1427,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":103647,"byte_end":103675,"line_start":1424,"line_end":1424,"column_start":5,"column_end":33}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":103729,"byte_end":103768,"line_start":1426,"line_end":1426,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104433,"byte_end":104439,"line_start":1449,"line_end":1449,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"fn (self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":103989,"byte_end":104056,"line_start":1436,"line_end":1436,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104061,"byte_end":104064,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104069,"byte_end":104083,"line_start":1438,"line_end":1438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104088,"byte_end":104091,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104096,"byte_end":104103,"line_start":1440,"line_end":1440,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104108,"byte_end":104135,"line_start":1441,"line_end":1441,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104140,"byte_end":104143,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104148,"byte_end":104201,"line_start":1443,"line_end":1443,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104206,"byte_end":104290,"line_start":1444,"line_end":1444,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104295,"byte_end":104298,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104303,"byte_end":104360,"line_start":1446,"line_end":1446,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104365,"byte_end":104372,"line_start":1447,"line_end":1447,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105416,"byte_end":105425,"line_start":1480,"line_end":1480,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"fn (self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104793,"byte_end":104875,"line_start":1463,"line_end":1463,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104880,"byte_end":104937,"line_start":1464,"line_end":1464,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104942,"byte_end":104945,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104950,"byte_end":104964,"line_start":1466,"line_end":1466,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104969,"byte_end":104972,"line_start":1467,"line_end":1467,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104977,"byte_end":104984,"line_start":1468,"line_end":1468,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":104989,"byte_end":105016,"line_start":1469,"line_end":1469,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105021,"byte_end":105024,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105029,"byte_end":105082,"line_start":1471,"line_end":1471,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105087,"byte_end":105090,"line_start":1472,"line_end":1472,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105095,"byte_end":105167,"line_start":1473,"line_end":1473,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105172,"byte_end":105208,"line_start":1474,"line_end":1474,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105213,"byte_end":105216,"line_start":1475,"line_end":1475,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105221,"byte_end":105302,"line_start":1476,"line_end":1476,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105307,"byte_end":105343,"line_start":1477,"line_end":1477,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105348,"byte_end":105355,"line_start":1478,"line_end":1478,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106329,"byte_end":106343,"line_start":1508,"line_end":1508,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"fn <F> (self, default: F) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105739,"byte_end":105832,"line_start":1491,"line_end":1491,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105837,"byte_end":105906,"line_start":1492,"line_end":1492,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105911,"byte_end":105914,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105919,"byte_end":105933,"line_start":1494,"line_end":1494,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105938,"byte_end":105941,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105946,"byte_end":105953,"line_start":1496,"line_end":1496,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105958,"byte_end":105985,"line_start":1497,"line_end":1497,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105990,"byte_end":105993,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":105998,"byte_end":106054,"line_start":1499,"line_end":1499,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106059,"byte_end":106062,"line_start":1500,"line_end":1500,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106067,"byte_end":106132,"line_start":1501,"line_end":1501,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106137,"byte_end":106178,"line_start":1502,"line_end":1502,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106183,"byte_end":106190,"line_start":1503,"line_end":1503,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106195,"byte_end":106198,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106203,"byte_end":106256,"line_start":1505,"line_end":1505,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106261,"byte_end":106268,"line_start":1506,"line_end":1506,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107439,"byte_end":107449,"line_start":1546,"line_end":1546,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106722,"byte_end":106790,"line_start":1523,"line_end":1523,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106795,"byte_end":106830,"line_start":1524,"line_end":1524,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106835,"byte_end":106838,"line_start":1525,"line_end":1525,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106843,"byte_end":106857,"line_start":1526,"line_end":1526,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106862,"byte_end":106865,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106870,"byte_end":106877,"line_start":1528,"line_end":1528,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106882,"byte_end":106909,"line_start":1529,"line_end":1529,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106914,"byte_end":106917,"line_start":1530,"line_end":1530,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106922,"byte_end":106975,"line_start":1531,"line_end":1531,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106980,"byte_end":106983,"line_start":1532,"line_end":1532,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":106988,"byte_end":107011,"line_start":1533,"line_end":1533,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107016,"byte_end":107045,"line_start":1534,"line_end":1534,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107050,"byte_end":107089,"line_start":1535,"line_end":1535,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107094,"byte_end":107129,"line_start":1536,"line_end":1536,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107134,"byte_end":107171,"line_start":1537,"line_end":1537,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107176,"byte_end":107179,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107184,"byte_end":107207,"line_start":1539,"line_end":1539,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107212,"byte_end":107241,"line_start":1540,"line_end":1540,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107246,"byte_end":107285,"line_start":1541,"line_end":1541,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107290,"byte_end":107324,"line_start":1542,"line_end":1542,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107329,"byte_end":107366,"line_start":1543,"line_end":1543,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107371,"byte_end":107378,"line_start":1544,"line_end":1544,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108025,"byte_end":108028,"line_start":1566,"line_end":1566,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107919,"byte_end":107964,"line_start":1564,"line_end":1564,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108210,"byte_end":108217,"line_start":1572,"line_end":1572,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"fn (&mut self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108096,"byte_end":108149,"line_start":1570,"line_end":1570,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108478,"byte_end":108486,"line_start":1579,"line_end":1579,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"fn (self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108297,"byte_end":108368,"line_start":1576,"line_end":1576,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108373,"byte_end":108417,"line_start":1577,"line_end":1577,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108672,"byte_end":108675,"line_start":1585,"line_end":1585,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108564,"byte_end":108611,"line_start":1583,"line_end":1583,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108934,"byte_end":108942,"line_start":1592,"line_end":1592,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108743,"byte_end":108824,"line_start":1589,"line_end":1589,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":108829,"byte_end":108873,"line_start":1590,"line_end":1590,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109136,"byte_end":109143,"line_start":1598,"line_end":1598,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109020,"byte_end":109075,"line_start":1596,"line_end":1596,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109339,"byte_end":109352,"line_start":1604,"line_end":1604,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"fn (&mut self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109223,"byte_end":109278,"line_start":1602,"line_end":1602,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109625,"byte_end":109642,"line_start":1613,"line_end":1613,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"fn (&mut self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109501,"byte_end":109564,"line_start":1611,"line_end":1611,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110010,"byte_end":110024,"line_start":1623,"line_end":1623,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"fn (self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109811,"byte_end":109900,"line_start":1620,"line_end":1620,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":109905,"byte_end":109949,"line_start":1621,"line_end":1621,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110322,"byte_end":110328,"line_start":1632,"line_end":1632,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110194,"byte_end":110261,"line_start":1630,"line_end":1630,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110540,"byte_end":110550,"line_start":1638,"line_end":1638,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"fn (&mut self, key: K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110412,"byte_end":110479,"line_start":1636,"line_end":1636,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110744,"byte_end":110750,"line_start":1644,"line_end":1644,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110630,"byte_end":110683,"line_start":1642,"line_end":1642,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110923,"byte_end":110935,"line_start":1650,"line_end":1650,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":110805,"byte_end":110862,"line_start":1648,"line_end":1648,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111291,"byte_end":111297,"line_start":1662,"line_end":1662,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"fn (self, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111124,"byte_end":111183,"line_start":1659,"line_end":1659,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111188,"byte_end":111230,"line_start":1660,"line_end":1660,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111776,"byte_end":111797,"line_start":1676,"line_end":1676,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"fn (self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111570,"byte_end":111629,"line_start":1672,"line_end":1672,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111634,"byte_end":111676,"line_start":1673,"line_end":1673,"column_start":5,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111730,"byte_end":111764,"line_start":1675,"line_end":1675,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":112176,"byte_end":112194,"line_start":1687,"line_end":1687,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"fn <H> (self, hash: u64, key: K, value: V, hasher: H) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":112055,"byte_end":112115,"line_start":1685,"line_end":1685,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":605},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114602,"byte_end":114610,"line_start":1769,"line_end":1769,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V, S>)","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114575,"byte_end":114597,"line_start":1768,"line_end":1768,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":608},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114669,"byte_end":114675,"line_start":1772,"line_end":1772,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V, S>)","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114645,"byte_end":114664,"line_start":1771,"line_end":1771,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":600},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114550,"byte_end":114555,"line_start":1767,"line_end":1767,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":608}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114294,"byte_end":114374,"line_start":1761,"line_end":1761,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114375,"byte_end":114378,"line_start":1762,"line_end":1762,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114379,"byte_end":114451,"line_start":1763,"line_end":1763,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114452,"byte_end":114455,"line_start":1764,"line_end":1764,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114456,"byte_end":114492,"line_start":1765,"line_end":1765,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114493,"byte_end":114540,"line_start":1766,"line_end":1766,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":616},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115161,"byte_end":115174,"line_start":1788,"line_end":1788,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115027,"byte_end":115076,"line_start":1784,"line_end":1784,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115077,"byte_end":115114,"line_start":1785,"line_end":1785,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115115,"byte_end":115118,"line_start":1786,"line_end":1786,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115119,"byte_end":115149,"line_start":1787,"line_end":1787,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":637},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115899,"byte_end":115910,"line_start":1822,"line_end":1822,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115768,"byte_end":115814,"line_start":1818,"line_end":1818,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115815,"byte_end":115852,"line_start":1819,"line_end":1819,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115853,"byte_end":115856,"line_start":1820,"line_end":1820,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115857,"byte_end":115887,"line_start":1821,"line_end":1821,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122859,"byte_end":122865,"line_start":2080,"line_end":2080,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"fn (self, value: V) -> OccupiedEntry<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122467,"byte_end":122529,"line_start":2067,"line_end":2067,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122534,"byte_end":122537,"line_start":2068,"line_end":2068,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122542,"byte_end":122556,"line_start":2069,"line_end":2069,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122561,"byte_end":122564,"line_start":2070,"line_end":2070,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122569,"byte_end":122576,"line_start":2071,"line_end":2071,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122581,"byte_end":122608,"line_start":2072,"line_end":2072,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122613,"byte_end":122616,"line_start":2073,"line_end":2073,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122621,"byte_end":122674,"line_start":2074,"line_end":2074,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122679,"byte_end":122730,"line_start":2075,"line_end":2075,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122735,"byte_end":122738,"line_start":2076,"line_end":2076,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122743,"byte_end":122786,"line_start":2077,"line_end":2077,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122791,"byte_end":122798,"line_start":2078,"line_end":2078,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123741,"byte_end":123750,"line_start":2111,"line_end":2111,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123191,"byte_end":123273,"line_start":2094,"line_end":2094,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123278,"byte_end":123328,"line_start":2095,"line_end":2095,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123333,"byte_end":123336,"line_start":2096,"line_end":2096,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123341,"byte_end":123355,"line_start":2097,"line_end":2097,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123360,"byte_end":123363,"line_start":2098,"line_end":2098,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123368,"byte_end":123375,"line_start":2099,"line_end":2099,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123380,"byte_end":123407,"line_start":2100,"line_end":2100,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123412,"byte_end":123415,"line_start":2101,"line_end":2101,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123420,"byte_end":123473,"line_start":2102,"line_end":2102,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123478,"byte_end":123481,"line_start":2103,"line_end":2103,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123486,"byte_end":123526,"line_start":2104,"line_end":2104,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123531,"byte_end":123567,"line_start":2105,"line_end":2105,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123572,"byte_end":123575,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123580,"byte_end":123627,"line_start":2107,"line_end":2107,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123632,"byte_end":123668,"line_start":2108,"line_end":2108,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123673,"byte_end":123680,"line_start":2109,"line_end":2109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124540,"byte_end":124554,"line_start":2138,"line_end":2138,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":123996,"byte_end":124089,"line_start":2122,"line_end":2122,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124094,"byte_end":124156,"line_start":2123,"line_end":2123,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124161,"byte_end":124164,"line_start":2124,"line_end":2124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124169,"byte_end":124183,"line_start":2125,"line_end":2125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124188,"byte_end":124191,"line_start":2126,"line_end":2126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124196,"byte_end":124203,"line_start":2127,"line_end":2127,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124208,"byte_end":124235,"line_start":2128,"line_end":2128,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124240,"byte_end":124243,"line_start":2129,"line_end":2129,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124248,"byte_end":124304,"line_start":2130,"line_end":2130,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124309,"byte_end":124340,"line_start":2131,"line_end":2131,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124345,"byte_end":124348,"line_start":2132,"line_end":2132,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124353,"byte_end":124401,"line_start":2133,"line_end":2133,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124406,"byte_end":124409,"line_start":2134,"line_end":2134,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124414,"byte_end":124467,"line_start":2135,"line_end":2135,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124472,"byte_end":124479,"line_start":2136,"line_end":2136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125146,"byte_end":125149,"line_start":2160,"line_end":2160,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124820,"byte_end":124864,"line_start":2149,"line_end":2149,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124869,"byte_end":124872,"line_start":2150,"line_end":2150,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124877,"byte_end":124891,"line_start":2151,"line_end":2151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124896,"byte_end":124899,"line_start":2152,"line_end":2152,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124904,"byte_end":124911,"line_start":2153,"line_end":2153,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124916,"byte_end":124943,"line_start":2154,"line_end":2154,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124948,"byte_end":124951,"line_start":2155,"line_end":2155,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":124956,"byte_end":125009,"line_start":2156,"line_end":2156,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125014,"byte_end":125073,"line_start":2157,"line_end":2157,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125078,"byte_end":125085,"line_start":2158,"line_end":2158,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125938,"byte_end":125948,"line_start":2188,"line_end":2188,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125316,"byte_end":125384,"line_start":2167,"line_end":2167,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125389,"byte_end":125424,"line_start":2168,"line_end":2168,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125429,"byte_end":125432,"line_start":2169,"line_end":2169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125437,"byte_end":125451,"line_start":2170,"line_end":2170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125456,"byte_end":125459,"line_start":2171,"line_end":2171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125464,"byte_end":125471,"line_start":2172,"line_end":2172,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125476,"byte_end":125503,"line_start":2173,"line_end":2173,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125508,"byte_end":125511,"line_start":2174,"line_end":2174,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125516,"byte_end":125569,"line_start":2175,"line_end":2175,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125574,"byte_end":125577,"line_start":2176,"line_end":2176,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125582,"byte_end":125608,"line_start":2177,"line_end":2177,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125613,"byte_end":125648,"line_start":2178,"line_end":2178,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125653,"byte_end":125675,"line_start":2179,"line_end":2179,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125680,"byte_end":125717,"line_start":2180,"line_end":2180,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125722,"byte_end":125725,"line_start":2181,"line_end":2181,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125730,"byte_end":125756,"line_start":2182,"line_end":2182,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125761,"byte_end":125796,"line_start":2183,"line_end":2183,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125801,"byte_end":125823,"line_start":2184,"line_end":2184,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125828,"byte_end":125865,"line_start":2185,"line_end":2185,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":125870,"byte_end":125877,"line_start":2186,"line_end":2186,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126798,"byte_end":126808,"line_start":2219,"line_end":2219,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126298,"byte_end":126374,"line_start":2203,"line_end":2203,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126379,"byte_end":126441,"line_start":2204,"line_end":2204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126446,"byte_end":126449,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126454,"byte_end":126468,"line_start":2206,"line_end":2206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126473,"byte_end":126476,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126481,"byte_end":126488,"line_start":2208,"line_end":2208,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126493,"byte_end":126510,"line_start":2209,"line_end":2209,"column_start":5,"column_end":22}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126515,"byte_end":126542,"line_start":2210,"line_end":2210,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126547,"byte_end":126550,"line_start":2211,"line_end":2211,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126555,"byte_end":126616,"line_start":2212,"line_end":2212,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126621,"byte_end":126661,"line_start":2213,"line_end":2213,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126666,"byte_end":126669,"line_start":2214,"line_end":2214,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126674,"byte_end":126713,"line_start":2215,"line_end":2215,"column_start":5,"column_end":44}},{"value":"/ # }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126718,"byte_end":126725,"line_start":2216,"line_end":2216,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126730,"byte_end":126737,"line_start":2217,"line_end":2217,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127475,"byte_end":127478,"line_start":2244,"line_end":2244,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127102,"byte_end":127147,"line_start":2232,"line_end":2232,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127152,"byte_end":127155,"line_start":2233,"line_end":2233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127160,"byte_end":127174,"line_start":2234,"line_end":2234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127179,"byte_end":127182,"line_start":2235,"line_end":2235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127187,"byte_end":127194,"line_start":2236,"line_end":2236,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127199,"byte_end":127226,"line_start":2237,"line_end":2237,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127231,"byte_end":127234,"line_start":2238,"line_end":2238,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127239,"byte_end":127292,"line_start":2239,"line_end":2239,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127297,"byte_end":127338,"line_start":2240,"line_end":2240,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127343,"byte_end":127402,"line_start":2241,"line_end":2241,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127407,"byte_end":127414,"line_start":2242,"line_end":2242,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128131,"byte_end":128143,"line_start":2267,"line_end":2267,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127546,"byte_end":127603,"line_start":2248,"line_end":2248,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127608,"byte_end":127611,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127616,"byte_end":127630,"line_start":2250,"line_end":2250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127635,"byte_end":127638,"line_start":2251,"line_end":2251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127643,"byte_end":127650,"line_start":2252,"line_end":2252,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127655,"byte_end":127682,"line_start":2253,"line_end":2253,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127687,"byte_end":127722,"line_start":2254,"line_end":2254,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127727,"byte_end":127730,"line_start":2255,"line_end":2255,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127735,"byte_end":127788,"line_start":2256,"line_end":2256,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127793,"byte_end":127834,"line_start":2257,"line_end":2257,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127839,"byte_end":127842,"line_start":2258,"line_end":2258,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127847,"byte_end":127903,"line_start":2259,"line_end":2259,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127908,"byte_end":127952,"line_start":2260,"line_end":2260,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127957,"byte_end":127982,"line_start":2261,"line_end":2261,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127987,"byte_end":127992,"line_start":2262,"line_end":2262,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127997,"byte_end":128000,"line_start":2263,"line_end":2263,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128005,"byte_end":128058,"line_start":2264,"line_end":2264,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128063,"byte_end":128070,"line_start":2265,"line_end":2265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128753,"byte_end":128756,"line_start":2290,"line_end":2290,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128285,"byte_end":128332,"line_start":2274,"line_end":2274,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128337,"byte_end":128340,"line_start":2275,"line_end":2275,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128345,"byte_end":128359,"line_start":2276,"line_end":2276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128364,"byte_end":128367,"line_start":2277,"line_end":2277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128372,"byte_end":128379,"line_start":2278,"line_end":2278,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128384,"byte_end":128411,"line_start":2279,"line_end":2279,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128416,"byte_end":128451,"line_start":2280,"line_end":2280,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128456,"byte_end":128459,"line_start":2281,"line_end":2281,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128464,"byte_end":128517,"line_start":2282,"line_end":2282,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128522,"byte_end":128563,"line_start":2283,"line_end":2283,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128568,"byte_end":128571,"line_start":2284,"line_end":2284,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128576,"byte_end":128632,"line_start":2285,"line_end":2285,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128637,"byte_end":128670,"line_start":2286,"line_end":2286,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128675,"byte_end":128680,"line_start":2287,"line_end":2287,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128685,"byte_end":128692,"line_start":2288,"line_end":2288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129716,"byte_end":129723,"line_start":2322,"line_end":2322,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128824,"byte_end":128879,"line_start":2294,"line_end":2294,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128884,"byte_end":128887,"line_start":2295,"line_end":2295,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128892,"byte_end":128964,"line_start":2296,"line_end":2296,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":128969,"byte_end":129024,"line_start":2297,"line_end":2297,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129029,"byte_end":129032,"line_start":2298,"line_end":2298,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129037,"byte_end":129071,"line_start":2299,"line_end":2299,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129076,"byte_end":129079,"line_start":2300,"line_end":2300,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129084,"byte_end":129098,"line_start":2301,"line_end":2301,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129103,"byte_end":129106,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129111,"byte_end":129118,"line_start":2303,"line_end":2303,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129123,"byte_end":129150,"line_start":2304,"line_end":2304,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129155,"byte_end":129190,"line_start":2305,"line_end":2305,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129195,"byte_end":129198,"line_start":2306,"line_end":2306,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129203,"byte_end":129256,"line_start":2307,"line_end":2307,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129261,"byte_end":129302,"line_start":2308,"line_end":2308,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129307,"byte_end":129310,"line_start":2309,"line_end":2309,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129315,"byte_end":129352,"line_start":2310,"line_end":2310,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129357,"byte_end":129417,"line_start":2311,"line_end":2311,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129422,"byte_end":129449,"line_start":2312,"line_end":2312,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129454,"byte_end":129487,"line_start":2313,"line_end":2313,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129492,"byte_end":129495,"line_start":2314,"line_end":2314,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129500,"byte_end":129552,"line_start":2315,"line_end":2315,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129557,"byte_end":129583,"line_start":2316,"line_end":2316,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129588,"byte_end":129593,"line_start":2317,"line_end":2317,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129598,"byte_end":129601,"line_start":2318,"line_end":2318,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129606,"byte_end":129643,"line_start":2319,"line_end":2319,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129648,"byte_end":129655,"line_start":2320,"line_end":2320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130575,"byte_end":130583,"line_start":2350,"line_end":2350,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129803,"byte_end":129884,"line_start":2326,"line_end":2326,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129889,"byte_end":129933,"line_start":2327,"line_end":2327,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129938,"byte_end":129941,"line_start":2328,"line_end":2328,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":129946,"byte_end":130022,"line_start":2329,"line_end":2329,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130027,"byte_end":130030,"line_start":2330,"line_end":2330,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130035,"byte_end":130067,"line_start":2331,"line_end":2331,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130072,"byte_end":130075,"line_start":2332,"line_end":2332,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130080,"byte_end":130094,"line_start":2333,"line_end":2333,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130099,"byte_end":130102,"line_start":2334,"line_end":2334,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130107,"byte_end":130114,"line_start":2335,"line_end":2335,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130119,"byte_end":130146,"line_start":2336,"line_end":2336,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130151,"byte_end":130186,"line_start":2337,"line_end":2337,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130191,"byte_end":130194,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130199,"byte_end":130252,"line_start":2339,"line_end":2339,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130257,"byte_end":130298,"line_start":2340,"line_end":2340,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130303,"byte_end":130306,"line_start":2341,"line_end":2341,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130311,"byte_end":130348,"line_start":2342,"line_end":2342,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130353,"byte_end":130409,"line_start":2343,"line_end":2343,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130414,"byte_end":130442,"line_start":2344,"line_end":2344,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130447,"byte_end":130452,"line_start":2345,"line_end":2345,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130457,"byte_end":130460,"line_start":2346,"line_end":2346,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130465,"byte_end":130502,"line_start":2347,"line_end":2347,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130507,"byte_end":130514,"line_start":2348,"line_end":2348,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131207,"byte_end":131213,"line_start":2372,"line_end":2372,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, mut value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130661,"byte_end":130728,"line_start":2354,"line_end":2354,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130733,"byte_end":130736,"line_start":2355,"line_end":2355,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130741,"byte_end":130755,"line_start":2356,"line_end":2356,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130760,"byte_end":130763,"line_start":2357,"line_end":2357,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130768,"byte_end":130775,"line_start":2358,"line_end":2358,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130780,"byte_end":130807,"line_start":2359,"line_end":2359,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130812,"byte_end":130847,"line_start":2360,"line_end":2360,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130852,"byte_end":130855,"line_start":2361,"line_end":2361,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130860,"byte_end":130913,"line_start":2362,"line_end":2362,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130918,"byte_end":130959,"line_start":2363,"line_end":2363,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130964,"byte_end":130967,"line_start":2364,"line_end":2364,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":130972,"byte_end":131032,"line_start":2365,"line_end":2365,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131037,"byte_end":131074,"line_start":2366,"line_end":2366,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131079,"byte_end":131084,"line_start":2367,"line_end":2367,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131089,"byte_end":131092,"line_start":2368,"line_end":2368,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131097,"byte_end":131134,"line_start":2369,"line_end":2369,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131139,"byte_end":131146,"line_start":2370,"line_end":2370,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131895,"byte_end":131901,"line_start":2396,"line_end":2396,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131353,"byte_end":131406,"line_start":2378,"line_end":2378,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131411,"byte_end":131414,"line_start":2379,"line_end":2379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131419,"byte_end":131433,"line_start":2380,"line_end":2380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131438,"byte_end":131441,"line_start":2381,"line_end":2381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131446,"byte_end":131453,"line_start":2382,"line_end":2382,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131458,"byte_end":131485,"line_start":2383,"line_end":2383,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131490,"byte_end":131525,"line_start":2384,"line_end":2384,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131530,"byte_end":131533,"line_start":2385,"line_end":2385,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131538,"byte_end":131591,"line_start":2386,"line_end":2386,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131596,"byte_end":131637,"line_start":2387,"line_end":2387,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131642,"byte_end":131645,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131650,"byte_end":131706,"line_start":2389,"line_end":2389,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131711,"byte_end":131746,"line_start":2390,"line_end":2390,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131751,"byte_end":131756,"line_start":2391,"line_end":2391,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131761,"byte_end":131764,"line_start":2392,"line_end":2392,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131769,"byte_end":131822,"line_start":2393,"line_end":2393,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131827,"byte_end":131834,"line_start":2394,"line_end":2394,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132721,"byte_end":132734,"line_start":2421,"line_end":2421,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"fn (self, value: V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":131956,"byte_end":132048,"line_start":2400,"line_end":2400,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132053,"byte_end":132091,"line_start":2401,"line_end":2401,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132096,"byte_end":132099,"line_start":2402,"line_end":2402,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132104,"byte_end":132118,"line_start":2403,"line_end":2403,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132123,"byte_end":132126,"line_start":2404,"line_end":2404,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132131,"byte_end":132138,"line_start":2405,"line_end":2405,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132143,"byte_end":132189,"line_start":2406,"line_end":2406,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132194,"byte_end":132214,"line_start":2407,"line_end":2407,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132219,"byte_end":132222,"line_start":2408,"line_end":2408,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132227,"byte_end":132286,"line_start":2409,"line_end":2409,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132291,"byte_end":132346,"line_start":2410,"line_end":2410,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132351,"byte_end":132354,"line_start":2411,"line_end":2411,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132359,"byte_end":132411,"line_start":2412,"line_end":2412,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132416,"byte_end":132419,"line_start":2413,"line_end":2413,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132424,"byte_end":132479,"line_start":2414,"line_end":2414,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132484,"byte_end":132547,"line_start":2415,"line_end":2415,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132552,"byte_end":132630,"line_start":2416,"line_end":2416,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132635,"byte_end":132640,"line_start":2417,"line_end":2417,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132645,"byte_end":132648,"line_start":2418,"line_end":2418,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132653,"byte_end":132660,"line_start":2419,"line_end":2419,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133895,"byte_end":133906,"line_start":2455,"line_end":2455,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":132984,"byte_end":133060,"line_start":2430,"line_end":2430,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133065,"byte_end":133068,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133073,"byte_end":133087,"line_start":2432,"line_end":2432,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133092,"byte_end":133095,"line_start":2433,"line_end":2433,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133100,"byte_end":133107,"line_start":2434,"line_end":2434,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133112,"byte_end":133158,"line_start":2435,"line_end":2435,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133163,"byte_end":133183,"line_start":2436,"line_end":2436,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133188,"byte_end":133191,"line_start":2437,"line_end":2437,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133196,"byte_end":133255,"line_start":2438,"line_end":2438,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133260,"byte_end":133316,"line_start":2439,"line_end":2439,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133321,"byte_end":133324,"line_start":2440,"line_end":2440,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133329,"byte_end":133379,"line_start":2441,"line_end":2441,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133384,"byte_end":133387,"line_start":2442,"line_end":2442,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133392,"byte_end":133437,"line_start":2443,"line_end":2443,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133442,"byte_end":133445,"line_start":2444,"line_end":2444,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133450,"byte_end":133540,"line_start":2445,"line_end":2445,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133545,"byte_end":133577,"line_start":2446,"line_end":2446,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133582,"byte_end":133648,"line_start":2447,"line_end":2447,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133653,"byte_end":133739,"line_start":2448,"line_end":2448,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133744,"byte_end":133780,"line_start":2449,"line_end":2449,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133785,"byte_end":133798,"line_start":2450,"line_end":2450,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133803,"byte_end":133812,"line_start":2451,"line_end":2451,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133817,"byte_end":133822,"line_start":2452,"line_end":2452,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":133827,"byte_end":133834,"line_start":2453,"line_end":2453,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134473,"byte_end":134476,"line_start":2474,"line_end":2474,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134083,"byte_end":134156,"line_start":2462,"line_end":2462,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134161,"byte_end":134191,"line_start":2463,"line_end":2463,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134196,"byte_end":134199,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134204,"byte_end":134218,"line_start":2465,"line_end":2465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134223,"byte_end":134226,"line_start":2466,"line_end":2466,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134231,"byte_end":134238,"line_start":2467,"line_end":2467,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134243,"byte_end":134270,"line_start":2468,"line_end":2468,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134275,"byte_end":134278,"line_start":2469,"line_end":2469,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134283,"byte_end":134336,"line_start":2470,"line_end":2470,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134341,"byte_end":134400,"line_start":2471,"line_end":2471,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134405,"byte_end":134412,"line_start":2472,"line_end":2472,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134912,"byte_end":134920,"line_start":2493,"line_end":2493,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134521,"byte_end":134551,"line_start":2478,"line_end":2478,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134556,"byte_end":134559,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134564,"byte_end":134578,"line_start":2480,"line_end":2480,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134583,"byte_end":134586,"line_start":2481,"line_end":2481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134591,"byte_end":134598,"line_start":2482,"line_end":2482,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134603,"byte_end":134630,"line_start":2483,"line_end":2483,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134635,"byte_end":134670,"line_start":2484,"line_end":2484,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134675,"byte_end":134678,"line_start":2485,"line_end":2485,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134683,"byte_end":134736,"line_start":2486,"line_end":2486,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134741,"byte_end":134744,"line_start":2487,"line_end":2487,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134749,"byte_end":134803,"line_start":2488,"line_end":2488,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134808,"byte_end":134829,"line_start":2489,"line_end":2489,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134834,"byte_end":134839,"line_start":2490,"line_end":2490,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134844,"byte_end":134851,"line_start":2491,"line_end":2491,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135471,"byte_end":135477,"line_start":2514,"line_end":2514,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134962,"byte_end":135021,"line_start":2497,"line_end":2497,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135026,"byte_end":135068,"line_start":2498,"line_end":2498,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135073,"byte_end":135076,"line_start":2499,"line_end":2499,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135081,"byte_end":135095,"line_start":2500,"line_end":2500,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135100,"byte_end":135103,"line_start":2501,"line_end":2501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135108,"byte_end":135115,"line_start":2502,"line_end":2502,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135120,"byte_end":135147,"line_start":2503,"line_end":2503,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135152,"byte_end":135187,"line_start":2504,"line_end":2504,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135192,"byte_end":135195,"line_start":2505,"line_end":2505,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135200,"byte_end":135253,"line_start":2506,"line_end":2506,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135258,"byte_end":135261,"line_start":2507,"line_end":2507,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135266,"byte_end":135320,"line_start":2508,"line_end":2508,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135325,"byte_end":135346,"line_start":2509,"line_end":2509,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135351,"byte_end":135356,"line_start":2510,"line_end":2510,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135361,"byte_end":135398,"line_start":2511,"line_end":2511,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":135403,"byte_end":135410,"line_start":2512,"line_end":2512,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168981,"byte_end":168992,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"rustc_entry","qualname":"<HashMap<K, V, S>>::rustc_entry","value":"fn (&mut self, key: K) -> RustcEntry<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168365,"byte_end":168447,"line_start":13,"line_end":13,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168452,"byte_end":168455,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168460,"byte_end":168474,"line_start":15,"line_end":15,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168479,"byte_end":168482,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168487,"byte_end":168494,"line_start":17,"line_end":17,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168499,"byte_end":168526,"line_start":18,"line_end":18,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168531,"byte_end":168534,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168539,"byte_end":168576,"line_start":20,"line_end":20,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168581,"byte_end":168584,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168589,"byte_end":168640,"line_start":22,"line_end":22,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.rustc_entry(ch).or_insert(0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168645,"byte_end":168704,"line_start":23,"line_end":23,"column_start":5,"column_end":64}},{"value":"/     *counter += 1;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168709,"byte_end":168731,"line_start":24,"line_end":24,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168736,"byte_end":168741,"line_start":25,"line_end":25,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168746,"byte_end":168749,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168754,"byte_end":168787,"line_start":27,"line_end":27,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168792,"byte_end":168825,"line_start":28,"line_end":28,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168830,"byte_end":168863,"line_start":29,"line_end":29,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168868,"byte_end":168908,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168913,"byte_end":168920,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":914},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170057,"byte_end":170065,"line_start":64,"line_end":64,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::rustc_entry::RustcEntry::Occupied","value":"RustcEntry::Occupied(RustcOccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":910},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170030,"byte_end":170052,"line_start":63,"line_end":63,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":917},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170126,"byte_end":170132,"line_start":67,"line_end":67,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::rustc_entry::RustcEntry::Vacant","value":"RustcEntry::Vacant(RustcVacantEntry<'a, K, V>)","parent":{"krate":0,"index":910},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170102,"byte_end":170121,"line_start":66,"line_end":66,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":910},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170003,"byte_end":170013,"line_start":62,"line_end":62,"column_start":10,"column_end":20},"name":"RustcEntry","qualname":"::rustc_entry::RustcEntry","value":"RustcEntry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":917}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":169741,"byte_end":169821,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":169822,"byte_end":169825,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":169826,"byte_end":169898,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":169899,"byte_end":169902,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":169903,"byte_end":169939,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.rustc_entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":169940,"byte_end":169993,"line_start":61,"line_end":61,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":924},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170620,"byte_end":170638,"line_start":83,"line_end":83,"column_start":12,"column_end":30},"name":"RustcOccupiedEntry","qualname":"::rustc_entry::RustcOccupiedEntry","value":"RustcOccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RustcEntry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170471,"byte_end":170520,"line_start":79,"line_end":79,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RustcEntry`] enum.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170521,"byte_end":170563,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170564,"byte_end":170567,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`RustcEntry`]: enum.RustcEntry.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170568,"byte_end":170608,"line_start":82,"line_end":82,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171346,"byte_end":171362,"line_start":115,"line_end":115,"column_start":12,"column_end":28},"name":"RustcVacantEntry","qualname":"::rustc_entry::RustcVacantEntry","value":"RustcVacantEntry {  }","parent":null,"children":[{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RustcEntry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171200,"byte_end":171246,"line_start":111,"line_end":111,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RustcEntry`] enum.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171247,"byte_end":171289,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171290,"byte_end":171293,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ [`RustcEntry`]: enum.RustcEntry.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171294,"byte_end":171334,"line_start":114,"line_end":114,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172024,"byte_end":172030,"line_start":140,"line_end":140,"column_start":12,"column_end":18},"name":"insert","qualname":"<RustcEntry>::insert","value":"fn (self, value: V) -> RustcOccupiedEntry<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RustcOccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RustcOccupiedEntry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171677,"byte_end":171743,"line_start":128,"line_end":128,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171748,"byte_end":171751,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171756,"byte_end":171770,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171775,"byte_end":171778,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171783,"byte_end":171790,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171795,"byte_end":171822,"line_start":133,"line_end":133,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171827,"byte_end":171830,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171835,"byte_end":171888,"line_start":135,"line_end":135,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171893,"byte_end":171944,"line_start":136,"line_end":136,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171949,"byte_end":171952,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171957,"byte_end":172000,"line_start":138,"line_end":138,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172005,"byte_end":172012,"line_start":139,"line_end":139,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172851,"byte_end":172860,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RustcEntry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172289,"byte_end":172371,"line_start":150,"line_end":150,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172376,"byte_end":172426,"line_start":151,"line_end":151,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172431,"byte_end":172434,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172439,"byte_end":172453,"line_start":153,"line_end":153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172458,"byte_end":172461,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172466,"byte_end":172473,"line_start":155,"line_end":155,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172478,"byte_end":172505,"line_start":156,"line_end":156,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172510,"byte_end":172513,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172518,"byte_end":172571,"line_start":158,"line_end":158,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172576,"byte_end":172579,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172584,"byte_end":172630,"line_start":160,"line_end":160,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172635,"byte_end":172671,"line_start":161,"line_end":161,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172676,"byte_end":172679,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ *map.rustc_entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172684,"byte_end":172737,"line_start":163,"line_end":163,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172742,"byte_end":172778,"line_start":164,"line_end":164,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":172783,"byte_end":172790,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173618,"byte_end":173632,"line_start":193,"line_end":193,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RustcEntry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173068,"byte_end":173161,"line_start":177,"line_end":177,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173166,"byte_end":173228,"line_start":178,"line_end":178,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173233,"byte_end":173236,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173241,"byte_end":173255,"line_start":180,"line_end":180,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173260,"byte_end":173263,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173268,"byte_end":173275,"line_start":182,"line_end":182,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173280,"byte_end":173307,"line_start":183,"line_end":183,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173312,"byte_end":173315,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173320,"byte_end":173376,"line_start":185,"line_end":185,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173381,"byte_end":173412,"line_start":186,"line_end":186,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173417,"byte_end":173420,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173425,"byte_end":173479,"line_start":188,"line_end":188,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173484,"byte_end":173487,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173492,"byte_end":173545,"line_start":190,"line_end":190,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173550,"byte_end":173557,"line_start":191,"line_end":191,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174192,"byte_end":174195,"line_start":214,"line_end":214,"column_start":12,"column_end":15},"name":"key","qualname":"<RustcEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173860,"byte_end":173904,"line_start":203,"line_end":203,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173909,"byte_end":173912,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173917,"byte_end":173931,"line_start":205,"line_end":205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173936,"byte_end":173939,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173944,"byte_end":173951,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173956,"byte_end":173983,"line_start":208,"line_end":208,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173988,"byte_end":173991,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":173996,"byte_end":174049,"line_start":210,"line_end":210,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.rustc_entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174054,"byte_end":174119,"line_start":211,"line_end":211,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174124,"byte_end":174131,"line_start":212,"line_end":212,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174982,"byte_end":174992,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RustcEntry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174348,"byte_end":174416,"line_start":221,"line_end":221,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174421,"byte_end":174456,"line_start":222,"line_end":222,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174461,"byte_end":174464,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174469,"byte_end":174483,"line_start":224,"line_end":224,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174488,"byte_end":174491,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174496,"byte_end":174503,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174508,"byte_end":174535,"line_start":227,"line_end":227,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174540,"byte_end":174543,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174548,"byte_end":174601,"line_start":229,"line_end":229,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174606,"byte_end":174609,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ map.rustc_entry(\"poneyland\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174614,"byte_end":174646,"line_start":231,"line_end":231,"column_start":5,"column_end":37}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174651,"byte_end":174686,"line_start":232,"line_end":232,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174691,"byte_end":174713,"line_start":233,"line_end":233,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174718,"byte_end":174755,"line_start":234,"line_end":234,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174760,"byte_end":174763,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ map.rustc_entry(\"poneyland\")","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174768,"byte_end":174800,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174805,"byte_end":174840,"line_start":237,"line_end":237,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174845,"byte_end":174867,"line_start":238,"line_end":238,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174872,"byte_end":174909,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":174914,"byte_end":174921,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175819,"byte_end":175829,"line_start":273,"line_end":273,"column_start":12,"column_end":22},"name":"or_default","qualname":"<RustcEntry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175313,"byte_end":175389,"line_start":257,"line_end":257,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175394,"byte_end":175456,"line_start":258,"line_end":258,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175461,"byte_end":175464,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175469,"byte_end":175483,"line_start":260,"line_end":260,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175488,"byte_end":175491,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175496,"byte_end":175503,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/ # fn main() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175508,"byte_end":175525,"line_start":263,"line_end":263,"column_start":5,"column_end":22}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175530,"byte_end":175557,"line_start":264,"line_end":264,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175562,"byte_end":175565,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175570,"byte_end":175631,"line_start":266,"line_end":266,"column_start":5,"column_end":66}},{"value":"/ map.rustc_entry(\"poneyland\").or_default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175636,"byte_end":175682,"line_start":267,"line_end":267,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175687,"byte_end":175690,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175695,"byte_end":175734,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/ # }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175739,"byte_end":175746,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175751,"byte_end":175758,"line_start":271,"line_end":271,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176469,"byte_end":176472,"line_start":297,"line_end":297,"column_start":12,"column_end":15},"name":"key","qualname":"<RustcOccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176084,"byte_end":176129,"line_start":285,"line_end":285,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176134,"byte_end":176137,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176142,"byte_end":176156,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176161,"byte_end":176164,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176169,"byte_end":176176,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176181,"byte_end":176208,"line_start":290,"line_end":290,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176213,"byte_end":176216,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176221,"byte_end":176274,"line_start":292,"line_end":292,"column_start":5,"column_end":58}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176279,"byte_end":176326,"line_start":293,"line_end":293,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map.rustc_entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176331,"byte_end":176396,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176401,"byte_end":176408,"line_start":295,"line_end":295,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177147,"byte_end":177159,"line_start":320,"line_end":320,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RustcOccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176540,"byte_end":176597,"line_start":301,"line_end":301,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176602,"byte_end":176605,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176610,"byte_end":176624,"line_start":303,"line_end":303,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176629,"byte_end":176632,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176637,"byte_end":176644,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176649,"byte_end":176676,"line_start":306,"line_end":306,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176681,"byte_end":176721,"line_start":307,"line_end":307,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176726,"byte_end":176729,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176734,"byte_end":176787,"line_start":309,"line_end":309,"column_start":5,"column_end":58}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176792,"byte_end":176839,"line_start":310,"line_end":310,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176844,"byte_end":176847,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Occupied(o) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176852,"byte_end":176919,"line_start":312,"line_end":312,"column_start":5,"column_end":72}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176924,"byte_end":176968,"line_start":313,"line_end":313,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176973,"byte_end":176998,"line_start":314,"line_end":314,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177003,"byte_end":177008,"line_start":315,"line_end":315,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177013,"byte_end":177016,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177021,"byte_end":177074,"line_start":317,"line_end":317,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177079,"byte_end":177086,"line_start":318,"line_end":318,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177785,"byte_end":177788,"line_start":343,"line_end":343,"column_start":12,"column_end":15},"name":"get","qualname":"<RustcOccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177295,"byte_end":177342,"line_start":327,"line_end":327,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177347,"byte_end":177350,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177355,"byte_end":177369,"line_start":329,"line_end":329,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177374,"byte_end":177377,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177382,"byte_end":177389,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177394,"byte_end":177421,"line_start":332,"line_end":332,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177426,"byte_end":177466,"line_start":333,"line_end":333,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177471,"byte_end":177474,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177479,"byte_end":177532,"line_start":335,"line_end":335,"column_start":5,"column_end":58}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177537,"byte_end":177584,"line_start":336,"line_end":336,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177589,"byte_end":177592,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Occupied(o) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177597,"byte_end":177664,"line_start":338,"line_end":338,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177669,"byte_end":177702,"line_start":339,"line_end":339,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177707,"byte_end":177712,"line_start":340,"line_end":340,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177717,"byte_end":177724,"line_start":341,"line_end":341,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178785,"byte_end":178792,"line_start":375,"line_end":375,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RustcOccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177856,"byte_end":177911,"line_start":347,"line_end":347,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177916,"byte_end":177919,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `RustcOccupiedEntry` which may outlive the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":177924,"byte_end":178001,"line_start":349,"line_end":349,"column_start":5,"column_end":82}},{"value":"/ destruction of the `RustcEntry` value, see [`into_mut`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178006,"byte_end":178066,"line_start":350,"line_end":350,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178071,"byte_end":178074,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178079,"byte_end":178113,"line_start":352,"line_end":352,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178118,"byte_end":178121,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178126,"byte_end":178140,"line_start":354,"line_end":354,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178145,"byte_end":178148,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178153,"byte_end":178160,"line_start":356,"line_end":356,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178165,"byte_end":178192,"line_start":357,"line_end":357,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178197,"byte_end":178237,"line_start":358,"line_end":358,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178242,"byte_end":178245,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178250,"byte_end":178303,"line_start":360,"line_end":360,"column_start":5,"column_end":58}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178308,"byte_end":178355,"line_start":361,"line_end":361,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178360,"byte_end":178363,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178368,"byte_end":178405,"line_start":363,"line_end":363,"column_start":5,"column_end":42}},{"value":"/ if let RustcEntry::Occupied(mut o) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178410,"byte_end":178481,"line_start":364,"line_end":364,"column_start":5,"column_end":76}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178486,"byte_end":178513,"line_start":365,"line_end":365,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178518,"byte_end":178551,"line_start":366,"line_end":366,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178556,"byte_end":178559,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/     // We can use the same RustcEntry multiple times.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178564,"byte_end":178621,"line_start":368,"line_end":368,"column_start":5,"column_end":62}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178626,"byte_end":178652,"line_start":369,"line_end":369,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178657,"byte_end":178662,"line_start":370,"line_end":370,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178667,"byte_end":178670,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178675,"byte_end":178712,"line_start":372,"line_end":372,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178717,"byte_end":178724,"line_start":373,"line_end":373,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179676,"byte_end":179684,"line_start":403,"line_end":403,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RustcOccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the RustcOccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the RustcOccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178872,"byte_end":178958,"line_start":379,"line_end":379,"column_start":5,"column_end":91}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":178963,"byte_end":179007,"line_start":380,"line_end":380,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179012,"byte_end":179015,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `RustcOccupiedEntry`, see [`get_mut`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179020,"byte_end":179101,"line_start":382,"line_end":382,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179106,"byte_end":179109,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179114,"byte_end":179146,"line_start":384,"line_end":384,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179151,"byte_end":179154,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179159,"byte_end":179173,"line_start":386,"line_end":386,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179178,"byte_end":179181,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179186,"byte_end":179193,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179198,"byte_end":179225,"line_start":389,"line_end":389,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179230,"byte_end":179270,"line_start":390,"line_end":390,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179275,"byte_end":179278,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179283,"byte_end":179336,"line_start":392,"line_end":392,"column_start":5,"column_end":58}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179341,"byte_end":179388,"line_start":393,"line_end":393,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179393,"byte_end":179396,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179401,"byte_end":179438,"line_start":395,"line_end":395,"column_start":5,"column_end":42}},{"value":"/ if let RustcEntry::Occupied(o) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179443,"byte_end":179510,"line_start":396,"line_end":396,"column_start":5,"column_end":72}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179515,"byte_end":179543,"line_start":397,"line_end":397,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179548,"byte_end":179553,"line_start":398,"line_end":398,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179558,"byte_end":179561,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179566,"byte_end":179603,"line_start":400,"line_end":400,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179608,"byte_end":179615,"line_start":401,"line_end":401,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180330,"byte_end":180336,"line_start":425,"line_end":425,"column_start":12,"column_end":18},"name":"insert","qualname":"<RustcOccupiedEntry>::insert","value":"fn (&mut self, mut value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179762,"byte_end":179829,"line_start":407,"line_end":407,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179834,"byte_end":179837,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179842,"byte_end":179856,"line_start":409,"line_end":409,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179861,"byte_end":179864,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179869,"byte_end":179876,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179881,"byte_end":179908,"line_start":412,"line_end":412,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179913,"byte_end":179953,"line_start":413,"line_end":413,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179958,"byte_end":179961,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":179966,"byte_end":180019,"line_start":415,"line_end":415,"column_start":5,"column_end":58}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180024,"byte_end":180071,"line_start":416,"line_end":416,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180076,"byte_end":180079,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Occupied(mut o) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180084,"byte_end":180155,"line_start":418,"line_end":418,"column_start":5,"column_end":76}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180160,"byte_end":180197,"line_start":419,"line_end":419,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180202,"byte_end":180207,"line_start":420,"line_end":420,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180212,"byte_end":180215,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180220,"byte_end":180257,"line_start":422,"line_end":422,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180262,"byte_end":180269,"line_start":423,"line_end":423,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181040,"byte_end":181046,"line_start":449,"line_end":449,"column_start":12,"column_end":18},"name":"remove","qualname":"<RustcOccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180476,"byte_end":180529,"line_start":431,"line_end":431,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180534,"byte_end":180537,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180542,"byte_end":180556,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180561,"byte_end":180564,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180569,"byte_end":180576,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180581,"byte_end":180608,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180613,"byte_end":180653,"line_start":437,"line_end":437,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180658,"byte_end":180661,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180666,"byte_end":180719,"line_start":439,"line_end":439,"column_start":5,"column_end":58}},{"value":"/ map.rustc_entry(\"poneyland\").or_insert(12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180724,"byte_end":180771,"line_start":440,"line_end":440,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180776,"byte_end":180779,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Occupied(o) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180784,"byte_end":180851,"line_start":442,"line_end":442,"column_start":5,"column_end":72}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180856,"byte_end":180891,"line_start":443,"line_end":443,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180896,"byte_end":180901,"line_start":444,"line_end":444,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180906,"byte_end":180909,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180914,"byte_end":180967,"line_start":446,"line_end":446,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":180972,"byte_end":180979,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181882,"byte_end":181895,"line_start":474,"line_end":474,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<RustcOccupiedEntry>::replace_entry","value":"fn (self, value: V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181101,"byte_end":181193,"line_start":453,"line_end":453,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181198,"byte_end":181236,"line_start":454,"line_end":454,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181241,"byte_end":181244,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181249,"byte_end":181263,"line_start":456,"line_end":456,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181268,"byte_end":181271,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181276,"byte_end":181283,"line_start":458,"line_end":458,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{RustcEntry, HashMap};","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181288,"byte_end":181339,"line_start":459,"line_end":459,"column_start":5,"column_end":56}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181344,"byte_end":181364,"line_start":460,"line_end":460,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181369,"byte_end":181372,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181377,"byte_end":181436,"line_start":462,"line_end":462,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181441,"byte_end":181496,"line_start":463,"line_end":463,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181501,"byte_end":181504,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181509,"byte_end":181561,"line_start":465,"line_end":465,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181566,"byte_end":181569,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Occupied(entry) = map.rustc_entry(my_key) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181574,"byte_end":181640,"line_start":467,"line_end":467,"column_start":5,"column_end":71}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181645,"byte_end":181708,"line_start":468,"line_end":468,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181713,"byte_end":181791,"line_start":469,"line_end":469,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181796,"byte_end":181801,"line_start":470,"line_end":470,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181806,"byte_end":181809,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":181814,"byte_end":181821,"line_start":472,"line_end":472,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183072,"byte_end":183083,"line_start":508,"line_end":508,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<RustcOccupiedEntry>::replace_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182145,"byte_end":182221,"line_start":483,"line_end":483,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182226,"byte_end":182229,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182234,"byte_end":182248,"line_start":485,"line_end":485,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182253,"byte_end":182256,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182261,"byte_end":182268,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{RustcEntry, HashMap};","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182273,"byte_end":182324,"line_start":488,"line_end":488,"column_start":5,"column_end":56}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182329,"byte_end":182349,"line_start":489,"line_end":489,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182354,"byte_end":182357,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182362,"byte_end":182421,"line_start":491,"line_end":491,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182426,"byte_end":182482,"line_start":492,"line_end":492,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182487,"byte_end":182490,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182495,"byte_end":182545,"line_start":494,"line_end":494,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182550,"byte_end":182553,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182558,"byte_end":182603,"line_start":496,"line_end":496,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182608,"byte_end":182611,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182616,"byte_end":182706,"line_start":498,"line_end":498,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182711,"byte_end":182743,"line_start":499,"line_end":499,"column_start":5,"column_end":37}},{"value":"/         if let RustcEntry::Occupied(entry) = map.rustc_entry(s.clone()) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182748,"byte_end":182825,"line_start":500,"line_end":500,"column_start":5,"column_end":82}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182830,"byte_end":182916,"line_start":501,"line_end":501,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182921,"byte_end":182957,"line_start":502,"line_end":502,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182962,"byte_end":182975,"line_start":503,"line_end":503,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182980,"byte_end":182989,"line_start":504,"line_end":504,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":182994,"byte_end":182999,"line_start":505,"line_end":505,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183004,"byte_end":183011,"line_start":506,"line_end":506,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183660,"byte_end":183663,"line_start":527,"line_end":527,"column_start":12,"column_end":15},"name":"key","qualname":"<RustcVacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `RustcVacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183259,"byte_end":183332,"line_start":515,"line_end":515,"column_start":5,"column_end":78}},{"value":"/ through the `RustcVacantEntry`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183337,"byte_end":183372,"line_start":516,"line_end":516,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183377,"byte_end":183380,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183385,"byte_end":183399,"line_start":518,"line_end":518,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183404,"byte_end":183407,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183412,"byte_end":183419,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183424,"byte_end":183451,"line_start":521,"line_end":521,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183456,"byte_end":183459,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183464,"byte_end":183517,"line_start":523,"line_end":523,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.rustc_entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183522,"byte_end":183587,"line_start":524,"line_end":524,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183592,"byte_end":183599,"line_start":525,"line_end":525,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184115,"byte_end":184123,"line_start":546,"line_end":546,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RustcVacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183708,"byte_end":183738,"line_start":531,"line_end":531,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183743,"byte_end":183746,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183751,"byte_end":183765,"line_start":533,"line_end":533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183770,"byte_end":183773,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183778,"byte_end":183785,"line_start":535,"line_end":535,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183790,"byte_end":183817,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183822,"byte_end":183862,"line_start":537,"line_end":537,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183867,"byte_end":183870,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183875,"byte_end":183928,"line_start":539,"line_end":539,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183933,"byte_end":183936,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Vacant(v) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183941,"byte_end":184006,"line_start":541,"line_end":541,"column_start":5,"column_end":70}},{"value":"/     v.into_key();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184011,"byte_end":184032,"line_start":542,"line_end":542,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184037,"byte_end":184042,"line_start":543,"line_end":543,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184047,"byte_end":184054,"line_start":544,"line_end":544,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184695,"byte_end":184701,"line_start":567,"line_end":567,"column_start":12,"column_end":18},"name":"insert","qualname":"<RustcVacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the RustcVacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the RustcVacantEntry's key,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184165,"byte_end":184229,"line_start":550,"line_end":550,"column_start":5,"column_end":69}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184234,"byte_end":184276,"line_start":551,"line_end":551,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184281,"byte_end":184284,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184289,"byte_end":184303,"line_start":553,"line_end":553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184308,"byte_end":184311,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184316,"byte_end":184323,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184328,"byte_end":184355,"line_start":556,"line_end":556,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184360,"byte_end":184400,"line_start":557,"line_end":557,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184405,"byte_end":184408,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184413,"byte_end":184466,"line_start":559,"line_end":559,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184471,"byte_end":184474,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Vacant(o) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184479,"byte_end":184544,"line_start":561,"line_end":561,"column_start":5,"column_end":70}},{"value":"/     o.insert(37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184549,"byte_end":184570,"line_start":562,"line_end":562,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184575,"byte_end":184580,"line_start":563,"line_end":563,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184585,"byte_end":184622,"line_start":564,"line_end":564,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184627,"byte_end":184634,"line_start":565,"line_end":565,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185399,"byte_end":185411,"line_start":589,"line_end":589,"column_start":12,"column_end":24},"name":"insert_entry","qualname":"<RustcVacantEntry>::insert_entry","value":"fn (self, value: V) -> RustcOccupiedEntry<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the RustcVacantEntry's key,\n and returns a RustcOccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the RustcVacantEntry's key,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184864,"byte_end":184928,"line_start":572,"line_end":572,"column_start":5,"column_end":69}},{"value":"/ and returns a RustcOccupiedEntry.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184933,"byte_end":184970,"line_start":573,"line_end":573,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184975,"byte_end":184978,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":184983,"byte_end":184997,"line_start":575,"line_end":575,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185002,"byte_end":185005,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185010,"byte_end":185017,"line_start":577,"line_end":577,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185022,"byte_end":185049,"line_start":578,"line_end":578,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RustcEntry;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185054,"byte_end":185094,"line_start":579,"line_end":579,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185099,"byte_end":185102,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185107,"byte_end":185160,"line_start":581,"line_end":581,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185165,"byte_end":185168,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ if let RustcEntry::Vacant(v) = map.rustc_entry(\"poneyland\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185173,"byte_end":185238,"line_start":583,"line_end":583,"column_start":5,"column_end":70}},{"value":"/     let o = v.insert_entry(37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185243,"byte_end":185278,"line_start":584,"line_end":584,"column_start":5,"column_end":40}},{"value":"/     assert_eq!(o.get(), &37);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185283,"byte_end":185316,"line_start":585,"line_end":585,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185321,"byte_end":185326,"line_start":586,"line_end":586,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185331,"byte_end":185338,"line_start":587,"line_end":587,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185826,"byte_end":185836,"line_start":602,"line_end":602,"column_start":12,"column_end":22},"name":"rustc_iter","qualname":"<IterMut>::rustc_iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a iterator of references over the remaining items.\n","sig":null,"attributes":[{"value":"/ Returns a iterator of references over the remaining items.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185703,"byte_end":185765,"line_start":600,"line_end":600,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":186048,"byte_end":186058,"line_start":610,"line_end":610,"column_start":12,"column_end":22},"name":"rustc_iter","qualname":"<IntoIter<K, V>>::rustc_iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a iterator of references over the remaining items.\n","sig":null,"attributes":[{"value":"/ Returns a iterator of references over the remaining items.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185925,"byte_end":185987,"line_start":608,"line_end":608,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":186271,"byte_end":186281,"line_start":618,"line_end":618,"column_start":12,"column_end":22},"name":"rustc_iter","qualname":"<Drain>::rustc_iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a iterator of references over the remaining items.\n","sig":null,"attributes":[{"value":"/ Returns a iterator of references over the remaining items.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":186148,"byte_end":186210,"line_start":616,"line_end":616,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1005},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":186423,"byte_end":186433,"line_start":4,"line_end":4,"column_start":12,"column_end":22},"name":"ScopeGuard","qualname":"::scopeguard::ScopeGuard","value":"ScopeGuard {  }","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1010},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":186554,"byte_end":186559,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"guard","qualname":"::scopeguard::guard","value":"fn <T, F> (value: T, dropfn: F) -> ScopeGuard<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1404},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":191177,"byte_end":191184,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1407}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":187754,"byte_end":187820,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":187821,"byte_end":187824,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":187825,"byte_end":187897,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":187898,"byte_end":187978,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":187979,"byte_end":188055,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188056,"byte_end":188110,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188111,"byte_end":188114,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188115,"byte_end":188126,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188127,"byte_end":188163,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188164,"byte_end":188171,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188172,"byte_end":188175,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188176,"byte_end":188246,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188247,"byte_end":188250,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188251,"byte_end":188254,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188255,"byte_end":188328,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188329,"byte_end":188402,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188403,"byte_end":188478,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188479,"byte_end":188558,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188559,"byte_end":188575,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188576,"byte_end":188579,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188580,"byte_end":188659,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188660,"byte_end":188738,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188739,"byte_end":188819,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188820,"byte_end":188865,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188866,"byte_end":188869,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188870,"byte_end":188884,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188885,"byte_end":188888,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188889,"byte_end":188896,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188897,"byte_end":188924,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188925,"byte_end":188993,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":188994,"byte_end":189045,"line_start":47,"line_end":47,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189046,"byte_end":189081,"line_start":48,"line_end":48,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189082,"byte_end":189085,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189086,"byte_end":189108,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189109,"byte_end":189162,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189163,"byte_end":189217,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189218,"byte_end":189262,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189263,"byte_end":189312,"line_start":54,"line_end":54,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189313,"byte_end":189316,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189317,"byte_end":189349,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189350,"byte_end":189397,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189398,"byte_end":189470,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189471,"byte_end":189501,"line_start":59,"line_end":59,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189502,"byte_end":189507,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189508,"byte_end":189511,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189512,"byte_end":189533,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189534,"byte_end":189566,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189567,"byte_end":189570,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189571,"byte_end":189602,"line_start":65,"line_end":65,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189603,"byte_end":189627,"line_start":66,"line_end":66,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189628,"byte_end":189657,"line_start":67,"line_end":67,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189658,"byte_end":189663,"line_start":68,"line_end":68,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189664,"byte_end":189671,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189672,"byte_end":189675,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189676,"byte_end":189744,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`], this will in the","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189745,"byte_end":189821,"line_start":72,"line_end":72,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189822,"byte_end":189854,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189855,"byte_end":189858,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189859,"byte_end":189866,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189867,"byte_end":189894,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189895,"byte_end":189936,"line_start":77,"line_end":77,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189937,"byte_end":189956,"line_start":78,"line_end":78,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189957,"byte_end":189978,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":189979,"byte_end":190000,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190001,"byte_end":190006,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190007,"byte_end":190010,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190011,"byte_end":190048,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190049,"byte_end":190052,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190053,"byte_end":190120,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190121,"byte_end":190188,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190189,"byte_end":190255,"line_start":87,"line_end":87,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190256,"byte_end":190324,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190325,"byte_end":190328,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190329,"byte_end":190384,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190385,"byte_end":190408,"line_start":91,"line_end":91,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190409,"byte_end":190437,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190438,"byte_end":190443,"line_start":93,"line_end":93,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190444,"byte_end":190451,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190452,"byte_end":190455,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190456,"byte_end":190533,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190534,"byte_end":190537,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190538,"byte_end":190545,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190546,"byte_end":190573,"line_start":99,"line_end":99,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190574,"byte_end":190577,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190578,"byte_end":190593,"line_start":101,"line_end":101,"column_start":1,"column_end":16}},{"value":"/     let viking_names: HashSet<&'static str> =","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190594,"byte_end":190643,"line_start":102,"line_end":102,"column_start":1,"column_end":50}},{"value":"/         [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190644,"byte_end":190712,"line_start":103,"line_end":103,"column_start":1,"column_end":69}},{"value":"/     // use the values stored in the set","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190713,"byte_end":190756,"line_start":104,"line_end":104,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190757,"byte_end":190762,"line_start":105,"line_end":105,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190763,"byte_end":190770,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190771,"byte_end":190774,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190775,"byte_end":190840,"line_start":108,"line_end":108,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190841,"byte_end":190900,"line_start":109,"line_end":109,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190901,"byte_end":190965,"line_start":110,"line_end":110,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":190966,"byte_end":191002,"line_start":111,"line_end":111,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":191003,"byte_end":191076,"line_start":112,"line_end":112,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":191077,"byte_end":191148,"line_start":113,"line_end":113,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192745,"byte_end":192753,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192419,"byte_end":192492,"line_start":160,"line_end":160,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192497,"byte_end":192500,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192505,"byte_end":192519,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192524,"byte_end":192527,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192532,"byte_end":192539,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192544,"byte_end":192571,"line_start":165,"line_end":165,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192576,"byte_end":192632,"line_start":166,"line_end":166,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192637,"byte_end":192672,"line_start":167,"line_end":167,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192677,"byte_end":192684,"line_start":168,"line_end":168,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193278,"byte_end":193282,"line_start":191,"line_end":191,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192811,"byte_end":192868,"line_start":174,"line_end":174,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192873,"byte_end":192914,"line_start":175,"line_end":175,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192919,"byte_end":192922,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192927,"byte_end":192941,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192946,"byte_end":192949,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192954,"byte_end":192961,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192966,"byte_end":192993,"line_start":180,"line_end":180,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192998,"byte_end":193031,"line_start":181,"line_end":181,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193036,"byte_end":193056,"line_start":182,"line_end":182,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193061,"byte_end":193081,"line_start":183,"line_end":183,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193086,"byte_end":193089,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193094,"byte_end":193134,"line_start":185,"line_end":185,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193139,"byte_end":193164,"line_start":186,"line_end":186,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193169,"byte_end":193195,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193200,"byte_end":193205,"line_start":188,"line_end":188,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193210,"byte_end":193217,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193705,"byte_end":193708,"line_start":210,"line_end":210,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193378,"byte_end":193424,"line_start":197,"line_end":197,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193429,"byte_end":193432,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193437,"byte_end":193451,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193456,"byte_end":193459,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193464,"byte_end":193471,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193476,"byte_end":193503,"line_start":202,"line_end":202,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193508,"byte_end":193511,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193516,"byte_end":193547,"line_start":204,"line_end":204,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193552,"byte_end":193579,"line_start":205,"line_end":205,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193584,"byte_end":193600,"line_start":206,"line_end":206,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193605,"byte_end":193632,"line_start":207,"line_end":207,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193637,"byte_end":193644,"line_start":208,"line_end":208,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194092,"byte_end":194100,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193761,"byte_end":193812,"line_start":214,"line_end":214,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193817,"byte_end":193820,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193825,"byte_end":193839,"line_start":216,"line_end":216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193844,"byte_end":193847,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193852,"byte_end":193859,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193864,"byte_end":193891,"line_start":219,"line_end":219,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193896,"byte_end":193899,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193904,"byte_end":193935,"line_start":221,"line_end":221,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193940,"byte_end":193966,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193971,"byte_end":193987,"line_start":223,"line_end":223,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":193992,"byte_end":194019,"line_start":224,"line_end":224,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194024,"byte_end":194031,"line_start":225,"line_end":225,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194648,"byte_end":194653,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S>>::drain","value":"fn (&mut self) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194157,"byte_end":194215,"line_start":231,"line_end":231,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194220,"byte_end":194223,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194228,"byte_end":194242,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194247,"byte_end":194250,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194255,"byte_end":194262,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194267,"byte_end":194294,"line_start":236,"line_end":236,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194299,"byte_end":194302,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194307,"byte_end":194373,"line_start":238,"line_end":238,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194378,"byte_end":194407,"line_start":239,"line_end":239,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194412,"byte_end":194415,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194420,"byte_end":194462,"line_start":241,"line_end":241,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194467,"byte_end":194493,"line_start":242,"line_end":242,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194498,"byte_end":194524,"line_start":243,"line_end":243,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194529,"byte_end":194534,"line_start":244,"line_end":244,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194539,"byte_end":194542,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194547,"byte_end":194575,"line_start":246,"line_end":246,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194580,"byte_end":194587,"line_start":247,"line_end":247,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195063,"byte_end":195068,"line_start":268,"line_end":268,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194756,"byte_end":194796,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194801,"byte_end":194804,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194809,"byte_end":194823,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194828,"byte_end":194831,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194836,"byte_end":194843,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194848,"byte_end":194875,"line_start":260,"line_end":260,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194880,"byte_end":194883,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194888,"byte_end":194919,"line_start":262,"line_end":262,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194924,"byte_end":194940,"line_start":263,"line_end":263,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194945,"byte_end":194959,"line_start":264,"line_end":264,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194964,"byte_end":194990,"line_start":265,"line_end":265,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":194995,"byte_end":195002,"line_start":266,"line_end":266,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195966,"byte_end":195977,"line_start":299,"line_end":299,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<T, S>>::with_hasher","value":"fn (hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195191,"byte_end":195263,"line_start":278,"line_end":278,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195268,"byte_end":195277,"line_start":279,"line_end":279,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195282,"byte_end":195285,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195290,"byte_end":195357,"line_start":281,"line_end":281,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195362,"byte_end":195365,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195370,"byte_end":195427,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195432,"byte_end":195499,"line_start":284,"line_end":284,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195504,"byte_end":195567,"line_start":285,"line_end":285,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195572,"byte_end":195636,"line_start":286,"line_end":286,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195641,"byte_end":195644,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195649,"byte_end":195663,"line_start":288,"line_end":288,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195668,"byte_end":195671,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195676,"byte_end":195683,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195688,"byte_end":195715,"line_start":291,"line_end":291,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195720,"byte_end":195768,"line_start":292,"line_end":292,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195773,"byte_end":195776,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195781,"byte_end":195823,"line_start":294,"line_end":294,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195828,"byte_end":195870,"line_start":295,"line_end":295,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195875,"byte_end":195893,"line_start":296,"line_end":296,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195898,"byte_end":195905,"line_start":297,"line_end":297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196969,"byte_end":196993,"line_start":327,"line_end":327,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196082,"byte_end":196147,"line_start":305,"line_end":305,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196152,"byte_end":196182,"line_start":306,"line_end":306,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196187,"byte_end":196190,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196195,"byte_end":196269,"line_start":308,"line_end":308,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196274,"byte_end":196343,"line_start":309,"line_end":309,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196348,"byte_end":196351,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196356,"byte_end":196413,"line_start":311,"line_end":311,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196418,"byte_end":196485,"line_start":312,"line_end":312,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196490,"byte_end":196553,"line_start":313,"line_end":313,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196558,"byte_end":196622,"line_start":314,"line_end":314,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196627,"byte_end":196630,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196635,"byte_end":196649,"line_start":316,"line_end":316,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196654,"byte_end":196657,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196662,"byte_end":196669,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196674,"byte_end":196701,"line_start":319,"line_end":319,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196706,"byte_end":196754,"line_start":320,"line_end":320,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196759,"byte_end":196762,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196767,"byte_end":196809,"line_start":322,"line_end":322,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196814,"byte_end":196873,"line_start":323,"line_end":323,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196878,"byte_end":196896,"line_start":324,"line_end":324,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":196901,"byte_end":196908,"line_start":325,"line_end":325,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197665,"byte_end":197671,"line_start":348,"line_end":348,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197138,"byte_end":197191,"line_start":333,"line_end":333,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197196,"byte_end":197199,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197204,"byte_end":197282,"line_start":335,"line_end":335,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197287,"byte_end":197290,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197295,"byte_end":197309,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197314,"byte_end":197317,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197322,"byte_end":197329,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197334,"byte_end":197361,"line_start":340,"line_end":340,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197366,"byte_end":197414,"line_start":341,"line_end":341,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197419,"byte_end":197422,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197427,"byte_end":197474,"line_start":343,"line_end":343,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197479,"byte_end":197536,"line_start":344,"line_end":344,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197541,"byte_end":197592,"line_start":345,"line_end":345,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197597,"byte_end":197604,"line_start":346,"line_end":346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198267,"byte_end":198274,"line_start":369,"line_end":369,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197724,"byte_end":197800,"line_start":352,"line_end":352,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197805,"byte_end":197873,"line_start":353,"line_end":353,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197878,"byte_end":197905,"line_start":354,"line_end":354,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197910,"byte_end":197913,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197918,"byte_end":197930,"line_start":356,"line_end":356,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197935,"byte_end":197938,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":197943,"byte_end":197999,"line_start":358,"line_end":358,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198004,"byte_end":198007,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198012,"byte_end":198026,"line_start":360,"line_end":360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198031,"byte_end":198034,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198039,"byte_end":198046,"line_start":362,"line_end":362,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198051,"byte_end":198078,"line_start":363,"line_end":363,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198083,"byte_end":198130,"line_start":364,"line_end":364,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198135,"byte_end":198155,"line_start":365,"line_end":365,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198160,"byte_end":198194,"line_start":366,"line_end":366,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198199,"byte_end":198206,"line_start":367,"line_end":367,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198981,"byte_end":198992,"line_start":390,"line_end":390,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198355,"byte_end":198439,"line_start":373,"line_end":373,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198444,"byte_end":198523,"line_start":374,"line_end":374,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198528,"byte_end":198555,"line_start":375,"line_end":375,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198560,"byte_end":198563,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198568,"byte_end":198580,"line_start":377,"line_end":377,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198585,"byte_end":198588,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198593,"byte_end":198673,"line_start":379,"line_end":379,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198678,"byte_end":198694,"line_start":380,"line_end":380,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198699,"byte_end":198702,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198707,"byte_end":198721,"line_start":382,"line_end":382,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198726,"byte_end":198729,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198734,"byte_end":198741,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198746,"byte_end":198773,"line_start":385,"line_end":385,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198778,"byte_end":198825,"line_start":386,"line_end":386,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198830,"byte_end":198908,"line_start":387,"line_end":387,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":198913,"byte_end":198920,"line_start":388,"line_end":388,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199692,"byte_end":199705,"line_start":411,"line_end":411,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199111,"byte_end":199180,"line_start":394,"line_end":394,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199185,"byte_end":199250,"line_start":395,"line_end":395,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199255,"byte_end":199328,"line_start":396,"line_end":396,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199333,"byte_end":199336,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199341,"byte_end":199355,"line_start":398,"line_end":398,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199360,"byte_end":199363,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199368,"byte_end":199375,"line_start":400,"line_end":400,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199380,"byte_end":199407,"line_start":401,"line_end":401,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199412,"byte_end":199415,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199420,"byte_end":199466,"line_start":403,"line_end":403,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199471,"byte_end":199489,"line_start":404,"line_end":404,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199494,"byte_end":199512,"line_start":405,"line_end":405,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199517,"byte_end":199552,"line_start":406,"line_end":406,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199557,"byte_end":199581,"line_start":407,"line_end":407,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199586,"byte_end":199619,"line_start":408,"line_end":408,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199624,"byte_end":199631,"line_start":409,"line_end":409,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200521,"byte_end":200530,"line_start":437,"line_end":437,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199763,"byte_end":199831,"line_start":415,"line_end":415,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199836,"byte_end":199914,"line_start":416,"line_end":416,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199919,"byte_end":199992,"line_start":417,"line_end":417,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":199997,"byte_end":200000,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200005,"byte_end":200068,"line_start":419,"line_end":419,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200073,"byte_end":200094,"line_start":420,"line_end":420,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200099,"byte_end":200102,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200107,"byte_end":200121,"line_start":422,"line_end":422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200126,"byte_end":200129,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200134,"byte_end":200141,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200146,"byte_end":200173,"line_start":425,"line_end":425,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200178,"byte_end":200181,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200186,"byte_end":200232,"line_start":427,"line_end":427,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200237,"byte_end":200255,"line_start":428,"line_end":428,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200260,"byte_end":200278,"line_start":429,"line_end":429,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200283,"byte_end":200318,"line_start":430,"line_end":430,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200323,"byte_end":200345,"line_start":431,"line_end":431,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200350,"byte_end":200384,"line_start":432,"line_end":432,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200389,"byte_end":200410,"line_start":433,"line_end":433,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200415,"byte_end":200448,"line_start":434,"line_end":434,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200453,"byte_end":200460,"line_start":435,"line_end":435,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201472,"byte_end":201482,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S>>::difference","value":"fn <'a> (&'a self, other: &'a Self) -> Difference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200617,"byte_end":200667,"line_start":441,"line_end":441,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200672,"byte_end":200731,"line_start":442,"line_end":442,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200736,"byte_end":200739,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200744,"byte_end":200758,"line_start":444,"line_end":444,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200763,"byte_end":200766,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200771,"byte_end":200778,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200783,"byte_end":200810,"line_start":447,"line_end":447,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200815,"byte_end":200875,"line_start":448,"line_end":448,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200880,"byte_end":200943,"line_start":449,"line_end":449,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200948,"byte_end":200951,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200956,"byte_end":200986,"line_start":451,"line_end":451,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":200991,"byte_end":201022,"line_start":452,"line_end":452,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201027,"byte_end":201064,"line_start":453,"line_end":453,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201069,"byte_end":201074,"line_start":454,"line_end":454,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201079,"byte_end":201082,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201087,"byte_end":201141,"line_start":456,"line_end":456,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201146,"byte_end":201189,"line_start":457,"line_end":457,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201194,"byte_end":201197,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201202,"byte_end":201247,"line_start":459,"line_end":459,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201252,"byte_end":201292,"line_start":460,"line_end":460,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201297,"byte_end":201351,"line_start":461,"line_end":461,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201356,"byte_end":201399,"line_start":462,"line_end":462,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201404,"byte_end":201411,"line_start":463,"line_end":463,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202431,"byte_end":202451,"line_start":494,"line_end":494,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S>>::symmetric_difference","value":"fn <'a> (&'a self, other: &'a Self) -> SymmetricDifference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201632,"byte_end":201692,"line_start":472,"line_end":472,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201697,"byte_end":201767,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201772,"byte_end":201775,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201780,"byte_end":201794,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201799,"byte_end":201802,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201807,"byte_end":201814,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201819,"byte_end":201846,"line_start":478,"line_end":478,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201851,"byte_end":201911,"line_start":479,"line_end":479,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201916,"byte_end":201979,"line_start":480,"line_end":480,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201984,"byte_end":201987,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":201992,"byte_end":202029,"line_start":482,"line_end":482,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202034,"byte_end":202075,"line_start":483,"line_end":483,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202080,"byte_end":202106,"line_start":484,"line_end":484,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202111,"byte_end":202116,"line_start":485,"line_end":485,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202121,"byte_end":202124,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202129,"byte_end":202194,"line_start":487,"line_end":487,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202199,"byte_end":202264,"line_start":488,"line_end":488,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202269,"byte_end":202272,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202277,"byte_end":202306,"line_start":490,"line_end":490,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202311,"byte_end":202358,"line_start":491,"line_end":491,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202363,"byte_end":202370,"line_start":492,"line_end":492,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203305,"byte_end":203317,"line_start":519,"line_end":519,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S>>::intersection","value":"fn <'a> (&'a self, other: &'a Self) -> Intersection<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202641,"byte_end":202693,"line_start":500,"line_end":500,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202698,"byte_end":202755,"line_start":501,"line_end":501,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202760,"byte_end":202763,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202768,"byte_end":202782,"line_start":503,"line_end":503,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202787,"byte_end":202790,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202795,"byte_end":202802,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202807,"byte_end":202834,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202839,"byte_end":202899,"line_start":507,"line_end":507,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202904,"byte_end":202967,"line_start":508,"line_end":508,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202972,"byte_end":202975,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":202980,"byte_end":203017,"line_start":510,"line_end":510,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203022,"byte_end":203055,"line_start":511,"line_end":511,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203060,"byte_end":203086,"line_start":512,"line_end":512,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203091,"byte_end":203096,"line_start":513,"line_end":513,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203101,"byte_end":203104,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203109,"byte_end":203173,"line_start":515,"line_end":515,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203178,"byte_end":203232,"line_start":516,"line_end":516,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203237,"byte_end":203244,"line_start":517,"line_end":517,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204121,"byte_end":204126,"line_start":545,"line_end":545,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S>>::union","value":"fn <'a> (&'a self, other: &'a Self) -> Union<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203471,"byte_end":203516,"line_start":526,"line_end":526,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203521,"byte_end":203587,"line_start":527,"line_end":527,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203592,"byte_end":203595,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203600,"byte_end":203614,"line_start":529,"line_end":529,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203619,"byte_end":203622,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203627,"byte_end":203634,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203639,"byte_end":203666,"line_start":532,"line_end":532,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203671,"byte_end":203731,"line_start":533,"line_end":533,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203736,"byte_end":203799,"line_start":534,"line_end":534,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203804,"byte_end":203807,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203812,"byte_end":203855,"line_start":536,"line_end":536,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203860,"byte_end":203886,"line_start":537,"line_end":537,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203891,"byte_end":203917,"line_start":538,"line_end":538,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203922,"byte_end":203927,"line_start":539,"line_end":539,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203932,"byte_end":203935,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203940,"byte_end":203990,"line_start":541,"line_end":541,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":203995,"byte_end":204048,"line_start":542,"line_end":542,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204053,"byte_end":204060,"line_start":543,"line_end":543,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204957,"byte_end":204965,"line_start":570,"line_end":570,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204277,"byte_end":204324,"line_start":551,"line_end":551,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204329,"byte_end":204332,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204337,"byte_end":204404,"line_start":553,"line_end":553,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204409,"byte_end":204476,"line_start":554,"line_end":554,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204481,"byte_end":204500,"line_start":555,"line_end":555,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204505,"byte_end":204508,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204513,"byte_end":204527,"line_start":557,"line_end":557,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204532,"byte_end":204535,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204540,"byte_end":204547,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204552,"byte_end":204579,"line_start":560,"line_end":560,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204584,"byte_end":204587,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204592,"byte_end":204654,"line_start":562,"line_end":562,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204659,"byte_end":204698,"line_start":563,"line_end":563,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204703,"byte_end":204743,"line_start":564,"line_end":564,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204748,"byte_end":204755,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204760,"byte_end":204763,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204768,"byte_end":204827,"line_start":567,"line_end":567,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":204832,"byte_end":204896,"line_start":568,"line_end":568,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205827,"byte_end":205830,"line_start":597,"line_end":597,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205111,"byte_end":205201,"line_start":578,"line_end":578,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205206,"byte_end":205209,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205214,"byte_end":205281,"line_start":580,"line_end":580,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205286,"byte_end":205353,"line_start":581,"line_end":581,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205358,"byte_end":205377,"line_start":582,"line_end":582,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205382,"byte_end":205385,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205390,"byte_end":205404,"line_start":584,"line_end":584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205409,"byte_end":205412,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205417,"byte_end":205424,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205429,"byte_end":205456,"line_start":587,"line_end":587,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205461,"byte_end":205464,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205469,"byte_end":205531,"line_start":589,"line_end":589,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205536,"byte_end":205574,"line_start":590,"line_end":590,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205579,"byte_end":205613,"line_start":591,"line_end":591,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205618,"byte_end":205625,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205630,"byte_end":205633,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205638,"byte_end":205697,"line_start":594,"line_end":594,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205702,"byte_end":205766,"line_start":595,"line_end":595,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206536,"byte_end":206549,"line_start":620,"line_end":620,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S>>::get_or_insert","value":"fn (&mut self, value: T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":205999,"byte_end":206068,"line_start":605,"line_end":605,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206073,"byte_end":206121,"line_start":606,"line_end":606,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206126,"byte_end":206129,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206134,"byte_end":206148,"line_start":608,"line_end":608,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206153,"byte_end":206156,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206161,"byte_end":206168,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206173,"byte_end":206200,"line_start":611,"line_end":611,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206205,"byte_end":206208,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206213,"byte_end":206279,"line_start":613,"line_end":613,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206284,"byte_end":206313,"line_start":614,"line_end":614,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206318,"byte_end":206359,"line_start":615,"line_end":615,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206364,"byte_end":206409,"line_start":616,"line_end":616,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206414,"byte_end":206463,"line_start":617,"line_end":617,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206468,"byte_end":206475,"line_start":618,"line_end":618,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207595,"byte_end":207613,"line_start":649,"line_end":649,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S>>::get_or_insert_with","value":"fn <Q, F> (&mut self, value: &Q, f: F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206904,"byte_end":206978,"line_start":630,"line_end":630,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":206983,"byte_end":207049,"line_start":631,"line_end":631,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207054,"byte_end":207057,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207062,"byte_end":207076,"line_start":633,"line_end":633,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207081,"byte_end":207084,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207089,"byte_end":207096,"line_start":635,"line_end":635,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207101,"byte_end":207128,"line_start":636,"line_end":636,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207133,"byte_end":207136,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207141,"byte_end":207199,"line_start":638,"line_end":638,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207204,"byte_end":207257,"line_start":639,"line_end":639,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207262,"byte_end":207265,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207270,"byte_end":207299,"line_start":641,"line_end":641,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207304,"byte_end":207345,"line_start":642,"line_end":642,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207350,"byte_end":207413,"line_start":643,"line_end":643,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207418,"byte_end":207449,"line_start":644,"line_end":644,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207454,"byte_end":207459,"line_start":645,"line_end":645,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207464,"byte_end":207522,"line_start":646,"line_end":646,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":207527,"byte_end":207534,"line_start":647,"line_end":647,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208619,"byte_end":208630,"line_start":681,"line_end":681,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S>>::is_disjoint","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208087,"byte_end":208155,"line_start":664,"line_end":664,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208160,"byte_end":208221,"line_start":665,"line_end":665,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208226,"byte_end":208229,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208234,"byte_end":208248,"line_start":667,"line_end":667,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208253,"byte_end":208256,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208261,"byte_end":208268,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208273,"byte_end":208300,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208305,"byte_end":208308,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208313,"byte_end":208373,"line_start":672,"line_end":672,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208378,"byte_end":208409,"line_start":673,"line_end":673,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208414,"byte_end":208417,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208422,"byte_end":208462,"line_start":675,"line_end":675,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208467,"byte_end":208483,"line_start":676,"line_end":676,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208488,"byte_end":208528,"line_start":677,"line_end":677,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208533,"byte_end":208549,"line_start":678,"line_end":678,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208554,"byte_end":208595,"line_start":679,"line_end":679,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208600,"byte_end":208607,"line_start":680,"line_end":680,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209252,"byte_end":209261,"line_start":702,"line_end":702,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S>>::is_subset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208721,"byte_end":208774,"line_start":685,"line_end":685,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208779,"byte_end":208840,"line_start":686,"line_end":686,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208845,"byte_end":208848,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208853,"byte_end":208867,"line_start":688,"line_end":688,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208872,"byte_end":208875,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208880,"byte_end":208887,"line_start":690,"line_end":690,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208892,"byte_end":208919,"line_start":691,"line_end":691,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208924,"byte_end":208927,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208932,"byte_end":208994,"line_start":693,"line_end":693,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":208999,"byte_end":209032,"line_start":694,"line_end":694,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209037,"byte_end":209040,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209045,"byte_end":209087,"line_start":696,"line_end":696,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209092,"byte_end":209110,"line_start":697,"line_end":697,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209115,"byte_end":209157,"line_start":698,"line_end":698,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209162,"byte_end":209180,"line_start":699,"line_end":699,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209185,"byte_end":209228,"line_start":700,"line_end":700,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209233,"byte_end":209240,"line_start":701,"line_end":701,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210064,"byte_end":210075,"line_start":731,"line_end":731,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S>>::is_superset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209439,"byte_end":209494,"line_start":710,"line_end":710,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209499,"byte_end":209560,"line_start":711,"line_end":711,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209565,"byte_end":209568,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209573,"byte_end":209587,"line_start":713,"line_end":713,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209592,"byte_end":209595,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209600,"byte_end":209607,"line_start":715,"line_end":715,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209612,"byte_end":209639,"line_start":716,"line_end":716,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209644,"byte_end":209647,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209652,"byte_end":209711,"line_start":718,"line_end":718,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209716,"byte_end":209749,"line_start":719,"line_end":719,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209754,"byte_end":209757,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209762,"byte_end":209807,"line_start":721,"line_end":721,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209812,"byte_end":209815,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209820,"byte_end":209838,"line_start":723,"line_end":723,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209843,"byte_end":209861,"line_start":724,"line_end":724,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209866,"byte_end":209911,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209916,"byte_end":209919,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209924,"byte_end":209942,"line_start":727,"line_end":727,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209947,"byte_end":209991,"line_start":728,"line_end":728,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":209996,"byte_end":210003,"line_start":729,"line_end":729,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210656,"byte_end":210662,"line_start":753,"line_end":753,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210148,"byte_end":210176,"line_start":735,"line_end":735,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210181,"byte_end":210184,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210189,"byte_end":210256,"line_start":737,"line_end":737,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210261,"byte_end":210264,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210269,"byte_end":210333,"line_start":739,"line_end":739,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210338,"byte_end":210341,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210346,"byte_end":210360,"line_start":741,"line_end":741,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210365,"byte_end":210368,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210373,"byte_end":210380,"line_start":743,"line_end":743,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210385,"byte_end":210412,"line_start":744,"line_end":744,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210417,"byte_end":210420,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210425,"byte_end":210458,"line_start":746,"line_end":746,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210463,"byte_end":210466,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210471,"byte_end":210507,"line_start":748,"line_end":748,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210512,"byte_end":210549,"line_start":749,"line_end":749,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210554,"byte_end":210583,"line_start":750,"line_end":750,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210588,"byte_end":210595,"line_start":751,"line_end":751,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211297,"byte_end":211304,"line_start":773,"line_end":773,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210750,"byte_end":210843,"line_start":757,"line_end":757,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210848,"byte_end":210884,"line_start":758,"line_end":758,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210889,"byte_end":210892,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210897,"byte_end":210911,"line_start":760,"line_end":760,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210916,"byte_end":210919,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210924,"byte_end":210931,"line_start":762,"line_end":762,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210936,"byte_end":210963,"line_start":763,"line_end":763,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210968,"byte_end":210971,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":210976,"byte_end":211009,"line_start":765,"line_end":765,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211014,"byte_end":211048,"line_start":766,"line_end":766,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211053,"byte_end":211056,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211061,"byte_end":211117,"line_start":768,"line_end":768,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211122,"byte_end":211162,"line_start":769,"line_end":769,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211167,"byte_end":211224,"line_start":770,"line_end":770,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211229,"byte_end":211236,"line_start":771,"line_end":771,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212312,"byte_end":212318,"line_start":805,"line_end":805,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211590,"byte_end":211653,"line_start":783,"line_end":783,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211658,"byte_end":211681,"line_start":784,"line_end":784,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211686,"byte_end":211689,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211694,"byte_end":211761,"line_start":786,"line_end":786,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211766,"byte_end":211833,"line_start":787,"line_end":787,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211838,"byte_end":211857,"line_start":788,"line_end":788,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211862,"byte_end":211865,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211870,"byte_end":211884,"line_start":790,"line_end":790,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211889,"byte_end":211892,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211897,"byte_end":211904,"line_start":792,"line_end":792,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211909,"byte_end":211936,"line_start":793,"line_end":793,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211941,"byte_end":211944,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211949,"byte_end":211982,"line_start":795,"line_end":795,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211987,"byte_end":211990,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":211995,"byte_end":212013,"line_start":797,"line_end":797,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212018,"byte_end":212055,"line_start":798,"line_end":798,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212060,"byte_end":212098,"line_start":799,"line_end":799,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212103,"byte_end":212110,"line_start":800,"line_end":800,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212115,"byte_end":212118,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212123,"byte_end":212182,"line_start":802,"line_end":802,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212187,"byte_end":212251,"line_start":803,"line_end":803,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213188,"byte_end":213192,"line_start":832,"line_end":832,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212472,"byte_end":212557,"line_start":813,"line_end":813,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212562,"byte_end":212565,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212570,"byte_end":212637,"line_start":815,"line_end":815,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212642,"byte_end":212709,"line_start":816,"line_end":816,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212714,"byte_end":212733,"line_start":817,"line_end":817,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212738,"byte_end":212741,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212746,"byte_end":212760,"line_start":819,"line_end":819,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212765,"byte_end":212768,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212773,"byte_end":212780,"line_start":821,"line_end":821,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212785,"byte_end":212812,"line_start":822,"line_end":822,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212817,"byte_end":212820,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212825,"byte_end":212891,"line_start":824,"line_end":824,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212896,"byte_end":212934,"line_start":825,"line_end":825,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212939,"byte_end":212974,"line_start":826,"line_end":826,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212979,"byte_end":212986,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212991,"byte_end":212994,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":212999,"byte_end":213058,"line_start":829,"line_end":829,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213063,"byte_end":213127,"line_start":830,"line_end":830,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213791,"byte_end":213797,"line_start":854,"line_end":854,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213363,"byte_end":213420,"line_start":840,"line_end":840,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213425,"byte_end":213428,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213433,"byte_end":213511,"line_start":842,"line_end":842,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213516,"byte_end":213519,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213524,"byte_end":213538,"line_start":844,"line_end":844,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213543,"byte_end":213546,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213551,"byte_end":213558,"line_start":846,"line_end":846,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213563,"byte_end":213590,"line_start":847,"line_end":847,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213595,"byte_end":213598,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213603,"byte_end":213630,"line_start":849,"line_end":849,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213635,"byte_end":213696,"line_start":850,"line_end":850,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213701,"byte_end":213733,"line_start":851,"line_end":851,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213738,"byte_end":213767,"line_start":852,"line_end":852,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213772,"byte_end":213779,"line_start":853,"line_end":853,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1152},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219170,"byte_end":219174,"line_start":1077,"line_end":1077,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1155}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":218917,"byte_end":218963,"line_start":1070,"line_end":1070,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":218964,"byte_end":218967,"line_start":1071,"line_end":1071,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":218968,"byte_end":219035,"line_start":1072,"line_end":1072,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219036,"byte_end":219071,"line_start":1073,"line_end":1073,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219072,"byte_end":219075,"line_start":1074,"line_end":1074,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219076,"byte_end":219112,"line_start":1075,"line_end":1075,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219113,"byte_end":219158,"line_start":1076,"line_end":1076,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1156},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219539,"byte_end":219547,"line_start":1088,"line_end":1088,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1158}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219214,"byte_end":219267,"line_start":1081,"line_end":1081,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219268,"byte_end":219271,"line_start":1082,"line_end":1082,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`][`HashSet`]","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219272,"byte_end":219354,"line_start":1083,"line_end":1083,"column_start":1,"column_end":83}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219355,"byte_end":219430,"line_start":1084,"line_end":1084,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219431,"byte_end":219434,"line_start":1085,"line_end":1085,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219435,"byte_end":219471,"line_start":1086,"line_end":1086,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219472,"byte_end":219527,"line_start":1087,"line_end":1087,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1159},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219852,"byte_end":219857,"line_start":1099,"line_end":1099,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1162}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219588,"byte_end":219642,"line_start":1092,"line_end":1092,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219643,"byte_end":219646,"line_start":1093,"line_end":1093,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219647,"byte_end":219715,"line_start":1094,"line_end":1094,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219716,"byte_end":219751,"line_start":1095,"line_end":1095,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219752,"byte_end":219755,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219756,"byte_end":219792,"line_start":1097,"line_end":1097,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219793,"byte_end":219840,"line_start":1098,"line_end":1098,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1163},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220207,"byte_end":220219,"line_start":1110,"line_end":1110,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219903,"byte_end":219976,"line_start":1103,"line_end":1103,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219977,"byte_end":219980,"line_start":1104,"line_end":1104,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":219981,"byte_end":220056,"line_start":1105,"line_end":1105,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220057,"byte_end":220092,"line_start":1106,"line_end":1106,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220093,"byte_end":220096,"line_start":1107,"line_end":1107,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220097,"byte_end":220133,"line_start":1108,"line_end":1108,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220134,"byte_end":220195,"line_start":1109,"line_end":1109,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1169},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220639,"byte_end":220649,"line_start":1124,"line_end":1124,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1173},{"krate":0,"index":1174}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220343,"byte_end":220414,"line_start":1117,"line_end":1117,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220415,"byte_end":220418,"line_start":1118,"line_end":1118,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220419,"byte_end":220492,"line_start":1119,"line_end":1119,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220493,"byte_end":220528,"line_start":1120,"line_end":1120,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220529,"byte_end":220532,"line_start":1121,"line_end":1121,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220533,"byte_end":220569,"line_start":1122,"line_end":1122,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220570,"byte_end":220627,"line_start":1123,"line_end":1123,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1175},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221109,"byte_end":221128,"line_start":1138,"line_end":1138,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1179}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220773,"byte_end":220854,"line_start":1131,"line_end":1131,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220855,"byte_end":220858,"line_start":1132,"line_end":1132,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220859,"byte_end":220929,"line_start":1133,"line_end":1133,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220930,"byte_end":220978,"line_start":1134,"line_end":1134,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220979,"byte_end":220982,"line_start":1135,"line_end":1135,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":220983,"byte_end":221019,"line_start":1136,"line_end":1136,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221020,"byte_end":221097,"line_start":1137,"line_end":1137,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1180},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221481,"byte_end":221486,"line_start":1149,"line_end":1149,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1184}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221205,"byte_end":221271,"line_start":1142,"line_end":1142,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221272,"byte_end":221275,"line_start":1143,"line_end":1143,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221276,"byte_end":221344,"line_start":1144,"line_end":1144,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221345,"byte_end":221380,"line_start":1145,"line_end":1145,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221381,"byte_end":221384,"line_start":1146,"line_end":1146,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221385,"byte_end":221421,"line_start":1147,"line_end":1147,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221422,"byte_end":221469,"line_start":1148,"line_end":1148,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1340},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":1803,"byte_end":1811,"line_start":71,"line_end":71,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"! A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":1818,"byte_end":1884,"line_start":72,"line_end":72,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1343},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":2358,"byte_end":2366,"line_start":88,"line_end":88,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1344}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"! A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":2373,"byte_end":2439,"line_start":89,"line_end":89,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1413},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":3134,"byte_end":3150,"line_start":111,"line_end":111,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::CollectionAllocErr::CapacityOverflow","value":"CollectionAllocErr::CapacityOverflow","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":3018,"byte_end":3091,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":3096,"byte_end":3129,"line_start":110,"line_end":110,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":1415},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":3192,"byte_end":3200,"line_start":113,"line_end":113,"column_start":5,"column_end":13},"name":"AllocErr","qualname":"::CollectionAllocErr::AllocErr","value":"CollectionAllocErr::AllocErr { layout }","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Error due to the allocator.\n","sig":null,"attributes":[{"value":"/ Error due to the allocator.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":3156,"byte_end":3187,"line_start":112,"line_end":112,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1412},"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":2993,"byte_end":3011,"line_start":108,"line_end":108,"column_start":10,"column_end":28},"name":"CollectionAllocErr","qualname":"::CollectionAllocErr","value":"CollectionAllocErr::{CapacityOverflow, AllocErr}","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1415}],"decl_id":null,"docs":" Augments `AllocErr` with a `CapacityOverflow` variant.\n","sig":null,"attributes":[{"value":"/ Augments `AllocErr` with a `CapacityOverflow` variant.","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/lib.rs","byte_start":2886,"byte_end":2944,"line_start":106,"line_end":106,"column_start":1,"column_end":59}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531131,"byte_end":5531136,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56694,"byte_end":56701,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":58814,"byte_end":58821,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":59109,"byte_end":59120,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":7174,"byte_end":7185,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":9930,"byte_end":9938,"line_start":155,"line_end":155,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":14147,"byte_end":14153,"line_start":268,"line_end":268,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":14179,"byte_end":14185,"line_start":270,"line_end":270,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":14318,"byte_end":14324,"line_start":277,"line_end":277,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16657,"byte_end":16665,"line_start":353,"line_end":353,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":42173,"byte_end":42181,"line_start":978,"line_end":978,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":42226,"byte_end":42234,"line_start":979,"line_end":979,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":42281,"byte_end":42289,"line_start":981,"line_end":981,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":44352,"byte_end":44360,"line_start":1034,"line_end":1034,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":45198,"byte_end":45206,"line_start":1066,"line_end":1066,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":46175,"byte_end":46187,"line_start":1102,"line_end":1102,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":48940,"byte_end":48952,"line_start":1168,"line_end":1168,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":48983,"byte_end":48995,"line_start":1169,"line_end":1169,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":49021,"byte_end":49033,"line_start":1171,"line_end":1171,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":49323,"byte_end":49335,"line_start":1183,"line_end":1183,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":50796,"byte_end":50808,"line_start":1221,"line_end":1221,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":50993,"byte_end":51000,"line_start":1229,"line_end":1229,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":51208,"byte_end":51215,"line_start":1239,"line_end":1239,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":51900,"byte_end":51907,"line_start":1262,"line_end":1262,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":51940,"byte_end":51947,"line_start":1263,"line_end":1263,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52144,"byte_end":52155,"line_start":1272,"line_end":1272,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52308,"byte_end":52319,"line_start":1279,"line_end":1279,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52364,"byte_end":52375,"line_start":1280,"line_end":1280,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52463,"byte_end":52474,"line_start":1283,"line_end":1283,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53491,"byte_end":53502,"line_start":1321,"line_end":1321,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53842,"byte_end":53853,"line_start":1335,"line_end":1335,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53886,"byte_end":53897,"line_start":1336,"line_end":1336,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54437,"byte_end":54445,"line_start":1353,"line_end":1353,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54602,"byte_end":54610,"line_start":1360,"line_end":1360,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54659,"byte_end":54667,"line_start":1361,"line_end":1361,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54710,"byte_end":54718,"line_start":1363,"line_end":1363,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":55422,"byte_end":55430,"line_start":1386,"line_end":1386,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":55823,"byte_end":55831,"line_start":1403,"line_end":1403,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":55868,"byte_end":55876,"line_start":1404,"line_end":1404,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67718,"byte_end":67725,"line_start":241,"line_end":241,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76459,"byte_end":76466,"line_start":558,"line_end":558,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89388,"byte_end":89395,"line_start":961,"line_end":961,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92354,"byte_end":92361,"line_start":1022,"line_end":1022,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92682,"byte_end":92689,"line_start":1038,"line_end":1038,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92783,"byte_end":92790,"line_start":1046,"line_end":1046,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93006,"byte_end":93013,"line_start":1057,"line_end":1057,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93317,"byte_end":93324,"line_start":1068,"line_end":1068,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94170,"byte_end":94174,"line_start":1100,"line_end":1100,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94412,"byte_end":94416,"line_start":1110,"line_end":1110,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95194,"byte_end":95201,"line_start":1132,"line_end":1132,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95227,"byte_end":95234,"line_start":1134,"line_end":1134,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95909,"byte_end":95917,"line_start":1156,"line_end":1156,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96572,"byte_end":96576,"line_start":1179,"line_end":1179,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96774,"byte_end":96778,"line_start":1188,"line_end":1188,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97302,"byte_end":97308,"line_start":1206,"line_end":1206,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97508,"byte_end":97514,"line_start":1215,"line_end":1215,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97984,"byte_end":97989,"line_start":1232,"line_end":1232,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99860,"byte_end":99879,"line_start":1290,"line_end":1290,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99953,"byte_end":99972,"line_start":1296,"line_end":1296,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100579,"byte_end":100597,"line_start":1321,"line_end":1321,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101424,"byte_end":101442,"line_start":1350,"line_end":1350,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":102424,"byte_end":102439,"line_start":1382,"line_end":1382,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":103958,"byte_end":103969,"line_start":1435,"line_end":1435,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107883,"byte_end":107902,"line_start":1563,"line_end":1563,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111087,"byte_end":111104,"line_start":1658,"line_end":1658,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113147,"byte_end":113165,"line_start":1725,"line_end":1725,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113342,"byte_end":113353,"line_start":1731,"line_end":1731,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113684,"byte_end":113703,"line_start":1740,"line_end":1740,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113958,"byte_end":113975,"line_start":1749,"line_end":1749,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114140,"byte_end":114155,"line_start":1755,"line_end":1755,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114744,"byte_end":114749,"line_start":1775,"line_end":1775,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115306,"byte_end":115319,"line_start":1794,"line_end":1794,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115412,"byte_end":115425,"line_start":1801,"line_end":1801,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115527,"byte_end":115540,"line_start":1809,"line_end":1809,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":116024,"byte_end":116035,"line_start":1828,"line_end":1828,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":116732,"byte_end":116739,"line_start":1854,"line_end":1854,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":117518,"byte_end":117522,"line_start":1883,"line_end":1883,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":117958,"byte_end":117962,"line_start":1898,"line_end":1898,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118116,"byte_end":118120,"line_start":1905,"line_end":1905,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118163,"byte_end":118170,"line_start":1907,"line_end":1907,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118618,"byte_end":118625,"line_start":1922,"line_end":1922,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118778,"byte_end":118785,"line_start":1928,"line_end":1928,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118826,"byte_end":118833,"line_start":1930,"line_end":1930,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119039,"byte_end":119047,"line_start":1940,"line_end":1940,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119378,"byte_end":119386,"line_start":1952,"line_end":1952,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119535,"byte_end":119543,"line_start":1958,"line_end":1958,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119594,"byte_end":119602,"line_start":1960,"line_end":1960,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119764,"byte_end":119768,"line_start":1966,"line_end":1966,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120119,"byte_end":120123,"line_start":1978,"line_end":1978,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120276,"byte_end":120280,"line_start":1984,"line_end":1984,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120323,"byte_end":120329,"line_start":1986,"line_end":1986,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120680,"byte_end":120686,"line_start":1998,"line_end":1998,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120839,"byte_end":120845,"line_start":2004,"line_end":2004,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120888,"byte_end":120897,"line_start":2006,"line_end":2006,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121256,"byte_end":121265,"line_start":2018,"line_end":2018,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121418,"byte_end":121427,"line_start":2024,"line_end":2024,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121468,"byte_end":121477,"line_start":2026,"line_end":2026,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121693,"byte_end":121698,"line_start":2036,"line_end":2036,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122033,"byte_end":122038,"line_start":2048,"line_end":2048,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122191,"byte_end":122196,"line_start":2054,"line_end":2054,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122237,"byte_end":122242,"line_start":2056,"line_end":2056,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122442,"byte_end":122447,"line_start":2066,"line_end":2066,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126273,"byte_end":126278,"line_start":2202,"line_end":2202,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127069,"byte_end":127082,"line_start":2231,"line_end":2231,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134052,"byte_end":134063,"line_start":2461,"line_end":2461,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":136313,"byte_end":136320,"line_start":2544,"line_end":2544,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":136757,"byte_end":136764,"line_start":2560,"line_end":2560,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":137551,"byte_end":137558,"line_start":2584,"line_end":2584,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168298,"byte_end":168305,"line_start":8,"line_end":8,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170200,"byte_end":170210,"line_start":70,"line_end":70,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170764,"byte_end":170782,"line_start":89,"line_end":89,"column_start":28,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170856,"byte_end":170874,"line_start":95,"line_end":95,"column_start":28,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170957,"byte_end":170975,"line_start":102,"line_end":102,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171470,"byte_end":171486,"line_start":121,"line_end":121,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171650,"byte_end":171660,"line_start":127,"line_end":127,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175286,"byte_end":175296,"line_start":256,"line_end":256,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176049,"byte_end":176067,"line_start":284,"line_end":284,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183226,"byte_end":183242,"line_start":514,"line_end":514,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185679,"byte_end":185686,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185904,"byte_end":185912,"line_start":607,"line_end":607,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":186126,"byte_end":186131,"line_start":615,"line_end":615,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":186694,"byte_end":186704,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":186892,"byte_end":186902,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":187081,"byte_end":187091,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192399,"byte_end":192406,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195127,"byte_end":195134,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1093},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213940,"byte_end":213947,"line_start":862,"line_end":862,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214195,"byte_end":214202,"line_start":876,"line_end":876,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214284,"byte_end":214291,"line_start":883,"line_end":883,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214512,"byte_end":214519,"line_start":893,"line_end":893,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214827,"byte_end":214834,"line_start":906,"line_end":906,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1119}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":215101,"byte_end":215108,"line_start":917,"line_end":917,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":215369,"byte_end":215376,"line_start":928,"line_end":928,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221809,"byte_end":221816,"line_start":1163,"line_end":1163,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":222691,"byte_end":222695,"line_start":1195,"line_end":1195,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":222879,"byte_end":222883,"line_start":1203,"line_end":1203,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223212,"byte_end":223216,"line_start":1215,"line_end":1215,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223362,"byte_end":223366,"line_start":1221,"line_end":1221,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223413,"byte_end":223417,"line_start":1223,"line_end":1223,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223574,"byte_end":223582,"line_start":1229,"line_end":1229,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223911,"byte_end":223919,"line_start":1241,"line_end":1241,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224061,"byte_end":224069,"line_start":1247,"line_end":1247,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224112,"byte_end":224120,"line_start":1249,"line_end":1249,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224334,"byte_end":224339,"line_start":1256,"line_end":1256,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224672,"byte_end":224677,"line_start":1268,"line_end":1268,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224823,"byte_end":224828,"line_start":1274,"line_end":1274,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224875,"byte_end":224880,"line_start":1276,"line_end":1276,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":225098,"byte_end":225110,"line_start":1283,"line_end":1283,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":225329,"byte_end":225341,"line_start":1293,"line_end":1293,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":225879,"byte_end":225891,"line_start":1317,"line_end":1317,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226116,"byte_end":226128,"line_start":1327,"line_end":1327,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226209,"byte_end":226219,"line_start":1334,"line_end":1334,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1267}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226436,"byte_end":226446,"line_start":1344,"line_end":1344,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226988,"byte_end":226998,"line_start":1368,"line_end":1368,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227084,"byte_end":227094,"line_start":1375,"line_end":1375,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227311,"byte_end":227330,"line_start":1385,"line_end":1385,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227536,"byte_end":227555,"line_start":1394,"line_end":1394,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227927,"byte_end":227946,"line_start":1411,"line_end":1411,"column_start":30,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228032,"byte_end":228051,"line_start":1418,"line_end":1418,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228268,"byte_end":228273,"line_start":1428,"line_end":1428,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228466,"byte_end":228471,"line_start":1437,"line_end":1437,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228557,"byte_end":228562,"line_start":1444,"line_end":1444,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1310}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228786,"byte_end":228791,"line_start":1454,"line_end":1454,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/sse2.rs","byte_start":5531131,"byte_end":5531136,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":56694,"byte_end":56701,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":58814,"byte_end":58821,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1379},"to":{"krate":2,"index":4624}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/bitmask.rs","byte_start":59109,"byte_end":59120,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":39},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":7174,"byte_end":7185,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1385},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":9930,"byte_end":9938,"line_start":155,"line_end":155,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":64},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":14147,"byte_end":14153,"line_start":268,"line_end":268,"column_start":25,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":14179,"byte_end":14185,"line_start":270,"line_end":270,"column_start":19,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":14318,"byte_end":14324,"line_start":277,"line_end":277,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":75},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":16657,"byte_end":16665,"line_start":353,"line_end":353,"column_start":9,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":42173,"byte_end":42181,"line_start":978,"line_end":978,"column_start":25,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":96},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":42226,"byte_end":42234,"line_start":979,"line_end":979,"column_start":25,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":96},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":42281,"byte_end":42289,"line_start":981,"line_end":981,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":96},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":44352,"byte_end":44360,"line_start":1034,"line_end":1034,"column_start":39,"column_end":47},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":96},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":45198,"byte_end":45206,"line_start":1066,"line_end":1066,"column_start":26,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":96},"to":{"krate":2,"index":4624}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":46175,"byte_end":46187,"line_start":1102,"line_end":1102,"column_start":9,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":48940,"byte_end":48952,"line_start":1168,"line_end":1168,"column_start":25,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":48983,"byte_end":48995,"line_start":1169,"line_end":1169,"column_start":25,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":49021,"byte_end":49033,"line_start":1171,"line_end":1171,"column_start":19,"column_end":31},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":49323,"byte_end":49335,"line_start":1183,"line_end":1183,"column_start":22,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":50796,"byte_end":50808,"line_start":1221,"line_end":1221,"column_start":27,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":50993,"byte_end":51000,"line_start":1229,"line_end":1229,"column_start":19,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":51208,"byte_end":51215,"line_start":1239,"line_end":1239,"column_start":22,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":51900,"byte_end":51907,"line_start":1262,"line_end":1262,"column_start":31,"column_end":38},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":51940,"byte_end":51947,"line_start":1263,"line_end":1263,"column_start":27,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":198},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52144,"byte_end":52155,"line_start":1272,"line_end":1272,"column_start":9,"column_end":20},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52308,"byte_end":52319,"line_start":1279,"line_end":1279,"column_start":25,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52364,"byte_end":52375,"line_start":1280,"line_end":1280,"column_start":25,"column_end":36},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":52463,"byte_end":52474,"line_start":1283,"line_end":1283,"column_start":39,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53491,"byte_end":53502,"line_start":1321,"line_end":1321,"column_start":22,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53842,"byte_end":53853,"line_start":1335,"line_end":1335,"column_start":31,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":53886,"byte_end":53897,"line_start":1336,"line_end":1336,"column_start":27,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":214},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54437,"byte_end":54445,"line_start":1353,"line_end":1353,"column_start":9,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54602,"byte_end":54610,"line_start":1360,"line_end":1360,"column_start":25,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54659,"byte_end":54667,"line_start":1361,"line_end":1361,"column_start":25,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":54710,"byte_end":54718,"line_start":1363,"line_end":1363,"column_start":18,"column_end":26},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":55422,"byte_end":55430,"line_start":1386,"line_end":1386,"column_start":22,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":55823,"byte_end":55831,"line_start":1403,"line_end":1403,"column_start":31,"column_end":39},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/raw/mod.rs","byte_start":55868,"byte_end":55876,"line_start":1404,"line_end":1404,"column_start":27,"column_end":35},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":67718,"byte_end":67725,"line_start":241,"line_end":241,"column_start":15,"column_end":22},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":76459,"byte_end":76466,"line_start":558,"line_end":558,"column_start":15,"column_end":22},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":89388,"byte_end":89395,"line_start":961,"line_end":961,"column_start":15,"column_end":22},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92354,"byte_end":92361,"line_start":1022,"line_end":1022,"column_start":29,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":1588}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92682,"byte_end":92689,"line_start":1038,"line_end":1038,"column_start":22,"column_end":29},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":92783,"byte_end":92790,"line_start":1046,"line_end":1046,"column_start":25,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93006,"byte_end":93013,"line_start":1057,"line_end":1057,"column_start":27,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":93317,"byte_end":93324,"line_start":1068,"line_end":1068,"column_start":40,"column_end":47},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":2099}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94170,"byte_end":94174,"line_start":1100,"line_end":1100,"column_start":22,"column_end":26},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":94412,"byte_end":94416,"line_start":1110,"line_end":1110,"column_start":41,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95194,"byte_end":95201,"line_start":1132,"line_end":1132,"column_start":40,"column_end":47},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95227,"byte_end":95234,"line_start":1134,"line_end":1134,"column_start":12,"column_end":19},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":95909,"byte_end":95917,"line_start":1156,"line_end":1156,"column_start":12,"column_end":20},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96572,"byte_end":96576,"line_start":1179,"line_end":1179,"column_start":22,"column_end":26},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":96774,"byte_end":96778,"line_start":1188,"line_end":1188,"column_start":34,"column_end":38},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97302,"byte_end":97308,"line_start":1206,"line_end":1206,"column_start":22,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97508,"byte_end":97514,"line_start":1215,"line_end":1215,"column_start":34,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":97984,"byte_end":97989,"line_start":1232,"line_end":1232,"column_start":12,"column_end":17},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99860,"byte_end":99879,"line_start":1290,"line_end":1290,"column_start":28,"column_end":47},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":472},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":99953,"byte_end":99972,"line_start":1296,"line_end":1296,"column_start":28,"column_end":47},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":472},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":100579,"byte_end":100597,"line_start":1321,"line_end":1321,"column_start":19,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":101424,"byte_end":101442,"line_start":1350,"line_end":1350,"column_start":19,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":102424,"byte_end":102439,"line_start":1382,"line_end":1382,"column_start":19,"column_end":34},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":103958,"byte_end":103969,"line_start":1435,"line_end":1435,"column_start":19,"column_end":30},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":107883,"byte_end":107902,"line_start":1563,"line_end":1563,"column_start":16,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":111087,"byte_end":111104,"line_start":1658,"line_end":1658,"column_start":19,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113147,"byte_end":113165,"line_start":1725,"line_end":1725,"column_start":25,"column_end":43},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":455},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113342,"byte_end":113353,"line_start":1731,"line_end":1731,"column_start":39,"column_end":50},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":461},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113684,"byte_end":113703,"line_start":1740,"line_end":1740,"column_start":36,"column_end":55},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":472},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":113958,"byte_end":113975,"line_start":1749,"line_end":1749,"column_start":25,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":484},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114140,"byte_end":114155,"line_start":1755,"line_end":1755,"column_start":25,"column_end":40},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":491},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":114744,"byte_end":114749,"line_start":1775,"line_end":1775,"column_start":39,"column_end":44},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":600},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115306,"byte_end":115319,"line_start":1794,"line_end":1794,"column_start":31,"column_end":44},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":616},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115412,"byte_end":115425,"line_start":1801,"line_end":1801,"column_start":31,"column_end":44},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":616},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":115527,"byte_end":115540,"line_start":1809,"line_end":1809,"column_start":39,"column_end":52},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":616},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":116024,"byte_end":116035,"line_start":1828,"line_end":1828,"column_start":32,"column_end":43},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":637},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":116732,"byte_end":116739,"line_start":1854,"line_end":1854,"column_start":32,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":4624}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":117518,"byte_end":117522,"line_start":1883,"line_end":1883,"column_start":29,"column_end":33},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":117958,"byte_end":117962,"line_start":1898,"line_end":1898,"column_start":34,"column_end":38},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118116,"byte_end":118120,"line_start":1905,"line_end":1905,"column_start":30,"column_end":34},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118163,"byte_end":118170,"line_start":1907,"line_end":1907,"column_start":29,"column_end":36},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118618,"byte_end":118625,"line_start":1922,"line_end":1922,"column_start":34,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118778,"byte_end":118785,"line_start":1928,"line_end":1928,"column_start":30,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":118826,"byte_end":118833,"line_start":1930,"line_end":1930,"column_start":27,"column_end":34},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":394},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119039,"byte_end":119047,"line_start":1940,"line_end":1940,"column_start":25,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119378,"byte_end":119386,"line_start":1952,"line_end":1952,"column_start":34,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119535,"byte_end":119543,"line_start":1958,"line_end":1958,"column_start":30,"column_end":38},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119594,"byte_end":119602,"line_start":1960,"line_end":1960,"column_start":41,"column_end":49},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":407},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":119764,"byte_end":119768,"line_start":1966,"line_end":1966,"column_start":29,"column_end":33},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120119,"byte_end":120123,"line_start":1978,"line_end":1978,"column_start":34,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120276,"byte_end":120280,"line_start":1984,"line_end":1984,"column_start":30,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120323,"byte_end":120329,"line_start":1986,"line_end":1986,"column_start":29,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120680,"byte_end":120686,"line_start":1998,"line_end":1998,"column_start":34,"column_end":40},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120839,"byte_end":120845,"line_start":2004,"line_end":2004,"column_start":30,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":120888,"byte_end":120897,"line_start":2006,"line_end":2006,"column_start":29,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121256,"byte_end":121265,"line_start":2018,"line_end":2018,"column_start":34,"column_end":43},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121418,"byte_end":121427,"line_start":2024,"line_end":2024,"column_start":30,"column_end":39},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121468,"byte_end":121477,"line_start":2026,"line_end":2026,"column_start":27,"column_end":36},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":450},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":121693,"byte_end":121698,"line_start":2036,"line_end":2036,"column_start":29,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":441},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122033,"byte_end":122038,"line_start":2048,"line_end":2048,"column_start":34,"column_end":39},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":441},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122191,"byte_end":122196,"line_start":2054,"line_end":2054,"column_start":30,"column_end":35},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":441},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122237,"byte_end":122242,"line_start":2056,"line_end":2056,"column_start":27,"column_end":32},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":441},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":122442,"byte_end":122447,"line_start":2066,"line_end":2066,"column_start":19,"column_end":24},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":126273,"byte_end":126278,"line_start":2202,"line_end":2202,"column_start":28,"column_end":33},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":127069,"byte_end":127082,"line_start":2231,"line_end":2231,"column_start":19,"column_end":32},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":134052,"byte_end":134063,"line_start":2461,"line_end":2461,"column_start":19,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":136313,"byte_end":136320,"line_start":2544,"line_end":2544,"column_start":40,"column_end":47},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":136757,"byte_end":136764,"line_start":2560,"line_end":2560,"column_start":34,"column_end":41},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":4633}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/map.rs","byte_start":137551,"byte_end":137558,"line_start":2584,"line_end":2584,"column_start":46,"column_end":53},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1393},"to":{"krate":2,"index":4633}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":168298,"byte_end":168305,"line_start":8,"line_end":8,"column_start":15,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170200,"byte_end":170210,"line_start":70,"line_end":70,"column_start":36,"column_end":46},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":910},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170764,"byte_end":170782,"line_start":89,"line_end":89,"column_start":28,"column_end":46},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":924},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170856,"byte_end":170874,"line_start":95,"line_end":95,"column_start":28,"column_end":46},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":924},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":170957,"byte_end":170975,"line_start":102,"line_end":102,"column_start":36,"column_end":54},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":924},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171470,"byte_end":171486,"line_start":121,"line_end":121,"column_start":29,"column_end":45},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":941},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":171650,"byte_end":171660,"line_start":127,"line_end":127,"column_start":16,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":175286,"byte_end":175296,"line_start":256,"line_end":256,"column_start":25,"column_end":35},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":176049,"byte_end":176067,"line_start":284,"line_end":284,"column_start":16,"column_end":34},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":183226,"byte_end":183242,"line_start":514,"line_end":514,"column_start":16,"column_end":32},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185679,"byte_end":185686,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":185904,"byte_end":185912,"line_start":607,"line_end":607,"column_start":12,"column_end":20},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":407},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/rustc_entry.rs","byte_start":186126,"byte_end":186131,"line_start":615,"line_end":615,"column_start":12,"column_end":17},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":186694,"byte_end":186704,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1005},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":186892,"byte_end":186902,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1005},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/scopeguard.rs","byte_start":187081,"byte_end":187091,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1005},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":192399,"byte_end":192406,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":195127,"byte_end":195134,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":213940,"byte_end":213947,"line_start":862,"line_end":862,"column_start":26,"column_end":33},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":1588}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214195,"byte_end":214202,"line_start":876,"line_end":876,"column_start":19,"column_end":26},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214284,"byte_end":214291,"line_start":883,"line_end":883,"column_start":27,"column_end":34},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214512,"byte_end":214519,"line_start":893,"line_end":893,"column_start":32,"column_end":39},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":4620}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":214827,"byte_end":214834,"line_start":906,"line_end":906,"column_start":26,"column_end":33},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":4633}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":215101,"byte_end":215108,"line_start":917,"line_end":917,"column_start":34,"column_end":41},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":4633}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":215369,"byte_end":215376,"line_start":928,"line_end":928,"column_start":24,"column_end":31},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":221809,"byte_end":221816,"line_start":1163,"line_end":1163,"column_start":29,"column_end":36},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1404},"to":{"krate":2,"index":4624}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":222691,"byte_end":222695,"line_start":1195,"line_end":1195,"column_start":19,"column_end":23},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1152},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":222879,"byte_end":222883,"line_start":1203,"line_end":1203,"column_start":26,"column_end":30},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1152},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223212,"byte_end":223216,"line_start":1215,"line_end":1215,"column_start":35,"column_end":39},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1152},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223362,"byte_end":223366,"line_start":1221,"line_end":1221,"column_start":27,"column_end":31},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1152},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223413,"byte_end":223417,"line_start":1223,"line_end":1223,"column_start":36,"column_end":40},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1152},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223574,"byte_end":223582,"line_start":1229,"line_end":1229,"column_start":22,"column_end":30},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":223911,"byte_end":223919,"line_start":1241,"line_end":1241,"column_start":31,"column_end":39},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224061,"byte_end":224069,"line_start":1247,"line_end":1247,"column_start":27,"column_end":35},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224112,"byte_end":224120,"line_start":1249,"line_end":1249,"column_start":36,"column_end":44},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1156},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224334,"byte_end":224339,"line_start":1256,"line_end":1256,"column_start":22,"column_end":27},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224672,"byte_end":224677,"line_start":1268,"line_end":1268,"column_start":31,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":4672}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224823,"byte_end":224828,"line_start":1274,"line_end":1274,"column_start":27,"column_end":32},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":224875,"byte_end":224880,"line_start":1276,"line_end":1276,"column_start":36,"column_end":41},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":225098,"byte_end":225110,"line_start":1283,"line_end":1283,"column_start":22,"column_end":34},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1163},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":225329,"byte_end":225341,"line_start":1293,"line_end":1293,"column_start":29,"column_end":41},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1163},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":225879,"byte_end":225891,"line_start":1317,"line_end":1317,"column_start":27,"column_end":39},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1163},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226116,"byte_end":226128,"line_start":1327,"line_end":1327,"column_start":30,"column_end":42},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1163},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226209,"byte_end":226219,"line_start":1334,"line_end":1334,"column_start":22,"column_end":32},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226436,"byte_end":226446,"line_start":1344,"line_end":1344,"column_start":29,"column_end":39},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":226988,"byte_end":226998,"line_start":1368,"line_end":1368,"column_start":30,"column_end":40},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227084,"byte_end":227094,"line_start":1375,"line_end":1375,"column_start":27,"column_end":37},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1169},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227311,"byte_end":227330,"line_start":1385,"line_end":1385,"column_start":22,"column_end":41},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227536,"byte_end":227555,"line_start":1394,"line_end":1394,"column_start":29,"column_end":48},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":227927,"byte_end":227946,"line_start":1411,"line_end":1411,"column_start":30,"column_end":49},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228032,"byte_end":228051,"line_start":1418,"line_end":1418,"column_start":27,"column_end":46},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1175},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228268,"byte_end":228273,"line_start":1428,"line_end":1428,"column_start":22,"column_end":27},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228466,"byte_end":228471,"line_start":1437,"line_end":1437,"column_start":30,"column_end":35},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":4976}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228557,"byte_end":228562,"line_start":1444,"line_end":1444,"column_start":27,"column_end":32},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/parallels/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.6.2/src/set.rs","byte_start":228786,"byte_end":228791,"line_start":1454,"line_end":1454,"column_start":29,"column_end":34},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":4716}}]}